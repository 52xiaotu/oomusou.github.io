<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2017-08-27T12:55:47.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何使用 Protractor 寫 Checkbox 的驗收測試 ?]]></title>
    <link href="http://oomusou.io/protractor/protrator-checkbox/"/>
    <id>http://oomusou.io/protractor/protrator-checkbox/</id>
    <published>2017-08-23T12:23:43.000Z</published>
    <updated>2017-08-27T12:55:47.000Z</updated>
    <content type="html"><![CDATA[<p>HTML 的 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> 是常見的控制項，該如何使用 Protractor 對 checkbox 寫驗收測試 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Protractor 5.1.2</p>
<h2 id="Requirement">Requirement</h2><hr>
<p><img src="/images/protractor/protractor-checkbox/checkbox000.png" alt="checkbox000"></p>
<p>畫面上共有 <code>3</code> 個 checkbox，各為 <code>AWS</code>、<code>Azure</code> 與 <code>GCP</code>。</p>
<p>下方會顯示目前所選擇的 checkbox 數量。</p>
<p>下方一開始數量為 <code>0</code>。</p>
<p><img src="/images/protractor/protractor-checkbox/checkbox001.png" alt="checkbox001"></p>
<p>當選擇 <code>AWS</code> 時，下方顯示為 <code>1</code>。</p>
<p><img src="/images/protractor/protractor-checkbox/checkbox002.png" alt="checkbox002"></p>
<p>當選擇 <code>AWS</code> 與 <code>Azure</code> 時，下方顯示為 <code>2</code>。</p>
<p><img src="/images/protractor/protractor-checkbox/checkbox003.png" alt="checkbox003"></p>
<p>當選擇 <code>AWS</code>、<code>Azure</code> 與 <code>GCP</code> 時，下方顯示為 <code>3</code>。</p>
<h2 id="Acceptance_Test_(紅燈)">Acceptance Test (紅燈)</h2><hr>
<p>測試案例 :</p>
<blockquote>
<ol>
<li>應該有 <code>3</code> 個 <code>&lt;label&gt;</code></li>
<li>應該有 <code>3</code> 個 <code>&lt;input type=&quot;checkbox&quot;&gt;</code></li>
<li>一開始下方應該出現 <code>0</code></li>
<li>當選擇 <code>AWS</code>，下方應該出現 <code>1</code></li>
<li>當選擇 <code>AWS</code> 與 <code>Azure</code> ，下方應該出現 <code>2</code></li>
<li>當選擇 <code>AWS</code>、<code>Azure</code> 與 <code>GCP</code> ，下方應該出現 <code>3</code></li>
</ol>
</blockquote>
<p><strong>e2e/app.e2e-spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppPage &#125; from <span class="string">'./app.po'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'protractor512-checkbox App'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> page: AppPage;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    page = <span class="keyword">new</span> AppPage();</span><br><span class="line">    page.navigateTo();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="string">'3'</span> labels`, () =&gt; &#123;</span><br><span class="line">    expect(page.getLabelCount()).toBe(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="string">'3'</span> checkboxes`, () =&gt; &#123;</span><br><span class="line">    expect(page.getCheckboxCount()).toBe(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="string">'0'</span> checkbox selected by <span class="keyword">default</span>`, () =&gt; &#123;</span><br><span class="line">    expect(page.getSelectedCloudCount()).toBe(<span class="string">'0'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should show <span class="string">'1'</span> when <span class="string">'AWS'</span> selected`, () =&gt; &#123;</span><br><span class="line">    page.selectCloudByIndex(<span class="number">0</span>);</span><br><span class="line">    expect(page.getSelectedCloudCount()).toBe(<span class="string">'1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="string">'2'</span> when <span class="string">'AWS'</span> and <span class="string">'Azure'</span> selected`, () =&gt; &#123;</span><br><span class="line">    page</span><br><span class="line">      .selectCloudByText(<span class="string">'AWS'</span>)</span><br><span class="line">      .selectCloudByText(<span class="string">'Azure'</span>);</span><br><span class="line">    expect(page.getSelectedCloudCount()).toBe(<span class="string">'2'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should <span class="string">'3'</span> when all checkbox selected`, () =&gt; &#123;</span><br><span class="line">    page</span><br><span class="line">      .selectCloudByText(<span class="string">'AWS'</span>)</span><br><span class="line">      .selectCloudByText(<span class="string">'Azure'</span>)</span><br><span class="line">      .selectCloudByText(<span class="string">'GCP'</span>);</span><br><span class="line">    expect(page.getSelectedCloudCount()).toBe(<span class="string">'3'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'3'</span> labels`, () =&gt; &#123;</span><br><span class="line">  expect(page.getLabelCount()).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 應該有 <code>3</code> 個 <code>&lt;label&gt;</code></p>
</blockquote>
<p><code>page.getLabelCount()</code> 將由 page object 傳回 <code>&lt;label&gt;</code> 的個數。</p>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'3'</span> checkboxes`, () =&gt; &#123;</span><br><span class="line">  expect(page.getCheckboxCount()).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 應該有 <code>3</code> 個 <code>&lt;input type=&quot;checkbox&quot;&gt;</code></p>
</blockquote>
<p><code>page.getCheckboxCount()</code> 將由 page object 傳回 checkbox 的個數。</p>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'0'</span> checkbox selected by <span class="keyword">default</span>`, () =&gt; &#123;</span><br><span class="line">  expect(page.getSelectedCloudCount()).toBe(<span class="string">'0'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 一開始下方應該出現 <code>0</code></p>
</blockquote>
<p><code>page.getSelectedCloudCount()</code> 將由 page object 傳回下方所顯示的選擇個數。</p>
<p>23 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(`should show <span class="string">'1'</span> when <span class="string">'AWS'</span> selected`, () =&gt; &#123;</span><br><span class="line">  page.selectCloudByIndex(<span class="number">0</span>);</span><br><span class="line">  expect(page.getSelectedCloudCount()).toBe(<span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 當選擇 <code>AWS</code>，下方應該出現 <code>1</code></p>
</blockquote>
<p>要模擬 user 選擇 checkbox，有兩種方式，一種是使用 index 選擇，一種是使用文字選擇。</p>
<p><code>page.selectCloudByIndex()</code> 將由 index 方式選擇 checkbox。</p>
<p>28 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'2'</span> when <span class="string">'AWS'</span> and <span class="string">'Azure'</span> selected`, () =&gt; &#123;</span><br><span class="line">  page</span><br><span class="line">    .selectCloudByText(<span class="string">'AWS'</span>)</span><br><span class="line">    .selectCloudByText(<span class="string">'Azure'</span>);</span><br><span class="line">  expect(page.getSelectedCloudCount()).toBe(<span class="string">'2'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 當選擇 <code>AWS</code> 與 <code>Azure</code> ，下方應該出現 <code>2</code></p>
</blockquote>
<p><code>page.selectCloudByText()</code> 將使用文字方式選擇 checkbox。</p>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getLabelCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element.all(by.tagName(<span class="string">'label'</span>)).count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getCheckboxCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element.all(by.css(<span class="string">'input[type="checkbox"]'</span>)).count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  selectCloudByIndex(index: <span class="built_in">number</span>): AppPage &#123;</span><br><span class="line">    element.all(by.css(<span class="string">'label[name="cloud"]'</span>))</span><br><span class="line">      .get(index)</span><br><span class="line">      .click();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  selectCloudByText(text: <span class="built_in">string</span>): AppPage &#123;</span><br><span class="line">    element(by.cssContainingText(<span class="string">'label'</span>, text)).click();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelectedCloudCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.css(<span class="string">'p'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>*.e2e-spec.ts</code> 負責描述測試案例，不包含 HTML 與 CSS 部分。</p>
<p> <code>*.po.ts</code> 則負責描述 HTML 與 CSS 部分。</p>
<p>Page object 主要目的在於讓測試與 HTML/CSS 解耦合，不要 designer 若變動了 HTML 或 CSS，則所有驗收測試都要修改，只要修改 page object 即可。</p>
<blockquote>
<p>驗收測試應該只根據需求變動而修改，不應該因為 HTML/CSS 變動而修改。</p>
</blockquote>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getLabelCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element.all(by.tagName(<span class="string">'label'</span>)).count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳所有 <code>&lt;label&gt;</code> 的個數。</p>
<blockquote>
<p><code>count()</code> 的型別不是 <code>number</code>，而是 <code>wdpromise.Promise&lt;number&gt;</code>，因為型別比較複雜，所以迴船型別使用 <code>any</code> 代替。</p>
</blockquote>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getCheckboxCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element.all(by.css(<span class="string">'input[type="checkbox"]'</span>)).count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 CSS selector 方式找到所有 checkbox。<code>all()</code> 回傳為陣列，加上 <code>count()</code> 可獲得陣列的筆數。</p>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">selectCloudByIndex(index: <span class="built_in">number</span>): AppPage &#123;</span><br><span class="line">  element.all(by.css(<span class="string">'label[name="cloud"]'</span>))</span><br><span class="line">    .get(index)</span><br><span class="line">    .click();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 index 選擇 checkbox。</p>
<p>因為 checkbox 已經被包在 <code>&lt;label&gt;</code> 內，所以 click <code>&lt;label&gt;</code>，就相當於 click checkbox。</p>
<p>實務上 <code>&lt;label&gt;</code> 會使用 <code>name</code>，表示同一組 checkbox ，因此可用 <code>by.css(&#39;label[name=&quot;cloud&quot;]&#39;)</code> 找到所有 <code>&lt;label&gt;</code> 的陣列，再透過 <code>get(index)</code> 選擇 <code>&lt;label&gt;</code> ，最後 <code>click()</code>。</p>
<p>24 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">selectCloudByText(text: <span class="built_in">string</span>): AppPage &#123;</span><br><span class="line">  element(by.cssContainingText(<span class="string">'label'</span>, text)).click();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用文字選擇 checkbox。</p>
<p>因為 checkbox 已經被包在 <code>&lt;label&gt;</code> 內，所以 click <code>&lt;label&gt;</code>，就相當於 click checkbox。</p>
<p>因為文字是屬於 <code>&lt;label&gt;</code>，而不是屬於 checkbox，所以使用 <code>by.cssContainingText(&#39;label&#39;, cloud)</code> 直接找到符合條件的 <code>&lt;label&gt;</code>，然後 <code>click()</code>。</p>
<p><img src="/images/protractor/protractor-checkbox/checkbox004.png" alt="checkbox004"></p>
<p>因為我們還沒實作任何功能，得到預期的驗收測試 <code>紅燈</code>。</p>
<h2 id="Acceptance_Test_(綠燈)">Acceptance Test (綠燈)</h2><hr>
<p>測試案例 :</p>
<blockquote>
<ol>
<li>應該有 <code>3</code> 個 <code>&lt;label&gt;</code></li>
<li>應該有 <code>3</code> 個 <code>&lt;input type=&quot;checkbox&quot;&gt;</code></li>
<li>一開始下方應該出現 <code>0</code></li>
<li>當選擇 <code>AWS</code>，下方應該出現 <code>1</code></li>
<li>當選擇 <code>AWS</code> 與 <code>Azure</code> ，下方應該出現 <code>2</code></li>
<li>當選擇 <code>AWS</code>、<code>Azure</code> 與 <code>GCP</code> ，下方應該出現 <code>3</code></li>
</ol>
</blockquote>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">label</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> <span class="attribute">name</span>=<span class="value">"cloud"</span> [<span class="attribute">for</span>]=<span class="value">"cloud.name|lowercase"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> [<span class="attribute">id</span>]=<span class="value">"cloud.name|lowercase"</span> [<span class="attribute">name</span>]=<span class="value">"cloud"</span> [<span class="attribute">checked</span>]=<span class="value">"cloud.checked"</span> (<span class="attribute">change</span>)=<span class="value">"onChange(myCheckbox)"</span> #<span class="attribute">myCheckbox</span>&gt;</span></span><br><span class="line">  &#123;&#123; cloud.name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; selectedCount &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">label</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> <span class="attribute">name</span>=<span class="value">"cloud"</span> [<span class="attribute">for</span>]=<span class="value">"cloud.name|lowercase"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;label&gt;</code> 與 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> 會依賴後端的資料顯示，故適合使用 <code>*ngFor</code> 產生。</p>
<p><code>for</code> 會與 checkbox 的 <code>id</code> 先對應，使用 <code>lowercase</code> pipe 將 <code>cloud.name</code> 轉成小寫。</p>
<p><code>&lt;label&gt;</code> 所顯示的值則使用 <code>cloud.name</code> 直接 interpolation binding。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> [<span class="attribute">id</span>]=<span class="value">"cloud.name|lowercase"</span> [<span class="attribute">name</span>]=<span class="value">"cloud"</span> [<span class="attribute">checked</span>]=<span class="value">"cloud.checked"</span> (<span class="attribute">change</span>)=<span class="value">"onChange(myCheckbox)"</span> #<span class="attribute">myCheckbox</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>為了讓 checkbox 同一組，故 <code>name</code> 都使用 <code>cloud</code>。</p>
<p><code>id</code> 使用 <code>lowercase</code> pipe 將 <code>cloud.name</code> 轉成小寫。</p>
<p><code>checked</code> 根據 <code>cloud.checked</code> 決定 radio 一開始是否選取。</p>
<p>將 <code>change</code> event 綁訂到 <code>onChange()</code>，並將 <code>#myCheckbox</code> 傳入 <code>onChange()</code>。</p>
<p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  selectedCount = <span class="number">0</span>;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>, checked: <span class="literal">false</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>, checked: <span class="literal">false</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'2'</span>, name: <span class="string">'GCP'</span>, checked: <span class="literal">false</span>&#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  onChange(element: HTMLInputElement) &#123;</span><br><span class="line">    (element.checked) ? <span class="keyword">this</span>.selectedCount++ : <span class="keyword">this</span>.selectedCount--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectedCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p><code>selectedCount</code> field 預設為 <code>0</code>。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clouds: Cloud[] = [</span><br><span class="line">  &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>, checked: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>, checked: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;id: <span class="string">'2'</span>, name: <span class="string">'GCP'</span>, checked: <span class="literal">false</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>建立 <code>cloud</code> field 與設定初始陣列。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onChange(element: HTMLInputElement) &#123;</span><br><span class="line">  (element.checked) ? <span class="keyword">this</span>.selectedCount++ : <span class="keyword">this</span>.selectedCount--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若 <code>element.checked</code> 為 <code>true</code>，則 <code>selectedCount</code> + 1，否則 <code>selectedCount</code> - 1 。</p>
<p><img src="/images/protractor/protractor-checkbox/checkbox005.png" alt="checkbox005"></p>
<p>功能都實作出來了，重新跑一次驗收測試確認都為 <code>綠燈</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上整個 ATDD 循環應該是驗收測試 (紅燈) -&gt; 整合測試 (紅燈) -&gt; 單元測試 (紅燈) -&gt; 單元測試 (綠燈) -&gt; 整合測試 (綠燈) -&gt; 驗收測試 (綠燈)，因為本文重點在於 Protract 驗收測試的 radio 寫法，所以省略了整合測試與單元測試部分。</li>
<li>本文特別針對 checkbox 展示了 <code>selectCloudByIndex()</code> 與 <code>selectCloudByText()</code> 兩種寫法。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Protractor512Checkbox" target="_blank" rel="external">GitHub</a> 找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Protractor 控制 Checkbox]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Protractor 寫 Radio 的驗收測試 ?]]></title>
    <link href="http://oomusou.io/protractor/protractor-radio/"/>
    <id>http://oomusou.io/protractor/protractor-radio/</id>
    <published>2017-08-22T12:23:43.000Z</published>
    <updated>2017-08-27T12:42:47.000Z</updated>
    <content type="html"><![CDATA[<p>HTML 的 <code>&lt;input type=&quot;radio&quot;&gt;</code> 是常見的控制項，該如何使用 Protractor 對 radio 寫驗收測試呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Protractor 5.1.2</p>
<h2 id="Requirement">Requirement</h2><hr>
<p><img src="/images/protractor/protractor-radio/radio000.png" alt="radio000"></p>
<p>畫面上共有 <code>3</code> 個 radio，各為 <code>AWS</code>、<code>Azure</code> 與 <code>GCP</code>。</p>
<p>下方會顯示目前所選擇的 value。</p>
<p>當選擇為 <code>AWS</code> 時，下方顯示 <code>0</code>。</p>
<p><img src="/images/protractor/protractor-radio/radio001.png" alt="radio001"></p>
<p>當選擇為 <code>Azure</code> 時，下方顯示 <code>1</code>。</p>
<p><img src="/images/protractor/protractor-radio/radio002.png" alt="radio002"></p>
<h2 id="Acceptance_Test_(紅燈)">Acceptance Test (紅燈)</h2><hr>
<p>測試案例 :</p>
<blockquote>
<ol>
<li>應該有 <code>3</code> 個 <code>&lt;label&gt;</code></li>
<li>應該有 <code>3</code> 個 <code>&lt;input type=&quot;radio&quot;&gt;</code></li>
<li>當選擇 <code>AWS</code>，下方應該出現 <code>0</code></li>
<li>當選擇 <code>Azure</code>，下方應該出現 <code>1</code></li>
<li>當選擇 <code>GCP</code>，下方應該出現 <code>2</code></li>
</ol>
</blockquote>
<p><strong>e2e/app.e2e-spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppPage &#125; from <span class="string">'./app.po'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'protractor512-radio App'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> page: AppPage;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    page = <span class="keyword">new</span> AppPage();</span><br><span class="line">    page.navigateTo();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="string">'3'</span> labels`, () =&gt; &#123;</span><br><span class="line">    expect(page.getLabelCount()).toBe(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="string">'3'</span> radios`, () =&gt; &#123;</span><br><span class="line">    expect(page.getRadioCount()).toBe(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should <span class="keyword">get</span> <span class="string">'0'</span> when select <span class="string">'AWS'</span>`, () =&gt; &#123;</span><br><span class="line">    page.selectCloudByIndex(<span class="number">0</span>);</span><br><span class="line">    expect(page.getSelectedCloud()).toBe(<span class="string">'0'</span>);</span><br><span class="line">    expect(page.getSelectedId()).toBe(<span class="string">'0'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should <span class="keyword">get</span> <span class="string">'1'</span> when select <span class="string">'Azure'</span>`, () =&gt; &#123;</span><br><span class="line">    page.selectCloudByText(<span class="string">'Azure'</span>);</span><br><span class="line">    expect(page.getSelectedCloud()).toBe(<span class="string">'1'</span>);</span><br><span class="line">    expect(page.getSelectedId()).toBe(<span class="string">'1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should <span class="keyword">get</span> <span class="string">'2'</span> when select <span class="string">'GCP'</span>`, () =&gt; &#123;</span><br><span class="line">    page.selectCloudByText(<span class="string">'GCP'</span>);</span><br><span class="line">    expect(page.getSelectedCloud()).toBe(<span class="string">'2'</span>);</span><br><span class="line">    expect(page.getSelectedId()).toBe(<span class="string">'2'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'3'</span> labels`, () =&gt; &#123;</span><br><span class="line">  expect(page.getLabelCount()).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 應該有 <code>3</code> 個 <code>&lt;label&gt;</code> </p>
</blockquote>
<p><code>page.getLabelCount()</code> 將由 page object 傳回 <code>&lt;label&gt;</code> 的個數。</p>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'3'</span> radios`, () =&gt; &#123;</span><br><span class="line">  expect(page.getRadioCount()).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 應該有 <code>3</code> 個 <code>&lt;input type=&quot;radio&quot;&gt;</code></p>
</blockquote>
<p><code>page.getRadioCount()</code> 將由 page object 傳回 radio 的個數。</p>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(`should <span class="keyword">get</span> <span class="string">'0'</span> when select <span class="string">'AWS'</span>`, () =&gt; &#123;</span><br><span class="line">  page.selectCloudByIndex(<span class="number">0</span>);</span><br><span class="line">  expect(page.getSelectedCloud()).toBe(<span class="string">'0'</span>);</span><br><span class="line">  expect(page.getSelectedId()).toBe(<span class="string">'0'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 當選擇 <code>AWS</code>，下方應該出現 <code>0</code></p>
</blockquote>
<p>要模擬 user 選擇 radio，有兩種方式，一種是使用 index 選擇，一種是使用文字選擇。</p>
<p><code>page.selectCloudByIndex()</code> 將使用 index 方式選擇 radio。</p>
<p><code>page.getSelectedCloud()</code> 將傳回 user 所選擇 radio 的 value。</p>
<p><code>page.getSelectedId()</code> 將傳回下方所顯示的 value。</p>
<p>25 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(`should <span class="keyword">get</span> <span class="string">'1'</span> when select <span class="string">'Azure'</span>`, () =&gt; &#123;</span><br><span class="line">  page.selectCloudByText(<span class="string">'Azure'</span>);</span><br><span class="line">  expect(page.getSelectedCloud()).toBe(<span class="string">'1'</span>);</span><br><span class="line">  expect(page.getSelectedId()).toBe(<span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 當選擇 <code>Azure</code>，下方應該出現 <code>1</code></p>
</blockquote>
<p><code>page.selectCloudByText()</code> 將使用文字方式選擇 radio。</p>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getLabelCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element.all(by.tagName(<span class="string">'label'</span>)).count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getRadioCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element.all(by.css(<span class="string">'input[type="radio"]'</span>)).count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  selectCloudByText(cloud: <span class="built_in">string</span>): AppPage &#123;</span><br><span class="line">    element(by.cssContainingText(<span class="string">'label'</span>, cloud)).click();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  selectCloudByIndex(index: <span class="built_in">number</span>): AppPage &#123;</span><br><span class="line">    element.all(by.tagName(<span class="string">'label'</span>))</span><br><span class="line">      .get(index)</span><br><span class="line">      .click();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelectedCloud(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.css(<span class="string">'input[name="cloud"]:checked'</span>)).getAttribute(<span class="string">'value'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelectedId(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.css(<span class="string">'p'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>*.e2e-spec.ts</code> 負責描述測試案例，不包含 HTML 與 CSS 部分。</p>
<p> <code>*.po.ts</code> 則負責描述 HTML 與 CSS 部分。</p>
<p>Page object 主要目的在於讓測試與 HTML/CSS 解耦合，不要 designer 若變動了 HTML 或 CSS，則所有驗收測試都要修改，只要修改 page object 即可。</p>
<blockquote>
<p>驗收測試應該只根據需求變動而修改，不應該因為 HTML/CSS 變動而修改。</p>
</blockquote>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getLabelCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element.all(by.tagName(<span class="string">'label'</span>)).count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳所有 <code>&lt;label&gt;</code> 的個數。</p>
<blockquote>
<p><code>count()</code> 的型別不是 <code>number</code>，而是 <code>wdpromise.Promise&lt;number&gt;</code>，因為型別比較複雜，所以迴船型別使用 <code>any</code> 代替。</p>
</blockquote>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getRadioCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element.all(by.css(<span class="string">'input[type="radio"]'</span>)).count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 CSS selector 方式找到所有 radio。<code>all()</code> 回傳為陣列，加上 <code>count()</code> 可獲得陣列的筆數。</p>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">selectCloudByIndex(index: <span class="built_in">number</span>): AppPage &#123;</span><br><span class="line">  element.all(by.tagName(<span class="string">'label'</span>))</span><br><span class="line">    .get(index)</span><br><span class="line">    .click();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 index 選擇 radio。</p>
<p>因為 radio 已經被包在 <code>&lt;label&gt;</code> 內，所以 click <code>&lt;label&gt;</code>，就相當於 click radio。</p>
<p>先用 <code>element(by.tagName(&#39;label&#39;))</code> 找到所有 <code>&lt;label&gt;</code> 的陣列，再透過 <code>get(index)</code> 選擇 <code>&lt;label&gt;</code>，最後 <code>click()</code>。</p>
<p>24 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">selectCloudByText(cloud: <span class="built_in">string</span>): AppPage &#123;</span><br><span class="line">  element(by.cssContainingText(<span class="string">'label'</span>, cloud)).click();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用文字選擇 radio。</p>
<p>因為 radio 已經被包在 <code>&lt;label&gt;</code> 內，所以 click <code>&lt;label&gt;</code>，就相當於 click radio。</p>
<p>因為文字是屬於 <code>&lt;label&gt;</code>，而不是屬於 radio，所以使用 <code>by.cssContainingText(&#39;label&#39;, cloud)</code> 直接找到符合條件的 <code>&lt;label&gt;</code>，然後 <code>click()</code>。</p>
<p>30 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getSelectedCloud(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element(by.css(<span class="string">'input[name="cloud"]:checked'</span>)).getAttribute(<span class="string">'value'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>獲得所選擇 radio 的 value。</p>
<p>Click 時可以針對 <code>&lt;label&gt;</code>，但要獲得所選擇 radio 的 value ，就必須扎實的針對 radio。</p>
<p>若為同一組 radio，其 <code>name</code> 必定相同，所以可以 <code>input[name=&quot;cloud&quot;]</code> 作為搜尋條件。</p>
<p>被選擇的 radio，必有 <code>checked</code> attribute ，因此可加上 <code>:checked</code> 為搜尋條件。</p>
<p>最後使用 <code>getAttribute(&#39;value&#39;)</code> 獲得 radio 的 <code>value</code>。</p>
<p><img src="/images/protractor/protractor-radio/radio003.png" alt="radio003"></p>
<p>因為我們還沒實作任何功能，得到預期的驗收測試 <code>紅燈</code>。</p>
<h2 id="Acceptance_Test_(綠燈)">Acceptance Test (綠燈)</h2><hr>
<p>測試案例 :</p>
<blockquote>
<ol>
<li>應該有 <code>3</code> 個 <code>&lt;label&gt;</code></li>
<li>應該有 <code>3</code> 個 <code>&lt;input type=&quot;radio&quot;&gt;</code></li>
<li>當選擇 <code>AWS</code>，下方應該出現 <code>0</code></li>
<li>當選擇 <code>Azure</code>，下方應該出現 <code>1</code></li>
<li>當選擇 <code>GCP</code>，下方應該出現 <code>2</code></li>
</ol>
</blockquote>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">label</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">for</span>]=<span class="value">"cloud.name|lowercase"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"cloud"</span> [<span class="attribute">id</span>]=<span class="value">"cloud.name|lowercase"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span> [<span class="attribute">checked</span>]=<span class="value">"cloud.checked"</span> (<span class="attribute">change</span>)=<span class="value">"onChange(myRadio)"</span> #<span class="attribute">myRadio</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; selectedId &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">label</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">for</span>]=<span class="value">"cloud.name|lowercase"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;label&gt;</code> 與 <code>&lt;input type=&quot;radio&quot;&gt;</code> 會依賴後端的資料顯示，故適合使用 <code>*ngFor</code> 產生。</p>
<p><code>for</code> 會與 radio 的 <code>id</code> 先對應，使用 <code>lowercase</code> pipe 將 <code>cloud.name</code> 轉成小寫。</p>
<p><code>&lt;label&gt;</code> 所顯示的值則使用 <code>cloud.name</code> 直接 interpolation binding。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"cloud"</span> [<span class="attribute">id</span>]=<span class="value">"cloud.name|lowercase"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span> [<span class="attribute">checked</span>]=<span class="value">"cloud.checked"</span> (<span class="attribute">change</span>)=<span class="value">"onChange(myRadio)"</span> #<span class="attribute">myRadio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>為了讓 radio 同一組，故 <code>name</code> 都使用 <code>cloud</code>。</p>
<p><code>id</code> 使用 <code>lowercase</code> pipe 將 <code>cloud.name</code> 轉成小寫。</p>
<p><code>checked</code> 根據 <code>cloud.checked</code> 決定 radio 一開始是否選取。</p>
<p>將 <code>change</code> event 綁訂到 <code>onChange()</code>，並將 <code>#myRadio</code> 傳入 <code>onChange()</code>。</p>
<p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  selectedId = <span class="string">'0'</span>;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>, checked: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>, checked: <span class="literal">false</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'2'</span>, name: <span class="string">'GCP'</span>, checked: <span class="literal">false</span>&#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  onChange(element: HTMLInputElement) &#123;</span><br><span class="line">    <span class="keyword">this</span>.selectedId = element.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectedId = <span class="string">'0'</span>;</span><br></pre></td></tr></table></figure>
<p><code>selectedId</code> field 預設為 <code>0</code>。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clouds: Cloud[] = [</span><br><span class="line">  &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>, checked: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>, checked: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;id: <span class="string">'2'</span>, name: <span class="string">'GCP'</span>, checked: <span class="literal">false</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>建立 <code>cloud</code> field 與設定初始陣列。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onChange(element: HTMLInputElement) &#123;</span><br><span class="line">  <span class="keyword">this</span>.selectedId = element.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>HTMLInputElement.value</code> 值指定到 <code>selectedId</code> field。</p>
<p><img src="/images/protractor/protractor-radio/radio004.png" alt="radio004"></p>
<p>功能都實作出來了，重新跑一次驗收測試確認都為 <code>綠燈</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上整個 ATDD 循環應該是驗收測試 (紅燈) -&gt; 整合測試 (紅燈) -&gt; 單元測試 (紅燈) -&gt; 單元測試 (綠燈) -&gt; 整合測試 (綠燈) -&gt; 驗收測試 (綠燈)，因為本文重點在於 Protract 驗收測試的 radio 寫法，所以省略了整合測試與單元測試部分。</li>
<li>本文特別針對 radio 展示了 <code>selectCloudByIndex()</code> 與 <code>selectCloudByText()</code> 兩種寫法。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Protractor512Radio" target="_blank" rel="external">GitHub</a> 找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Protractor 控制 Radio]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Protractor 寫 Select 的驗收測試 ?]]></title>
    <link href="http://oomusou.io/protractor/protractor-select/"/>
    <id>http://oomusou.io/protractor/protractor-select/</id>
    <published>2017-08-21T12:23:43.000Z</published>
    <updated>2017-08-27T12:38:56.000Z</updated>
    <content type="html"><![CDATA[<p>HTML 的 <code>&lt;select&gt;</code> 是常見的控制項，該如何使用 Protractor 對 select 寫驗收測試呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Protractor 5.1.2</p>
<h2 id="Requirement">Requirement</h2><hr>
<p><img src="/images/protractor/protractor-select/select000.png" alt="select000"></p>
<p>畫面只有 1 個 <code>&lt;select&gt;</code>，下方會顯示目前所選擇的 value。</p>
<p><img src="/images/protractor/protractor-select/select001.png" alt="select001"></p>
<p><code>&lt;select&gt;</code> 下共有 <code>3</code> 個 option，各為 <code>AWS</code>、<code>Azure</code> 與 <code>GCP</code>。</p>
<p><img src="/images/protractor/protractor-select/select000.png" alt="select000"></p>
<p>當選擇 <code>AWS</code> 時，下方顯示 <code>0</code>。</p>
<p><img src="/images/protractor/protractor-select/select002.png" alt="select002"></p>
<p>當選擇 <code>Azure</code> 時，下方顯示 <code>1</code>。</p>
<p><img src="/images/protractor/protractor-select/select003.png" alt="select003"></p>
<p>當選擇 <code>GCP</code>，下方顯示 <code>2</code>。</p>
<h2 id="Acceptance_Test_(紅燈)">Acceptance Test (紅燈)</h2><hr>
<p>測試案例 :</p>
<blockquote>
<ol>
<li>應該有  <code>1</code> 個 <code>&lt;select&gt;</code></li>
<li>應該有 <code>3</code> 個 <code>&lt;option&gt;</code></li>
<li>當選擇 <code>AWS</code>，下方應該出現 <code>0</code></li>
<li>當選擇 <code>Azure</code>，下方應該出現 <code>1</code></li>
<li>當選擇 <code>GCP</code>，下方應該出現 <code>2</code></li>
</ol>
</blockquote>
<p><strong>src/app.e2e-spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppPage &#125; from <span class="string">'./app.po'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'protractor512-select App'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> page: AppPage;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    page = <span class="keyword">new</span> AppPage();</span><br><span class="line">    page.navigateTo();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="string">'1'</span> select`, () =&gt; &#123;</span><br><span class="line">    expect(page.getSelect().isPresent()).toBe(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="string">'3'</span> options <span class="keyword">in</span> select`, () =&gt; &#123;</span><br><span class="line">    expect(page.getSelectCount()).toBe(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should show <span class="string">'0'</span> when selecting <span class="string">'AWS'</span>`, () =&gt; &#123;</span><br><span class="line">    page.selectCloudByIndex(<span class="number">0</span>);</span><br><span class="line">    expect(page.getSelectedId()).toBe(<span class="string">'0'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should show <span class="string">'1'</span> when selecting <span class="string">'Azure'</span>`, () =&gt; &#123;</span><br><span class="line">    page.selectCloudByText(<span class="string">'Azure'</span>);</span><br><span class="line">    expect(page.getSelectedId()).toBe(<span class="string">'1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should show <span class="string">'2'</span> when selecting <span class="string">'GCP'</span>`, () =&gt; &#123;</span><br><span class="line">    page.selectCloudByText(<span class="string">'GCP'</span>);</span><br><span class="line">    expect(page.getSelectedId()).toBe(<span class="string">'2'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'1'</span> select`, () =&gt; &#123;</span><br><span class="line">  expect(page.getSelect().isPresent()).toBe(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 應該有  <code>1</code> 個 <code>&lt;select&gt;</code></p>
</blockquote>
<p>若 <code>&lt;select&gt;</code> 存在，則 <code>isPresent()</code> 回傳 <code>true</code>，否則回傳 <code>false</code>。</p>
<p><code>page.getSelect()</code> 將由 page object 傳回 <code>ElementFinder</code> 型別且符合條件的 <code>&lt;select&gt;</code>。</p>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'3'</span> options <span class="keyword">in</span> select`, () =&gt; &#123;</span><br><span class="line">  expect(page.getSelectCount()).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 應該有 <code>3</code> 個 <code>&lt;option&gt;</code></p>
</blockquote>
<p>測試 <code>&lt;select&gt;</code> 是否有 <code>AWS</code>、<code>Azure</code> 與 <code>GCP</code> 3 個 <code>&lt;option&gt;</code>，實務上這些資料會從後端 API 來，可測試 API 是否正常，也可測試 API 的 SQL 或 ORM 是否正確。</p>
<p>若要測試資料完全相同比較困難時，最少可測試資料的筆數是否正確。</p>
<p><code>page.getSelectCount()</code> 將由 page object 傳回 <code>&lt;option&gt;</code> 的個數。</p>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(`should show <span class="string">'0'</span> when selecting <span class="string">'AWS'</span>`, () =&gt; &#123;</span><br><span class="line">  page.selectCloudByIndex(<span class="number">0</span>);</span><br><span class="line">  expect(page.getSelectedId()).toBe(<span class="string">'0'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 當選擇 <code>AWS</code>，下方應該出現 <code>0</code></p>
</blockquote>
<p>要模擬 user 選擇 <code>&lt;select&gt;</code>，有 <code>2</code> 種方式，一種是使用 index 選擇，一種是由文字選擇。</p>
<p><code>page.selectCloudByIndex()</code> 將使用 index 方式選擇 <code>&lt;select&gt;</code>。</p>
<p>24 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(`should show <span class="string">'1'</span> when selecting <span class="string">'Azure'</span>`, () =&gt; &#123;</span><br><span class="line">  page.selectCloudByText(<span class="string">'Azure'</span>);</span><br><span class="line">  expect(page.getSelectedId()).toBe(<span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 測試案例 : 當選擇 <code>Azure</code>，下方應該出現 <code>1</code></p>
</blockquote>
<p><code>page.selectCloudByText()</code> 將使用文字方式選擇 <code>&lt;select&gt;</code>。</p>
<p><strong>src/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelect(): ElementFinder &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.id(<span class="string">'TDDSelect'</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelectCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.id(<span class="string">'TDDSelect'</span>))</span><br><span class="line">      .all(by.tagName(<span class="string">'option'</span>))</span><br><span class="line">      .count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  selectCloudByIndex(index: <span class="built_in">number</span>): AppPage &#123;</span><br><span class="line">    element(by.id(<span class="string">'TDDSelect'</span>))</span><br><span class="line">      .all(by.tagName(<span class="string">'option'</span>))</span><br><span class="line">      .get(index)</span><br><span class="line">      .click();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  selectCloudByText(text: <span class="built_in">string</span>): AppPage &#123;</span><br><span class="line">    element(by.id(<span class="string">'TDDSelect'</span>))</span><br><span class="line">      .element(by.cssContainingText(<span class="string">'option'</span>, text))</span><br><span class="line">      .click();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelectedId(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.css(<span class="string">'p'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>*.e2e-spec.ts</code> 負責描述測試案例，不包含 HTML 與 CSS 部分。</p>
<p> <code>*.po.ts</code> 則負責描述 HTML 與 CSS 部分。</p>
<p>Page object 主要目的在於讓測試與 HTML/CSS 解耦合，不要 designer 若變動了 HTML 或 CSS，則所有驗收測試都要修改，只要修改 page object 即可。</p>
<blockquote>
<p>驗收測試應該只根據需求變動而修改，不應該因為 HTML/CSS 變動而修改。</p>
</blockquote>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getSelect(): ElementFinder &#123;</span><br><span class="line">  <span class="keyword">return</span> element(by.id(<span class="string">'TDDSelect'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 id 為 <code>TDDSelect</code> 回傳 ElementFinder 物件，主要是為了 <code>isPresent()</code> 判斷 <code>&lt;select&gt;</code> 是否存在。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getSelectCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element(by.id(<span class="string">'TDDSelect'</span>))</span><br><span class="line">    .all(by.tagName(<span class="string">'option'</span>))</span><br><span class="line">    .count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳 <code>&lt;select&gt;</code> 下共有幾個 <code>&lt;option&gt;</code>。</p>
<p>若要在 HTML 的階層下找單一 element，可用 <code>element(locator).element(locator)</code>。</p>
<p>若要在 HTML 的階層下找多個 element，可用 <code>element(locator).all(locator)</code>。</p>
<p>因為 <code>all()</code> 是陣列，可用 <code>count()</code> 得知陣列筆數。</p>
<blockquote>
<p><code>count()</code> 的型別不是 <code>number</code>，而是 <code>wdpromise.Promise&lt;number&gt;</code>，因為型別比較複雜，所以迴船型別使用 <code>any</code> 代替。</p>
</blockquote>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">selectCloudByIndex(index: <span class="built_in">number</span>): AppPage &#123;</span><br><span class="line">  element(by.id(<span class="string">'TDDSelect'</span>))</span><br><span class="line">    .all(by.tagName(<span class="string">'option'</span>))</span><br><span class="line">    .get(index)</span><br><span class="line">    .click();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 index 選擇 <code>&lt;select&gt;</code>。</p>
<p>先用 <code>element(by.id(&#39;TDDSelect&#39;))</code> 找到 <code>&lt;select&gt;</code>，由 <code>all(by.tagName(&#39;option&#39;))</code> 取得 <code>&lt;select&gt;</code> 下所有 <code>&lt;option&gt;</code> 的陣列，再透過 <code>get(index)</code> 選擇 <code>&lt;select&gt;</code> 的 <code>&lt;option&gt;</code>，最後 <code>click()</code>。</p>
<p>27 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">selectCloudByText(text: <span class="built_in">string</span>): AppPage &#123;</span><br><span class="line">  element(by.id(<span class="string">'TDDSelect'</span>))</span><br><span class="line">   .element(by.cssContainingText(<span class="string">'option'</span>, text))</span><br><span class="line">   .click();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用文字選擇 <code>&lt;select&gt;</code>。</p>
<p>先用 <code>element(by.id(&#39;TDDSelect&#39;))</code> 找到 <code>&lt;select&gt;</code>，因為要直接由文字得到單一 <code>&lt;option&gt;</code>，就不再使用 <code>all()</code>，直接使用 <code>element()</code> 。</p>
<p>透過 <code>by.cssContainingText(&#39;option&#39;, text)</code> 取得 <code>&lt;option&gt;</code>，最後 <code>click()</code>。</p>
<p><img src="/images/protractor/protractor-select/select004.png" alt="select004"></p>
<p>因為我們還沒實作任何功能，得到預期的驗收測試 <code>紅燈</code>。</p>
<h2 id="Acceptance_Test_(綠燈)">Acceptance Test (綠燈)</h2><hr>
<p>測試案例 :</p>
<blockquote>
<ol>
<li>應該有  <code>1</code> 個 <code>&lt;select&gt;</code></li>
<li>應該有 <code>3</code> 個 <code>&lt;option&gt;</code></li>
<li>當選擇 <code>AWS</code>，下方應該出現 <code>0</code></li>
<li>當選擇 <code>Azure</code>，下方應該出現 <code>1</code></li>
<li>當選擇 <code>GCP</code>，下方應該出現 <code>2</code></li>
</ol>
</blockquote>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"TDDSelect"</span> (<span class="attribute">change</span>)=<span class="value">"onChange(mySelect)"</span> #<span class="attribute">mySelect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; selectedId &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"TDDSelect"</span> (<span class="attribute">change</span>)=<span class="value">"onChange(mySelect)"</span> #<span class="attribute">mySelect</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>將 <code>change</code> event 綁定到 <code>onChange()</code>，並將 <code>#mySelect</code> 傳入 <code>onChange()</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>*ngFor</code> 根據 <code>clouds</code> field 產生 <code>&lt;option&gt;</code>。</p>
<p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  selectedId = <span class="string">'0'</span>;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'2'</span>, name: <span class="string">'GCP'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  onChange(element: HTMLSelectElement) &#123;</span><br><span class="line">    <span class="keyword">this</span>.selectedId = element.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectedId = <span class="string">'0'</span>;</span><br></pre></td></tr></table></figure>
<p><code>selectedId</code> field 預設為 <code>0</code>。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clouds: Cloud[] = [</span><br><span class="line">  &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="string">'2'</span>, name: <span class="string">'GCP'</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>建立 <code>cloud</code> field 與設定初始陣列。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onChange(element: HTMLSelectElement) &#123;</span><br><span class="line">  <span class="keyword">this</span>.selectedId = element.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>HTMLSelectElement.value</code> 值指定到 <code>selectedId</code> field。</p>
<p><img src="/images/protractor/protractor-select/select005.png" alt="select005"></p>
<p>功能都實作出來了，重新跑一次驗收測試確認都為 <code>綠燈</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上整個 ATDD 循環應該是驗收測試 (紅燈) -&gt; 整合測試 (紅燈) -&gt; 單元測試 (紅燈) -&gt; 單元測試 (綠燈) -&gt; 整合測試 (綠燈) -&gt; 驗收測試 (綠燈)，因為本文重點在於 Protract 驗收測試的 <code>&lt;select&gt;</code> 寫法，所以省略了整合測試與單元測試部分。</li>
<li>本文特別針對 <code>&lt;select&gt;</code> 展示了 <code>selectCloudByIndex()</code> 與 <code>selectCloudByText()</code> 兩種寫法。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Protractor512Select" target="_blank" rel="external">GitHub</a> 找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Protractor 控制 Select]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何關閉 WebStorm 的 Jasmine Warning ?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-jasmine-warning/"/>
    <id>http://oomusou.io/webstorm/webstorm-jasmine-warning/</id>
    <published>2017-08-20T12:23:43.000Z</published>
    <updated>2017-08-27T08:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>使用 WebStorm 寫 Protractor 或 Jasmine 測試時，有 2 個 WebStorm 的 warning 會造成困擾，建議將其關閉。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>WebStorm 2017.2.2</p>
<h2 id="Symptom">Symptom</h2><hr>
<p><img src="/images/webstorm/webstorm-jasmine-warning/warning000.png" alt="warning000"></p>
<p>Jasmine 的 <code>toBe()</code> 會出現 warning。</p>
<blockquote>
<p>因為 toBe() 回傳的是 promise，WebStorm 是警告應該有 <code>then()</code> 作相對的處理，其本意是好的，不過在寫測試時，一般不會再去寫 <code>then()</code>。</p>
</blockquote>
<p><img src="/images/webstorm/webstorm-jasmine-warning/warning001.png" alt="warning001"></p>
<p>在 Protractor 的 page object 內，method 會出現 warning。</p>
<blockquote>
<p>由於 page object 的 method 都沒使用到 field，會被警告可以改用 static methhod。</p>
</blockquote>
<h2 id="Recipe">Recipe</h2><hr>
<h3 id="Promise">Promise</h3><p><img src="/images/webstorm/webstorm-jasmine-warning/warning002.png" alt="warning002"></p>
<p><strong><em>File -&gt;Settings -&gt; Editor -&gt;Inspections -&gt; JavaScript -&gt; Probable bugs</em></strong></p>
<p><code>Result of method call returning a promise is ignored</code> 不要勾選。</p>
<p><img src="/images/webstorm/webstorm-jasmine-warning/warning004.png" alt="warning004"></p>
<p><code>ToBe()</code> 就不再出現 warning 了。</p>
<h3 id="Static">Static</h3><p><img src="/images/webstorm/webstorm-jasmine-warning/warning003.png" alt="warning003"></p>
<p><strong><em>File -&gt;Settings -&gt; Editor -&gt;Inspections -&gt; JavaScript -&gt; General</em></strong></p>
<p><code>Method can be static</code> 不要勾選。</p>
<p><img src="/images/webstorm/webstorm-jasmine-warning/warning005.png" alt="warning005"></p>
<p>Page object 內的 method 就不再出現 warning 了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>WebStorm 這 2 個 warning 都是善意的，只是一般在寫測試時，這 2 個 warning 對我們並沒有幫助，因此可以暫時關閉。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[關閉 WebStorm 惱人的警告訊息]]>
    
    </summary>
    
      <category term="Jasmine" scheme="http://oomusou.io/tags/Jasmine/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何測試 Angular 的 ngModel?]]></title>
    <link href="http://oomusou.io/angular/angular-ngmodel-testing/"/>
    <id>http://oomusou.io/angular/angular-ngmodel-testing/</id>
    <published>2017-08-19T12:23:43.000Z</published>
    <updated>2017-08-23T04:24:03.000Z</updated>
    <content type="html"><![CDATA[<p>Two-way Binding 的 <code>ngModel</code>非常方便，但因為這是 syntax sugar，該如何測試呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular 4.3</p>
<h2 id="Requirement">Requirement</h2><hr>
<p><img src="/images/angular/angular-ngmodel-testing/select000.png" alt="select000"></p>
<p>畫面有一個下拉選單。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select001.png" alt="select001"></p>
<p>下拉選單內有 <code>AWS</code>、<code>Azure</code> 與 <code>Aliyun</code> 三個值。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select002.png" alt="select002"></p>
<p>當選擇 <code>AWS</code> 時，在下方顯示 <code>0</code>。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select003.png" alt="select003"></p>
<p>當選擇 <code>Azure</code> 時，在下方顯示 <code>1</code>。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select004.png" alt="select004"></p>
<p>當選擇 <code>Aliyun</code> 時，在下方顯示 <code>2</code>。</p>
<h2 id="Acceptance_Test_(紅燈)">Acceptance Test (紅燈)</h2><hr>
<p>測試案例 :</p>
<blockquote>
<ol>
<li>應該有 <code>1</code> 個下拉選單</li>
<li>下拉選單應該有 <code>3</code> 個選項</li>
<li>選擇 <code>AWS</code> ，下方應該出現 <code>0</code></li>
<li>選擇 <code>Azure</code> 時，下方應該出現 <code>1</code></li>
<li>選擇 <code>Aliyun</code> 時，下方應該出現 <code>2</code></li>
</ol>
</blockquote>
<p><strong>e2e/app.e2e-spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NG43ATDDngModelPage &#125; from <span class="string">'./app.po'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'NG43ATDDngModel App'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> page: NG43ATDDngModelPage;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    page = <span class="keyword">new</span> NG43ATDDngModelPage();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="number">1</span> select`, () =&gt; &#123;</span><br><span class="line">    page.navigateTo();</span><br><span class="line">    expect(page.getSelect().isPresent()).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should have <span class="number">3</span> options <span class="keyword">in</span> select`, () =&gt; &#123;</span><br><span class="line">    page.navigateTo();</span><br><span class="line">    expect(page.getSelectCount()).toBe(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should show <span class="string">'0'</span> when selecting <span class="string">'AWS'</span> `, () =&gt; &#123;</span><br><span class="line">    page.navigateTo();</span><br><span class="line">    page.select(<span class="string">'AWS'</span>);</span><br><span class="line"></span><br><span class="line">    expect(page.getSelectedId()).toBe(<span class="string">'0'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should show <span class="string">'1'</span> when selecting <span class="string">'Azure'</span>  `, () =&gt; &#123;</span><br><span class="line">    page.navigateTo();</span><br><span class="line">    page.select(<span class="string">'Azure'</span>);</span><br><span class="line"></span><br><span class="line">    expect(page.getSelectedId()).toBe(<span class="string">'1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should show <span class="string">'2'</span> when selecting <span class="string">'Aliyun'</span>`, () =&gt; &#123;</span><br><span class="line">    page.navigateTo();</span><br><span class="line">    page.select(<span class="string">'Aliyun'</span>);</span><br><span class="line"></span><br><span class="line">    expect(page.getSelectedId()).toBe(<span class="string">'2'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="number">1</span> select`, () =&gt; &#123;</span><br><span class="line">  page.navigateTo();</span><br><span class="line">  expect(page.getSelect().isPresent()).toBeTruthy();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 應該有 <code>1</code> 個下拉選單</p>
</blockquote>
<p>若下拉選單存在，則 <code>page.getSelect().isPresent()</code> 回傳 true，否則為 false。</p>
<blockquote>
<p>不是使用 <code>expect(page.getSelect()).toBeTruthy()</code>，這樣會永遠 <code>綠燈</code>。</p>
</blockquote>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="number">3</span> options <span class="keyword">in</span> select`, () =&gt; &#123;</span><br><span class="line">  page.navigateTo();</span><br><span class="line">  expect(page.getSelectCount()).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 下拉選單應該有 <code>3</code> 個選項</p>
</blockquote>
<p>測試下拉選單的資料是否為 <code>AWS</code>、<code>Azure</code> 與 <code>Aliyun</code>，實務上這些資料會從後端 API 來，可測試 API 是否正常接上，也可以測試 API 的 SQL 或 ORM 是否正確。</p>
<p>若要測試資料完全相同比較困難時，最少可以測試資料的筆數是否正確。</p>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should show <span class="string">'0'</span> when selecting <span class="string">'AWS'</span> `, () =&gt; &#123;</span><br><span class="line">  page.navigateTo();</span><br><span class="line">  page.select(<span class="string">'AWS'</span>);</span><br><span class="line"></span><br><span class="line">  expect(page.getSelectedId()).toBe(<span class="string">'0'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : 選擇 <code>AWS</code> ，下方應該出現 <code>0</code></p>
</blockquote>
<p>當選擇 <code>AWS</code> 時，下方應該顯示 <code>0</code>。</p>
<p>剩下 <code>Azure</code> 與 <code>Aliyun</code> 的寫法類似。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select005.png" alt="select005"></p>
<ol>
<li>編輯 <code>e2e/app.e2e-spec.ts</code></li>
<li>加入驗收測試</li>
</ol>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG43ATDDngModelPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelect(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.id(<span class="string">'TDDSelect'</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelectCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.id(<span class="string">'TDDSelect'</span>)).all(by.tagName(<span class="string">'option'</span>)).count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  select(text: <span class="built_in">string</span>) &#123;</span><br><span class="line">    element(by.id(<span class="string">'TDDSelect'</span>)).all(by.cssContainingText(<span class="string">'option'</span>, text)).click();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelectedId(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.css(<span class="string">'p'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getSelect(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element(by.id(<span class="string">'TDDSelect'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳 id 為 <code>TDDSelect</code> 的 <code>&lt;select&gt;</code>。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getSelectCount(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element(by.id(<span class="string">'TDDSelect'</span>)).all(by.tagName(<span class="string">'option'</span>)).count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先由 <code>element(by.id(&#39;TDDSelect&#39;))</code> 先抓到 <code>&lt;select&gt;</code>，再由 <code>all()</code> 取得 <code>&lt;select&gt;</code> 下所有 element，再將 <code>by.tagName(&#39;option&#39;)</code> 傳入 <code>all()</code>，找出 tag 為 <code>&lt;option&gt;</code> 的 element 加以 <code>count()</code>。</p>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select(text: <span class="built_in">string</span>) &#123;</span><br><span class="line">  element(by.id(<span class="string">'TDDSelect'</span>)).all(by.cssContainingText(<span class="string">'option'</span>, text)).click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先由 <code>element(by.id(&#39;TDDSelect&#39;))</code> 先抓到 <code>&lt;select&gt;</code>，再由 <code>all()</code> 取得 <code>&lt;select&gt;</code> 下所有 element，再將 <code>by.cssContainingText(&#39;option&#39;, text)</code> 取得正確 option 加以 <code>click()</code>。</p>
<blockquote>
<p>使用 Protractor 在下拉選單選擇指定字串的寫法較為 tricky，需動用 <code>by.cssContainingText()</code>。</p>
</blockquote>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getSelectedId(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> element(by.css(<span class="string">'p'</span>)).getText();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下拉選單所選的值，預期只會用 <code>&lt;p&gt;</code> 包起來而已，因此 <code>by.css(&#39;p&#39;)</code> 即可。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select006.png" alt="select006"></p>
<ol>
<li>編輯 <code>e2e/app.po.ts</code></li>
<li>加入 page object</li>
</ol>
<p><img src="/images/angular/angular-ngmodel-testing/select007.png" alt="select007"></p>
<p>因為我們還沒實作此功能，得到預期的驗收測試 <code>紅燈</code>。</p>
<h2 id="Integration_Test_(紅燈)">Integration Test (紅燈)</h2><hr>
<p>測試案例 :</p>
<blockquote>
<ol>
<li><code>&lt;select&gt;</code> 應該使用 <code>*ngFor</code> 產生 <code>&lt;option&gt;</code></li>
<li><code>ngModel</code> 應該使用 <code>selectedId</code> field</li>
<li><code>&lt;p&gt;</code> 內應該使用 <code>selectedId</code> field</li>
</ol>
</blockquote>
<p><strong>src/app/app.component.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ComponentFixture, TestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DebugElement &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; By &#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'AppComponent'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;AppComponent&gt;;</span><br><span class="line">  <span class="keyword">let</span> component: AppComponent;</span><br><span class="line">  <span class="keyword">let</span> debugElement: DebugElement;</span><br><span class="line">  <span class="keyword">let</span> htmlElement: HTMLElement;</span><br><span class="line">  <span class="keyword">let</span> target: AppComponent;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">      ],</span><br><span class="line">      imports: [</span><br><span class="line">        FormsModule</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">    component = fixture.componentInstance;</span><br><span class="line">    debugElement = fixture.debugElement;</span><br><span class="line">    target = <span class="keyword">new</span> AppComponent();</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(`ATDDSelect`, () =&gt; &#123;</span><br><span class="line">    describe(`Integration Test`, () =&gt; &#123;</span><br><span class="line">      it(`should use <span class="string">'*ngFor'</span> to list clouds`, () =&gt; &#123;</span><br><span class="line">        component.clouds = [</span><br><span class="line">          &#123;id: <span class="string">'3'</span>, name: <span class="string">'GCP'</span>&#125;</span><br><span class="line">        ];</span><br><span class="line">        fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> option = debugElement.query(By.css(<span class="string">'#TDDSelect'</span>)).children[<span class="number">0</span>].nativeElement;</span><br><span class="line">        expect(option.textContent).toBe(<span class="string">'GCP'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      it(`should have <span class="string">'selectedId'</span> field on <span class="string">'ngModel'</span> directive`, () =&gt; &#123;</span><br><span class="line">        debugElement.query(By.css(<span class="string">'#TDDSelect'</span>)).triggerEventHandler(<span class="string">'change'</span>, &#123;target: &#123;value: <span class="string">'2'</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">        expect(component.selectedId).toBe(<span class="string">'2'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      it(`should use <span class="string">'selectedId'</span> field`, () =&gt; &#123;</span><br><span class="line">        component.selectedId = <span class="string">'1'</span>;</span><br><span class="line">        fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">        htmlElement = debugElement.query(By.css(<span class="string">'p'</span>)).nativeElement;</span><br><span class="line">        expect(htmlElement.textContent).toBe(<span class="string">'1'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>34 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(`should use <span class="string">'*ngFor'</span> to list clouds`, () =&gt; &#123;</span><br><span class="line">  component.clouds = [</span><br><span class="line">    &#123;id: <span class="string">'3'</span>, name: <span class="string">'GCP'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> option = debugElement.query(By.css(<span class="string">'#TDDSelect'</span>)).children[<span class="number">0</span>].nativeElement;</span><br><span class="line">  expect(option.textContent).toBe(<span class="string">'GCP'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : <code>&lt;select&gt;</code> 應該使用 <code>*ngFor</code> 產生 <code>&lt;option&gt;</code></p>
</blockquote>
<p>整合測試除了測試 binding 是否正確外，另外一個目的就是要驅動出 directive 的使用。</p>
<p><code>&lt;select&gt;</code> 的 <code>&lt;option&gt;</code> 有多筆資料，勢必會使用 <code>*ngFor</code> 顯示所 binding 的資料。</p>
<p>為了確認是否使用 <code>*ngFor</code>，一樣使用整合測試慣用的手法 : </p>
<blockquote>
<p>建立 stub，並測試 stub</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">component.clouds = [</span><br><span class="line">  &#123;id: <span class="string">'3'</span>, name: <span class="string">'GCP'</span>&#125;</span><br><span class="line">];</span><br><span class="line">fixture.detectChanges();</span><br></pre></td></tr></table></figure>
<p>建立 <code>component.clouds</code> 的 stub，並加上 <code>fixture.detectChanges()</code> 將假資料反映到 HTML 上。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> option = debugElement.query(By.css(<span class="string">'#TDDSelect'</span>)).children[<span class="number">0</span>].nativeElement;</span><br></pre></td></tr></table></figure>
<p>由 <code>debugElement.query(By.css(&#39;#TDDSelect&#39;))</code> 先抓到 <code>&lt;select&gt;</code>，由於目前 stub 只有一筆，故取其 <code>children</code> 陣列的第 <code>0</code> 筆資料即可，並取其 <code>nativeElement</code>。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect<span class="comment">(option.textContent)</span>.toBe<span class="comment">('GCP')</span>;</span><br></pre></td></tr></table></figure>
<p>期望其 <code>textContent</code> 為 stub 的 <code>GCP</code>。</p>
<h3 id="triggerEventHandler()">triggerEventHandler()</h3><p>44 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'selectedId'</span> field on <span class="string">'ngModel'</span> directive`, () =&gt; &#123;</span><br><span class="line">  debugElement.query(By.css(<span class="string">'#TDDSelect'</span>)).triggerEventHandler(<span class="string">'change'</span>, &#123;target: &#123;value: <span class="string">'2'</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">  expect(component.selectedId).toBe(<span class="string">'2'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : <code>ngModel</code> 應該使用 <code>selectedId</code> field</p>
</blockquote>
<p><code>ngModel</code> 就是要將 HTML element 直接綁定到 field，因此最重要的就是測試有沒有綁定到正確的 field。</p>
<p>Two-way binding 的重點在於當 HTML 改變時，class 的 field 會自動跟著改變，因此我們測試的手法就是改變 HTML，並測試 field 是否跟著 HTML 變化。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debugElement.query(By.css(<span class="string">'#TDDSelect'</span>)).triggerEventHandler(<span class="string">'change'</span>, &#123;target: &#123;value: <span class="string">'2'</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>
<p>在整合測試時，我們慣用 <code>triggerEventHandler()</code> 去觸發 event，由於 DOM 的 <code>change</code> event 會觸發 <code>ngModelChange</code> event，因此我們使用 <code>triggerEventHandler()</code> 去觸發 <code>change</code> event。</p>
<p>我們對 <code>&lt;select&gt;</code> 做任何選擇的 value 值，會由 <code>change()</code> 的第 2 個參數的 <code>$event.target.value</code> 代入。</p>
<p>因此我們要準備 <code>{target: {value: &#39;2&#39;}}</code> 這個 stub，並測試 field 值否為此 stub，若相等，則表示 <code>ngModel</code> 有綁定到正確的 field。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(component.selectedId).toBe(<span class="string">'2'</span>);</span><br></pre></td></tr></table></figure>
<p>期望 <code>component.selectedId</code> 為 stub 的 <code>2</code>。</p>
<h3 id="dispatchEvent()">dispatchEvent()</h3><p>44 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'selectedId'</span> field on <span class="string">'ngModel'</span> directive`, () =&gt; &#123;</span><br><span class="line">  htmlElement = debugElement.query(By.css(<span class="string">'#TDDSelect'</span>)).nativeElement;</span><br><span class="line">  (&lt;HTMLSelectElement&gt;htmlElement).value = <span class="string">'2'</span>;</span><br><span class="line">  htmlElement.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'change'</span>));</span><br><span class="line"></span><br><span class="line">  expect(component.selectedId).toBe(<span class="string">'2'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : <code>ngModel</code> 應該使用 <code>selectedId</code> field</p>
</blockquote>
<p>使用 <code>triggerEventHandler()</code> 方式雖然可行，但我們發現其第 2 個參數的 stub : <code>{target: {value: &#39;2&#39;}}</code> 有點小複雜，且必須很了解 <code>$event</code> 物件的結構。</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;HTMLSelectElement&gt;htmlElement).<span class="keyword">value</span> = <span class="string">'2'</span>;</span><br></pre></td></tr></table></figure>
<p>當 <code>&lt;select&gt;</code> 的選擇改變時，事實上就是改變其 <code>value</code> 值。</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htmlElement.dispatchEvent(<span class="keyword">new</span> <span class="keyword">Event</span>(<span class="string">'change'</span>));</span><br></pre></td></tr></table></figure>
<p>使用 <code>dispatchEvent()</code> 觸發 event，傳入 <code>Event</code> 物件，並以 evetn 名稱傳入 <code>Event</code>。</p>
<blockquote>
<p><code>triggerEventHandler()</code> 與 <code>dispatchEvent()</code> 都是觸發 event，只是 <code>triggerEventHandler()</code> 是從 DOM 的方式去觸發 event，而 <code>dispatchEvent()</code> 是從 Angular 的方式觸發 event，兩種方式都可以，實務上建議使用 <code>dispatchEvent()</code>，不用了解 DOM 的 <code>$event</code> 物件的結構，也比較物件導向。</p>
</blockquote>
<p>52 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(`should use <span class="string">'selectedId'</span> field`, () =&gt; &#123;</span><br><span class="line">  component.selectedId = <span class="string">'1'</span>;</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  htmlElement = debugElement.query(By.css(<span class="string">'p'</span>)).nativeElement;</span><br><span class="line">  expect(htmlElement.textContent).toBe(<span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : <code>&lt;p&gt;</code> 應該使用 <code>selectedId</code> field</p>
</blockquote>
<p>因為目前是整合測試，而 <code>AppComponent</code> 的 <code>selectedId</code> 根本還沒實現，理論上也應該使用 <code>spyOn()</code>，但可惜 Jasmine 的 <code>spyOn()</code> 並沒有支援 field，只能使用最基本的方式：<code>建立 stub，並測試 stub</code> 。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select008.png" alt="select008"></p>
<p>因為還沒實作，整合測試是預期的 <code>紅燈</code>。</p>
<h2 id="Unit_Test_(紅燈)">Unit Test (紅燈)</h2><hr>
<p>測試案例 :</p>
<blockquote>
<ol>
<li>Class 應該有 <code>clouds</code> field 且初始值為 <code>AWS</code>、<code>Azure</code> 與 <code>Aliyun</code></li>
<li>Class 應該有 <code>selectedId</code> field 且初始值為 <code>0</code></li>
</ol>
</blockquote>
<p><strong>src/app/app.component.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ComponentFixture, TestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DebugElement &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; By &#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'AppComponent'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;AppComponent&gt;;</span><br><span class="line">  <span class="keyword">let</span> component: AppComponent;</span><br><span class="line">  <span class="keyword">let</span> debugElement: DebugElement;</span><br><span class="line">  <span class="keyword">let</span> htmlElement: HTMLElement;</span><br><span class="line">  <span class="keyword">let</span> target: AppComponent;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">      ],</span><br><span class="line">      imports: [</span><br><span class="line">        FormsModule</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">    component = fixture.componentInstance;</span><br><span class="line">    debugElement = fixture.debugElement;</span><br><span class="line">    target = <span class="keyword">new</span> AppComponent();</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(`ATDDSelect`, () =&gt; &#123;</span><br><span class="line">    describe(`Unit Test`, () =&gt; &#123;</span><br><span class="line">      it(`should have <span class="string">'clouds'</span> field <span class="keyword">with</span> [<span class="string">'AWS'</span>, <span class="string">'Azure'</span>, <span class="string">'Aliyun'</span>]`, () =&gt; &#123;</span><br><span class="line">        expect(target.clouds).toEqual([</span><br><span class="line">          &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">          &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">          &#123;id: <span class="string">'2'</span>, name: <span class="string">'Aliyun'</span>&#125;</span><br><span class="line">        ]);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      it(`should have <span class="string">'selectedId'</span> field <span class="keyword">with</span> <span class="string">'0'</span>`, () =&gt; &#123;</span><br><span class="line">        expect(target.selectedId).toBe(<span class="string">'0'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>34 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'clouds'</span> field <span class="keyword">with</span> [<span class="string">'AWS'</span>, <span class="string">'Azure'</span>, <span class="string">'Aliyun'</span>]`, () =&gt; &#123;</span><br><span class="line">  expect(target.clouds).toEqual([</span><br><span class="line">    &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'2'</span>, name: <span class="string">'Aliyun'</span>&#125;</span><br><span class="line">  ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : Class 應該有 <code>clouds</code> field 且初始值為 <code>AWS</code>、<code>Azure</code> 與 <code>Aliyun</code></p>
</blockquote>
<p>目前需求只有 <code>3</code> 筆資料，直接 <code>expect().toEqual()</code> 是否為預期陣列。</p>
<blockquote>
<p>Q : <code>toBe()</code> 與 <code>toEqual()</code> 有什麼差別 ?</p>
</blockquote>
<ul>
<li><code>toBe()</code> : 比較 value</li>
<li><code>toEqual()</code> : 比較 object</li>
</ul>
<p>42 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'selectedId'</span> field as <span class="string">'0'</span>`, () =&gt; &#123;</span><br><span class="line">  expect(target.selectedId).toBe(<span class="string">'0'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>測試案例 : Class 應該有 <code>selectedId</code> field且初始值為 <code>0</code></p>
</blockquote>
<p>期望 <code>target.selectedId</code> 為 <code>0</code>。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select015.png" alt="select015"></p>
<p>因為還沒實作，單元測試是預期的 <code>紅燈</code>。</p>
<h2 id="Unit_Test_(綠燈)">Unit Test (綠燈)</h2><hr>
<blockquote>
<p>測試案例 : Class 應該有 <code>clouds</code> field 且初始值為 <code>AWS</code>、<code>Azure</code> 與 <code>Aliyun</code></p>
</blockquote>
<p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'2'</span>, name: <span class="string">'Aliyun'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clouds: Cloud[] = [</span><br><span class="line">  &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="string">'2'</span>, name: <span class="string">'Aliyun'</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>建立 <code>cloud</code> field 與設定初始陣列。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select016.png" alt="select016"></p>
<p>在 class 實作出 <code>cloud</code> field 後，Wallaby 單元測試就 <code>綠燈</code> 了。</p>
<blockquote>
<p>測試案例 : Class 應該有 <code>selectedId</code> field 且初始值為 <code>0</code></p>
</blockquote>
<p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="string">'0'</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'1'</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="string">'2'</span>, name: <span class="string">'Aliyun'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  selectedId = <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectedId = <span class="string">'0'</span>;</span><br></pre></td></tr></table></figure>
<p>建立 <code>selected</code> field 與設定初始值為 <code>0</code>。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select009.png" alt="select009"></p>
<p>在 class 實作出 <code>selectedId</code> field 後，Wallaby 單元測試就 <code>綠燈</code> 了。</p>
<h2 id="Integration_Test_(綠燈)">Integration Test (綠燈)</h2><hr>
<blockquote>
<p>測試案例 : <code>&lt;select&gt;</code> 應該使用 <code>*ngFor</code> 產生 <code>&lt;option&gt;</code></p>
</blockquote>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"TDDSelect"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>*ngFor</code> 根據 <code>clouds</code> field 產生 <code>&lt;option&gt;</code>。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select013.png" alt="select013"></p>
<p>使用 <code>*ngFor</code> 之後，Wallaby 整合測試就 <code>綠燈</code> 了。</p>
<blockquote>
<p>測試案例 : <code>ngModel</code> 應該使用 <code>selectedId</code> field</p>
</blockquote>
<p><strong>src/app/app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p><code>ngModel</code> directive 需要使用 <code>FormsModule</code>，而 Angular CLI 預設沒有載入，必須手動加上。</p>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"TDDSelect"</span> [(<span class="attribute">ngModel</span>)]=<span class="value">"selectedId"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>&lt;select&gt;</code> 加上 <code>[(ngModel)]=&quot;selectedId&quot;</code>。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select010.png" alt="select010"></p>
<p>在 HTML 實作 <code>ngModel</code> 綁定到 <code>selectedId</code> field 之後，Wallaby 整合測試就 <code>綠燈</code>了。</p>
<p><strong>src/app/app.component.html</strong></p>
<blockquote>
<p>測試案例 : <code>&lt;p&gt;</code> 內應該使用 <code>selectedId</code> field</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"TDDSelect"</span> [(<span class="attribute">ngModel</span>)]=<span class="value">"selectedId"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; selectedId &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>&lt;p&gt;</code> 內加上 <code>selectedId</code>。</p>
<p><img src="/images/angular/angular-ngmodel-testing/select012.png" alt="select012"></p>
<p>在 HTML 實作 <code>&lt;p&gt;</code> 內的 <code>selectedId</code> 綁定之後，Wallaby 的整合測試就全部 <code>綠燈</code> 了。</p>
<h2 id="Acceptance_Test_(綠燈)">Acceptance Test (綠燈)</h2><hr>
<p>測試案例</p>
<blockquote>
<ol>
<li>應該有 <code>1</code> 個下拉選單</li>
<li>下拉選單應該有 <code>3</code> 個選項</li>
<li>選擇 <code>AWS</code> ，下方應該出現 <code>0</code></li>
<li>選擇 <code>Azure</code> 時，下方應該出現 <code>1</code></li>
<li>選擇 <code>Aliyun</code> 時，下方應該出現 <code>2</code></li>
</ol>
</blockquote>
<p><img src="/images/angular/angular-ngmodel-testing/select014.png" alt="select014"></p>
<p>整合測試 <code>綠燈</code> 後，最後再跑一次驗收測試確認為 <code>綠燈</code>。</p>
<h2 id="重構">重構</h2><hr>
<p>因為 class 沒有邏輯，所以不需要重構。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>ngModel</code> 整合測試的關鍵在於測試 <code>ngModel</code> 有沒有綁定到正確的 field，因此建立 stub，並觸發 DOM 的 <code>change</code> event ，測試 field 值是否為 stub，則完成 <code>ngModel</code> 的整合測試。</li>
<li>在整合測試觸發 event 時，可以使用 <code>triggerEventHandler()</code> 或 <code>dispatchEvent()</code>，實務上建議使用 <code>dispatchEvent()</code>，較物件導向。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://medium.com/@sevcsik" target="_blank" rel="external">Andras Sevcsik</a>, <a href="https://medium.com/@sevcsik/testing-ngmodel-in-angular-2-d9c79923f973" target="_blank" rel="external">Testing ngModel in Angular 2</a></p>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG43ATDDngModel" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 ATDD 驅動出 ngModel]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入淺出 Angular 的 Two-Way Binding]]></title>
    <link href="http://oomusou.io/angular/angular-ngmodel/"/>
    <id>http://oomusou.io/angular/angular-ngmodel/</id>
    <published>2017-08-15T12:23:43.000Z</published>
    <updated>2017-08-23T04:33:17.000Z</updated>
    <content type="html"><![CDATA[<p>Interpolation binding 與 property binding 都當 class 的 field 有變動時，會自動反應到 class 的 field，若 HTML 有任何變動也能反應到 class 的 field，這就是 two-way binding 了。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular 4.3</p>
<h2 id="One-Way_Binding">One-Way Binding</h2><hr>
<p>在 <a href="http://oomusou.io/angular/angular-select/">如何使用 Angular 實作下拉選單?</a> 一文中，我們使用了 HTML template reference varible 方式，也使用 DOM event 方式，無論哪種方法，使用的是 one-way binding 的技術。</p>
<p><img src="/images/angular/angular-ngmodel/twoway000.svg" alt="twoway000"></p>
<ol>
<li><strong>Interpolation Binding</strong>：當 class 的 field 資料改變，HTML 會自動改變</li>
<li><strong>Event Binding</strong>：當 HTML 資料改變，發動 event，由 class 的 method 去修改  field</li>
</ol>
<h2 id="Two-Way_Binding">Two-Way Binding</h2><hr>
<p><img src="/images/angular/angular-ngmodel/twoway001.svg" alt="twoway001"></p>
<ol>
<li><strong>Two Way Binding</strong>：資料不用透過 method 修改，當 HTML 改變時，field 會跟著改變；且當 field 改變時，HTML 也會隨之改變。</li>
</ol>
<h2 id="土炮_Two-Way_Binding">土炮 Two-Way Binding</h2><hr>
<p>Two-way binding 理念很棒，利用既有的 property binding、event binding、interpolation binding，該如何寫出 two-way binding 呢？</p>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"TDDSelect"</span> [<span class="attribute">value</span>]=<span class="value">"selectedId"</span> (<span class="attribute">change</span>)=<span class="value">"selectedId = $event.target.value"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; selectedId &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[value]="selectedId"</span><br></pre></td></tr></table></figure>
<p>使用 property binding 將 <code>value</code> 直接綁定到 <code>selectedId</code> field，也就是當 <code>selectedId</code> field  有任何修改，都會反應到 <code>selectedId</code> 的 <code>value</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(change)="selectedId = $event.target.value"</span><br></pre></td></tr></table></figure>
<p>使用 event binding 將 <code>change</code> event 直接綁定到雙引號內的 statement，也就是將 <code>$event.target.value</code> 直接指定給 <code>selectedId</code> field。</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">selectedId</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>使用 interpolation binding 當 <code>selectedId</code> field 有任何變動，HTML 會自動跟著變化。</p>
<blockquote>
<p>透過 property binding 與 event binding 的組合，當 HTML 改變時，field 會跟著改變；且當 field 改變時，HTML 也會隨之改變。</p>
</blockquote>
<p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  selectedId = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="number">0</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">1</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">2</span>, name: <span class="string">'Aliyun'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Class 部份完全不用任何 method 幫忙，只剩下 field 部分。</p>
<blockquote>
<p>這樣就完成了我們土炮的 two-way binding 了。</p>
</blockquote>
<h2 id="使用_ngModel">使用 ngModel</h2><hr>
<p>雖然土炮的方式可行，Angular 為了讓我們更方便，特別設計了 <code>ngModel</code> directive，讓我們使用更簡單的語法就能完成 two-way binding。</p>
<p><strong>src/app/app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p><code>ngModel</code> directive 需要使用 <code>FormsModule</code>，而 Angular CLI 預設沒有載入，必須手動加上。</p>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"TDDSelect"</span> [<span class="attribute">ngModel</span>]=<span class="value">"selectedId"</span> (<span class="attribute">ngModelChange</span>)=<span class="value">"selectedId = $event"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; selectedId &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>[ngModel]=&quot;selectedId&quot;</code> ：使用 property binding，將 <code>selectedId</code> field 綁定到 <code>ngModel</code> directive</li>
<li><code>(ngModelChange)=&quot;selectedId = $event&quot;</code>：使用 event binding，當 <code>ngModelChange</code> event 時，執行 <code>selectedId = $event</code></li>
</ol>
<p>由 <code>value</code> attribute 換 <code>ngModel</code> directive 較無感，但由 <code>input</code> event 換 <code>ngModelChange</code> event 就比較有感了，因為 <code>$event.target.value</code> 換成 <code>$event</code> 更為精簡。</p>
<blockquote>
<p>這也意味著 Angular 內部會自己將處理 <code>$event.target.value</code>。</p>
</blockquote>
<p>若仔細去看，會發現 <code>(ngModelChange)</code> 與 <code>$event</code> 是贅字，因此可以再次簡化。</p>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"TDDSelect"</span> [(<span class="attribute">ngModel</span>)]=<span class="value">"selectedId"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; selectedId &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>(ngModelChange)</code> 與 <code>$event</code> 再次被簡化，將 <code>()</code> 與 <code>[]</code> 合一，就變成了 <code>[(ngModel)]=&quot;selectedId&quot;</code> 了。</p>
<p><code>[()]</code> 語法稱為 <strong>Banana in a Box</strong>，將 property binding 與 event binding 合而為一。</p>
<h2 id="Recap">Recap</h2><hr>
<ol>
<li>原本的 <code>value</code> attribute 抽象化成 <code>ngModel</code> directive。</li>
<li>原本的 <code>change</code> event 抽象化成 <code>ngModelChange</code> event，<code>change</code> event 會觸發 <code>ngModelChange</code> event </li>
<li>原本的 <code>$event.target.value</code> 簡化成 <code>$event</code>，Angular 會在內部處理</li>
<li><code>()</code> 與 <code>[]</code> 合一成為 <code>[()]</code></li>
</ol>
<h2 id="ngModel_內部運行機制">ngModel 內部運行機制</h2><hr>
<p><img src="/images/angular/angular-ngmodel/twoway002.svg" alt="twoway002"></p>
<ol>
<li>在 HTML 修改觸發 DOM 的 <code>change</code> event </li>
<li><code>change</code> event 觸發了 Angular 的 <code>ngModelChange</code> event</li>
<li>將 <code>$event</code> 傳給 <code>selectedId</code> field</li>
<li><code>ControlValueAccessor</code> 將 <code>$event.target.value</code> 指定給 <code>selectedId</code> field</li>
<li><code>selectedId</code> field 被修改，引發 interpolation binding 自動更新 HTML</li>
</ol>
<blockquote>
<p>步驟 4 就是將 <code>$event.target.value</code> 轉成 field 的黑魔法所在</p>
</blockquote>
<h2 id="是否該使用_ngModel？">是否該使用 ngModel？</h2><hr>
<p>Two-way binding 是 AngularJS 的招牌菜，但因為底層使用 dirty check 方式，只要頁面 two-way binding 用得過多，效率就會明顯變慢，因此 ReactJS 改用 one-way binding ，在效能上完全打趴 AngularJS。</p>
<p>在 Angular 2 一開始時，由於 AngularJS 的經驗與 ReatJS的影響，的確聽到不少反對再用 Two-way binding 的聲音，不過深入了解之後，會發現在 Angular 的<code>[(ngModel)]</code> 雖然表面上看起來是 two-way binding，但其實內部用的依然是 one-way binding，也就是 <code>[(ngModel)]</code> 只是個 syntax sugar 而已，因此可以放心大膽使用 <code>[(ngModel)]</code>，不用再擔心效能問題。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>ngModel</code> 在實務上非常好用，語法也很精簡，但 <strong>Banana in a Box</strong> 語法很特殊，一般人都是背下來，經由本文的推導，應該更能體會 <code>[()]</code> 語法的由來。</li>
<li><code>ngModel</code> 雖然表面上看起來是 two-way binding，但底層用的仍然是 one-way binding，因此沒有效能上的問題，請放心使用。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://angular.io" target="_blank" rel="external">Angular</a>, <a href="https://angular.io/guide/template-syntax#two-way-binding---" target="_blank" rel="external">Two-way binding</a><br><a href="https://angular.io" target="_blank" rel="external">Angular</a>, <a href="https://angular.io/guide/template-syntax#ngmodel---two-way-binding-to-form-elements-with-ngmodel" target="_blank" rel="external">NgModel</a><br><a href="http://thoughtram.io" target="_blank" rel="external">Throughtram</a>, <a href="https://blog.thoughtram.io/angular/2016/10/13/two-way-data-binding-in-angular-2.html#understanding-ngmodel" target="_blank" rel="external">Two-Way Data Binding in Angular</a><br><a href="https://blog.kevinyang.net" target="_blank" rel="external">CK’s Notepad</a>, <a href="https://blog.kevinyang.net/2017/08/14/angular-two-way-binding/" target="_blank" rel="external">[Angular] Two-way Binding 的運作方式</a></p>
]]></content>
    <summary type="html">
    <![CDATA[以推導的方式解釋 Two-Way Binding]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 Jasmine 的 Spy]]></title>
    <link href="http://oomusou.io/jasmine/jasmine-spy/"/>
    <id>http://oomusou.io/jasmine/jasmine-spy/</id>
    <published>2017-08-13T12:23:43.000Z</published>
    <updated>2017-08-13T06:43:13.000Z</updated>
    <content type="html"><![CDATA[<p>Jasmine 是個 mock 與 assertion 合一的 testing framework，語法優美，寫起來程式碼的可讀性很高，重點是不複雜，學習曲線平緩，Spy 為 Jasmine 最重要的部分，本文針對最常在 Angular 使用的 Spy 做整理。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Jasmine 2.6.2<br>Angular 4.3</p>
<h2 id="建立_Spy">建立 Spy</h2><hr>
<h3 id="spyOn()">spyOn()</h3><blockquote>
<p>spyOn<t>(object: T, method: keyof T): Spy</t></p>
</blockquote>
<p>對於 class 的 method 建立 Spy。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() method`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(spy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>測試在 HTML <code>getTitle()</code> 是否 binding 正確。</p>
<h3 id="spyOnProperty()">spyOnProperty()</h3><blockquote>
<p>spyOnProperty<t>(object:T, property: keyof T, accessType: string): Spy</t></p>
</blockquote>
<p>對於 class 的 property 建立 Spy。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use title <span class="keyword">in</span> HTML`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOnProperty(component, <span class="string">'title'</span>, <span class="string">'get'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(spy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>測試在 HTML <code>title</code> 是否 binding 正確。</p>
<h3 id="jasmine-createSpy()">jasmine.createSpy()</h3><blockquote>
<p>createSpy(name: string, originalFn?: Function): Spy</p>
</blockquote>
<p>對於 function 或 arrow function 建立 Spy。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should call arrow <span class="function"><span class="keyword">function</span>`, (<span class="params"></span>) =&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> spy = jasmine.createSpy(<span class="string">'logistics'</span>);</span><br><span class="line">  target.calculateFee(<span class="literal">null</span>, spy);</span><br><span class="line"></span><br><span class="line">  expect(spy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>測試 function 或 arrow function 是否被呼叫。</p>
<blockquote>
<p>若要建立在 class 內的假 method，要用 <code>spyOn()</code>；若要建立沒有 class 的假 function 或 arrow function，則要使用 <code>jasmine.createSpy()</code>。</p>
</blockquote>
<h2 id="Spy#and">Spy#and</h2><hr>
<h3 id="returnValue()">returnValue()</h3><blockquote>
<p>returnValue(val: any): Spy</p>
</blockquote>
<p>建立假 function 的假回傳值。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle()`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>).and.returnValue(<span class="string">'My Todos'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  htmlElement = debugElement.query(By.css(<span class="string">'h1'</span>)).nativeElement;</span><br><span class="line">  expect(htmlElement.textContent).toBe(<span class="string">'My Todos'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>spyOn()</code> 搭配 <code>returnValue()</code> 回傳假值，然後測試結果是否為假值。實務上有 2 個場景會使用 <code>returnValue()</code>。</p>
<ol>
<li>單元測試時，想要隔離相依物件，使用 <code>returnValue()</code> 建立假回傳值。</li>
<li>整合測試時，想要測試<strong>關係</strong>，不是測試結果，藉由假資料測試 function 是否被呼叫到。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle()`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(spy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>若只是測試關係，那有更簡單的寫法，使用 <code>spyOn()</code> 建立 Spy 之後，測試 Spy 的 <code>toHaveBeenCalled()</code> 即可，不需使用 <code>returnValue()</code>。</p>
<h3 id="callFake()">callFake()</h3><blockquote>
<p>callFake(fn: Function): Spy</p>
</blockquote>
<p>建立假 function 的假實作。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() and result is <span class="string">'my todos'</span>`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>).and.callFake(() =&gt; <span class="string">'My Todos'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  htmlElement = debugElement.query(By.css(<span class="string">'h1'</span>)).nativeElement;</span><br><span class="line">  expect(htmlElement.textContent).toBe(<span class="string">'My Todos'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>一般來說，<code>spyOn()</code> 搭配 <code>returnValue()</code> 已經非常夠用，若你想自行建立 Fake 取代原本 function 實作，則可使用 <code>callFake()</code>。</p>
<h3 id="callThrough()">callThrough()</h3><blockquote>
<p>callThrough(): Spy</p>
</blockquote>
<p>依然使用原本 function，但會針對此 function 做 Spy 監測。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() and result is <span class="string">'todos'</span>`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>).and.callThrough();</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">   htmlElement = debugElement.query(By.css(<span class="string">'h1'</span>)).nativeElement;</span><br><span class="line">      </span><br><span class="line">  expect(htmlElement.textContent).toBe(<span class="string">'todos'</span>);</span><br><span class="line">  expect(spy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>一般我們使用了 <code>spyOn()</code> 之後，就會搭配 <code>toHaveBeenCalled()</code> 測試有沒有被呼叫到即可，若你想除了驗證<strong>關係</strong>外，還順便<strong>結果</strong>，則可搭配 <code>callThrough()</code>，此時會執行實際的 function，所以可使用 <code>toBe()</code> 測試結果，但仍然保有 Spy 功能，因此也可使用 <code>toHaveBeenCalled()</code> 測試關係。</p>
<h3 id="throwError()">throwError()</h3><blockquote>
<p>throwError(msg: string): Spy</p>
</blockquote>
<p>建立假 function 的假 error。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(`should <span class="keyword">throw</span> error on <span class="string">'getTodos()'</span> method`, () =&gt; &#123;</span><br><span class="line">  spyOn(target, <span class="string">'getTodos'</span>).and.throwError(<span class="string">'My Error'</span>);</span><br><span class="line"></span><br><span class="line">  expect(() =&gt; &#123; target.getTodos() &#125;).toThrowError(<span class="string">'My Error'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用 <code>throwError()</code> 建立假 error。</p>
<p>比較特別的是，要測試 error 時，待測 method 要放在 <code>expect()</code> 的 arrow function 內，最後用 <code>toThrowError()</code> 測試 error 是否被觸發。</p>
<h2 id="Spy#calls">Spy#calls</h2><hr>
<h3 id="any()">any()</h3><blockquote>
<p>any(): boolean</p>
</blockquote>
<p>若 Spy 被呼叫一次以上，則傳回 <code>true</code>，否則傳回 <code>false</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle()`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(spy.calls.any()).toBeTruthy();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>測試 <code>spy.calls.any()</code>，若曾被呼叫過為 <code>true</code>，否則為 <code>false</code>。</p>
<p>這種寫法等效於：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle()`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(spy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="count()">count()</h3><blockquote>
<p>count(): boolean</p>
</blockquote>
<p>傳回 Spy 被呼叫的次數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() <span class="keyword">for</span> once`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(spy.calls.count()).toBe(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>測試 <code>spy.calls.count()</code>，可精確測試 Spy 被呼叫的次數。</p>
<p>這種寫法等效於：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() <span class="keyword">for</span> once`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(spy).toHaveBeenCalledTimes(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Matcher">Matcher</h2><hr>
<h3 id="toHaveBeenCalled()">toHaveBeenCalled()</h3><blockquote>
<p>toHaveBeenCalled(): boolean</p>
</blockquote>
<p>測試 function 是否被呼叫過。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle()`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(spy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>測試 Spy 是否被呼叫過。</p>
<h3 id="toHaveBeenCalledTimes()">toHaveBeenCalledTimes()</h3><blockquote>
<p>toHaveBeenCalledTimes(expected: number): boolean</p>
</blockquote>
<p>測試 function 是否被呼叫過 n 次。 </p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() <span class="keyword">for</span> once`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(spy).toHaveBeenCalledTimes(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>測試 Spy 是否被呼叫過 <code>1</code> 次。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Jasmine 的 Spy 算是 Mock 與 Spy 的合體，提供單元測試與整合測試夠用的武器，在單元測試可以藉由 Spy 隔離相依物件，在整合測試可以藉由 Spy 驗證物件之間的關係。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://keenwon.com" target="_blank" rel="external">KeenWon</a>, <a href="http://keenwon.com/1218.html" target="_blank" rel="external">Javascript测试框架Jasmine (五)：Spies</a><br><a href="https://github.com/jasmine/jasmine" target="_blank" rel="external">Jasmine</a>, <a href="https://jasmine.github.io/2.6/introduction.html" target="_blank" rel="external">Jasmine Introduction</a></p>
]]></content>
    <summary type="html">
    <![CDATA[整理最常用的 Jasmine Spy]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Jasmine" scheme="http://oomusou.io/tags/Jasmine/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 Test Double、Dummy、Fake、Stub 、Mock 與 Spy]]></title>
    <link href="http://oomusou.io/jasmine/jasmine-test-double/"/>
    <id>http://oomusou.io/jasmine/jasmine-test-double/</id>
    <published>2017-08-12T12:23:43.000Z</published>
    <updated>2017-08-12T13:42:49.000Z</updated>
    <content type="html"><![CDATA[<p>初學者在學習測試時，常被一些測試的專有名詞迷惑，而且常常不同 framework 對同一個名詞的定義還不一樣。</p>
<p>本文以 Martin Fowler 在 <a href="https://martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">TestDouble</a> 一文的定義為標準，並搭配 Jasmine 解釋。</p>
<a id="more"></a>
<h2 id="Test_Double">Test Double</h2><hr>
<blockquote>
<p>Test Double is a generic term for any case where you replace a production object for testing purpose. There are various kinds of double list : Dummy、Fake、Stub、Mock and Spy.</p>
</blockquote>
<p>白話：</p>
<p>Test Double 為<strong>假物件</strong>的統稱，Dummy、Fake、Stub、Mock 與 Spy 都算 Test Double。</p>
<blockquote>
<p>在 <a href="https://angular.io/guide/testing" target="_blank" rel="external">Angular Testing</a> 中，也是以 Test Double 統稱假物件。</p>
</blockquote>
<h2 id="Dummy">Dummy</h2><hr>
<blockquote>
<p>Objects are passed around but never actually used. Usually they are just used to fill parameter lists.</p>
</blockquote>
<p>白話：測試時為了通過編譯而傳進假物件給 function，但這個假物件在測試中從來都沒被使用過。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(`should have getTitle() to <span class="keyword">return</span> <span class="string">'todos'</span>`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dummy = &#123;</span><br><span class="line">    lang: <span class="string">'en-us'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> target = <span class="keyword">new</span> TitleComponent();  </span><br><span class="line">  expect(target.getTitle(dummy)).toBe(<span class="string">'todos'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>getTitle()</code> 的參數要求傳入一物件，描述其顯示語系，不過目前語系並不是此次單元測試的重點，也就是邏輯根本不會跑到語系的部分。</p>
<p>但因為 <code>getTitle()</code> 的參數要求，只好建立 Dummy 假物件滿足編譯要求。</p>
<blockquote>
<p>若參數允許 <code>null</code>，實務上也常常直接傳入 <code>null</code> 作為 Dummy。</p>
</blockquote>
<h2 id="Fake">Fake</h2><hr>
<blockquote>
<p>Objects actually have working implementations, but usually take some shortcut which makes them not suitable for production.</p>
</blockquote>
<p>白話：測試時自己重新實作 function 取代原 function。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle()`, () =&gt; &#123;</span><br><span class="line">  spyOn(component, <span class="string">'getTitle'</span>).and.callFake(() =&gt; <span class="string">'fake'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  htmlElement = debugElement.query(By.css(<span class="string">'h1'</span>)).nativeElement;</span><br><span class="line">  </span><br><span class="line">  expect(htmlElement.textContent).toBe(<span class="string">'fake'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>spyOn()</code> 提供 <code>and.callFake()</code>，可以對既有的 function 加以重新實作，在測試時，跑的就是假 function，而非原本的 function。</p>
<h2 id="Stub">Stub</h2><hr>
<blockquote>
<p>Stub provide canned answers to calls made during the test.</p>
</blockquote>
<p>白話：測試時建立包含假資料的假物件，並測試假資料。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(`should have <span class="string">'onChange()'</span> to make <span class="string">'selectedId'</span> as selected value`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> stub = &lt;HTMLSelectElement&gt;&#123;</span><br><span class="line">    <span class="string">'value'</span>: <span class="string">'1'</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> target = <span class="keyword">new</span> AppComponent();</span><br><span class="line">  target.onChange(stub);</span><br><span class="line">  expect(target.selectedId).toBe(<span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>onChange()</code> 要求傳入 <code>HTMLSelectElement</code> 物件，且測試也會用到 <code>HTMLSelectElement</code> 物件，此時可傳入包含假資料的 Stub 假物件，並在 <code>expect()</code> 測試回傳是否為 Stub 物件的假資料。</p>
<blockquote>
<p>Dummy 與 Stub 的差異在於：Dummy 只是個花瓶，不會真的拿來測試，但會拿 Stub 的假資料來測試。</p>
</blockquote>
<h2 id="Mock">Mock</h2><hr>
<blockquote>
<p>Mocks are pre-programmed with expectations which form a specification of the calls they are expected to receive. </p>
</blockquote>
<p>白話：測試時不在乎 function 回傳值，只在乎該 function 有沒有被呼叫過。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use <span class="string">'onChange()'</span> on <span class="string">'change'</span> event`, () =&gt; &#123;</span><br><span class="line">  spyOn(component, <span class="string">'onChange'</span>);</span><br><span class="line">  debugElement.query(By.css(<span class="string">'#TDDSelect'</span>)).triggerEventHandler(<span class="string">'change'</span>, <span class="literal">null</span>);</span><br><span class="line">  </span><br><span class="line">  expect(component.onChange).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在測試時使用 <code>triggerEventHandler()</code> 觸發了 <code>change</code> event，因此我們要測試的是被 Mock 的 <code>onChange()</code> method 是否有被執行過，因此在 <code>expect()</code> 使用了 <code>toHaveBeenCalled()</code> 測試。</p>
<blockquote>
<p>Jasmine 這裏的 Spy 實質上是個 Mock，只是 Jasmine 用了 Spy 這個單字。</p>
</blockquote>
<h2 id="Spy">Spy</h2><hr>
<blockquote>
<p>Spies are stubs that also record some information based on how they were called. </p>
</blockquote>
<p>白話：測試時當 Stub 與 Mock 無法滿足測試時，自己寫 Spy 埋入一段測試邏輯。</p>
<p>實務上 Jasmine 提供的方法已經相當夠用，不太需要自己埋測試邏輯，不過當要 mock 沒有 class 的 function 或 arrow function 時，就會用到 Spy。</p>
<p><strong>shipping.service.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ShippingService &#123;</span><br><span class="line">  calculateFee(weight: <span class="built_in">number</span>, logistics: (<span class="built_in">number</span>) =&gt; <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> logistics(weight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>計算運費，因為依賴反轉，我們希望 user 自己提供計算運費的邏輯，而非寫死在底層。</p>
<p><strong>shipping.service.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(`should call arrow <span class="function"><span class="keyword">function</span>`, (<span class="params"></span>) =&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> spy = jasmine.createSpy(<span class="string">'logistics'</span>);</span><br><span class="line">  </span><br><span class="line">  target.calculateFee(<span class="literal">null</span>, spy);</span><br><span class="line"></span><br><span class="line">  expect(spy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Service 的單元測試，因為運算邏輯由 user 提供，因此只要測試到使用到 arrow function 即可。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spy = jasmine.createSpy(<span class="string">'logistics'</span>);</span><br></pre></td></tr></table></figure>
<p>使用 <code>jasmine.createSpy()</code> 建立了 arrow function 的 Spy。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.calculateFee(<span class="literal">null</span>, spy);</span><br></pre></td></tr></table></figure>
<p>執行 service 的 <code>calculateFee()</code> method，因為不是要測試結果，因此 <code>weight</code> 參數並不重要，第 1 個參數傳入 <code>null</code> 即可，此時的 <code>null</code> 就是 Dummy。</p>
<p>第 2 個參數就是我們要測試的重點，判斷是否有被呼叫到，因此傳入 Spy。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(spy).toHaveBeenCalled();</span><br></pre></td></tr></table></figure>
<p>判斷 Spy 是否有被呼叫到。</p>
<blockquote>
<p>實務上會自己建立 Spy mock 沒有 class 的 function 或 arrow function。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>一般人習慣稱為 Mock，但實際上 Test Double 才是觀念上的統稱。</li>
<li>Dummy 主要是提供測試用不到的假資料，但 Stub 是測試用得到的假資料。</li>
<li>Jasmine 將 Mock 與 Spy 統稱為 Spy，不過嚴格來說，Mock 與 Spy 觀念上仍然不同。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://angular.io/" target="_blank" rel="external">Angular</a>,  <a href="https://angular.io/guide/testing" target="_blank" rel="external">Angular Testing</a><br><a href="https://martinfowler.com/" target="_blank" rel="external">Martin Fowler</a>,  <a href="https://martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">TestDouble</a><br><a href="https://martinfowler.com/" target="_blank" rel="external">Martin Fowler</a>,  <a href="https://martinfowler.com/articles/mocksArentStubs.html" target="_blank" rel="external">Mocks Aren’t Stubs</a><br><a href="https://dev.to/milipski" target="_blank" rel="external">Michal Lipski</a>, <a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs" target="_blank" rel="external">Test Doubles - Fakes, Mocks and Stubs</a><br><a href="https://dotblogs.com.tw/hatelove/" target="_blank" rel="external">91</a>, <a href="https://dotblogs.com.tw/hatelove/2012/11/29/learning-tdd-in-30-days-day7-unit-testing-stub-mock-and-fake-object-introduction" target="_blank" rel="external">Stub, Mock, Fake 簡介</a></p>
]]></content>
    <summary type="html">
    <![CDATA[釐清假資料的定義]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Jasmine" scheme="http://oomusou.io/tags/Jasmine/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[COSCUP Workshop：使用 RESTful API]]></title>
    <link href="http://oomusou.io/angular/angular-coscup-api/"/>
    <id>http://oomusou.io/angular/angular-coscup-api/</id>
    <published>2017-08-06T12:23:43.000Z</published>
    <updated>2017-08-06T01:28:53.000Z</updated>
    <content type="html"><![CDATA[<p>Angular 是前端 framework，若要讀寫後端資料庫，就要靠 RESTful API 與後端溝通。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular 4.3.3</p>
<h2 id="任務說明">任務說明</h2><hr>
<ul>
<li>實作全選功能</li>
<li>實作刪除功能</li>
<li>安裝 JSON Server</li>
<li>HTTP Request Method</li>
<li>修改 JSON 資料</li>
<li>設定 Angular Proxy</li>
<li>注入 HttpClient</li>
<li>使用 API</li>
</ul>
<h2 id="任務時間">任務時間</h2><hr>
<ul>
<li>60 分鐘</li>
</ul>
<h2 id="實作全選功能">實作全選功能</h2><hr>
<p><strong>src/app.component.html</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="keyword">class</span>=<span class="string">"toggle-all"</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> (click)=<span class="string">"toggleAll(toggleInput)"</span> #toggleInput&gt;</span><br></pre></td></tr></table></figure>
<p>將 <code>click</code> event 綁定到 <code>toggleAll()</code>，並將 <code>#toggleInput</code> 傳入 <code>toggleAll()</code>。</p>
<p><strong>src/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toggleAll(toggleInput: HTMLInputElement) &#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todos.map(todo  =&gt; &#123;</span><br><span class="line">    todo.completed = toggleInput.checked;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> todo;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>todo.completed</code> 會跟據 <code>toggleInput.checked</code> 而改變，因此使用了 <code>map()</code>，將全部的 <code>completed</code> 根據 <code>checked</code> 改變。</p>
<h2 id="實作刪除功能">實作刪除功能</h2><hr>
<p><strong>src/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"destroy"</span> (<span class="attribute">click</span>)=<span class="value">"removeTodo(todo.id)"</span>&gt;</span><span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>將 <code>click</code> event 綁定到 <code>removeTodo()</code>，並將 <code>todo.id</code> 傳入 <code>removeTodo()</code>。</p>
<p><strong>src/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todos.filter(todo =&gt; todo.id !== id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 id 刪除，也就是不等於此 id 則留下，相當於使用 <code>filter()</code>。</p>
<h2 id="安裝_JSON_Server">安裝 JSON Server</h2><hr>
<h3 id="使用_NPM_安裝">使用 NPM 安裝</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> <span class="keyword">json</span>-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure>
<p>將 JSON Server 安裝在 global 環境。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver000.png" alt="jsonserver000"></p>
<h3 id="啟動_JSON_Server">啟動 JSON Server</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$ cd MyProject</span><br><span class="line">~/MyProject$ mkdir json-<span class="keyword">server</span></span><br><span class="line">~/MyProject$ cd json-<span class="keyword">server</span></span><br><span class="line">~/MyProject/json-<span class="keyword">server</span>$ json-<span class="keyword">server</span> db.json</span><br></pre></td></tr></table></figure>
<ol>
<li>進入 <code>MyProject</code> 專案目錄</li>
<li>在專案目錄下建立 <code>json-server</code> 目錄</li>
<li>啟動 JSON Server，指定 <code>db.json</code> 為資料庫檔案</li>
</ol>
<p>若 <code>db.json</code> 檔案存在，則 JSON Server 會以此檔案為資料庫，若不存在，則會建立新的 <code>db.json</code> 檔案。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver001.png" alt="jsonserver001"></p>
<ol>
<li>建立 <code>json-server</code> 目錄</li>
<li>進入 <code>json-server</code> 目錄</li>
<li>在 <code>json-server</code> 目錄啟動 JSON Server，並將 <code>db.json</code> 檔案建立在 <code>json-server</code> 目錄下</li>
<li>JSON Server 在 <code>json-server</code> 目錄下產生 <code>db.json</code> 檔案</li>
<li><code>db.json</code> 預設已經有預設資料了</li>
<li>JSON Server 預設提供了網址可供測試</li>
</ol>
<h3 id="測試_JSON_Server">測試 JSON Server</h3><p>預設 <code>db.json</code> 已經有資料，可藉此測試 JSON Server 是否有成功啟動。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/angular/angular-coscup-api/jsonserver002.png" alt="jsonserver002"></p>
<p>使用 Postman 測試 <code>http://localhost:3000/posts</code>，確定能抓到資料。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/angular/angular-coscup-api/jsonserver003.png" alt="jsonserver003"></p>
<p>使用瀏覽器測試 <code>http://localhost:3000</code>，確定 JSON Server 內建 Web server 已經成功啟動。</p>
<p>JSON Server 支援開發中最常用的 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>PATCH</code> 與 <code>DELETE</code> 等 request method。</p>
<h2 id="HTTP_Request_Method">HTTP Request Method</h2><hr>
<h3 id="GET">GET</h3><p>用於取得 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts</span></span><br></pre></td></tr></table></figure>
<p>取得所有  <code>post</code> 資料。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver005.png" alt="jsonserver005"></p>
<ol>
<li>選擇 <code>GET</code></li>
<li>輸入 <code>http://localhost:3000/posts</code></li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳 JSON 物件陣列</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts/1</span></span><br></pre></td></tr></table></figure>
<p>取得 <code>id</code> 為 <code>1</code> 的 <code>post</code> 資料。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver006.png" alt="jsonserver006"></p>
<ol>
<li>選擇 <code>GET</code></li>
<li>輸入 <code>http://localhost:3000/posts/1</code></li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳 JSON 物件</li>
</ol>
<h3 id="POST">POST</h3><p>用於建立 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts</span></span><br></pre></td></tr></table></figure>
<p>建立新的一筆 <code>post</code> 資料。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver007.png" alt="jsonserver007"></p>
<ol>
<li>選擇 <code>POST</code></li>
<li>輸入 <code>http://localhost:3000/posts</code></li>
<li>選擇 <code>Body</code></li>
<li>選擇 <code>raw</code> 格式</li>
<li>選擇 <code>JSON (application/json)</code> 格式</li>
<li>要新增的 JSON 物件</li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳所新增的 JSON 物件，並包含 <code>id</code></li>
</ol>
<p><img src="/images/angular/angular-coscup-api/jsonserver008.png" alt="jsonserver008"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>剛剛新增的 <code>post</code> 已經寫入 <code>db.json</code></li>
</ol>
<h3 id="PUT">PUT</h3><p>用於更新完整 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts/2</span></span><br></pre></td></tr></table></figure>
<p>更新 <code>id</code> 為 <code>2</code> 的完整 <code>post</code> 資料。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver009.png" alt="jsonserver009"></p>
<ol>
<li>選擇 <code>PUT</code></li>
<li>輸入 <code>http://localhost:3000/posts/2</code></li>
<li>選擇 <code>Body</code></li>
<li>選擇 <code>raw</code> 格式</li>
<li>選擇 <code>JSON (application/json)</code> 格式</li>
<li>要更新的 JSON 物件 (不用含 <code>id</code>，要包含全部欄位)</li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳整筆 JSON 物件，並包含 <code>id</code></li>
</ol>
<p><img src="/images/angular/angular-coscup-api/jsonserver010.png" alt="jsonserver010"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>剛剛更新的 <code>post</code> 已經寫入 <code>db.json</code></li>
</ol>
<blockquote>
<p>使用 <code>PUT</code> 要小心，他是將整個 JSON 物件寫入原來的 <code>id</code>，也就是說原本有 <code>3</code> 個欄位，若 <code>PUT</code> 時的 JSON 物件只有 2 個欄位，則 <code>PUT</code> 後就只剩下 <code>2</code> 個欄位。</p>
</blockquote>
<h3 id="PATCH">PATCH</h3><p>用於更新部分 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts/2</span></span><br></pre></td></tr></table></figure>
<p>更新 <code>id</code> 為 <code>2</code> 的部分 <code>post</code> 資料。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver011.png" alt="jsonserver011"></p>
<ol>
<li>選擇 <code>PUT</code></li>
<li>輸入 <code>http://localhost:3000/posts/2</code></li>
<li>選擇 <code>Body</code></li>
<li>選擇 <code>raw</code> 格式</li>
<li>選擇 <code>JSON (application/json)</code> 格式</li>
<li>要更新的 JSON 物件 (不用含 <code>id</code>，不用包含全部欄位)</li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳整筆 JSON 物件，並包含 <code>id</code></li>
</ol>
<p><img src="/images/angular/angular-coscup-api/jsonserver012.png" alt="jsonserver012"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>剛剛更新的 <code>post</code> 已經寫入 <code>db.json</code>，且只更新 <code>1</code> 個欄位資料。</li>
</ol>
<h3 id="DELETE">DELETE</h3><p>用於刪除 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts/2</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/angular/angular-coscup-api/jsonserver013.png" alt="jsonserver013"></p>
<ol>
<li>選擇 <code>DELETE</code></li>
<li>輸入 <code>http://localhost:3000/posts/2</code></li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳空的 JSON 物件</li>
</ol>
<p><img src="/images/angular/angular-coscup-api/jsonserver019.png" alt="jsonserver019"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>剛剛更新的 <code>post</code> 資料已經被刪除。</li>
</ol>
<h2 id="建立假資料">建立假資料</h2><hr>
<p>JSON Server 並沒有搭配資料庫，因此也不需要 Sequel Pro 或 DataGrip 之類的工具連到資料庫，它只是個文字檔。</p>
<p>先建立一個 todos 的假資料。</p>
<p><strong>/json-server/db.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">todos</span>": <span class="value">[</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">id</span>": <span class="value"><span class="number">2</span></span>,</span><br><span class="line">      "<span class="attribute">completed</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">      "<span class="attribute">value</span>": <span class="value"><span class="string">"Study Angular"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>假設已經有一筆 todo 在資料庫。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver020.png" alt="jsonserver020"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>建立一筆 todo</li>
</ol>
<h2 id="設定_Route">設定 Route</h2><hr>
<p>JSON Server 預設是以 table 名稱作為 route，但實務上 API 的 route 可能不一樣，如 <code>/api/todos</code> 與 <code>api/todos/1</code>。</p>
<p><strong>json-server/routes.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">/api/todos</span>": <span class="value"><span class="string">"/todos"</span></span>,</span><br><span class="line">  "<span class="attribute">/api/todos/:id</span>": <span class="value"><span class="string">"/todos/:id"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>/api/todos</code> 指向原本的 <code>/todos</code>。</p>
<p>將 <code>/api/todos/1</code> 只像原本的 <code>/todos/1</code>。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver021.png" alt="jsonserver021"></p>
<ol>
<li>新增 <code>json-server/routes.json</code></li>
<li>編輯 routes 的對應規則</li>
</ol>
<h2 id="重新啟動_JSON_Server">重新啟動 JSON Server</h2><hr>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject/json-<span class="keyword">server</span>$ json-<span class="keyword">server</span> db.json --routes routes.json</span><br></pre></td></tr></table></figure>
<p>重新啟動 JSON Server，加上 <code>—-routes</code> 參數，指定套用 <code>routes.json</code>。</p>
<h2 id="設定_Angular_Proxy">設定 Angular Proxy</h2><hr>
<p><strong>proxy.conf.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">/api</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">target</span>": <span class="value"><span class="string">"http://localhost:3000"</span></span>,</span><br><span class="line">    "<span class="attribute">secure</span>": <span class="value"><span class="literal">false</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>proxy.conf.json</code>，指定 Angular 使用 <code>/api</code> 時，會導到 JSON Server。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver022.png" alt="jsonserver022"></p>
<ol>
<li>在專案根目錄新增 <code>proxy.conf.json</code></li>
<li>將 <code>/api</code> 導到 JSON Server 的 <code>http://localhost:3000</code></li>
</ol>
<h2 id="修改_package-json">修改 package.json</h2><hr>
<p><strong>package.json</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"start": "ng serve --proxy-config proxy.conf.json",</span><br></pre></td></tr></table></figure>
<p>將 <code>start</code> 改成 <code>ng serve --proxy-config proxy.conf.json</code>。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver023.png" alt="jsonserver023"></p>
<ol>
<li>編輯 <code>package.json</code></li>
<li>將 <code>start</code> 改成 <code>ng serve --proxy-config proxy.conf.json</code></li>
</ol>
<h2 id="重新啟動_Angular">重新啟動 Angular</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject$ <span class="built_in">npm</span> start</span><br></pre></td></tr></table></figure>
<p>將原本使用 <code>ng serve</code> 啟動的 Angular 停止，改用 <code>npm start</code> 啟動 Angular。</p>
<p><img src="/images/angular/angular-coscup-api/jsonserver024.png" alt="jsonserver024"></p>
<ol>
<li>改用 <code>npm start</code> 啟動 Angular</li>
<li>實際上是執行 <code>ng serve —proxy-config proxy.conf.json</code></li>
</ol>
<h2 id="注入_HttpClient">注入 HttpClient</h2><hr>
<p><strong>src/app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  HttpClientModule,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>加上 <code>HttpClientModule</code>。</p>
<p><strong>src/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private httpClient: HttpClient) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用_API">使用 API</h2><hr>
<h3 id="載入_Todo">載入 Todo</h3><p><strong>src/app.component</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.httpClient.get&lt;Todo[]&gt;(<span class="string">'/api/todos'</span>)</span><br><span class="line">    .subscribe(</span><br><span class="line">      todos =&gt; <span class="keyword">this</span>.todos = todos</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>HttpClient.get()</code> 從 <code>/api/todos</code> 載入所有 todo，在 <code>get()</code> 之後要加上 <code>&lt;Todo[]&gt;</code> 泛型，表示想下載的資料型別為 <code>Observable&lt;Todo[]&gt;</code> 。</p>
<p>由於 <code>HttpClient.get()</code> 為 RxJS 的 <code>Observable</code>，所以必須加上 <code>subscribe()</code> 才會開始下載資料，並將 <code>todos</code> 陣列指定到 <code>this.todos</code> field。</p>
<h3 id="新增_Todo">新增 Todo</h3><p><strong>src/app.component</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">addTodo(newTodo: HTMLInputElement) &#123;</span><br><span class="line">  <span class="keyword">const</span> todo = &#123;</span><br><span class="line">    id: <span class="keyword">this</span>.todos.length + <span class="number">1</span>,</span><br><span class="line">    completed: <span class="literal">false</span>,</span><br><span class="line">    value: newTodo.value</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.httpClient.post(<span class="string">'/api/todos'</span>, todo)</span><br><span class="line">    .subscribe();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.httpClient.get&lt;Todo[]&gt;(<span class="string">'/api/todos'</span>)</span><br><span class="line">    .subscribe(</span><br><span class="line">      todos =&gt; <span class="keyword">this</span>.todos = todos</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">   newTodo.value = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>HttpClient.post()</code> 新增 todo 。</p>
<p>一樣使用 <code>HttpClient.get()</code> 將新增後的 todo 下載。</p>
<h3 id="刪除_Todo">刪除 Todo</h3><p><strong>src/app.component</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.httpClient.delete(`/api/todos/$&#123;id&#125;`)</span><br><span class="line">    .subscribe();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.httpClient.get&lt;Todo[]&gt;(<span class="string">'/api/todos'</span>)</span><br><span class="line">    .subscribe(</span><br><span class="line">      todos =&gt; <span class="keyword">this</span>.todos = todos</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>HttpClient.delete()</code> 刪除 todo 。</p>
<p>一樣使用 <code>HttpClient.get()</code> 將新增後的 todo 下載。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>JSON Server 讓我們不用安裝後端環境與資料庫，就能快速的建立假 API 開發測試。</li>
<li>Angular 4.3 的 <code>HttpClient</code> 提供了更方便的方式存取後端 API。</li>
<li><code>HttpClient</code> 回傳的是 RxJS 的 <code>observable</code>，藉由 RxJS 豐富的 operator，我們可以快速的將 API 回傳的資料加工。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[學習如何在 Angular 串 API]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="COSCUP" scheme="http://oomusou.io/tags/COSCUP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSON Server 簡介]]></title>
    <link href="http://oomusou.io/http/http-json-server/"/>
    <id>http://oomusou.io/http/http-json-server/</id>
    <published>2017-08-05T12:23:43.000Z</published>
    <updated>2017-08-05T09:26:35.000Z</updated>
    <content type="html"><![CDATA[<p>在前後端分離下，Angular 需要倚賴後端 API 才能對資料庫存取，在實務上，當 API 規格確立後，前端工程師不可能等後端工程師寫好 API 才開始開發，而是一起同時開發，因此前端工程師需要有假 API 才能開發測試。</p>
<p>前端工程師不必為了假 API 安裝後端環境與資料庫，只要安裝 JSON Server，就能模擬出假 API。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>JSON Server 0.12.0</p>
<h2 id="安裝_JSON_Server">安裝 JSON Server</h2><hr>
<h3 id="使用_NPM_安裝">使用 NPM 安裝</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> <span class="keyword">json</span>-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure>
<p>將 JSON Server 安裝在 global 環境。</p>
<p><img src="/images/http/http-json-server/jsonserver000.png" alt="jsonserver000"></p>
<h3 id="啟動_JSON_Server">啟動 JSON Server</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$ cd MyProject</span><br><span class="line">~/MyProject$ mkdir json-<span class="keyword">server</span></span><br><span class="line">~/MyProject$ cd json-<span class="keyword">server</span></span><br><span class="line">~/MyProject/json-<span class="keyword">server</span>$ json-<span class="keyword">server</span> db.json</span><br></pre></td></tr></table></figure>
<ol>
<li>進入 <code>MyProject</code> 專案目錄</li>
<li>在專案目錄下建立 <code>json-server</code> 目錄</li>
<li>啟動 JSON Server，指定 <code>db.json</code> 為資料庫檔案</li>
</ol>
<p>若 <code>db.json</code> 檔案存在，則 JSON Server 會以此檔案為資料庫，若不存在，則會建立新的 <code>db.json</code> 檔案。</p>
<p><img src="/images/http/http-json-server/jsonserver001.png" alt="jsonserver001"></p>
<ol>
<li>建立 <code>json-server</code> 目錄</li>
<li>進入 <code>json-server</code> 目錄</li>
<li>在 <code>json-server</code> 目錄啟動 JSON Server，並將 <code>db.json</code> 檔案建立在 <code>json-server</code> 目錄下</li>
<li>JSON Server 在 <code>json-server</code> 目錄下產生 <code>db.json</code> 檔案</li>
<li><code>db.json</code> 預設已經有預設資料了</li>
<li>JSON Server 預設提供了網址可供測試</li>
</ol>
<h3 id="測試_JSON_Server">測試 JSON Server</h3><p>預設 <code>db.json</code> 已經有資料，可藉此測試 JSON Server 是否有成功啟動。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/http/http-json-server/jsonserver002.png" alt="jsonserver002"></p>
<p>使用 Postman 測試 <code>http://localhost:3000/posts</code>，確定能抓到資料。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/http/http-json-server/jsonserver003.png" alt="jsonserver003"></p>
<p>使用瀏覽器測試 <code>http://localhost:3000</code>，確定 JSON Server 內建 Web server 已經成功啟動。</p>
<h2 id="HTTP_Request_Method">HTTP Request Method</h2><hr>
<p>JSON Server 支援開發中最常用的 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>PATCH</code> 與 <code>DELETE</code> 等 request method。</p>
<h3 id="GET">GET</h3><p>用於取得 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts</span></span><br></pre></td></tr></table></figure>
<p>取得所有  <code>post</code> 資料。</p>
<p><img src="/images/http/http-json-server/jsonserver005.png" alt="jsonserver005"></p>
<ol>
<li>選擇 <code>GET</code></li>
<li>輸入 <code>http://localhost:3000/posts</code></li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳 JSON 物件陣列</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts/1</span></span><br></pre></td></tr></table></figure>
<p>取得 <code>id</code> 為 <code>1</code> 的 <code>post</code> 資料。</p>
<p><img src="/images/http/http-json-server/jsonserver006.png" alt="jsonserver006"></p>
<ol>
<li>選擇 <code>GET</code></li>
<li>輸入 <code>http://localhost:3000/posts/1</code></li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳 JSON 物件</li>
</ol>
<h3 id="POST">POST</h3><p>用於建立 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts</span></span><br></pre></td></tr></table></figure>
<p>建立新的一筆 <code>post</code> 資料。</p>
<p><img src="/images/http/http-json-server/jsonserver007.png" alt="jsonserver007"></p>
<ol>
<li>選擇 <code>POST</code></li>
<li>輸入 <code>http://localhost:3000/posts</code></li>
<li>選擇 <code>Body</code></li>
<li>選擇 <code>raw</code> 格式</li>
<li>選擇 <code>JSON (application/json)</code> 格式</li>
<li>要新增的 JSON 物件</li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳所新增的 JSON 物件，並包含 <code>id</code></li>
</ol>
<p><img src="/images/http/http-json-server/jsonserver008.png" alt="jsonserver008"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>剛剛新增的 <code>post</code> 已經寫入 <code>db.json</code></li>
</ol>
<h3 id="PUT">PUT</h3><p>用於更新完整 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts/2</span></span><br></pre></td></tr></table></figure>
<p>更新 <code>id</code> 為 <code>2</code> 的完整 <code>post</code> 資料。</p>
<p><img src="/images/http/http-json-server/jsonserver009.png" alt="jsonserver009"></p>
<ol>
<li>選擇 <code>PUT</code></li>
<li>輸入 <code>http://localhost:3000/posts/2</code></li>
<li>選擇 <code>Body</code></li>
<li>選擇 <code>raw</code> 格式</li>
<li>選擇 <code>JSON (application/json)</code> 格式</li>
<li>要更新的 JSON 物件 (不用含 <code>id</code>，要包含全部欄位)</li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳整筆 JSON 物件，並包含 <code>id</code></li>
</ol>
<p><img src="/images/http/http-json-server/jsonserver010.png" alt="jsonserver010"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>剛剛更新的 <code>post</code> 已經寫入 <code>db.json</code></li>
</ol>
<blockquote>
<p>使用 <code>PUT</code> 要小心，他是將整個 JSON 物件寫入原來的 <code>id</code>，也就是說原本有 <code>3</code> 個欄位，若 <code>PUT</code> 時的 JSON 物件只有 2 個欄位，則 <code>PUT</code> 後就只剩下 <code>2</code> 個欄位。</p>
</blockquote>
<h3 id="PATCH">PATCH</h3><p>用於更新部分 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts/2</span></span><br></pre></td></tr></table></figure>
<p>更新 <code>id</code> 為 <code>2</code> 的部分 <code>post</code> 資料。</p>
<p><img src="/images/http/http-json-server/jsonserver011.png" alt="jsonserver011"></p>
<ol>
<li>選擇 <code>PUT</code></li>
<li>輸入 <code>http://localhost:3000/posts/2</code></li>
<li>選擇 <code>Body</code></li>
<li>選擇 <code>raw</code> 格式</li>
<li>選擇 <code>JSON (application/json)</code> 格式</li>
<li>要更新的 JSON 物件 (不用含 <code>id</code>，不用包含全部欄位)</li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳整筆 JSON 物件，並包含 <code>id</code></li>
</ol>
<p><img src="/images/http/http-json-server/jsonserver012.png" alt="jsonserver012"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>剛剛更新的 <code>post</code> 已經寫入 <code>db.json</code>，且只更新 <code>1</code> 個欄位資料。</li>
</ol>
<h3 id="DELETE">DELETE</h3><p>用於刪除 resource。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/posts/2</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/http/http-json-server/jsonserver013.png" alt="jsonserver013"></p>
<ol>
<li>選擇 <code>DELETE</code></li>
<li>輸入 <code>http://localhost:3000/posts/2</code></li>
<li>按 <code>Send</code> 送出 request</li>
<li>回傳空的 JSON 物件</li>
</ol>
<p><img src="/images/http/http-json-server/jsonserver019.png" alt="jsonserver019"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>剛剛更新的 <code>post</code> 資料已經被刪除。</li>
</ol>
<h2 id="修改資料">修改資料</h2><hr>
<p>JSON Server 並沒有搭配資料庫，因此也不需要 Sequel Pro 或 DataGrip 之類的工具連到資料庫，它只是個文字檔。</p>
<p><strong>/json-server/db.json</strong></p>
<p><img src="/images/http/http-json-server/jsonserver014.png" alt="jsonserver014"></p>
<ol>
<li>開啟 <code>/json-server/db.json</code></li>
<li>每個 field 相當於資料庫的 table 名稱，可自行修改，後面接的是 JSON 物件陣列，也可以自行修改 JSON 建立假資料</li>
</ol>
<h2 id="建立_Snapshot">建立 Snapshot</h2><hr>
<p>在實務上有時會想將目前的資料先存起來做備份，當作 golden sample，JSON Server 可以幫我們將目前的所有資料備份成 snapshot。</p>
<blockquote>
<p>熱鍵：S + enter</p>
</blockquote>
<p><img src="/images/http/http-json-server/jsonserver015.png" alt="jsonserver015"></p>
<ol>
<li>在 terminal 下輸入熱鍵 <code>S + enter</code></li>
<li>JSON Server 會亂數產生檔案，將目前的 <code>db.json</code> 做 snapshot</li>
</ol>
<h2 id="自訂新_Route">自訂新 Route</h2><hr>
<p>JSON Server 預設是以 table 名稱作為 route，但實務上 API 的 route 可能不一樣，如 <code>/api/posts</code> 與 <code>api/posts/1</code>。</p>
<h3 id="新增_routes-json">新增 routes.json</h3><p><strong>json-server/routes.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">/api/posts</span>": <span class="value"><span class="string">"/posts"</span></span>,</span><br><span class="line">  "<span class="attribute">/api/posts/:id</span>": <span class="value"><span class="string">"/posts/:id"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>/api/ports</code> 指向原本的 <code>/posts</code>。</p>
<p>將 <code>/api/posts/1</code> 只像原本的 <code>/posts/1</code>。</p>
<p><img src="/images/http/http-json-server/jsonserver004.png" alt="jsonserver004"></p>
<ol>
<li>新增 <code>json-server/routes.json</code></li>
<li>編輯 routes 的對應規則</li>
</ol>
<h3 id="套用新_Route">套用新 Route</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject/json-<span class="keyword">server</span>$ json-<span class="keyword">server</span> db.json --routes routes.json</span><br></pre></td></tr></table></figure>
<p>重新啟動 JSON Server，加上 <code>—-routes</code> 參數，指定套用 <code>routes.json</code>。</p>
<p><img src="/images/http/http-json-server/jsonserver016.png" alt="jsonserver016"></p>
<ol>
<li><p>重新啟動 JSON Server，並加上 <code>—-routes</code> 參數與 <code>routes.json</code> </p>
</li>
<li><p>JSON Server 提示載入 <code>routes.json</code></p>
</li>
<li><p>顯示新增的 route</p>
</li>
</ol>
<h3 id="測試新_Route">測試新 Route</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//localhost:3000/api/posts</span></span><br></pre></td></tr></table></figure>
<p>取得所有  <code>post</code> 資料。</p>
<p><img src="/images/http/http-json-server/jsonserver017.png" alt="jsonserver017"></p>
<ol>
<li>使用新的 <code>http://localhost/api/posts</code> 測試</li>
<li>一樣回傳 JSON 物件陣列</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/localhost:3000/api</span><span class="regexp">/posts/</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>取得 id 為 <code>1</code> 的 <code>post</code> 資料。</p>
<p><img src="/images/http/http-json-server/jsonserver018.png" alt="jsonserver018"></p>
<ol>
<li>使用新的 <code>http://localhost/api/posts/1</code> 測試</li>
<li>一樣回傳 JSON 物件</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>JSON Server 讓我們不用安裝後端環境，也不用安裝資料庫，就可以快速建立前端開發測試用的 API。</li>
<li><a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="external">JSONPlaceholder</a> 其實就是以 JSON Server 架設，若為了 demo 方便，可直接使用 JSONPlaceholder，但若在實務上使用，JSON Server 的彈性更高。</li>
<li>本文僅針對實務上最常用的功能介紹 JSON Server，更進階的功能請參考 reference 部分。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/typicode/json-server" target="_blank" rel="external">typicode</a>, <a href="https://github.com/typicode/json-server" target="_blank" rel="external">JSON Server</a><br><a href="http://blog.miniasp.com" target="_blank" rel="external">保哥</a>, <a href="https://www.slideshare.net/WillHuangTW/use-json-server-as-a-fake-rest-api" target="_blank" rel="external">進擊的前端工程師：今天就自己打造 API 吧！</a></p>
]]></content>
    <summary type="html">
    <![CDATA[最簡單的方式建立假 API]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 Angular 整合測試與 Jasmine 的 spyOn()]]></title>
    <link href="http://oomusou.io/jasmine/jasmine-spyon/"/>
    <id>http://oomusou.io/jasmine/jasmine-spyon/</id>
    <published>2017-07-26T12:23:43.000Z</published>
    <updated>2017-07-26T02:13:28.000Z</updated>
    <content type="html"><![CDATA[<p><code>spyOn()</code> 是整合測試與單元測試的關鍵，本文深入探討 <code>spyOn()</code> 用於整合測試部分。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3</p>
<h2 id="定義">定義</h2><hr>
<p><img src="/images/jasmine/jasmine-spyon/spyOn000.svg" alt="spyOn000"></p>
<ul>
<li><strong>驗收測試</strong>：以 HTML 與 CSS 的角度測試最後結果，配合<strong>真資料</strong>測試，與 Angular <strong>無關</strong></li>
<li><strong>整合測試</strong>：以 Angular 角度測試元件與元件之間的關係，配合<strong>假資料</strong>測試，與 Angular <strong>有關</strong></li>
<li><strong>單元測試</strong>：以 class 角度測試，配合<strong>假資料</strong>測試，與 Angular <strong>無關</strong></li>
</ul>
<blockquote>
<p>最簡單的是<strong>單元測試</strong>，常常一個 <code>expect()</code> 就可搞定</p>
<p>其次是<strong>驗收測試</strong>，只要會寫 CSS selector 也不難</p>
<p>最難寫的是<strong>整合測試</strong>，要對相依物件加以<strong>假設</strong>，<strong>並傳入假資料與驗證假資料</strong></p>
</blockquote>
<h2 id="測試目的">測試目的</h2><hr>
<blockquote>
<p>Q：驗收測試、整合測試與單元測試到底在測什麼？</p>
</blockquote>
<ul>
<li><strong>驗收測試</strong>：測最終結果</li>
<li><strong>整合測試</strong>：測之間關係</li>
<li><strong>單元測試</strong>：測單一結果</li>
</ul>
<h2 id="整合測試">整合測試</h2><hr>
<blockquote>
<p>測試案例：<code>&lt;h1&gt;&lt;/h1&gt;</code> 內應該使用 <code>getTitle()</code> 函式</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() <span class="keyword">in</span> HTML`, () =&gt; &#123;</span><br><span class="line">  component.getTitle = () =&gt; <span class="string">'fake'</span>;</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  htmlElement = debugElement.query(By.css(<span class="string">'h1'</span>)).nativeElement;</span><br><span class="line">  expect(htmlElement.textContent).toBe(<span class="string">'fake'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在測試 <code>&lt;h1&gt;&lt;/h1&gt;</code> 內應使用 <code>title</code> field 時，我們曾經指定 <code>title</code> 為假資料 <code>fake</code>，並測試 <code>&lt;h1&gt;&lt;/h1&gt;</code> 內資料是否為 <code>fake</code>。</p>
<p>同樣的技巧，我們也可以指定 <code>component.getTitle = () =&gt; &#39;fake&#39;</code>，並測試 <code>&lt;h1&gt;&lt;/h1&gt;</code> 內資料是否為 <code>fake</code>。</p>
<blockquote>
<p>將相依物件設定為<strong>假資料</strong>，並測試目前物件是否有相依物件的<strong>假資料</strong>，為整合測試的<strong>基本招式</strong>。</p>
</blockquote>
<h2 id="SpyOn()">SpyOn()</h2><hr>
<p>以上方式雖然可行，算土法煉鋼，Jasmine 另外提供更方便的方式：<code>spyOn()</code>。</p>
<blockquote>
<p>Spy 英文為<strong>間諜</strong>，顧名思義，間諜就是假的，就是幫我們建立假物件、假資料。</p>
</blockquote>
<p><img src="/images/jasmine/jasmine-spyon/spyOn001.svg" alt="spyOn001"></p>
<p>若使用 <code>spyOn()</code>，<code>spyOn()</code> 會對原本的 <code>getTitle()</code> 進行<strong>攔胡</strong>，HTML 將無法去呼叫原本 <code>TitleComponent.getTitle()</code>，而改呼叫 <code>Spy.getTitle()</code>。</p>
<p><code>spyOn()</code> 另外一個特點，就是對不存在的相依物件進行 <code>spyOn()</code> 時，會測試<code>紅燈</code>，可藉此驅動出相依物件的單元測試，這也是 ATDD 能 out side in 的關鍵。</p>
<h3 id="callFake()">callFake()</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() <span class="keyword">in</span> HTML`, () =&gt; &#123;</span><br><span class="line">  spyOn(component, <span class="string">'getTitle'</span>).and.callFake(() =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'fake'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  htmlElement = debugElement.query(By.css(<span class="string">'h1'</span>)).nativeElement;</span><br><span class="line">  expect(htmlElement.textContent).toBe(<span class="string">'fake'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>callFake()</code> 會傳入 arrow function 回傳假資料，用來取代想 <code>spyOn()</code> 的 function。</p>
<p>最後 <code>expect()</code> 一樣測試<strong>假資料</strong>。</p>
<h3 id="returnValue()">returnValue()</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() <span class="keyword">in</span> HTML`, () =&gt; &#123;</span><br><span class="line">  spyOn(component, <span class="string">'getTitle'</span>).and.returnValue(<span class="string">'fake'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  htmlElement = debugElement.query(By.css(<span class="string">'h1'</span>)).nativeElement;</span><br><span class="line">  expect(htmlElement.textContent).toBe(<span class="string">'fake'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>直接使用 <code>returnValue()</code> 回傳<strong>假資料</strong>，寫法比 <code>callFake()</code> 簡潔。</p>
<p>最後 <code>expect()</code> 一樣測試<strong>假資料</strong>。</p>
<h3 id="calls-any()">calls.any()</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() <span class="keyword">in</span> HTML`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line">      </span><br><span class="line">  expect(spy.calls.any()).toBe(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>整合測試重點是測試<strong>之間的關係</strong>，而測試假資料只是一種手段，若能直接測試 <code>getTitle()</code> 是有被呼叫到，會更符合整合測試的精神。</p>
<p>使用 <code>spyOn()</code> 回傳一個物件，在 <code>expect()</code> 內測試 <code>spy.calls.any()</code>，若該 <code>spyOn()</code> 的 function 有被呼叫到則為 <code>true</code>。</p>
<h3 id="toHaveBeenCalled()">toHaveBeenCalled()</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(`should use getTitle() <span class="keyword">in</span> HTML`, () =&gt; &#123;</span><br><span class="line">  spyOn(component, <span class="string">'getTitle'</span>);</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  expect(component.getTitle).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>以整合測試的角度，我們想測試的是<strong>之間的關係</strong>，也就是重點是<strong>有沒有被呼叫到</strong>，之前用<strong>假資料測試假資料</strong>只是一種手段，若 Jasmine 能直接 <code>expect()</code> 不就更理想？</p>
<p>Jasmine 提供了 <code>expect().toHaveBeenCalled()</code>，若 <code>spyOn()</code> 的 function 被呼叫執行過，就會傳回 <code>true</code>。</p>
<blockquote>
<p><code>toHaveBeenCalled()</code> 是語意最佳的整合測試寫法，強烈推薦。</p>
</blockquote>
<h2 id="SpyOn()_使用時機">SpyOn() 使用時機</h2><hr>
<ol>
<li><strong>整合測試</strong>：用來對<strong>尚未實作</strong>的相依物件建立假物件，讓目前的整合測試<code>紅燈</code>，驅動出相依物件的單元測試<code>紅燈</code>。</li>
<li><strong>單元測試</strong>：用來對<strong>已經實作</strong>的相依物件建立假物件，讓目前的單元測試<code>綠燈</code>。</li>
</ol>
<p><code>1</code> 是 ATDD 的理論基礎。</p>
<p><code>2</code> 是 TDD 的理論基礎。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Jasmine 的 <code>spyOn()</code> 無法對 field 加以 spy，因此必須使用整合測試的基本技巧：<strong>使用假值並測試假值</strong>，但 method 可直接 <code>spyOn()</code>，建議直接搭配 <code>toHaveBeenCalled()</code>。</li>
<li>大部分人都是在單元測試使用 <code>spyOn()</code>，將相依物件加以隔離，但事實上在整合測試使用 <code>spyOn()</code> 配合 <code>toHaveBeenCalled()</code>，還可以驅動出相依物件的單元測試，這正是 ATDD 由整合測試<code>紅燈</code>，驅動出單元測試<code>紅燈</code>的關鍵技術。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[spyOn() 的使用心得整理]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Jasmine" scheme="http://oomusou.io/tags/Jasmine/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 自訂 Jasmine Live Template?]]></title>
    <link href="http://oomusou.io/webstorm/webStorm-jasmine-template/"/>
    <id>http://oomusou.io/webstorm/webStorm-jasmine-template/</id>
    <published>2017-07-23T12:23:43.000Z</published>
    <updated>2017-07-23T13:30:55.000Z</updated>
    <content type="html"><![CDATA[<p>WebStorm 雖然提供自動產生 Jasmine Suite、Spec… 等功能，不過預設使用 ES5 的 anonymous function，當然可以自己重構成 arrow function，若能一開始就 arrow function 就更方便了。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>WebStorm 2017.2</p>
<h2 id="Symptons">Symptons</h2><hr>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine000.png" alt="jasmine000"></p>
<p>WebStorm 內建提供了 4 個 Jasmine template，可使用熱鍵自動產生 Jasmine Suite、Jasmine Spec、Jasmine beforeEach 與 Jasmine afterEach。</p>
<blockquote>
<p>Windows：Alt + Insert</p>
<p>macOS：⌘ + N</p>
</blockquote>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine001.png" alt="jasmine001"></p>
<p>以 Jasmine Suite 為例，WebStorm 提供的 template 有 2 個缺點：</p>
<ol>
<li><strong>suite name 使用單引號</strong>：但因為 suite 用來描述需求，因此可能再次使用單引號強調測試案例，若在單引號內使用雙引號，又變得不是很直接，因此希望 suite name 改用 backtick 寫法</li>
<li><strong>使用 anonymous function</strong>：在 TypeScript 與 ES6 都習慣使用 arrow function 取代 anonymous function，語法較簡潔</li>
</ol>
<p>Jasmine Spec 也有相同的問題。</p>
<p>此外對於常用的 <code>expect()</code>，WebStorm 也沒提供 template。</p>
<h2 id="Recipes">Recipes</h2><hr>
<p>我們將手動建立 3 個常用的 Jasmine live template，加速 ATDD 開發速度。</p>
<h3 id="新增_Suite_Template">新增 Suite Template</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">describe(``, () =&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine002.png" alt="jasmine002"></p>
<p>將我們想要的 suite template 先打好，選起來反白。</p>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine003.png" alt="jasmine003"></p>
<p><strong><em>Tools -&gt; Save as Live Template</em></strong></p>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine004.png" alt="jasmine004"></p>
<ol>
<li><strong>輸入 <code>des</code> 縮寫</strong>：將來只要輸入 <code>des</code>，並按下 <code>tab</code>，就會展開 suite template</li>
<li><strong>輸入 description</strong>：對 <code>des</code> 加上 <code>Generate Jasmine Suite</code> 描述</li>
<li><strong><code>user</code> 顯示 <code>des</code></strong>：<code>user</code> 將顯示目前所有自訂的 live template</li>
<li><strong>游標預設停止處</strong>：在 backtick 內加入 <code>$END$</code>，則 live template 展開後，預設游標會停在此</li>
<li><strong>儲存設定</strong>：按 <code>OK</code> 儲存目前設定</li>
</ol>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine005.png" alt="jasmine005"></p>
<p>輸入 <code>des</code>，在 Intellisense 也找到了，並且顯示 <code>Generate Jasmine Suite</code> 描述。</p>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine006.png" alt="jasmine006"></p>
<p>輸入 <code>des</code> 按下 <code>tab</code> 後，會自動展開剛剛建立的 live template，並將游標停在 suite name 之處。</p>
<h3 id="新增_Spec_Template">新增 Spec Template</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">it(``, () =&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine007.png" alt="jasmine007"></p>
<p>將我們想要的 spec template 先打好，選起來反白。</p>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine008.png" alt="jasmine008"></p>
<p><strong><em>Tools -&gt; Save as Live Template</em></strong></p>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine009.png" alt="jasmine009"></p>
<ol>
<li><strong>輸入 <code>it</code> 縮寫</strong>：將來只要輸入 <code>it</code>，並按下 <code>tab</code>，就會展開 spec template</li>
<li><strong>輸入 description</strong>：對 <code>it</code> 加上 <code>Generate Jasmine Spec</code> 描述</li>
<li><strong><code>user</code> 顯示 <code>it</code></strong>：<code>user</code> 將顯示目前所有自訂的 live template</li>
<li><strong>游標預設停止處</strong>：在 backtick 內加入 <code>$END$</code>，則 live template 展開後，預設游標會停在此</li>
<li><strong>儲存設定</strong>：按 <code>OK</code> 儲存目前設定</li>
</ol>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine010.png" alt="jasmine010"></p>
<p>輸入 <code>it</code>，在 Intellisense 也找到了，並且顯示 <code>Generate Jasmine Spec</code> 描述。</p>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine011.png" alt="jasmine011"></p>
<p>輸入 <code>it</code> 按下 <code>tab</code> 後，會自動展開剛剛建立的 live template，並將游標停在 spec name 之處。</p>
<h3 id="新增_Expect_Template">新增 Expect Template</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect().toBe();</span><br></pre></td></tr></table></figure>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine012.png" alt="jasmine012"></p>
<p> 將我們想要的 expect template 先打好，選起來反白。</p>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine013.png" alt="jasmine013"></p>
<p><strong><em>Tools -&gt; Save as Live Template</em></strong></p>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine014.png" alt="jasmine014"></p>
<ol>
<li><strong>輸入 <code>exp</code> 縮寫</strong>：將來只要輸入 <code>exp</code>，並按下 <code>tab</code>，就會展開 expect template</li>
<li><strong>輸入 description</strong>：對 <code>exp</code> 加上 <code>Generate Jasmine Expect</code> 描述</li>
<li><strong><code>user</code> 顯示 <code>exp</code></strong>：<code>user</code> 將顯示目前所有自訂的 live template</li>
<li><strong>游標預設停止處</strong>：在 backtick 內加入 <code>$END$</code>，則 live template 展開後，預設游標會停在此</li>
<li><strong>儲存設定</strong>：按 <code>OK</code> 儲存目前設定</li>
</ol>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine015.png" alt="jasmine015"></p>
<p>輸入 <code>exp</code>，在 Intellisense 也找到了，並且顯示 <code>Generate Jasmine Expect</code> 描述。</p>
<p><img src="/images/webstorm/webstorm-jasmine-template/jasmine016.png" alt="jasmine016"></p>
<p>輸入 <code>exp</code> 按下 <code>tab</code> 後，會自動展開剛剛建立的 live template，並將游標停在 <code>expect()</code> 之內。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>Save as Live Template</code> 是 JetBrains IntelliJ 平台都有的功能，在 PhpStorm、WebStorm 與 Rider 都可使用，可自行將常用的 code snippet 存下來，增加開發效率。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[自訂 Jasmine Live Template 加速 ATDD 開發]]>
    
    </summary>
    
      <category term="Jasmine" scheme="http://oomusou.io/tags/Jasmine/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Visual Studio Code 執行 Wallaby 單元測試?]]></title>
    <link href="http://oomusou.io/vscode/vscode-wallaby/"/>
    <id>http://oomusou.io/vscode/vscode-wallaby/</id>
    <published>2017-07-13T12:23:43.000Z</published>
    <updated>2017-07-13T02:05:52.000Z</updated>
    <content type="html"><![CDATA[<p>很羨慕 Visual Studio 有 Alive 可以即時跑單元測試嗎？只要安裝了 Wallaby，在 Visual Studio Code 也可以如 Alive 一樣為 Angular 即時跑 TypeScript 與 Jasmine 單元測試。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Wallaby 1.0.52<br>Visual Studio Code 1.14.0</p>
<h2 id="安裝_Wallaby">安裝 Wallaby</h2><hr>
<p><img src="/images/vscode/vscode-wallaby/vscode000.png" alt="vscode000"></p>
<ol>
<li>按左側 <code>Extension</code> 按鈕。</li>
<li>搜尋 <code>Wallaby</code>。</li>
<li>安裝 <code>Wallaby.js</code>。</li>
</ol>
<p><img src="/images/vscode/vscode-wallaby/vscode001.png" alt="vscode001"></p>
<p>Visual Studio Code 關閉重新啟動後，會開始下載 <code>Wallaby.js core</code>。</p>
<h2 id="設定_Angular_CLI">設定 Angular CLI</h2><hr>
<h3 id="新增_wallaby-js">新增 wallaby.js</h3><p><strong>wallaby.js</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wallabyWebpack = <span class="built_in">require</span>(<span class="string">'wallaby-webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compilerOptions = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./tsconfig.json'</span>).compilerOptions,</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./src/tsconfig.spec.json'</span>).compilerOptions);</span><br><span class="line"></span><br><span class="line"><span class="module"><span class="keyword">module</span>.exports = function (wallaby) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> webpackPostprocessor = wallabyWebpack(&#123;</span><br><span class="line">    entryPatterns: [</span><br><span class="line">      <span class="string">'src/wallabyTest.js'</span>,</span><br><span class="line">      <span class="string">'src/**/*spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="module"><span class="keyword">module</span>: </span>&#123;</span><br><span class="line">      loaders: [</span><br><span class="line">        &#123;test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'raw-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.html$/</span>, loader: <span class="string">'raw-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.ts$/</span>, loader: <span class="string">'@ngtools/webpack'</span>, include: <span class="regexp">/node_modules/</span>, query: &#123;tsConfigPath: <span class="string">'tsconfig.json'</span>&#125;&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.js$/</span>, loader: <span class="string">'angular2-template-loader'</span>, exclude: <span class="regexp">/node_modules/</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.json$/</span>, loader: <span class="string">'json-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.styl$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'stylus-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.less$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'less-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.scss$|\.sass$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'sass-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.(jpg|png)$/</span>, loader: <span class="string">'url-loader?limit=128000'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">      extensions: [<span class="string">'.js'</span>, <span class="string">'.ts'</span>],</span><br><span class="line">      modules: [</span><br><span class="line">        path.join(wallaby.projectCacheDir, <span class="string">'src/app'</span>),</span><br><span class="line">        path.join(wallaby.projectCacheDir, <span class="string">'src'</span>)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.ts'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.d.ts'</span>, ignore: <span class="literal">true</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.css'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.less'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.scss'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.sass'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.styl'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.html'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.json'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*spec.ts'</span>, ignore: <span class="literal">true</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*spec.ts'</span>, load: <span class="literal">false</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    testFramework: <span class="string">'jasmine'</span>,</span><br><span class="line"></span><br><span class="line">    compilers: &#123;</span><br><span class="line">      <span class="string">'**/*.ts'</span>: wallaby.compilers.typeScript(compilerOptions)</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    middleware: <span class="function"><span class="keyword">function</span> (<span class="params">app, express</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">      app.use(<span class="string">'/favicon.ico'</span>, express.static(path.join(__dirname, <span class="string">'src/favicon.ico'</span>)));</span><br><span class="line">      app.use(<span class="string">'/assets'</span>, express.static(path.join(__dirname, <span class="string">'src/assets'</span>)));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    env: &#123;</span><br><span class="line">      kind: <span class="string">'electron'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    postprocessor: webpackPostprocessor,</span><br><span class="line"></span><br><span class="line">    setup: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">window</span>.__moduleBundler.loadTests();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在專案的根目錄下新增 <code>wallaby.js</code>。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode002.png" alt="vscode002"></p>
<blockquote>
<p>注意 <code>wallaby.js</code> 為 JavaScript 檔，不是 TypeScript 檔。</p>
</blockquote>
<h3 id="新增_src/wallabyTest-ts">新增 src/wallabyTest.ts</h3><p><strong>src/wallabyTest.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./polyfills'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/long-stack-trace-zone'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/proxy.js'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/sync-test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/jasmine-patch'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/async-test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/fake-async-test'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserDynamicTestingModule,</span><br><span class="line">  platformBrowserDynamicTesting</span><br><span class="line">&#125; from <span class="string">'@angular/platform-browser-dynamic/testing'</span>;</span><br><span class="line"></span><br><span class="line">getTestBed().initTestEnvironment(</span><br><span class="line">  BrowserDynamicTestingModule,</span><br><span class="line">  platformBrowserDynamicTesting()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在 <code>src</code> 目錄下新增 <code>wallabyTest.ts</code>。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode003.png" alt="vscode003"></p>
<blockquote>
<p>注意 <code>wallabyTest.ts</code> 為 TypeScript 檔，不是 JavaScript 檔。</p>
</blockquote>
<h3 id="src/tsconfig-app-json">src/tsconfig.app.json</h3><p><strong>src/tsconfig.app.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">extends</span>": <span class="value"><span class="string">"../tsconfig.json"</span></span>,</span><br><span class="line">  "<span class="attribute">compilerOptions</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">outDir</span>": <span class="value"><span class="string">"../out-tsc/app"</span></span>,</span><br><span class="line">    "<span class="attribute">module</span>": <span class="value"><span class="string">"es2015"</span></span>,</span><br><span class="line">    "<span class="attribute">baseUrl</span>": <span class="value"><span class="string">""</span></span>,</span><br><span class="line">    "<span class="attribute">types</span>": <span class="value">[]</span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">exclude</span>": <span class="value">[</span><br><span class="line">    <span class="string">"test.ts"</span>,</span><br><span class="line">    <span class="string">"**/*.spec.ts"</span>,</span><br><span class="line">    <span class="string">"wallabyTest.ts"</span></span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"wallabyTest.ts"</span></span><br></pre></td></tr></table></figure>
<p>新增 <code>&quot;wallabyTest.ts&quot;</code>。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode004.png" alt="vscode004"></p>
<h3 id="安裝_Node-js_套件">安裝 Node.js 套件</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyProject</span>$ npm install wallaby-webpack angular2-<span class="keyword">template</span>-loader electron --save-dev</span><br></pre></td></tr></table></figure>
<p>安裝 Wallaby 所需要的 Node.js 套件。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode005.png" alt="vscode005"></p>
<h2 id="執行_Wallaby">執行 Wallaby</h2><hr>
<ul>
<li>Start：⌘ + ⇧ + R, R</li>
<li>Stop：⌘ + ⇧ + R, S</li>
</ul>
<p><img src="/images/vscode/vscode-wallaby/vscode006.png" alt="vscode006"></p>
<p>第一次執行時，會要求設定 config file。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode007.png" alt="vscode007"></p>
<p>選擇剛剛在根目錄建立的 <code>wallaby.js</code>。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode008.png" alt="vscode008"></p>
<p>通過測試的案例，左側會出現<code>綠燈</code>，下方也會顯示目前通過測試案例的個數。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode009.png" alt="vscode009"></p>
<p><strong>不用</strong>按存檔就可以立即跑測試顯示<code>紅燈</code>或<code>綠燈</code>，且立刻顯示實際值與期望值的差異。</p>
<h2 id="顯示_Code_Coverage">顯示 Code Coverage</h2><hr>
<p>寫單元測試的另外ㄧ件重大的事情，就是關心 code coverage 是否達到團隊目標。Wallaby 提供了 Wallaby App，只要輸入 <code>http://wallabyjs.com/app</code>，就可以顯示目前整個專案的 code coverage 狀況。</p>
<blockquote>
<p>不用擔心 <code>http://wallabyjs.com/app</code> 是連到外面，事實上它相當於 <code>http://localhost:51245</code>，還是跑在本機。</p>
</blockquote>
<p><img src="/images/vscode/vscode-wallaby/vscode010.png" alt="vscode010"></p>
<ol>
<li><code>App</code> 目錄顯示整個專案的 code coverage。</li>
<li>也可以顯示單一檔案的 code coverage。</li>
</ol>
<blockquote>
<p>Wallaby App 可貴的地方在於他不是靜態 HTML report，而是隨著測試結果自動改變，隨時顯示最新的 code coverage。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Wallaby 有各種版本，如 Visual Studio、WebStorm，甚至於 Sublime Text 與 Atom 也有支援。</li>
<li>Wallaby 雖然是個付費軟體，但非常有其價值。</li>
<li>TDD 會讓開發變慢，主要是因為工具不夠方便，Wallaby 讓我們寫單元測試的同時，就即時知道<code>紅燈</code>與<code>綠燈</code>測試結果，將大幅提升 TDD 開發效率。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://dm.gl" target="_blank" rel="external">Wallaby.js Blog</a>, <a href="http://dm.gl/2015/11/26/wallaby-for-visual-studio-code/" target="_blank" rel="external">Wallaby.js for Visual Studio Code</a><br><a href="https://wallabyjs.com" target="_blank" rel="external">Wallaby</a>, <a href="https://github.com/wallabyjs/ngCliWebpackSample#wallabyjs" target="_blank" rel="external">Angular.js 2 angular-cli (Webpack) generated project</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓 TypeScript 也能 Alive]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="VSCode" scheme="http://oomusou.io/tags/VSCode/"/>
    
      <category term="Wallaby" scheme="http://oomusou.io/tags/Wallaby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 執行 Wallaby 單元測試?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-wallaby/"/>
    <id>http://oomusou.io/webstorm/webstorm-wallaby/</id>
    <published>2017-07-09T12:23:43.000Z</published>
    <updated>2017-07-10T02:54:21.000Z</updated>
    <content type="html"><![CDATA[<p>很羨慕 Visual Studio 有 Alive 可以即時跑單元測試嗎？只要安裝了 <a href="https://wallabyjs.com/" target="_blank" rel="external">Wallaby</a>，在 WebStorm 也可以如 Alive 一樣為 Angular 即時跑 TypeScript 與 Jasmine 單元測試。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Wallaby 1.0.92</p>
<h2 id="下載_Wallaby">下載 Wallaby</h2><hr>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby000.png" alt="wallaby000"></p>
<p>到 Wallaby.js 官網 <a href="https://wallabyjs.com" target="_blank" rel="external">https://wallabyjs.com</a>，選擇 WebStorm 版本下載。</p>
<h2 id="安裝_Wallaby">安裝 Wallaby</h2><p><img src="/images/webstorm/webstorm-wallaby/wallaby001.png" alt="wallaby001"></p>
<p><strong><em>WebStorm -&gt; Preferences -&gt; Plugins</em></strong></p>
<p>按 <code>Install plugin from disk…</code>。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby002.png" alt="wallaby002"></p>
<p>選擇剛剛由 Wallaby.js 官網下載的 <code>zip</code> 檔。</p>
<blockquote>
<p>若由 Safari 下載，<code>zip</code> 檔已經被解開，可選擇解開後的 <code>jar</code> 檔。</p>
</blockquote>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby003.png" alt="wallaby003"></p>
<ol>
<li>安裝成功後會出現 <code>Wallaby</code>。</li>
<li>按 <code>Restart WebStorm</code>  才能使用。</li>
</ol>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby004.png" alt="wallaby004"></p>
<p>WebStorm 重新啟動後，右下角會出現 <code>Wallaby License</code> 提示，表示已經安裝成功。</p>
<blockquote>
<p>Trial versions available for download are fully functional and should work for 30 days. Note that in the trial mode wallaby will sometimes prompt you to restart your editor to get another trial session. </p>
</blockquote>
<p>根據 Wallaby 官網說明，可試用 30 天，在試用過程中，偶爾會提示你重新啟動 WebStorm。</p>
<h2 id="設定_Angular_CLI">設定 Angular CLI</h2><hr>
<h3 id="新增_wallaby-js">新增 wallaby.js</h3><p><strong>wallaby.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wallabyWebpack = <span class="built_in">require</span>(<span class="string">'wallaby-webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compilerOptions = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./tsconfig.json'</span>).compilerOptions,</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./src/tsconfig.spec.json'</span>).compilerOptions);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">wallaby</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> webpackPostprocessor = wallabyWebpack(&#123;</span><br><span class="line">    entryPatterns: [</span><br><span class="line">      <span class="string">'src/wallabyTest.js'</span>,</span><br><span class="line">      <span class="string">'src/**/*spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      loaders: [</span><br><span class="line">        &#123;test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'raw-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.html$/</span>, loader: <span class="string">'raw-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.ts$/</span>, loader: <span class="string">'@ngtools/webpack'</span>, include: <span class="regexp">/node_modules/</span>, query: &#123;tsConfigPath: <span class="string">'tsconfig.json'</span>&#125;&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.js$/</span>, loader: <span class="string">'angular2-template-loader'</span>, exclude: <span class="regexp">/node_modules/</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.json$/</span>, loader: <span class="string">'json-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.styl$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'stylus-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.less$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'less-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.scss$|\.sass$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'sass-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.(jpg|png)$/</span>, loader: <span class="string">'url-loader?limit=128000'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">      extensions: [<span class="string">'.js'</span>, <span class="string">'.ts'</span>],</span><br><span class="line">      modules: [</span><br><span class="line">        path.join(wallaby.projectCacheDir, <span class="string">'src/app'</span>),</span><br><span class="line">        path.join(wallaby.projectCacheDir, <span class="string">'src'</span>)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.ts'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.d.ts'</span>, ignore: <span class="literal">true</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.css'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.less'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.scss'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.sass'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.styl'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.html'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.json'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*spec.ts'</span>, ignore: <span class="literal">true</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*spec.ts'</span>, load: <span class="literal">false</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    testFramework: <span class="string">'jasmine'</span>,</span><br><span class="line"></span><br><span class="line">    compilers: &#123;</span><br><span class="line">      <span class="string">'**/*.ts'</span>: wallaby.compilers.typeScript(compilerOptions)</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    middleware: <span class="function"><span class="keyword">function</span> (<span class="params">app, express</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">      app.use(<span class="string">'/favicon.ico'</span>, express.static(path.join(__dirname, <span class="string">'src/favicon.ico'</span>)));</span><br><span class="line">      app.use(<span class="string">'/assets'</span>, express.static(path.join(__dirname, <span class="string">'src/assets'</span>)));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    env: &#123;</span><br><span class="line">      kind: <span class="string">'electron'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    postprocessor: webpackPostprocessor,</span><br><span class="line"></span><br><span class="line">    setup: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">window</span>.__moduleBundler.loadTests();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在專案的根目錄下新增 <code>wallaby.js</code>。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby005.png" alt="wallaby005"></p>
<blockquote>
<p>注意 <code>wallaby.js</code> 為 JavaScript 檔，不是 TypeScript 檔。</p>
</blockquote>
<h3 id="新增_src/wallabyTest-ts">新增 src/wallabyTest.ts</h3><p><strong>src/wallabyTest.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./polyfills'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/long-stack-trace-zone'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/proxy.js'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/sync-test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/jasmine-patch'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/async-test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/fake-async-test'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserDynamicTestingModule,</span><br><span class="line">  platformBrowserDynamicTesting</span><br><span class="line">&#125; from <span class="string">'@angular/platform-browser-dynamic/testing'</span>;</span><br><span class="line"></span><br><span class="line">getTestBed().initTestEnvironment(</span><br><span class="line">  BrowserDynamicTestingModule,</span><br><span class="line">  platformBrowserDynamicTesting()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在 <code>src</code> 目錄下新增 <code>wallabyTest.ts</code>。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby006.png" alt="wallaby006"></p>
<blockquote>
<p>注意 <code>wallabyTest.ts</code> 為 TypeScript 檔，不是 JavaScript 檔。</p>
</blockquote>
<h3 id="設定_src/tsconfig-app-json">設定 src/tsconfig.app.json</h3><p><strong>src/tsconfig.app.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">extends</span>": <span class="value"><span class="string">"../tsconfig.json"</span></span>,</span><br><span class="line">  "<span class="attribute">compilerOptions</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">outDir</span>": <span class="value"><span class="string">"../out-tsc/app"</span></span>,</span><br><span class="line">    "<span class="attribute">module</span>": <span class="value"><span class="string">"es2015"</span></span>,</span><br><span class="line">    "<span class="attribute">baseUrl</span>": <span class="value"><span class="string">""</span></span>,</span><br><span class="line">    "<span class="attribute">types</span>": <span class="value">[]</span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">exclude</span>": <span class="value">[</span><br><span class="line">    <span class="string">"test.ts"</span>,</span><br><span class="line">    <span class="string">"**/*.spec.ts"</span>,</span><br><span class="line">    <span class="string">"wallabyTest.ts"</span></span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"wallabyTest.ts"</span></span><br></pre></td></tr></table></figure>
<p>新增 <code>&quot;wallabyTest.ts&quot;</code>。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby007.png" alt="wallaby007"></p>
<h3 id="安裝_Node-js_套件">安裝 Node.js 套件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject$ npm install wallaby-webpack angular2-template-loader electron --save-dev</span><br></pre></td></tr></table></figure>
<p>安裝 Wallaby 所需要的 Node.js 套件。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby008.png" alt="wallaby008"></p>
<h2 id="設定_WebStorm">設定 WebStorm</h2><p><img src="/images/webstorm/webstorm-wallaby/wallaby009.png" alt="wallaby009"></p>
<p><strong><em>Run -&gt; Edit Configurations…</em></strong></p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby010.png" alt="wallaby010"></p>
<ol>
<li>按左上角 <code>+</code>。</li>
<li>選擇 <code>Wallaby.js</code>。</li>
</ol>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby011.png" alt="wallaby011"></p>
<ol>
<li><strong>Name</strong> : 取名為 <code>Wallaby</code>。</li>
<li><strong>Configuration file</strong>：設定為剛剛在根目錄建立的 <code>wallaby.js</code>。</li>
</ol>
<h2 id="執行_Wallaby">執行 Wallaby</h2><p><img src="/images/webstorm/webstorm-wallaby/wallaby012.png" alt="wallaby012"></p>
<p>上方選擇 <code>Wallaby</code>，按下右邊的綠色三角形執行 Wallaby。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby013.png" alt="wallaby013"></p>
<p>通過測試的案例，左側會出現<code>綠燈</code>，下方也會顯示目前通過測試案例的個數。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby014.png" alt="wallaby014"></p>
<p><strong>不用</strong>按存檔就可以立即跑測試顯示<code>紅燈</code>或<code>綠燈</code>，且立刻顯示實際值與期望值的差異。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Wallaby 有各種版本，如 Visual Studio、Visual Studio Code，甚至於 Sublime Text 與 Atom 也有支援。</li>
<li>Wallaby 雖然是個付費軟體，但非常有其價值。</li>
<li>TDD 會讓開發變慢，主要是因為工具不夠方便，Wallaby 讓我們寫單元測試的同時，就即時知道<code>紅燈</code>與<code>綠燈</code>測試結果，將大幅提升 TDD 開發效率。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://wallabyjs.com" target="_blank" rel="external">Wallaby</a>, <a href="https://github.com/wallabyjs/ngCliWebpackSample#wallabyjs" target="_blank" rel="external">Angular.js 2 angular-cli (Webpack) generated project</a><br><a href="https://blog.kevinyang.net" target="_blank" rel="external">CK’s Notepad</a>, <a href="https://blog.kevinyang.net/2017/01/05/angular2-ssw-testing-angular2-note/" target="_blank" rel="external">[Angular] 學習筆記(1) - Techniques and practices for testing Angular 2</a><br><a href="https://www.youtube.com/watch?v=RjrIK__PepU&amp;feature=youtu.be" target="_blank" rel="external">Techniques and practices for testing Angular 2 | Identity Server 4 with Angular 2 ASP.NET core</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓 TypeScript 也能 Alive]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="Wallaby" scheme="http://oomusou.io/tags/Wallaby/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在執行階段對 Angular 除錯?]]></title>
    <link href="http://oomusou.io/angular/angular-runtime-debug/"/>
    <id>http://oomusou.io/angular/angular-runtime-debug/</id>
    <published>2017-07-05T12:23:43.000Z</published>
    <updated>2017-07-05T01:32:20.000Z</updated>
    <content type="html"><![CDATA[<p>由於 TypeScript 是編譯語言，很多人擔心該如何 debug Angular，尤其是 TypeScript 編譯沒錯，但在瀏覽器執行卻錯了，但因為 TypeScript 已經編譯成 JavaScript，我該怎麼知道錯在 TypeScript 哪一行呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3</p>
<h2 id="Runtime_Error">Runtime Error</h2><hr>
<p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  title = <span class="string">'app'</span>;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.title.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'app'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>title</code> 設為 <code>undefined</code> 後，再取得 <code>title.length</code> 當然會錯誤，不過 TypeScript 在編譯階段不會報錯。</p>
<p><img src="/images/angular/angular-runtime-debug/debug000.png" alt="debug000"></p>
<p>若 Angular 執行階段錯誤，在 Chrome 的 Developer Tools 的 Console 會出現錯誤訊息。</p>
<p>Chrome 明確顯示 <code>Cannot read property &#39;length&#39; of undefined</code>，因為 <code>title</code> 為 <code>undefined</code>。</p>
<p>重要的是，Chrome 明確告訴我們錯在 <code>app.component.ts</code>，是 TypeScript 而不是 JavaScript。</p>
<p><img src="/images/angular/angular-runtime-debug/debug001.png" alt="debug001"></p>
<p>點 <code>app.component.ts</code> 後，會進入 TypeScript 程式碼錯的那一行，因此不用擔心是編譯過的 JavaScript 而無從 debug。</p>
<blockquote>
<p>不是已經編譯成 JavaScript 了嗎？為什麼 Chrome 知道錯在 TypeScript 哪一行？</p>
</blockquote>
<p><img src="/images/angular/angular-runtime-debug/debug005.png" alt="debug005"></p>
<p>事實上在 <code>ng serve</code> 編譯時，還同時產生了各 <code>js</code> 對應的 <code>js.map</code>，Chrome 就是靠這些 <code>map</code> 檔得知錯誤的 JavaScript 對應到 TypeScript 哪一行。</p>
<blockquote>
<p>可是我不希望正式上線主機也包含這些 <code>map</code> 檔怎麼辦？</p>
</blockquote>
<p><img src="/images/angular/angular-runtime-debug/debug006.png" alt="debug006"></p>
<p>下 <code>ng build —-prod</code> ，則編譯後將不包含 <code>map</code> 檔，且 <code>js</code> size 也小很多，可安心放在正式上線主機上。</p>
<h2 id="關於_undefined">關於 undefined</h2><hr>
<p>關於 undefined 問題，其實 TypeScript 另有解法，只要啟動 StrictNullCheck，就可由 TypeScript 編譯器幫我們擋掉這個錯誤。</p>
<p><img src="/images/angular/angular-runtime-debug/debug002.png" alt="debug002"></p>
<p>在 <code>tsconfig.json</code> 加上  <code>strictNullChecks: true</code>，強迫 TypeScript 檢查 <code>null</code> 與 <code>undefined</code> 的型別檢查。</p>
<p><img src="/images/angular/angular-runtime-debug/debug003.png" alt="debug003"></p>
<p>Language service 會提出警告，不可將 <code>undefined</code> 指定給 <code>string</code> 型別。</p>
<p><img src="/images/angular/angular-runtime-debug/debug004.png" alt="debug004"></p>
<p>TypeScript 實際編譯也是會報錯。</p>
<blockquote>
<p>啟動 StrictNullCheck 後，TypeScript 會將 <code>null</code> 與 <code>undefined</code> 視為一種型別，因此不可將 <code>null</code> 與 <code>undefined</code> 指定給 <code>string</code> 型別。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>其實我一開始也很擔心 TypeScript 經過編譯後，會很難 debug，但所幸有 <code>map</code> 檔配套方案，讓 Chrome 能從 JavaScript 對應到 TypeScript，直接將錯誤顯示在 TypeScript 的正確行數。</li>
<li>實務上 Angular 的除錯，第一步是看 TypeScript 是否編譯錯誤，第二部是用 Chrome Developer Tools 看是否有執行上的錯誤，然後對應到相對應的 TypeScript 檔案。</li>
<li>Angular 為 Chrome 提供非常清楚的 TypeScript 錯誤訊息，不用擔心編譯過的 JavaScript 看不懂而無從 debug。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[不用擔心 TypeScript 編譯後會很難除錯]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 WebStorm 存檔時自動刪除 whitespace?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-whitespace/"/>
    <id>http://oomusou.io/webstorm/webstorm-whitespace/</id>
    <published>2017-07-04T12:23:43.000Z</published>
    <updated>2017-07-04T15:23:31.000Z</updated>
    <content type="html"><![CDATA[<p>Ng lint 預設會檢查是否有 trailing whitespace，尤其在 enter 換行時，WebStorm 為了排版漂亮，會自動新增 whitespace，這將導致 ng lint 的抱怨，希望在存檔時，自動刪除這些 whitespace。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><p>WebStorm 2017.1.4</p>
<h2 id="Symptons">Symptons</h2><p><img src="/images/webstorm/webstorm-whitespace/white000.png" alt="white000"></p>
<p>多按了幾個 enter，WebStorm 會塞 whitespace，ng lint 就開始抱怨了。</p>
<h2 id="Recipes">Recipes</h2><p><img src="/images/webstorm/webstorm-whitespace/white001.png" alt="white001"></p>
<p><strong><em>WebStorm -&gt; Preferences -&gt; Editor -&gt; General</em></strong></p>
<ol>
<li>將 <code>Allow placement of caret after end of line</code> 打勾。</li>
<li>將 <code>Strip trailing spaces on Save</code> 選 <code>All</code>。</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><ul>
<li>這樣存檔時，WebStorm 就會自動將所有 whitespace 刪除，ng lint 就不再抱怨了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[避免 ng lint 抱怨]]>
    
    </summary>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 WebStorm 的 Auto Import 符合 ng lint 格式?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-nglint/"/>
    <id>http://oomusou.io/webstorm/webstorm-nglint/</id>
    <published>2017-07-03T12:23:43.000Z</published>
    <updated>2017-07-02T08:20:11.000Z</updated>
    <content type="html"><![CDATA[<p>WebStorm 的 auto import 非常方便，不過預設格式不符合  ng lint 要求，且 reformat code 之後，整個預設的 Angular 格式也會重新排版，該如何設定成符合 ng lint 要求的格式呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>WebStorm 2017.3<br>Angular CLI 1.0.1<br>Angular 4.1.3</p>
<h2 id="Symptoms">Symptoms</h2><hr>
<p><img src="/images/webstorm/webstorm-nglint/import000.png" alt="import000"></p>
<p>當 import <code>BrowserAnimationModule</code> 時，WebStorm 會自動補上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserAnimationsModule&#125; <span class="keyword">from</span> <span class="string">"@angular/platform-browser/animations"</span>;</span><br></pre></td></tr></table></figure>
<p>但有兩個問題：</p>
<ol>
<li><code>{BrowserAnimationsModule}</code> 的 <code>{}</code> 與 <code>BrowserAnimationsModule</code> 之間沒有空白，與 Angular CLI 預設的風格不合，將來 reformat code 之後，會將原本的 <code>import</code> 變成前後沒有空白。</li>
<li><code>&quot;@angular/platform-browser/animations&quot;</code> 使用雙引號，這違反了 ng lint 的規則，將來必須一一修改。</li>
</ol>
<h2 id="Recipes">Recipes</h2><hr>
<p><img src="/images/webstorm/webstorm-nglint/import001.png" alt="import001"></p>
<p><strong><em>Preferences -&gt; Editor -&gt; Code Style -&gt; TypeScript -&gt; Spaces</em></strong></p>
<p>選擇 <code>ES6 import/export braces</code>。</p>
<p>如右圖所示，<code>Component</code> 前後會有空白。</p>
<p><img src="/images/webstorm/webstorm-nglint/import002.png" alt="import002"></p>
<p>選擇 <code>Punctuation</code>，設定 Use <code>single</code> quotes in new code。</p>
<p><img src="/images/webstorm/webstorm-nglint/import003.png" alt="import003"></p>
<p>如此 WebStorm 就能自動 import 符合 Angular 風格與 ng lint 標準的格式了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過設定，WebStorm 也能融入 Angular 風格，不用為了滿足 ng lint 而一一修復。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓 WebStorm 符合 ng lint 規範]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Angular 實作下拉選單?]]></title>
    <link href="http://oomusou.io/angular/angular-select/"/>
    <id>http://oomusou.io/angular/angular-select/</id>
    <published>2017-07-02T12:23:43.000Z</published>
    <updated>2017-07-02T07:31:20.000Z</updated>
    <content type="html"><![CDATA[<p><strong>下拉選單</strong>為常用的使用者介面，該如何優雅地將資料綁定在元件上，並且優雅地取得使用者的選擇資料呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3</p>
<h2 id="Introudction">Introudction</h2><hr>
<p><img src="/images/angular/angular-select/select000.png" alt="select000"></p>
<p>將實作出一下拉選單，其顯示資料來自於資料綁定，當使用者有不同的選擇，會將其值顯示在 select 下方。</p>
<p>將示範 3 種實作方式：</p>
<ul>
<li>使用 DOM event</li>
<li>使用 Template Reference Variable</li>
<li>使用 Two-Way Binding</li>
</ul>
<h2 id="使用_DOM_event_物件">使用 DOM event 物件</h2><hr>
<p><strong>src/app/app.component.html</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/cd6626875abb6066d515ba53840c532b52b6a651/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> (<span class="attribute">change</span>)=<span class="value">"onChange($event)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; selectedId &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>第 2 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>*ngFor</code> 這個 structure directive 重複顯示 <code>&lt;option&gt;</code>，其中 <code>clouds</code> 型別為 <code>Cloud[]</code>，每一筆資料 <code>cloud</code> 為 <code>Cloud</code> ViewModel，有 <code>name</code> 與 <code>id</code> 兩個欄位，稍後會看到 <code>Cloud</code> ViewModel 的定義。</p>
<p>第 1 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> (<span class="attribute">change</span>)=<span class="value">"onChange($event)"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>(change)</code> 為 event binding，當 change event 被觸發時，執行 <code>onChange()</code> event handler。</p>
<p><code>$event</code> 為 event object，若 event 為原生的 DOM event，則 <code>$event</code> 為 DOM event object，擁有 <code>target</code> 與 <code>target.value</code> 等 property。</p>
<p>將 <code>$event</code> 以參數傳進 <code>onChange()</code>。</p>
<blockquote>
<p>在原生 JavaScript 中，<code>event</code> 物件可直接使用，不需要前面加上 <code>$</code>，但在 Angular 的 HTML template 中，若要使用 event object，Angular 規定要從 <code>event</code> 改成 <code>$event</code>，Angular 在底層另有處理，暫時只能當語法背起來。</p>
</blockquote>
<p>第 5 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; selectedId &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>顯示 select 所選擇的 value，即 <code>cloud.id</code>。</p>
<p><strong>src/app/app.component.ts</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/cd6626875abb6066d515ba53840c532b52b6a651/src/app/app.component.ts" target="_blank" rel="external">app.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="number">0</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">1</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">2</span>, name: <span class="string">'Aliyun'</span>&#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  selectedId: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  onChange(event: Event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.selectedId = +(&lt;HTMLSelectElement&gt;event.target).value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clouds: Cloud[] = [</span><br><span class="line">  &#123;id: <span class="number">0</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">1</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">2</span>, name: <span class="string">'Aliyun'</span>&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p><code>clouds</code> 為 select 欲作 data binding 的資料，實務上此資料會透過 API 取得，在此為了簡化起見，先直接 hardcode 一個陣列。</p>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectedId: <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>selectedCloudId</code> 為 <code>number</code> 型別，雖然也可以宣告為 <code>string</code>，但因為 <code>id</code> 在 <code>cloud</code> 宣告為 <code>number</code> 型別，所以 <code>selectedId</code> 也宣告為 <code>number</code> 型別較合適。</p>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onChange(event: Event) &#123;</span><br><span class="line">  <span class="keyword">this</span>.selectCloudId = +(&lt;HTMLSelectElement&gt;event.target).value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>onChange</code> 為 select change event 的 event handler，其中 <code>event</code> 為 HTML template 傳進來的 <code>$event</code>，型別為 <code>Event</code>。</p>
<p><code>event.target</code> 在 <code>lib.es6.d.ts</code> 定義的型別為 <code>EventTarget</code>，但我們知道其本質型別為 <code>HTMLSelectElement</code>，因此使用 type assertion  加上 <code>&lt;HTMLSelectElement&gt;</code>將 <code>event target</code> 轉型成 <code>HTMLSelectElement</code>，則 intellisense 就會有 <code>value</code> 可選，不過 <code>value</code> 的型別為 <code>string</code>，因此要再加上 <code>+</code> 將 <code>string</code> 轉成 <code>number</code>。</p>
<p><strong>src/app/cloud.ts</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/cd6626875abb6066d515ba53840c532b52b6a651/src/app/cloud.ts" target="_blank" rel="external">cloud.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Cloud </span>&#123;</span><br><span class="line">  id: <span class="built_in">number</span>,</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>Cloud</code> 的 ViewModel，<code>id</code> 為 <code>number</code>，<code>name</code> 為 <code>string</code>。</p>
<h2 id="使用_Template_Reference_Variable">使用 Template Reference Variable</h2><hr>
<p><strong>src/app/app.component.html</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/f835c3cf5881885df555486b19fc4c0a1be1c826/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> (<span class="attribute">change</span>)=<span class="value">"onChange(mySelect)"</span> #<span class="attribute">mySelect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; selectedId &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> (<span class="attribute">change</span>)=<span class="value">"onChange(mySelect)"</span> #<span class="attribute">mySelect</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>原本 <code>onChange()</code> 是傳進 <code>$event</code>，這裡改傳 <code>mySelect</code>。</p>
<p><code>#</code> 為 template reference variable，我們可以在 HTML template 內，對任意 HTML element 加上 <code>#</code> 與變數名稱，Angular 會自動幫我們對該 element 建立物件。</p>
<p><strong>src/app/app.component.ts</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/f835c3cf5881885df555486b19fc4c0a1be1c826/src/app/app.component.ts" target="_blank" rel="external">app.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="number">0</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">1</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">2</span>, name: <span class="string">'Aliyun'</span>&#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  selectedId: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  onChange(element: HTMLSelectElement) &#123;</span><br><span class="line">    <span class="keyword">this</span>.selectedId = +element.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onChange(element: HTMLSelectElement) &#123;</span><br><span class="line">  <span class="keyword">this</span>.selectedId = +element.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>onChange()</code> 改接收 template reference variable 後，因為我們確定 <code>onChange()</code> 為 select 的 event handler，所以傳進的 element 型別必為 <code>HTMLSelectElement</code>。</p>
<p>由於 <code>element.value</code> 型別為 <code>string</code>，必須加上 <code>+</code> 轉型為 <code>number</code>。</p>
<h2 id="使用_Two-Way_Binding">使用 Two-Way Binding</h2><hr>
<p><strong>src/app/app.module.ts</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/88e34459383692af9080b7b61c75dcc1b087d528/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; from <span class="string">"@angular/forms"</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>要使用 two-way binding，必須在 <code>AppModule</code> 手動 import <code>FormsModule</code>。</p>
<p><strong>src/app/app.component.html</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/88e34459383692af9080b7b61c75dcc1b087d528/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> [(<span class="attribute">ngModel</span>)]=<span class="value">"selectedId"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; selectedId &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>[(ngModel)]</code> 直接 two-way binding 到 <code>selectedId</code>，其他都可以拿掉。</p>
<p><strong>src/app/app.component.ts</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/88e34459383692af9080b7b61c75dcc1b087d528/src/app/app.component.ts" target="_blank" rel="external">app.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Cloud&#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="number">0</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">1</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">2</span>, name: <span class="string">'Aliyun'</span>&#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  selectedId: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於使用了 two-way binding，所有的 event handler 也可以拿掉，當 select 選擇改變時，自動會改變 <code>selectedId</code>。</p>
<blockquote>
<p>實務上該使用哪種寫法？</p>
</blockquote>
<p>雖然表面上 two-way binding 的寫法最精簡，若以<strong>物件導向</strong>與<strong>強型別</strong>觀點，template reference variable 的寫法<strong>語意較佳</strong>：</p>
<ul>
<li>明確將<strong>物件</strong>傳入 event handler 當中。</li>
<li>Event handler 的參數可明確宣告物件<strong>型別</strong>加以檢查。</li>
<li>取得物件的值較直觀，不必搭配 type assertion。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>仍然可以在 HTML template 使用 DOM 的 event 物件，但必須加上<code>event</code> 前面加上 <code>$</code> 變成  <code>$event</code>。</li>
<li>Template reference variable 技巧在實務上常常使用，可隨時在 HTML template 中將 HTML element 宣告成變數傳入 event handler。</li>
<li>Two-way binding 實際上是個 syntax sugur，Angular 會展開實作 <code>(ngModelChange)</code> event handler。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG4Select" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[介紹 3 種實務上常用的方法]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Protractor 的 getText() 回傳型別到底是什麼?]]></title>
    <link href="http://oomusou.io/protractor/protractor-promise/"/>
    <id>http://oomusou.io/protractor/protractor-promise/</id>
    <published>2017-06-30T12:23:43.000Z</published>
    <updated>2017-06-29T16:28:58.000Z</updated>
    <content type="html"><![CDATA[<p>使用了 TypeScript 之後，對於型別就非常敏感，都會要求自己要將傳入參數的型別與回傳型別明確指定，但 Protractor 在 page object 常用的 <code>getText()</code>，到底回傳型別是什麼呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Protractor 5.1.2</p>
<h2 id="Symptoms">Symptoms</h2><hr>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4DemoPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.css(<span class="string">'app-root h1'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Angular CLI 專案預設的 Protractor 範例，其 page object 的 <code>nagivateTo()</code> 與 <code>getParagraphText()</code> 並沒有加上回傳型別，既然使用了 TypeScript，就希望能盡量加上型別，由編譯器替我們檢查與保護。</p>
<p><img src="/images/protractor/protractor-promise/promise000.png" alt="promise000"></p>
<p>有 <code>get()</code> 我們得知其回傳型別為 <code>wdpromise.Promise&lt;any&gt;</code>。</p>
<p><img src="/images/protractor/protractor-promise/promise001.png" alt="promise001"></p>
<p>但實際替回傳型別加上 <code>wdpromise.Promise&lt;any&gt;</code> 之後，language service 會抱怨找不到 <code>wdpromise</code> namespace。</p>
<p><img src="/images/protractor/protractor-promise/promise002.png" alt="promise002"></p>
<p><code>getText()</code> 則完全沒提供任何回傳型別資訊，則 <code>getParagraphText()</code> 該回傳什麼型別呢？</p>
<p><img src="/images/protractor/protractor-promise/promise005.png" alt="promise005"></p>
<p>實際執行 <code>ng e2e</code>，結果當然也是編譯失敗。</p>
<h2 id="Recipes">Recipes</h2><hr>
<p>由於 <code>getText()</code> 之後可以用 <code>then()</code>，在觀念上知道 <code>getText()</code> 回傳的是 <code>Promise</code>。</p>
<p><img src="/images/protractor/protractor-promise/promise004.png" alt="promise004"></p>
<p>實際加上回傳型別 <code>Promise&lt;string&gt;</code>，language service 抱怨 <code>promise.Promise&lt;string&gt;</code> 與 <code>Promise&lt;string&gt;</code> 不相容，試試看回傳 <code>promise.Promise&lt;string&gt;</code> 看看。</p>
<p><img src="/images/protractor/protractor-promise/promise006.png" alt="promise006"></p>
<p>改成回傳 <code>promise.Promise&lt;string&gt;</code> 之後，另外加上 <code>import { promise } from &#39;selenium-webdriver&#39;;</code> 之後，language service 就不再抱怨了。</p>
<blockquote>
<p>promise.Promise<string> 看起來很怪，不像我們常用的 TypeScript 寫法，事實上，小寫的 <code>promise</code> 為 namespace，而 <code>Promise&lt;string&gt;</code> 才是我們所熟悉的 <code>Promise</code>。</string></p>
</blockquote>
<p><img src="/images/protractor/protractor-promise/promise007.png" alt="promise007"></p>
<p>藉由剛剛的經驗，將 <code>wdpromise.Promise&lt;any&gt;</code> 改成 <code>promise.Promise&lt;any&gt;</code> 試試看，結果 language service 完全不再抱怨了。</p>
<p><img src="/images/protractor/protractor-promise/promise008.png" alt="promise008"></p>
<p>實際跑 <code>ng e2e</code>，TypeScript 編譯成功，也可以成功跑完測試。</p>
<blockquote>
<p>實務上真的要這樣寫回傳型別嗎？</p>
</blockquote>
<p><a href="https://github.com/angular/protractor/blob/master/exampleTypescript/angularPage.ts" target="_blank" rel="external">protractor/exampleTypescript/angularPage.ts</a></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Because this file references protractor, you'll need to have it as a project</span></span><br><span class="line"><span class="comment">// dependency to use 'protractor/globals'. Here is the full list of imports:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// import &#123;browser, element, by, By, $, $$, ExpectedConditions&#125;</span></span><br><span class="line"><span class="comment">//   from 'protractor/globals';</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> &#123;browser, element, by&#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AngularHomepage &#123;</span><br><span class="line">  nameInput = element(by.model(<span class="string">'yourName'</span>));</span><br><span class="line">  greeting = element(by.binding(<span class="string">'yourName'</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    browser.get(<span class="string">'http://www.angularjs.org'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setName(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.nameInput.sendKeys(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getGreeting returns a webdriver.promise.Promise.&lt;string&gt;. For simplicity</span></span><br><span class="line">  <span class="comment">// setting the return value to any</span></span><br><span class="line">  getGreeting(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.greeting.getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Protractor 官網實際示範了應該如何用 TypeScript 寫 page object。</p>
<p>21 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getGreeting returns a webdriver.promise.Promise.&lt;string&gt;. For simplicity</span></span><br><span class="line"><span class="comment">// setting the return value to any</span></span><br><span class="line">getGreeting(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.greeting.getText();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getGreeting()</code> 用的正是 <code>getText()</code>，Protractor 官方也認為 <code>webdriver.promise.Promise.&lt;string&gt;</code> 實在太麻煩了，用 <code>any</code> 即可。</p>
<p><img src="/images/protractor/protractor-promise/promise009.png" alt="promise009"></p>
<p>若你跟我一樣有型別強迫症，回傳 <code>any</code> 即可。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>雖然 TypeScript 是強型別，但 <code>any</code> 也不是不能用，除非能說出理由，在這裡就是因為  <code>webdriver.promise.Promise.&lt;string&gt;</code> 實在太麻煩了，連 Protractor 官網也建議直接用 <code>any</code> 即可。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/angular/protractor" target="_blank" rel="external">Protractor</a>, <a href="https://github.com/angular/protractor/blob/master/exampleTypescript/angularPage.ts" target="_blank" rel="external">angularPage.ts</a></p>
]]></content>
    <summary type="html">
    <![CDATA[必要時也可以用 any]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 Protractor 跑 Headless Chrome?]]></title>
    <link href="http://oomusou.io/protractor/protractor-headless-chrome/"/>
    <id>http://oomusou.io/protractor/protractor-headless-chrome/</id>
    <published>2017-06-29T12:23:43.000Z</published>
    <updated>2017-06-28T06:58:37.000Z</updated>
    <content type="html"><![CDATA[<p>Angular CLI 的 Protractor 預設是跑 Chrome，但在 Chrome 59 之後提供了 Headless Chrome，讓我們以類似 PhantomJS 方式跑 E2E 測試。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Protractor 5.1.2</p>
<h2 id="修改_protractor-conf-js">修改 protractor.conf.js</h2><hr>
<p><strong>protractor.conf.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Protractor configuration file, see link for more information</span></span><br><span class="line"><span class="comment">// https://github.com/angular/protractor/blob/master/lib/config.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; SpecReporter &#125; = <span class="built_in">require</span>(<span class="string">'jasmine-spec-reporter'</span>);</span><br><span class="line"></span><br><span class="line">exports.config = &#123;</span><br><span class="line">  allScriptsTimeout: <span class="number">11000</span>,</span><br><span class="line">  specs: [</span><br><span class="line">    <span class="string">'./e2e/**/*.e2e-spec.ts'</span></span><br><span class="line">  ],</span><br><span class="line">  capabilities: &#123;</span><br><span class="line">    <span class="string">'browserName'</span>: <span class="string">'chrome'</span>,</span><br><span class="line">    chromeOptions: &#123;</span><br><span class="line">      args: [ <span class="string">"--headless"</span>, <span class="string">"--disable-gpu"</span>, <span class="string">"--window-size=1920, 1080"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  directConnect: <span class="literal">true</span>,</span><br><span class="line">  baseUrl: <span class="string">'http://localhost:4200/'</span>,</span><br><span class="line">  framework: <span class="string">'jasmine'</span>,</span><br><span class="line">  jasmineNodeOpts: &#123;</span><br><span class="line">    showColors: <span class="literal">true</span>,</span><br><span class="line">    defaultTimeoutInterval: <span class="number">30000</span>,</span><br><span class="line">    print: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onPrepare() &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'ts-node'</span>).register(&#123;</span><br><span class="line">      project: <span class="string">'e2e/tsconfig.e2e.json'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    jasmine.getEnv().addReporter(<span class="keyword">new</span> SpecReporter(&#123; spec: &#123; displayStacktrace: <span class="literal">true</span> &#125; &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>13 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chromeOptions: &#123;</span><br><span class="line">      args: [ <span class="string">"--headless"</span>, <span class="string">"--disable-gpu"</span>, <span class="string">"--window-size=1920, 1080"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增 <code>chromeOptions</code>。</p>
<ul>
<li><strong>—headless</strong> : 以 headless 模式跑 Chrome。</li>
<li><strong>—disable-gpu</strong> : <a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="external">官網</a> 沒做進一步解釋，但提到將來會拿掉此選項。</li>
<li><strong>—window-size</strong> : 決定 Chrome 視窗大小，對於 RWD 測試有幫助。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Headless Chrome 執行速度比 Chrome 快。</li>
<li>若要在 Jenkins 或 VSTS 跑 E2E 測試，則 Headless Chrome 是必須的。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://cvuorinen.net" target="_blank" rel="external">Carl Vuorinen</a>, <a href="http://cvuorinen.net/2017/05/running-angular-tests-in-headless-chrome/" target="_blank" rel="external">Running Angular tests in headless Chrome</a><br><a href="https://developers.google.com/web/resources/contributors#ericbidelman" target="_blank" rel="external">Eric Bidelman</a>, <a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="external">Getting Started with Headless Chrome</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Headless Chrome 取代 PhantomJS]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
</feed>
