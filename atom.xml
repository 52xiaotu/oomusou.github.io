<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2018-02-16T03:12:52.334Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何在 macOS 徹底刪除 App 所留下的設定檔 ?]]></title>
    <link href="http://oomusou.io/macos/uninstall-folder/"/>
    <id>http://oomusou.io/macos/uninstall-folder/</id>
    <published>2018-02-18T12:23:43.000Z</published>
    <updated>2018-02-16T03:12:52.334Z</updated>
    <content type="html"><![CDATA[<p>關於 macOS 的原生 app，雖然可以透過 <code>AppCleaner</code> 或原廠提供了 <code>Uninstall App</code> 移除，但實務上仍會發現一些 app 自己的 <code>設定檔</code> 或 <code>暫存檔</code>，無法百分之百的從系統移除，需手動加以處理。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3</p>
<h2 id="Directory">Directory</h2><hr>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">Library</span></span><br><span class="line">~/<span class="keyword">Library</span></span><br><span class="line"></span><br><span class="line">/<span class="keyword">Library</span>/Application Support</span><br><span class="line">~/<span class="keyword">Library</span>/Application Support</span><br><span class="line"></span><br><span class="line">/<span class="keyword">Library</span>/Preferences</span><br><span class="line">~/<span class="keyword">Library</span>/Preferences</span><br><span class="line"></span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure>
<p>這幾個目錄，是 app 常見的 <code>設定檔</code> 與 <code>暫存檔</code> 使用目錄，除了依賴 <code>AppCleaner</code> 外，這幾個目錄最好手動檢查一下，是否有尚未移除檔案。</p>
<h2 id="Concluson">Concluson</h2><hr>
<ul>
<li>目前在 macOS 尚未有完美的 <code>反安裝 App</code> 解決方案時，手動檢查這幾個目錄是必要的。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[幾個需要手動刪除檔案的目錄]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何避免 Angular 被瀏覽器 cache ?]]></title>
    <link href="http://oomusou.io/angular/browser-cache/"/>
    <id>http://oomusou.io/angular/browser-cache/</id>
    <published>2018-02-17T12:23:43.000Z</published>
    <updated>2018-02-15T02:02:36.474Z</updated>
    <content type="html"><![CDATA[<p>瀏覽器為了效能，會對 HTML、JavaScript 與 CSS 做 cache，其本意是好的，但對於 developer 來說，卻擔心更新到 production server 後，user 仍然是執行到被瀏覽器 cache 的 HTML、JavaScript 與 CSS，Angular 該如何解決這個問題呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular 5.1</p>
<h2 id="HTML">HTML</h2><hr>
<p>在經過 Angular CLI 的 <code>ng build --prod</code> 之後，會在 <code>dist</code> 目錄下產生整個 Angular 專案唯一的 <code>index.html</code>，擔心的是 user 執行到被瀏覽器 cache 的 <code>index.html</code>。</p>
<h3 id="新增_HTML_Meta">新增 HTML Meta</h3><p><strong>src/index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>NG5HttpClient<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Cache-Control"</span> <span class="attribute">content</span>=<span class="value">"no-cache, no-store, max-age=0, must-revalidate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"expires"</span> <span class="attribute">content</span>=<span class="value">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"icon"</span> <span class="attribute">type</span>=<span class="value">"image/x-icon"</span> <span class="attribute">href</span>=<span class="value">"favicon.ico"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">app-root</span>&gt;</span><span class="tag">&lt;/<span class="title">app-root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 6 行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Cache-Control"</span> <span class="attribute">content</span>=<span class="value">"no-cache, no-store, max-age=0, must-revalidate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"expires"</span> <span class="attribute">content</span>=<span class="value">"0"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>新增這 3 行 <code>&lt;meta&gt;</code>。</p>
<p>在 HTTP 1.1 規格中，有 <a href="https://tools.ietf.org/html/rfc2616#section-14.9" target="_blank" rel="external">Cache-Control</a> 可設定瀏覽器的 cache。</p>
<p>在 HTTP 1.0 規格中，有 <a href="https://tools.ietf.org/html/rfc1945#section-10.12" target="_blank" rel="external">Pragma</a> 可設定瀏覽器的 cache。</p>
<p>而 HTTP 1.0 與 1.1 都有 <code>Expires</code> 設定 cache 內容的有效期限，但在 1.1 的規格中，<code>Cache-Control</code> 的優先權是大於 <code>Expires</code>，因此可以規劃出以上通用設定，就可避免 <code>index.html</code> 被瀏覽器 cache。</p>
<p><img src="/images/angular/browser-cache/cache000.png" alt="cache000"></p>
<ol>
<li>開啟 <code>src</code> 目錄下的 <code>index.html</code></li>
<li>加入 3 行 <code>&lt;meta&gt;</code></li>
</ol>
<h3 id="編譯_Angular">編譯 Angular</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ ng build <span class="comment">--prod</span></span><br></pre></td></tr></table></figure>
<p>要放進 production server 的 code，最後會加上 <code>--prod</code>。</p>
<p><img src="/images/angular/browser-cache/cache001.png" alt="cache001"></p>
<h3 id="編譯後的_index-html">編譯後的 index.html</h3><p>經過 <code>ng build --prod</code> 之後的 HTML、JavaScript 與 CSS 都會放在 <code>dist</code> 目錄下。</p>
<p><img src="/images/angular/browser-cache/cache002.png" alt="cache002"></p>
<ol>
<li>選擇 <code>dist</code> 目錄</li>
<li>選擇 <code>index.html</code>，這是最後會上 production server 的 <code>index.html</code></li>
<li>我們剛剛加入的 3 個 <code>&lt;meta&gt;</code> 都還留著，因此不用每次編譯就修改 <code>index.html</code></li>
</ol>
<blockquote>
<p>只要改一次 <code>src/index.html</code> 的 <code>&lt;meta&gt;</code>，之後就不用擔心 HTML 被瀏覽器 cache 的問題</p>
</blockquote>
<h2 id="JavaScript">JavaScript</h2><hr>
<p>JavaScript 若檔名相同，瀏覽器會優先選擇使用本地的 cache 增加效能，Angular CLI  在每次 <code>ng build --prod</code> 之後，會重新以亂數命名 JavaScript 檔案，因此瀏覽器只能重新對 server 抓 <code>*.js</code>，而不會採用瀏覽器的 cache。</p>
<p><img src="/images/angular/browser-cache/cache003.png" alt="cache003"></p>
<p>所有經過 <code>ng build --prod</code> 所 bundle 的 JavaScript 都經過亂數改掉檔名，因此瀏覽器一定會再跟 server 要新的 JavaScript。</p>
<p><img src="/images/angular/browser-cache/cache005.png" alt="cache005"></p>
<p>Angular CLI 會幫我們將所引用的 JavaScript 一併改名。</p>
<h2 id="CSS">CSS</h2><hr>
<p>CSS 若檔名相同，瀏覽器會優先選擇使用本地的 cache 增加效能，Angular CLI  在每次 <code>ng build --prod</code> 之後，會重新以亂數命名 CSS 檔案，因此瀏覽器只能重新對 server 抓 <code>*.css</code>，而不會採用瀏覽器的 cache。</p>
<p><img src="/images/angular/browser-cache/cache004.png" alt="cache004"></p>
<p>所有經過 <code>ng build --prod</code> 所 bundle 的 CSS 都經過亂數改掉檔名，因此瀏覽器一定會再跟 server 要新的 CSS。</p>
<p><img src="/images/angular/browser-cache/cache006.png" alt="cache006"></p>
<p>Angular CLI 會幫我們將所引用的 CSS 一併改名。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>在開發階段時，完全不用擔心 HTML、JavaScript 與 CSS 被瀏覽器 cache 問題，Angular CLI 內建的 web server 已經幫我們處理</li>
<li>由於 JavaScript 並沒有提供 <code>&lt;meta&gt;</code> 機制，因此若將 JavaScript 獨立於 HTML，就必須面臨 JavaScript 可能被瀏覽器 cache 的問題，Angular CLI 已經幫我們處理了 JavaScript 與 CSS，我們唯一需要處理的只剩下 HTML 部分，所幸 HTML 部分可簡單的用 <code>&lt;meta&gt;</code> 處理即可</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://poychang.github.io/" target="_blank" rel="external">Poy Chang</a>, <a href="https://poychang.github.io/disable-browser-cache-on-angular-site/" target="_blank" rel="external">在 Angular 網站中取消瀏覽器快取功能</a></p>
]]></content>
    <summary type="html">
    <![CDATA[簡單的方式避免瀏覽器 cache]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 Ubuntu ?]]></title>
    <link href="http://oomusou.io/Docker/ubuntu/"/>
    <id>http://oomusou.io/Docker/ubuntu/</id>
    <published>2018-02-16T12:23:43.000Z</published>
    <updated>2018-02-14T09:27:39.628Z</updated>
    <content type="html"><![CDATA[<p>以前在 macOS 安裝 Ubuntu 都要先安裝 Parallel Desktop，然後再將 Ubuntu 安裝在 Parallel Desktop 上，安裝了 Docker for Mac 後，只要下載 Ubuntu 的 Docker image，Ubuntu 就能以 container 形式跑在 Docker 上。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)</p>
<h2 id="搜尋_Ubuntu_Image">搜尋 Ubuntu Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker search ubuntu</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker search</code> 搜尋 Docker Hub 的 image。</p>
<p><img src="/images/docker/ubuntu/ubuntu000.png" alt="ubuntu000"></p>
<ol>
<li>使用 Docker 第一步就是使用 <code>docker search</code> 到 Docker Hub 搜尋 image 下載</li>
<li>找到 <code>ubuntu</code> image</li>
<li>7234 star</li>
<li>為 official image</li>
</ol>
<blockquote>
<p>下載 Docker image 時，盡量使用 official  image，而不要使用別人包過的 image，因為可能會有後門或木馬</p>
</blockquote>
<h2 id="下載_Ubuntu_Image">下載 Ubuntu Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker pull ubuntu</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker pull</code> 下載 image 到本機。</p>
<p><img src="/images/docker/ubuntu/ubuntu001.png" alt="ubuntu001"></p>
<h2 id="建立_Container">建立 Container</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="command">run</span> <span class="comment">--name MyUbuntu -dt ubuntu</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container。</p>
<ul>
<li><code>--name</code> : 替 container 取一個人能夠識別的名字 <code>MyUbuntu</code> ( 若省略，Docker 將隨機命名 )</li>
<li><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process</li>
<li><code>-t</code> : <code>t</code>erminal，預設執行 <code>/bin/bash</code> process，為了讓 container 啟動後不會立即停止</li>
<li><code>ubuntu</code> : Ubuntu 的官方 image 名稱</li>
</ul>
<blockquote>
<p>Docker container  重要觀念</p>
<p>One process per container</p>
<ul>
<li>一個 container 應該只有 process</li>
<li>若有多個 process，就應該有多個 container</li>
<li>process 執行完，container 則釋放停止執行</li>
</ul>
<p>當 process 執行完，container 會自動釋放，<code>ubuntu</code> image 預設並沒有執行任何 process，所以 <code>start</code> 完後會自動釋放，為了讓 container 不會執行完立即釋放，因此特別加上 <code>-t</code>，讓此 container 預設執行 <code>bash</code>，使的 container 不會釋放</p>
</blockquote>
<p><img src="/images/docker/ubuntu/ubuntu002.png" alt="ubuntu002"></p>
<ol>
<li>使用 <code>docker run</code> 建立 container 並執行 bash 進入 terminal</li>
</ol>
<h2 id="觀察_Container">觀察 Container</h2><hr>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -<span class="literal">a</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker ps -a</code> 顯示所有 container。</p>
<p><code>-a</code> : <code>a</code>ll 顯示所有 container，包含所有 <code>正在執行</code> 或者 <code>尚未執行</code> 的 container。</p>
<p><img src="/images/docker/ubuntu/ubuntu005.png" alt="ubuntu005"></p>
<ol>
<li>輸入 <code>docker ps -a</code></li>
<li><code>MyUbuntu</code> container 已經被建立</li>
</ol>
<h2 id="啟動_Container">啟動 Container</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker start <span class="constant">MyUbuntu</span></span><br><span class="line"><span class="variable">$ </span>docker ps</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker start</code> 重新啟動已經在硬碟，但還沒有執行的 container。</p>
<p>使用 <code>docker ps</code> 顯示目前執行中的 container。</p>
<p><img src="/images/docker/ubuntu/ubuntu006.png" alt="ubuntu006"></p>
<ol>
<li>輸入 <code>docker start MyUbuntu</code> 啟動 <code>MyUbuntu</code> container</li>
<li>輸入 <code>docker ps</code> 顯示目前執行中的 container</li>
<li><code>MyUbuntu</code> container 執行中。</li>
</ol>
<h2 id="進入_Container_的_terminal">進入 Container 的 terminal</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyUbuntu bash</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker exec</code> 對已經執行中的 container 下指令。</p>
<ul>
<li><code>-i</code> :  <code>i</code>nteractive，可對 terminal 輸入資料</li>
<li><code>-t</code> : <code>t</code>erminal，可對 terminal 顯示資料</li>
<li><code>MyUbuntu</code> : Container 名稱</li>
<li><code>bash</code> : 對 container 下的指令</li>
</ul>
<p><img src="/images/docker/ubuntu/ubuntu007.png" alt="ubuntu007"></p>
<ol>
<li>使用 <code>docker exec -it</code> 進入 container 的 terminal</li>
<li>已經進入 Ubuntu 的 terminal</li>
</ol>
<h2 id="離開_Ubuntu">離開 Ubuntu</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>exit</code> 離開 Ubuntu 的 terminal。</p>
<p><img src="/images/docker/ubuntu/ubuntu008.png" alt="ubuntu008"></p>
<h2 id="停止_Container">停止 Container</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker stop <span class="constant">MyUbuntu</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker stop</code> 停止 container。</p>
<p><img src="/images/docker/ubuntu/ubuntu010.png" alt="ubuntu010"></p>
<ol>
<li>輸入 <code>docker stop MyUbuntu</code> 停止 <code>MyUbuntu</code> container</li>
<li>輸入 <code>docker ps</code> 顯示目前執行中的 container</li>
</ol>
<p>目前已經沒有執行中的 container，表示 <code>MyUbuntu</code> container 已經停止執行。</p>
<h2 id="刪除_Container">刪除 Container</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker rm <span class="constant">MyUbuntu</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker rm</code> 刪除在硬碟中的 container。</p>
<p><img src="/images/docker/ubuntu/ubuntu011.png" alt="ubuntu011"></p>
<ol>
<li>輸入 <code>docker rm MyUbuntu</code> 刪除 <code>MyUbuntu</code> container</li>
<li>輸入 <code>docker ps -a</code> 顯示所有在硬碟的 container</li>
</ol>
<blockquote>
<p>要刪除 container 之前，必須先停止 container，才能加以刪除。</p>
</blockquote>
<h2 id="顯示所有_Image">顯示所有 Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker images</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker images</code> 顯示目前在硬碟所有的 image。</p>
<p><img src="/images/docker/ubuntu/ubuntu012.png" alt="ubuntu012"></p>
<ol>
<li>輸入 <code>docker images</code> 顯示目前在硬碟的所有 image</li>
<li>目前有 <code>ubuntu</code> image</li>
</ol>
<h2 id="刪除_Image">刪除 Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker rmi ubuntu</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker rmi</code> 刪除 image。</p>
<ul>
<li><code>rm</code> : 刪除</li>
<li><code>i</code> : <code>i</code>mage</li>
</ul>
<p><img src="/images/docker/ubuntu/ubuntu013.png" alt="ubuntu013"></p>
<ol>
<li>輸入 <code>docker rmi ubuntu</code> 刪除 <code>ubuntu</code> image</li>
<li>輸入 <code>docker images</code> 確認是否 image 已被刪除</li>
</ol>
<h2 id="Summary">Summary</h2><hr>
<p><img src="/images/docker/ubuntu/ubuntu014.svg" alt="ubuntu014"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文為 Docker 最基本的操作，是使用 Docker 一定要會的基本指令。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[以 Docker 基本指令建立 Ubuntu]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立 Lazy Loading Module ?]]></title>
    <link href="http://oomusou.io/angular/lazy-loading-module/"/>
    <id>http://oomusou.io/angular/lazy-loading-module/</id>
    <published>2018-02-15T12:23:43.000Z</published>
    <updated>2018-02-14T03:22:51.023Z</updated>
    <content type="html"><![CDATA[<p>隨著 app 開發越來越大，若將所有的 route 都寫在 <code>AppModule</code>，除了難以維護外，還必須在一開始就載入全部 component，使得 Angular 載入時間變久；比較好的方式是將 component 切成 module，並有自己的 route，當 user 點入該 route 時，才去下載該 module，這就是 lazy loading。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Node.js 8.9.4<br>Angular CLI 1.6.7<br>Angular 5.2.4</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/angular/lazy-loading-module/lazy012.png" alt="lazy012"></p>
<p>原本只有一個 <code>AppModule</code>：</p>
<ul>
<li>按下 <code>Login</code> 會載入 <code>LoginComponent</code></li>
<li>按下 <code>Post</code> 會載入 <code>PostComponent</code></li>
<li>按下 <code>Home</code> 會載入 <code>AppComponent</code></li>
</ul>
<h2 id="Task">Task</h2><hr>
<p>拆成多個 module，並採用 lazy loading。</p>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/angular/lazy-loading-module/lazy013.svg" alt="lazy013"></p>
<p>除了一定要有的 <code>AppModule</code> 外</p>
<ul>
<li>將  <code>LoginComponent</code> 獨立成 <code>LoginModule</code></li>
<li>將 <code>PostComponent</code> 獨立成 <code>PostModule</code></li>
</ul>
<p>並且對 <code>LoginModule</code> 與 <code>PostModule</code> 使用 lazy loading。</p>
<h2 id="Implementation">Implementation</h2><hr>
<h3 id="建立新_Module">建立新 Module</h3><p><strong>建立 LoginModule</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/ MyProject $ <span class="built_in">cd</span> src/app</span><br><span class="line">~/ MyProject/src/app $ ng g m Login --routing</span><br></pre></td></tr></table></figure>
<p>原本 <code>LoginComponent</code> 是建立在 <code>src/app/login</code> 目錄下，目前想將 <code>LoginComponent</code> 變成 module，由於 Angular CLI 建立 module 時，會建立子目錄，因此先將目錄切到 <code>src/app</code> ，建立 <code>LoginModule</code> 在 <code>src/app/login</code> 目錄下。</p>
<ul>
<li><code>g</code> : generate 的縮寫</li>
<li><code>m</code> : module 的縮寫</li>
<li><code>—-routing</code> : 建立 module 時，順便建立 <code>RoutingModule</code></li>
</ul>
<p><img src="/images/angular/lazy-loading-module/lazy000.png" alt="lazy000"></p>
<ol>
<li>將目錄切到 <code>src/app</code> 下，使用 <code>ng g m [module name] —-routing</code> 建立 module 與 routing module</li>
<li>Angular CLI 將會建立 <code>login.module.ts</code> 與 <code>login-routing.module.ts</code> 兩個檔案</li>
<li>將原本在 <code>src/app/login</code> 目錄下的  <code>LoginComponent</code> 重構到 <code>src/app/login/login</code> 目錄下</li>
</ol>
<blockquote>
<p>目前 <code>src/app/login/login</code> 看起來很彆扭，事實上 <code>src/app/login</code> 為 module 目錄，而 <code>src/app/login/login</code> 為 component 目錄，將來會有更多 component，因此特別將原本在 <code>src/app/login</code> 的 <code>LoginComponent</code> 重構到 <code>src/app/login/login</code>，目前只是因為 <code>LoginModule</code> 與  <code>LoginComponent</code> 同名，所以看起來很怪</p>
</blockquote>
<p><strong>建立 PostModule</strong></p>
<p><img src="/images/angular/lazy-loading-module/lazy001.png" alt="lazy001"></p>
<ol>
<li>將目錄切到 <code>src/app</code> 下，使用 <code>ng g m [module name] —-routing</code> 建立 module 與 routing module</li>
<li>Angular CLI 將會建立 <code>post.module.ts</code> 與 <code>post-routing.module.ts</code> 兩個檔案</li>
<li>將原本在 <code>src/app/login</code> 目錄下的  <code>PostComponent</code> 重構到 <code>src/app/post/post</code> 目錄下</li>
</ol>
<blockquote>
<p>目前 <code>src/app/post/post</code> 看起來很彆扭，事實上 <code>src/app/post</code> 為 module 目錄，而 <code>src/app/post/post</code> 為 component 目錄，將來會有更多 component，因此特別將原本在 <code>src/app/post</code> 的 <code>PostComponent</code> 重構到 <code>src/app/post/post</code>，目前只是因為 <code>PostModule</code> 與  <code>PostComponent</code> 同名，所以看起來很怪</p>
</blockquote>
<h3 id="設定新_Module">設定新 Module</h3><p><strong>login-routing.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LoginComponent &#125; from <span class="string">'./login/login.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; from <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">''</span>, component: LoginComponent &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [RouterModule.forChild(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoginRoutingModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: <span class="string">''</span>, component: LoginComponent &#125;,</span><br></pre></td></tr></table></figure>
<p>將原本在 <code>AppRoutingModule</code> 的 route </p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: <span class="string">'login'</span>, component: LoginComponent &#125;,</span><br></pre></td></tr></table></figure>
<p>重構到 <code>LoginRoutingModule</code> 內，因為已經在 <code>LoginRoutingModule</code> 內，所以 <code>path</code> 為 <code>&#39;&#39;</code>  即可。</p>
<p><img src="/images/angular/lazy-loading-module/lazy002.png" alt="lazy002"></p>
<ol>
<li>編輯 <code>login-routing.module.ts</code></li>
<li>將原本在 <code>app-routing.module.ts</code> 的 login route 重構到 <code>login-routing.module.ts</code></li>
</ol>
<p><strong>login.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; from <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoginComponent &#125; from <span class="string">'./login/login.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoginRoutingModule &#125; from <span class="string">'./login-routing.module'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule,</span><br><span class="line">    LoginRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: [</span><br><span class="line">    LoginComponent</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoginModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declarations: [</span><br><span class="line">  LoginComponent</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>因為 <code>LoginRoutingModule</code> 已經使用到 <code>LoginComponent</code>，因此在 <code>LoginModule</code> 需要加以宣告。</p>
<p><img src="/images/angular/lazy-loading-module/lazy004.png" alt="lazy004"></p>
<ol>
<li>編輯  <code>login.module.ts</code></li>
<li>在 <code>declarations</code> 加上 <code>LoginComponent</code></li>
</ol>
<p><strong>post-routing.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; from <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostComponent &#125; from <span class="string">'./post/post.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">''</span>, component: PostComponent &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [RouterModule.forChild(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PostRoutingModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: <span class="string">''</span>, component: PostComponent &#125;,</span><br></pre></td></tr></table></figure>
<p>將原本在 <code>AppRoutingModule</code> 的 route </p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: <span class="string">'post'</span>, component: PostComponent &#125;,</span><br></pre></td></tr></table></figure>
<p>重構到 <code>PostRoutingModule</code> 內，因為已經在 <code>PostRoutingModule</code> 內，所以 <code>path</code> 為 <code>&#39;&#39;</code>  即可。</p>
<p><img src="/images/angular/lazy-loading-module/lazy003.png" alt="lazy003"></p>
<ol>
<li>編輯 <code>post-routing.module.ts</code></li>
<li>將原本在 <code>app-routing.module.ts</code> 的 post route 重構到 <code>post-routing.module.ts</code></li>
</ol>
<p><strong>post.module.ts</strong><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; from <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostComponent &#125; from <span class="string">'./post/post.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostRoutingModule &#125; from <span class="string">'./post-routing.module'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule,</span><br><span class="line">    PostRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: [</span><br><span class="line">    PostComponent</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PostModule &#123; &#125;</span><br></pre></td></tr></table></figure></p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declarations: [</span><br><span class="line">  PostComponent</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>因為 <code>PostRoutingModule</code> 已經使用到 <code>PostComponent</code>，因此在 <code>PostModule</code> 需要加以宣告。</p>
<p><img src="/images/angular/lazy-loading-module/lazy005.png" alt="lazy005"></p>
<ol>
<li>編輯  <code>post.module.ts</code></li>
<li>在 <code>declarations</code> 加上 <code>PostComponent</code></li>
</ol>
<h3 id="設定_AppModule">設定 AppModule</h3><p><strong>app-routing.module.ts</strong><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; from <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">'login'</span>, loadChildren: <span class="string">'app/login/login.module#LoginModule'</span> &#125;,</span><br><span class="line">  &#123; path: <span class="string">'post'</span>, loadChildren: <span class="string">'app/post/post.module#PostModule'</span> &#125;,</span><br><span class="line">  &#123; path: <span class="string">''</span>, redirectTo: <span class="string">''</span>, pathMatch: <span class="string">'full'</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123; &#125;</span><br></pre></td></tr></table></figure></p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: <span class="string">'login'</span>, loadChildren: <span class="string">'app/login/login.module#LoginModule'</span> &#125;,</span><br></pre></td></tr></table></figure>
<p>若要使用 lazy loading module，必須從 <code>component</code> 改成 <code>loadChildren</code>，後間接的是字串，為 <code>login.module.ts</code> 的路徑，但不用加上 <code>.ts</code>。</p>
<p>最後以 <code>#</code> 加上 <code>LoginModule</code>，為 module 名稱。</p>
<p><img src="/images/angular/lazy-loading-module/lazy006.png" alt="lazy006"></p>
<p><strong>app.module.ts</strong><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; from <span class="string">'./app-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure></p>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declarations: [</span><br><span class="line">  AppComponent</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>若只有 <code>AppModule</code>，則 <code>declarations</code> 必須包含全部 component，但因為目前已經切出 <code>LoginModule</code> 與 <code>PostModule</code>，而 <code>LoginComponent</code> 與 <code>PostComponent</code> 已經在 <code>LoginModule</code> 與 <code>PostModule</code> 宣告過，所以 <code>AppModule</code> 只需宣告 <code>AppComponent</code> 即可。</p>
<p><img src="/images/angular/lazy-loading-module/lazy007.png" alt="lazy007"></p>
<h2 id="Experiment">Experiment</h2><hr>
<p>理論上使用了 lazy loading module，應該會看到兩個效果 :</p>
<ol>
<li>出現 <code>0.xxx.chunck.js</code>、<code>1.xxx.chunk.js</code></li>
<li>當 route 執行到才會下載 <code>0.xxx.chunck.js</code>、<code>1.xxx.chunk.js</code></li>
</ol>
<h3 id="觀察_ng_build_—prod">觀察 ng build —prod</h3><p><img src="/images/angular/lazy-loading-module/lazy008.png" alt="lazy008"></p>
<p>當沒有使用 lazy loading module 時，全部的 JavaScript 都在 <code>main.xxx.bundle.js</code>。</p>
<p><img src="/images/angular/lazy-loading-module/lazy009.png" alt="lazy009"></p>
<p>當使用 lazy loading modules 後，多出了 <code>0.xxx.chunk.js</code> 與 <code>1.xxx.chunk.js</code>，這就是 <code>LoginModule</code> 與 <code>PostModule</code> 編譯之後的 chunk。</p>
<h3 id="觀察_Chrome">觀察 Chrome</h3><p><img src="/images/angular/lazy-loading-module/lazy010.png" alt="lazy010"></p>
<p>當沒有使用 lazy loading module 時，儘管點了 <code>Login</code> 與 <code>Post</code>，但都沒有任何 request，因為全部都在 <code>main.xxx.bundle.js</code> 中了。</p>
<p><img src="/images/angular/lazy-loading-module/lazy011.png" alt="lazy011"></p>
<p>點了 <code>Login</code> 才會下載 <code>login.module.chunk.js</code>；點了 <code>Post</code> 才會下載 <code>post.module.chunk.js</code>，證明 lazy loading module 是有作用的。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>在這個小小範例中，我們可能看不到 lazy loading module 的威力，但若頁面夠複雜，component 夠多時，若不拆 module，則 <code>main.xxx.bundle.js</code> 可能會好幾 MB，此時就必須將 component 拆成 module，配合 lazy loading，只有在 route 被執行時，才會載入該 chunk 的 JavaScript，這樣使用者體驗才會好。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在 <a href="https://github.com/oomusou/NG52Route" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://angular.io/" target="_blank" rel="external">Angular</a>, <a href="https://angular.io/guide/lazy-loading-ngmodules" target="_blank" rel="external">Lazy Loading Feature Modules</a></p>
]]></content>
    <summary type="html">
    <![CDATA[避免所有 component 都在同一個 module]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 VS Code 快速切換 Editor 與 Terminal ?]]></title>
    <link href="http://oomusou.io/vscode/toggle-terminal/"/>
    <id>http://oomusou.io/vscode/toggle-terminal/</id>
    <published>2018-02-14T12:23:43.000Z</published>
    <updated>2018-02-14T02:45:05.772Z</updated>
    <content type="html"><![CDATA[<p>由於 VS Code 內建 terminal，因此我們可以直接在 VS Code 內直接下 command，也因此我們需要一個 shortcut，可快速在 editor 與 terminal 間 toggle。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>VS Code 1.19.3</p>
<h2 id="解除_macOS_預設_Shortcut">解除 macOS 預設 Shortcut</h2><hr>
<p>由於要使用 <code>ctrl + 1</code> 作為 toggle，而預設已經被 macOS 佔用，必須先加以解除。</p>
<p><img src="/images/vscode/toggle-terminal/terminal002.png" alt="terminal002"></p>
<p><strong><em>System Preferences -&gt; Keyboard -&gt; Shortcuts -&gt; Mission Control -&gt; Shortcuts</em></strong></p>
<p>將 <code>Swtich to Destop 1 ~ 4</code>的 shortcut 加以解除。</p>
<h2 id="新增_Shortcut">新增 Shortcut</h2><hr>
<p>VS Code 並沒有內建切換 editor 與 terminal 的 shortcut，必須自行新增。</p>
<blockquote>
<p>對於 toggle terminal，VS Code 已經內建 ctrl + `，因此自行建立一個類似的 ctrl + 1，也方便單手即可操作切換 editor 與 terminal</p>
</blockquote>
<p><img src="/images/vscode/toggle-terminal/terminal000.png" alt="terminal000"></p>
<ol>
<li>⌘ + ⇧ + p 啟動 Command Palette，輸入 shortcut</li>
<li>選擇 <code>Preferences: Open keyboard Shortcuts File</code></li>
</ol>
<p><img src="/images/vscode/toggle-terminal/terminal001.png" alt="terminal001"></p>
<p>VS Code 將開啟 <code>Default Keybinds</code> 與  <code>keybindings.json</code> 兩個檔案。</p>
<p><strong>keybindings.json</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "key": "ctrl+1",</span><br><span class="line">    "command": "workbench.action.terminal.focus",</span><br><span class="line">    "when": "editorTextFocus"</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    "key": "ctrl+1",</span><br><span class="line">    "command": "workbench.action.focusActiveEditorGroup",</span><br><span class="line">    "when": "terminalFocus"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>將 <code>ctrl + 1</code> 兩個設定貼入 <code>keybindings.json</code>。</p>
<p>第一個設定為當目前 cursor 在 editor 時，<code>ctrl + 1</code> 將 cursor 切換到 terminal。</p>
<p>第二個設定為當目前 cursor 在 terminal 時，<code>ctrl + 1</code> 將 cursor 切換到 editor。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>ctrl + `： toggle 是否顯示 terminal</li>
<li>ctrl + 1：將  cursor 在 editor 與 terminal 間切換</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[VS Code 尚未內建此 shortcut]]>
    
    </summary>
    
      <category term="VS Code" scheme="http://oomusou.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立 Route ?]]></title>
    <link href="http://oomusou.io/angular/simple-route/"/>
    <id>http://oomusou.io/angular/simple-route/</id>
    <published>2018-02-13T12:23:43.000Z</published>
    <updated>2018-02-14T03:18:14.593Z</updated>
    <content type="html"><![CDATA[<p>傳統以後端為主的 MVC 寫法，route 會寫在後端；前後端分離的 SPA 寫法，前後端有各自的 route，前端的 route 負責切換 component，而後端的 route 則負責 API。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Node.js 8.9.4<br>Angular CLI 1.6.7<br>Angular 5.2.4</p>
<h2 id="建立_Route">建立 Route</h2><hr>
<h3 id="建立專案時一併建立_Route">建立專案時一併建立 Route</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng new MyProject --routing</span><br></pre></td></tr></table></figure>
<p>新建專案時，加上 <code>--routing</code> 參數。</p>
<p><img src="/images/angular/simple-route/route000.png" alt="route000"></p>
<ol>
<li>Angular CLI 會替我們在 <code>src/app</code> 目錄下新增 <code>app-routing.module.ts</code> 檔案</li>
<li>class 名稱為 <code>AppRoutingModule</code></li>
<li><code>routes</code> 陣列即位自訂 route 之處</li>
</ol>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imports: [RouterModule.forRoot(routes)],</span><br></pre></td></tr></table></figure>
<p>一般來說，<code>imports</code> 要的都是單純 module，如 <code>BrowserModule</code>，但這裡用的卻是 <code>RouterModule.forRoot()</code>。</p>
<ul>
<li><code>forRoot()</code> 為 <code>RouterModule</code> 的 factory method，為 <code>static</code>， 傳入 <code>routes</code> 後，回傳給 <code>AppModule</code> 所使用的 <code>RouterModule</code></li>
<li><code>forChild()</code> 亦為 <code>RouterModule</code> 的 factory method，為 <code>static</code>，傳入 <code>routes</code> 後，回傳其他 module 所使用的 <code>RouterModule</code></li>
</ul>
<blockquote>
<p>之所以要特別用 <code>forRoot()</code> 與  <code>forChild()</code>，因為當 <code>AppModule</code>  與其他 module 都 import <code>RouterModule</code> 時，由於其他 module 都有自己的 DI injector，會屏蔽 <code>AppModule</code> 的 <code>Router</code>，有就是說 <code>Router</code> 將不再整個 app 共用，而是各 module 有自己的 <code>Router</code>，因此 <code>RouterModule</code> 特別不提供 provider，而是改由 <code>forRoot()</code> 與 <code>forChild()</code> 提供，如此整個 app 將只會有一份 <code>Router</code></p>
</blockquote>
<p><img src="/images/angular/simple-route/route001.png" alt="route001"></p>
<ol>
<li>Angular CLI 還替我們修改了 <code>app.module.ts</code></li>
<li>自動將 <code>AppRoutingModule</code> import 進來</li>
</ol>
<blockquote>
<p>理論上  <code>app.module.ts</code> 與 <code>app-routing.module.ts</code> 可以合一，但因為 <code>app.module.ts</code> 有他原本的職責，如 <code>declarations</code>、<code>imports</code>  、 <code>providers</code> 與 <code>bootstrap</code>，且簡單的 app 也可能也沒使用 route，因此特別將 route 部分特別獨立為 <code>app-routing.module.ts</code>，再 import 進 <code>app.module.ts</code> 即可</p>
</blockquote>
<h3 id="建立專案後事後加上_Route">建立專案後事後加上 Route</h3><p>假如一開始建立專案時沒加上 <code>--routing</code> ，也可事後再建立 route。</p>
<blockquote>
<p>Angular CLI 並沒有提供單獨建立 route 的指令，只能在建立 module 時，順便加上 <code>--routing</code> 參數建立 route</p>
</blockquote>
<p><strong> 將 app.module.ts 暫時改名 </strong></p>
<p><img src="/images/angular/simple-route/route002.png" alt="route002"></p>
<ol>
<li>將 <code>app.module.ts</code> 暫時改名為 <code>app.module.ts.bak</code></li>
</ol>
<blockquote>
<p>因為我們即將重建 <code>app.module.ts</code>，所以先將目前的 <code>app.module.ts</code> 改名避開</p>
</blockquote>
<p><strong> 重新建立有 Route 的 AppModule </strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ ng <span class="keyword">g</span> <span class="keyword">m</span> <span class="keyword">App</span> --flat --routing</span><br></pre></td></tr></table></figure>
<p><code>m</code> : module 的縮寫</p>
<p><code>--flat</code> : 不要將 <code>AppRouting</code> 建立在目前目錄下，而是建立在 <code>src/app</code> 目錄下</p>
<p><code>--routing</code> : 一併建立 <code>AppRoutingModule</code></p>
<p><img src="/images/angular/simple-route/route003.png" alt="route003"></p>
<ol>
<li>在專案目錄下執行 <code>ng g m App --flat —routing</code></li>
<li>Angular CLI 會替我們建立 <code>app.module.ts</code> 與 <code>app-routing.module.ts</code> 兩個檔案</li>
<li>在 <code>AppModule</code> 中，會自動幫我們 import <code>AppRoutingModule</code></li>
</ol>
<p><strong> 刪除 app.module.ts </strong></p>
<p>Angular CLI 剛剛幫我們建立了全新的 <code>app.module.ts</code>，手動將此檔刪除</p>
<blockquote>
<p>因為我們目的是要 Angular CLI 幫我們建立 <code>app-routing.module.ts</code>，<code>app.module.ts</code> 沒有利用價值需刪除</p>
</blockquote>
<p><strong> 將 app.module.ts.bak 改為 app.module.ts </strong></p>
<p><img src="/images/angular/simple-route/route004.png" alt="route004"></p>
<ol>
<li>將 <code>app.module.ts</code> 刪除，再將 <code>app.module.ts.bak</code> 重新命名為 <code>app.module.ts</code></li>
</ol>
<blockquote>
<p><code>app.module.ts.bak</code> 才是我們原本的 <code>app.module.ts</code></p>
</blockquote>
<p><strong> 修改 AppModule </strong></p>
<p><img src="/images/angular/simple-route/route005.png" alt="route005"></p>
<ol>
<li>選擇 <code>app.module.ts</code></li>
<li>在 <code>imports</code> 加上剛剛建立的 <code>AppRoutingModule</code></li>
</ol>
<p><strong> 修改 AppRoutingModule </strong> </p>
<p><img src="/images/angular/simple-route/route006.png" alt="route006"></p>
<ol>
<li>選擇 <code>app-routing.module.ts</code></li>
<li>將 <code>forChild()</code> 改成 <code>forRoot()</code><blockquote>
<p>如此無論是一開始建立專案就加上 <code>--routing</code> 參數，或者先建立專案，事後再補建立 route，目前 <code>AppModule</code> 都有相同的 <code>AppRoutingModule</code></p>
</blockquote>
</li>
</ol>
<h2 id="設定_Route">設定 Route</h2><h3 id="建立_Login_與_Post_Component">建立 Login 與  Post Component</h3><p>使用一般建立 component 的方式建立 <code>LoginComponent</code> 與 <code>PostComponent</code> (略)</p>
<h3 id="設定_routes">設定 routes</h3><p><strong>app-routing.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule, Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; from <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoginComponent &#125; from <span class="string">'./login/login.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostComponent &#125; from <span class="string">'./post/post.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">'login'</span>, component: LoginComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'post'</span>, component: PostComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">''</span>, redirectTo: <span class="string">''</span>, pathMatch: <span class="string">'full'</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">'login'</span>, component: LoginComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'post'</span>, component: PostComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">''</span>, redirectTo: <span class="string">''</span>, pathMatch: <span class="string">'full'</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p><code>Routes</code> 為 Angular 定義的 <code>Route</code> 陣列，用來設定 user 自己的 route 定義。</p>
<p>第  7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: <span class="string">'login'</span>, component: LoginComponent &#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li><code>path</code> : 設定 route 路徑</li>
<li><code>component</code> : 當符合 <code>path</code> 定義時，該顯示的 component</li>
</ul>
<p>當 URI 為 <code>login</code> 時，顯示 <code>LoginComponent</code></p>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: <span class="string">'post'</span>, component: PostComponent &#125;,</span><br></pre></td></tr></table></figure>
<p>當 URI 為 <code>post</code> 時，顯示 <code>PostComponent</code></p>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: <span class="string">''</span>, redirectTo: <span class="string">''</span>, pathMatch: <span class="string">'full'</span> &#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li><code>redirectTo</code> : redirect 到其他 URI 路徑</li>
<li><code>pathMatch</code> : 與 <code>path</code> 的匹配方式</li>
</ul>
<p>當  URI 為 <code>空字串</code>，redirect 到 <code>&#39;&#39;</code>，且必須完全符合 <code>path</code> 定義</p>
<h2 id="使用_router-outlet_與_routerLink">使用 router-outlet 與 routerLink</h2><p><strong>app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Welcome to &#123;&#123; title &#125;&#125;!</span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">routerLink</span>=<span class="value">"login"</span>&gt;</span>Login<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">routerLink</span>=<span class="value">"post"</span>&gt;</span>Post<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">routerLink</span>=<span class="value">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="title">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="title">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>當在 <code>AppRoutingModule</code> 的 <code>routes</code> 設定 <code>component</code> 時，會顯示在哪呢 ? 就是顯示在 HTML template 的 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> 內。</p>
<p>第 2 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">routerLink</span>=<span class="value">"login"</span>&gt;</span>Login<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>原本的 <code>&lt;a&gt;</code> 會使用 <code>href</code>，但這會導致 Angular 使用後端的 route，也就是整個網頁會重新載入；若使用 <code>routerLink</code>，則 Angular 會使用前端的 route，也就是將 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> 換成其他 component，使用者體驗較好。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Angular 也有自己的 route，傳統頁面跳轉的 route 必須改設定在 Angular</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在 <a href="https://github.com/oomusou/NG52Route" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[Angular 已經內建 Route，可直接使用]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[淺談 macOS 的 App 安裝與反安裝]]></title>
    <link href="http://oomusou.io/macos/install-app/"/>
    <id>http://oomusou.io/macos/install-app/</id>
    <published>2018-02-12T12:23:43.000Z</published>
    <updated>2018-02-11T14:31:20.030Z</updated>
    <content type="html"><![CDATA[<p>macOS 雖然很好用，但在安裝/反安裝 app 的方式與 Windows 不太一樣，這是剛從 Windows 跳到 macOS 時一定會疑惑的地方。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3</p>
<h2 id="App_安裝">App 安裝</h2><hr>
<p>macOS 一共有 4 種安裝 app 方式 :</p>
<ol>
<li><p><strong>從 App Store 下載</strong></p>
<p>這是最安全的方式，不用擔心安裝到惡意程式，也是 Apple 推薦的方式，將來 app 有任何更新，App Store 會通知你，使用體驗與 iOS 相同。</p>
</li>
<li><p><strong>下載 dmg 格式</strong></p>
<p>有的 app 並不想透過 App Store 審核機制，而是自行在網站上提供下載 dmg 檔案。dmg 本質是一個光碟映像檔，你只要將 app 拖曳到你自己的 <code>Applications</code> 目錄下就算安裝完成。</p>
<p>這種方式理論上可能安裝到惡意程式，須自行承擔風險。</p>
</li>
<li><p><strong>下載 pkg 格式</strong></p>
<p>這種格式較少見，提供類似 Windows <code>下一步下一步</code> 的安裝方式，但 Microsoft 非常喜歡使用這種方式，如 <code>.NET Core SDK</code>、<code>Office for Mac</code>、<code>Visual Studio for Mac</code> … 等。</p>
</li>
<li><p><strong>使用 Homebrew 安裝</strong></p>
<p>有一類工具是由 Linux open source 移植到 macOS，如 Git、NVM，這類工具就需要如 Ubuntu 的  <code>apt-get</code> 方式安裝，而 Homebrew 就是 macOS 的 <code>apt-get</code>。</p>
</li>
</ol>
<h2 id="App_反安裝">App 反安裝</h2><hr>
<p>macOS 一共有 5 種反安裝 app 方式 :</p>
<ol>
<li><p><strong>直接刪除</strong></p>
<p>Apple 建議刪除 app 就如同 iOS 一樣，只要將 icon 刪除即可，因為每個在 <code>Applications</code> 下的 app，事實上是一個子目錄，所有的程式都在該目錄下，因此可以直接刪除。</p>
<p>但這種刪除方式事實上並不乾淨，因為 app 還是會將一些紀錄檔與暫存檔存在其他目錄，雖然這些檔案不大，留著也不會影響操作，畢竟不是程式，但仍然不是最乾淨的反安裝方式。</p>
</li>
<li><p><strong>使用 AppCleaner 刪除</strong></p>
<p>開啟 <a href="https://freemacsoft.net/appcleaner/" target="_blank" rel="external">AppCleaner</a>，將 app icon 拖曳到 AppCleaner，他會幫你分析該 app 的紀錄檔與暫存檔所在，除了將 app 目錄刪除外，還會連帶將紀錄檔與暫存檔刪除，這是較為建議的 app 反安裝方式。</p>
</li>
<li><p><strong>使用 Uninstall Script</strong></p>
<p>Pkg 格式雖然安裝很方便，都是 <code>下一步下一步</code>，但反安裝就頭大了，macOS 並沒有對 pkg  提供反安裝，而且 pkg 可能將程式安裝在多個不同目錄下，因此只將 icon 刪除，是絕對無法刪除乾淨。</p>
<p>Pkg 格式就需要原廠提供反安裝 app、或者 uninstall script，才能徹底移除乾淨，畢竟只有原廠才知道安裝了哪些檔案，以及安裝到哪些目錄下。</p>
</li>
<li><p><strong>使用 Homebrew Uninstall</strong></p>
<p>Homebrew 除了會幫你管理安裝外，還會幫你管理反安裝，只要透過 Homebrew 反安裝，就能刪除的很乾淨。</p>
<p>有些 pkg 格式也能找到 Homebrew 安裝方式，如 <code>.NET Core SDK</code>，推薦就改用 Homebrew 幫我們管理即可。</p>
</li>
<li><p><strong>使用 Time Machine 還原</strong></p>
<p>以上這些工具都有他的極限，若你要求絕對乾淨，就是在安裝 app 前先用 Time Machine 備份，最後在開機時按住 ⌘ + r，由 Time Machine 還原，這樣保證絕對乾淨。</p>
</li>
</ol>
<h2 id="測試_App">測試 App</h2><hr>
<p>若有些 app 只是測試用，隨時可能刪除，建議可用 <a href="https://www.parallels.com/products/desktop/" target="_blank" rel="external">Parallel Desktop</a> 安裝一個 macOS VM，反正 VM 隨時可以刪除重建，也不會影響到外層真正的 macOS。</p>
<p>要如何找 macOS 的安裝 image 呢？別忘了我們有個隱藏磁區專門放 macOS 的 image，Parallel Desktop 會自動讀取這個隱藏磁區安裝 macOS VM。</p>
<blockquote>
<p>macOS 貼心的地方是每次 OS 更新，都會幫你更新隱藏磁區的 image，因此你每次建立 VM 時，都會是最新版的 macOS</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>macOS 一般來說使用者體驗都很好，可以讓你專注在自己的工作上，不用花太多心思在 OS 本身，但唯獨安裝與反安裝 app 這塊，因為有太多方式，且各有各的配套方案，因此需要特別提出來給初學者參考</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[一些 app 安裝與反安裝的心得分享]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我所使用的 macOS App 分享]]></title>
    <link href="http://oomusou.io/macos/myapp/"/>
    <id>http://oomusou.io/macos/myapp/</id>
    <published>2018-02-10T12:23:43.000Z</published>
    <updated>2018-02-13T03:09:22.586Z</updated>
    <content type="html"><![CDATA[<p>Macbook Pro 15 一直是我很推薦的 <code>工作神器</code>， 雖然很貴，但卻很值得投資。我不敢說我 Mac 用的多好，但使用了 3 年的 macOS，多少累積了一些經驗，試過不少 app，目前還會繼續用的，基本上都是工作用起來很順的 app，在此分享給大家。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3</p>
<h2 id="檔案管理">檔案管理</h2><hr>
<ul>
<li><strong>Finder (內建)</strong> : 內建的 Finder 就已經很好用了</li>
</ul>
<h2 id="瀏覽器">瀏覽器</h2><hr>
<ul>
<li><strong>Safari (內建)</strong> : 我自己看網站，會使用 Safari，與 macOS 整合較好，也比較省電</li>
</ul>
<ul>
<li><strong><a href="https://www.google.com.tw/chrome/" target="_blank" rel="external">Chrome</a> (free)</strong> : 測試程式會使用 Chrome</li>
</ul>
<h2 id="程式開發">程式開發</h2><hr>
<ul>
<li><strong><a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a> (free)</strong> : 可以開發 .NET Core、Angular、Bash Script、PowerShell、Docker … 等等</li>
</ul>
<ul>
<li><strong><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external">JetBrains WebStorm</a> (paid)</strong> : Angular 開發神器，尤其 refactoring 非常強悍</li>
</ul>
<ul>
<li><strong><a href="https://www.jetbrains.com/rider/" target="_blank" rel="external">JetBrains Rider</a> (paid)</strong> : .NET Core 開發神器，尤其 refactoring 非常強悍</li>
</ul>
<ul>
<li><strong><a href="https://www.jetbrains.com/datagrip/" target="_blank" rel="external">JetBrains DataGrip</a> (paid)</strong> : 連接各種資料庫，只要這一套都能搞定</li>
</ul>
<ul>
<li><strong><a href="https://www.getpostman.com/" target="_blank" rel="external">Postman</a> (free/paid)</strong> : 測試 API 標準工具，若要更強功能可付費</li>
</ul>
<h2 id="文字編輯器">文字編輯器</h2><hr>
<ul>
<li><strong><a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a> (free)</strong> : 我沒用很多，只有在修改 blog 內文時，才會使用</li>
</ul>
<h2 id="Markdown_編輯器">Markdown 編輯器</h2><hr>
<ul>
<li><strong><a href="https://typora.io/" target="_blank" rel="external">Typora</a> (free)</strong> : 編輯 markdown 神器，所見即所得的方式編輯 markdown，天天使用</li>
</ul>
<h2 id="終端機">終端機</h2><hr>
<ul>
<li><strong><a href="https://www.iterm2.com/" target="_blank" rel="external">iTerm 2</a> (free)</strong> : macOS 內建的 terminal 很難用，一定要裝 iTerm 2 才能發揮 macOS 的 terminal 威力</li>
</ul>
<h2 id="Git_管理">Git 管理</h2><hr>
<ul>
<li><strong><a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a> (free)</strong> : Bitbucket 所出的圖形化 git 管理軟體，功能強大</li>
</ul>
<h2 id="虛擬機器">虛擬機器</h2><hr>
<ul>
<li><strong><a href="https://www.parallels.com/products/desktop/" target="_blank" rel="external">Parallel Desktop</a> (paid)</strong> : macOS 的 VM 第一品牌，速度最快，尤其整合 Windows 10 部分非常好，還可以在 Parallel Dekstop 跑一個虛擬 macOS，方便測試用</li>
</ul>
<ul>
<li><strong><a href="https://www.docker.com/docker-mac" target="_blank" rel="external">Docker for Mac</a> (free)</strong> : 若要在 macOS 使用 docker，可使用原廠的 Docker for Mac，不用搭配其他 VM</li>
</ul>
<h2 id="通訊軟體">通訊軟體</h2><hr>
<ul>
<li><strong><a href="https://zoom.us/" target="_blank" rel="external">Zoom</a> (free)</strong> : 視訊最流暢的通訊軟體</li>
</ul>
<ul>
<li><strong><a href="https://macos.telegram.org/" target="_blank" rel="external">Telegram</a> (free)</strong> : 適合文字模式傳訊息</li>
</ul>
<ul>
<li><strong><a href="https://slack.com/downloads/osx" target="_blank" rel="external">Slack</a> (free)</strong> : 適合接受 CI server 所傳送的訊息</li>
</ul>
<h2 id="截圖與影像處理">截圖與影像處理</h2><hr>
<ul>
<li><strong><a href="https://itunes.apple.com/tw/app/techsmith-snagit-2018/id1260954767?mt=12" target="_blank" rel="external">Snagit</a> (paid)</strong> : 截圖第一品牌，也可以做簡單的影像處理，基本上我部落格的圖片都是靠 Snagit 處理</li>
</ul>
<h2 id="簡報工具">簡報工具</h2><hr>
<ul>
<li><strong>Keynote</strong> (內建) : 算是 Apple 最具代表性的 Mac app</li>
</ul>
<h2 id="英英/英漢字典">英英/英漢字典</h2><hr>
<ul>
<li><p><strong><a href="https://itunes.apple.com/us/app/oxford-advanced-learners-dict/id553809551?mt=12" target="_blank" rel="external">Oxford Advanced Learner’s Dictionary</a> (paid)</strong> : macOS 最好的英英字典</p>
</li>
<li><p><strong>Dictionary (內建)</strong> : macOS 有內建英漢字典，但可惜是簡體中文</p>
</li>
</ul>
<h2 id="RSS_閱讀器">RSS 閱讀器</h2><hr>
<ul>
<li><strong><a href="https://itunes.apple.com/tw/app/reeder-3/id880001334?mt=12" target="_blank" rel="external">Reeder</a> (paid)</strong> : 訂閱大神的 RSS，算中規中矩</li>
</ul>
<h2 id="密碼管理">密碼管理</h2><hr>
<ul>
<li><strong><a href="https://itunes.apple.com/tw/app/1password/id443987910?mt=12" target="_blank" rel="external">1Password</a> (paid)</strong> : 儲存密碼，在 iphone 也能讀取</li>
</ul>
<h2 id="音樂管理">音樂管理</h2><hr>
<ul>
<li><strong>iTunes (內建)</strong> : 若你願意去編輯 MP3 tag，則 iTunes 非常好用，也與 iPhone 整合良好</li>
</ul>
<h2 id="Trackpad_管理">Trackpad 管理</h2><hr>
<ul>
<li><strong><a href="https://www.boastr.net/" target="_blank" rel="external">BetterTouchTool</a> (paid)</strong> : Macbook 的 trackpad 是有名的好用，macOS 內建已經使用很多手勢，不過這還沒完全榨出 trackpad 淺能，BetterTouchTool 讓我們可以自訂更多的手勢，甚至還可以自訂 touch bar，若你是 Trackpad 重度使用者，強烈推薦此神器</li>
</ul>
<h2 id="備份管理">備份管理</h2><hr>
<ul>
<li><strong>Time Machine (內建)</strong> : 簡單又強悍的備份工具，天天使用</li>
</ul>
<h2 id="套件管理">套件管理</h2><hr>
<ul>
<li><strong><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a> (free)</strong> : open source 的套件管理，相當於 Ubuntu 的 <code>apt-get</code></li>
</ul>
<h2 id="檔案格式瀏覽">檔案格式瀏覽</h2><hr>
<ul>
<li><strong>Preview (內建)</strong> : 支援各種格式，如 pdf 格式完全不用安裝其他軟體，內建的 Preview 就很方便</li>
</ul>
<h2 id="App_移除工具">App 移除工具</h2><hr>
<ul>
<li><strong><a href="https://freemacsoft.net/appcleaner/" target="_blank" rel="external">AppCleaner</a> (free)</strong> : 雖然 macOS 的 app 號稱可以直接丟 <code>垃圾桶</code> 刪除，但透過 AppCleaner 可以找到 app 自己用的暫存檔與記錄檔，會刪除的更乾淨</li>
</ul>
<h2 id="系統清理工具">系統清理工具</h2><hr>
<ul>
<li><strong><a href="https://itunes.apple.com/tw/app/dr-cleaner-%E5%9E%83%E5%9C%BE%E6%96%87%E4%BB%B6%E5%92%8C%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/id921458519?mt=12" target="_blank" rel="external">Dr.Cleaner Pro</a> (free/paid)</strong> : 趨勢科技產品，幫你刪除沒用的暫存檔</li>
</ul>
<h2 id="解壓縮工具">解壓縮工具</h2><hr>
<ul>
<li><strong><a href="https://itunes.apple.com/tw/app/dr-cleaner-pro-system-clean/id1133028347?l=en&amp;mt=12" target="_blank" rel="external">The Unarchiver</a> (free)</strong> : 任何壓縮格式檔案都能解開</li>
</ul>
<h2 id="其他輔助工具">其他輔助工具</h2><hr>
<ul>
<li><strong><a href="https://www.parallels.com/products/toolbox/" target="_blank" rel="external">Parallels Toolbox</a> (paid)</strong> : Parallel Desktop 所送的小工具，如 <code>Do Not Sleep</code> 與 <code>Do Not Disturb</code>，可以在你在簡報時，避免 Macbook 休眠或通訊軟體干擾</li>
</ul>
<ul>
<li><strong><a href="https://bjango.com/mac/istatmenus/" target="_blank" rel="external">iStat Menus</a> (paid)</strong> : 在 menu 顯示 CPU / 記憶體 / 網路 / SSD …等使用量</li>
</ul>
<ul>
<li><strong><a href="https://www.macbartender.com/" target="_blank" rel="external">Bartender</a> (paid)</strong> : 將 menu 的 icon 加以隱藏，僅留下你想要的 icon</li>
</ul>
<ul>
<li><strong><a href="https://www.jetbrains.com/toolbox/" target="_blank" rel="external">JetBrains Toolbox</a> (paid)</strong> : 快速使用 JetBrains 工具開啟專案，且負責更新 JetBrains 工具</li>
</ul>
<ul>
<li><p><strong><a href="https://www.alfredapp.com/" target="_blank" rel="external">Alfred</a> (free/paid)</strong> : 超強取代內建 Spotlight 工具，強烈推薦</p>
</li>
<li><p><strong><a href="https://itunes.apple.com/tw/app/manico/id724472954?mt=12" target="_blank" rel="external">Manico</a> (paid)</strong> : 快速切換 app 的小工具</p>
</li>
<li><p><strong><a href="https://www.dropbox.com/zh_TW/downloading" target="_blank" rel="external">Dropbox</a></strong> : 有名的網路硬碟，與 macOS 整合良好</p>
</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>我用的 macOS 工具不算多，也還在持續優化自己的工作流程，以上是我們目前幾乎天天會用到的 app</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[野人獻曝一下自己用的 App]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 macOS 安裝 PowerShell ?]]></title>
    <link href="http://oomusou.io/powershell/mac-homebrew/"/>
    <id>http://oomusou.io/powershell/mac-homebrew/</id>
    <published>2018-02-08T12:23:43.000Z</published>
    <updated>2018-02-07T14:18:16.000Z</updated>
    <content type="html"><![CDATA[<p>隨著 .NET Core 跨平台後，PowerShell 也開始跨平台，事實上 PowerShell 底層跑的就是 .NET Core，有了 PowerShell 之後，macOS 與 Linux 的自動化又有了新的選擇。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>PowerShell 6.0.1</p>
<h2 id="安裝_PowerShell">安裝 PowerShell</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ $ brew update</span><br><span class="line">~ $ brew cask install powershell</span><br></pre></td></tr></table></figure>
<p><img src="/images/powershell/mac-homebrew/mac000.png" alt="mac000"></p>
<ol>
<li>使用 <code>brew cask install</code> 安裝 <code>powershell</code></li>
<li>PowerShell 安裝完成</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="variable">$ </span>pwsh</span><br></pre></td></tr></table></figure>
<p><code>pwsh</code> 為 PowerShell 的執行檔。</p>
<p><img src="/images/powershell/mac-homebrew/mac001.png" alt="mac001"></p>
<ol>
<li>執行 <code>pwsh</code> 啟動 PowerShell</li>
<li>當出現 <code>PS</code> 開頭，表示 PowerShell 安裝成功</li>
</ol>
<h2 id="移除_PowerShell">移除 PowerShell</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ $ brew cask uninstall powershell</span><br></pre></td></tr></table></figure>
<p>使用 <code>brew cask uninstall</code> 移除 <code>powershell</code>。</p>
<p><img src="/images/powershell/mac-homebrew/mac002.png" alt="mac002"></p>
<ol>
<li>使用 <code>brew cask uninstall</code> 移除 <code>powershell</code></li>
<li>PowerShell 移除成功</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="variable">$ </span>pwsh</span><br></pre></td></tr></table></figure>
<p><img src="/images/powershell/mac-homebrew/mac003.png" alt="mac003"></p>
<p>若出現 <code>command not found</code>，表示 PowerShell 已經成功移除。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過 Homebrew，安裝與移除 PowerShell 都很簡單，將來若要更新 PowerShell 版本，只要下 <code>brew cask upgrade powershell</code> 即可</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[PowerShell 也能跑在 macOS]]>
    
    </summary>
    
      <category term="PowerShell" scheme="http://oomusou.io/tags/PowerShell/"/>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Homebrew 安裝 .NET Core ?]]></title>
    <link href="http://oomusou.io/netcore/mac-homebrew/"/>
    <id>http://oomusou.io/netcore/mac-homebrew/</id>
    <published>2018-02-07T12:23:43.000Z</published>
    <updated>2018-02-07T08:52:49.000Z</updated>
    <content type="html"><![CDATA[<p>Microsoft 雖然提供了 <code>pkg</code> 安裝檔安裝 .NET Core SDK，也提供了 uninstall script 移除，但在 macOS 世界裡，我們有更好用的 Homebrew，是否能用 Homebrew 來管理 .NET Core 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.4<br>Homebrew 1.5.3</p>
<h2 id="安裝_-NET_Core_SDK">安裝 .NET Core SDK</h2><hr>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ $ brew <span class="operator"><span class="keyword">update</span></span><br><span class="line">~ $ brew cask <span class="keyword">install</span> <span class="keyword">dotnet</span>-sdk</span></span><br></pre></td></tr></table></figure>
<p>更新 Homebrew 套件清單。</p>
<p>使用 <code>brew cask install</code> 安裝 <code>dotnet-sdk</code>。</p>
<blockquote>
<p>Homebrew Cask 是以 Homebrew 為基礎，另外維護的 package repository，第一次使用 <code>brew cask</code> 時會自動安裝</p>
</blockquote>
<p><img src="/images/netcore/mac-homebrew/mac000.png" alt="mac000"></p>
<ol>
<li>使用 <code>brew cask install</code> 安裝 <code>dotnet-sdk</code></li>
<li>Homebrew 會自動從 Microsoft 官網下載 .NET Core SDK</li>
<li>輸入 root 的 password</li>
<li>.NET Core SDK 安裝成功</li>
</ol>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ $ <span class="keyword">dotnet</span> <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/netcore/mac-homebrew/mac001.png" alt="mac001"></p>
<p>若出現 .NET Core 版本，表示 .NET Core SDK 安裝成功。</p>
<h2 id="移除_-NET_Core_SDK">移除 .NET Core SDK</h2><hr>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ $ brew cask <span class="operator"><span class="keyword">uninstall</span> <span class="keyword">dotnet</span>-sdk</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>brew cask uninstall</code> 移除 <code>dotnet-sdk</code>。 </p>
<p><img src="/images/netcore/mac-homebrew/mac002.png" alt="mac002"></p>
<ol>
<li>使用 <code>brew cask uninstall</code> 移除 .NET Core SDK</li>
<li>輸入 root 的 password</li>
<li>.NET Core SDK 移除成功</li>
</ol>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ $ <span class="keyword">dotnet</span> <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/netcore/mac-homebrew/mac003.png" alt="mac003"></p>
<p>若出現 <code>command not found</code>，表示 .NET Core SDK 已經成功移除。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過 Homebrew，安裝與移除 .NET Core SDK 都很簡單，將然若要更新 .NET Core SDK 版本，只要下 <code>brew cask upgrade dotnet-sdk</code> 即可</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 Homebrew 管理 .NET Core 更簡單]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 macOS 移除 .NET Core ?]]></title>
    <link href="http://oomusou.io/netcore/mac-uninstall/"/>
    <id>http://oomusou.io/netcore/mac-uninstall/</id>
    <published>2018-02-06T12:23:43.000Z</published>
    <updated>2018-02-05T14:57:13.000Z</updated>
    <content type="html"><![CDATA[<p>由於 Microsoft 所提供的 .NET Core SDK 安裝檔是 <code>pkg</code> 格式，優點是安裝很方便，只要下一步下一步就好，但缺點是移除時比較麻煩。</p>
<a id="more"></a>
<h2 id="Vervion">Vervion</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.4</p>
<h2 id="下載_-NET_Core_Uninstall_Script">下載 .NET Core Uninstall Script</h2><hr>
<p><strong>dotnet-uninstall-pkgs.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright (c) .NET Foundation and contributors. All rights reserved.</span></span><br><span class="line"><span class="comment"># Licensed under the MIT license. See LICENSE file in the project root for full license information.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">DIR=<span class="string">"<span class="variable">$( cd "$( dirname "$&#123;BASH_SOURCE[0]&#125;" )</span>"</span> &amp;&amp; <span class="built_in">pwd</span> )<span class="string">"</span><br><span class="line"></span><br><span class="line">current_userid=<span class="variable">$(id -u)</span></span><br><span class="line">if [ <span class="variable">$current_userid</span> -ne 0 ]; then</span><br><span class="line">    echo "</span>$(basename <span class="string">"<span class="variable">$0</span>"</span>) uninstallation script requires superuser privileges to run<span class="string">" &gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># this is the common suffix for all the dotnet pkgs</span><br><span class="line">dotnet_pkg_name_suffix="</span>com.microsoft.dotnet<span class="string">"</span><br><span class="line">dotnet_install_root="</span>/usr/<span class="built_in">local</span>/share/dotnet<span class="string">"</span><br><span class="line">dotnet_path_file="</span>/etc/paths.d/dotnet<span class="string">"</span><br><span class="line">dotnet_tool_path_file="</span>/etc/paths.d/dotnet-cli-tools<span class="string">"</span><br><span class="line"></span><br><span class="line">remove_dotnet_pkgs()&#123;</span><br><span class="line">    installed_pkgs=(<span class="variable">$(pkgutil --pkgs | grep $dotnet_pkg_name_suffix)</span>)</span><br><span class="line">    </span><br><span class="line">    for i in "</span><span class="variable">$&#123;installed_pkgs[@]&#125;</span><span class="string">"</span><br><span class="line">    do</span><br><span class="line">        echo "</span>Removing dotnet component - \<span class="string">"<span class="variable">$i</span>\""</span> &gt;&amp;<span class="number">2</span></span><br><span class="line">        pkgutil --force --forget <span class="string">"<span class="variable">$i</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove_dotnet_pkgs</span><br><span class="line">[ <span class="string">"$?"</span> <span class="operator">-ne</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"Failed to remove dotnet packages."</span> &gt;&amp;<span class="number">2</span> &amp;&amp; <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Deleting install root - <span class="variable">$dotnet_install_root</span>"</span> &gt;&amp;<span class="number">2</span></span><br><span class="line">rm -rf <span class="string">"<span class="variable">$dotnet_install_root</span>"</span></span><br><span class="line">rm <span class="operator">-f</span> <span class="string">"<span class="variable">$dotnet_path_file</span>"</span></span><br><span class="line">rm <span class="operator">-f</span> <span class="string">"<span class="variable">$dotnet_tool_path_file</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"dotnet packages removal succeeded."</span> &gt;&amp;<span class="number">2</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>此為 .net core 官方所提供的 <a href="https://github.com/dotnet/cli/blob/master/scripts/obtain/uninstall/dotnet-uninstall-pkgs.sh" target="_blank" rel="external">uninstall script</a>。</p>
<p>16 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet_pkg_name_suffix=<span class="string">"com.microsoft.dotnet"</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/netcore/mac-uninstall/mac002.png" alt="mac002"></p>
<p>只要是 <code>com.microsoft.dotnet</code> 開頭的 package，都是 .net core 所安裝。</p>
<p>21 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">remove_dotnet_pkgs</span></span>()&#123;</span><br><span class="line">    installed_pkgs=($(pkgutil --pkgs | grep <span class="variable">$dotnet_pkg_name_suffix</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;installed_pkgs[@]&#125;</span>"</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Removing dotnet component - \"<span class="variable">$i</span>\""</span> &gt;&amp;<span class="number">2</span></span><br><span class="line">        pkgutil --force --forget <span class="string">"<span class="variable">$i</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將所有 <code>com.microsoft.dotnet</code> 為開的 package 名稱儲存為 <code>installed_pkgs</code> 陣列。</p>
<p>將 <code>installed_pkgs</code> 陣列內 package 一一 <code>for</code> 執行，使用 <code>pkgutil —force —forget</code> 移除 package。</p>
<p> 35 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="string">"<span class="variable">$dotnet_install_root</span>"</span></span><br><span class="line">rm <span class="operator">-f</span> <span class="string">"<span class="variable">$dotnet_path_file</span>"</span></span><br><span class="line">rm <span class="operator">-f</span> <span class="string">"<span class="variable">$dotnet_tool_path_file</span>"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>刪除 <code>/usr/local/share/dotnet</code> 目錄</li>
<li>刪除 <code>/etc/paths.d/dotnet</code> 檔案</li>
<li>刪除 <code>/etc/paths.d/dotnet-cli-tools</code> 檔案</li>
</ul>
<blockquote>
<p>有此可見，要乾淨移除 .NET Core SDK，必須包含 :</p>
<ol>
<li>移除所有 <code>com.microsoft.dotnet</code> 為首的 package</li>
<li>刪除 <code>/usr/local/share/dotnet</code> 目錄</li>
<li>刪除 <code>/etc/paths.d/dotnet</code> 與 <code>/etc/paths.d/dotnet-cli-tools</code> 檔案</li>
</ol>
</blockquote>
<h2 id="執行_-NET_Core_Uninstall_Script">執行 .NET Core Uninstall Script</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sh ./dotnet-uninstall-pkgs.sh</span><br></pre></td></tr></table></figure>
<p><img src="/images/netcore/mac-uninstall/mac000.png" alt="mac000"></p>
<h2 id="測試_-NET_Core_SDK">測試 .NET Core SDK</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet --version</span><br></pre></td></tr></table></figure>
<p><img src="/images/netcore/mac-uninstall/mac001.png" alt="mac001"></p>
<p>若出現 <code>command not found</code> ，表示 .NET Core SDK 已經成功移除。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>只要是 <code>pkg</code> 格式的安裝檔，理論上都要原廠提供 <code>反安裝檔</code>，或者 <code>uninstall script</code>，才能徹底的乾淨移除，而不能只是將檔案拖到 <code>垃圾桶</code> 而已</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/dotnet" target="_blank" rel="external">.NET Foundation</a>,  <a href="https://github.com/dotnet/cli/blob/master/scripts/obtain/uninstall/dotnet-uninstall-pkgs.sh" target="_blank" rel="external">dotnet-uninstall-pkgs.sh</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[在 macOS 移除 .NET Core 較為麻煩]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 macOS 安裝 .NET Core ?]]></title>
    <link href="http://oomusou.io/netcore/mac-install/"/>
    <id>http://oomusou.io/netcore/mac-install/</id>
    <published>2018-02-05T12:23:43.000Z</published>
    <updated>2018-02-05T05:41:59.000Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 為 Microsoft 的跨平台解決方案，只要在 macOS 裝上 .NET Core SDK，就可在 macOS 執行與開發 .NET Core App。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.4</p>
<h2 id="下載_-NET_Core_SDK">下載 .NET Core SDK</h2><hr>
<p><img src="/images/netcore/mac-install/mac000.png" alt="mac000"></p>
<ol>
<li>到 <code>https://www.microsoft.com/net/download/macos</code> 下載 .NET Core SDK</li>
<li>選擇 macOS</li>
<li>按 <code>Download .NET Core 2.1.4</code> 下載 SDK</li>
</ol>
<h2 id="安裝_-NET_Core_SDK">安裝 .NET Core SDK</h2><hr>
<p><img src="/images/netcore/mac-install/mac001.png" alt="mac001"></p>
<ol>
<li>.NET Core SDK 安裝檔會下載到 <code>Downloads</code> 目錄下</li>
<li>執行安裝檔安裝 SDK</li>
</ol>
<p><img src="/images/netcore/mac-install/mac002.png" alt="mac002"></p>
<ol>
<li>.NET Core SDK 安裝畫面</li>
<li>按 <code>Continue</code> 繼續</li>
</ol>
<p><img src="/images/netcore/mac-install/mac003.png" alt="mac003"></p>
<ol>
<li>按 <code>Install</code> 繼續</li>
</ol>
<p><img src="/images/netcore/mac-install/mac004.png" alt="mac004"></p>
<ol>
<li>安裝完成，按  <code>Close</code> 結束安裝</li>
</ol>
<p><img src="/images/netcore/mac-install/mac005.png" alt="mac005"></p>
<ol>
<li>按 <code>Move To Trash</code> 將 .NET Core SDK 安裝檔刪除</li>
</ol>
<h2 id="測試_-NET_Core_SDK">測試 .NET Core SDK</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ $ <span class="keyword">dotnet</span> <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<p>若有出現 .NET Core 版本，表示 .NET Core SDK 安裝成功。</p>
<p><img src="/images/netcore/mac-install/mac006.png" alt="mac006"></p>
<h2 id="Q&amp;A">Q&amp;A</h2><blockquote>
<p>Q : SDK 與 runtime 有什麼差別 ?</p>
</blockquote>
<p><img src="/images/netcore/mac-install/mac007.png" alt="mac007"></p>
<p>在 .NET Core 官網，的確分別提供 SDK 與 Runtime 兩種版本 :</p>
<ul>
<li><code>SDK</code> : <code>S</code>oftware <code>D</code>evelopment <code>K</code>，開發 .NET Core 所需要的版本，檔案較大</li>
<li><code>Runtime</code> : 執行 .NET Core 所需要的版本，檔案較小</li>
</ul>
<p>簡單的說，SDK 就類似 Angular CLI，包含我們開發 Angular 所需要的指令；runtime 就類似 Angular 本身執行所需要的檔案。</p>
<blockquote>
<p>Q : 為什麼 SDK 與 runtime 版本不一樣 ?</p>
</blockquote>
<p><img src="/images/netcore/mac-install/mac008.png" alt="mac008"></p>
<p>眼尖的人應該會發現目前 SDK 版本為 2.1.4，但 runtime 版本為 2.0.5，兩者版本並不一樣，這是合理的，如 Angular CLI 的版本與 Angular 版本也並不一致，截至目前為止，Angular CLI 版本為 1.6.7，而 Angular 版本為 5.2.3，所以 SDK 與 runtime 版本不一樣是正常的。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>在 macOS 安裝 .NET Core 環境非常簡單，只要下載 <code>pkg</code> 格式的 SDK 安裝檔，下一步下一步就可以完成安裝</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.microsoft.com/zh-tw/" target="_blank" rel="external">Microsoft</a>, .<a href="https://www.microsoft.com/net/download/macos" target="_blank" rel="external">NET Core SDK Download</a></p>
]]></content>
    <summary type="html">
    <![CDATA[在 macOS 安裝 .NET Core 很簡單]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何以 Command 方式執行 VS Code 並開啟專案 ?]]></title>
    <link href="http://oomusou.io/vscode/run-by-command/"/>
    <id>http://oomusou.io/vscode/run-by-command/</id>
    <published>2018-02-04T12:23:43.000Z</published>
    <updated>2018-02-03T12:22:28.000Z</updated>
    <content type="html"><![CDATA[<p>Windows 版的 VS Code 在安裝時就會自動建立 <code>code</code>  指令，讓我們可以在 terminal 以 command 方式執行 VS Code 並開啟專案，不過在 macOS 版本預設並沒有建立 symbolic link，必須自行另外透過 Command Pallette 建立。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>VS Code 1.19.3</p>
<h2 id="建立_Symbolic_Link">建立 Symbolic Link</h2><hr>
<p><img src="/images/vscode/run-by-command/code000.png" alt="code000"></p>
<p>熱鍵執行 Command Pallette </p>
<ol>
<li>輸入 <code>shell</code></li>
<li>選擇 <code>Shell Command : Install &#39;code&#39; command in PATH</code></li>
</ol>
<blockquote>
<p>Command Pallete 熱鍵 </p>
<p>Windows : Ctrl + Shift + P</p>
<p>macOS : ⌘ + ⇧ + P</p>
</blockquote>
<p><img src="/images/vscode/run-by-command/code001.png" alt="code001"></p>
<p>VS Code 會自動在 <code>usr/local/bin</code> 下建立 <code>code</code> ，自動指向實際的 VS Code。</p>
<h2 id="在_Terminal_執行_VS_Code">在 Terminal 執行 VS Code</h2><hr>
<p><img src="/images/vscode/run-by-command/code002.png" alt="code002"></p>
<p>在 terminal 下進入專案目錄，輸入 <code>code .</code> ，VS Code 會自動執行，並且開啟 <code>NG52MergeMap</code> 專案。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>除了在 VS Code 內開啟專案外，也可以使用 command 方式直接開啟</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[macOS 版的 VS Code 需手動另外建立 Symbolic Link]]>
    
    </summary>
    
      <category term="VS Code" scheme="http://oomusou.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Angular 實現 Pub/Sub Pattern ?]]></title>
    <link href="http://oomusou.io/angular/pubsub/"/>
    <id>http://oomusou.io/angular/pubsub/</id>
    <published>2018-02-04T12:23:43.000Z</published>
    <updated>2018-02-03T05:32:03.000Z</updated>
    <content type="html"><![CDATA[<p>Pub/Sub Pattern 是 OOP 中著名的 Design Pattern，尤其應付 <code>多對多</code> 的場景特別有效。在本文中，我們將以 Angular 與 TypeScript 實現。</p>
<p>Pub/Sub Pattern 與 Observer Pattern 非常接近，將特別探討與 Observer Pattern 之間的差異。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Node.js 8.9.4<br>Angular CLI 1.6.2<br>Angular 5.2.2</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/angular/pubsub/pub000.png" alt="pub000"></p>
<p>畫面上有兩個 <code>數字鐘</code>，上面的是 <code>每秒鐘</code> 更新一次，下面的是 <code>每 3 秒</code> 更新一次。</p>
<h2 id="Task">Task</h2><hr>
<p>程式碼希望分成兩部分，一個部分送出 <code>目前時間</code>，另一個部分負責 <code>顯示時間</code>。</p>
<p>但因為目前分成 <code>每秒鐘</code> 與 <code>每 3 秒</code>，因此會有 2 個 class <code>分別</code> 負責產生時間。</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Pub/Sub Pattern</p>
<p>當物件之間有 <code>多對多</code> 的依賴關係，且當 <code>多</code> 的 <code>發行者</code> (publisher) 改變時，<code>多</code> 的 <code>訂閱者</code> (subscriber) 也必須跟著改變，就特別適合使用 <code>Pub/Sub Pattern</code></p>
</blockquote>
<p><img src="/images/angular/pubsub/pub008.svg" alt="pub008"></p>
<p>此為 Pub/Sub Pattern 最原始的 UML class diagram，實務上會有多個 <code>publisher</code> 與多個 <code>subscriber</code>，且 <code>publisher</code> 與 <code>subscriber</code> 彼此互相依賴，<code>broker</code> 的介入讓 <code>publisher</code> 與 <code>subscriber</code> 的關係簡單化。</p>
<p><code>subscriber</code> 不用知道有哪些 <code>publisher</code>，只要知道 <code>broker</code> 即可；<code>publisher</code> 也不用知道有哪些 <code>subscriber</code>，只要知道 <code>broker</code> 即可，如此 <code>subscriber</code> 與 <code>publisher</code> 就徹底解耦合，且將來無論新增多少 <code>subscriber</code> 與 <code>publisher</code>，唯一需要修改的只有 <code>broker</code>，符合 <code>開放封閉原則</code> 的要求。</p>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/angular/pubsub/pub001.svg" alt="pub001"></p>
<ul>
<li><code>Clock1sPublisher</code> 負責 <code>每秒鐘</code> 送出目前時間；<code>Clock3sPublisher</code> 負責 <code>每 3 秒</code> 送出目前時間</li>
<li><code>Digital1sComponent</code> 負責 <code>每秒鐘</code> 顯示目前時間； <code>Digital3sComponent</code> 負責 <code>每 3 秒</code> 顯示目前時間</li>
<li><code>DigitalComponent</code> 必須能向 <code>ClockBroker</code> <code>subscribe</code> 資料；<code>ClockPublisher</code> 必須能向 <code>ClockBroker</code> <code>publish</code> 資料，根據 <code>DigitalComponent</code> 與 <code>ClockPublisher</code> 需求，訂出 <code>BrokerInterface</code>，期望 <code>ClockBroker</code> 能遵守</li>
<li><code>ClockBroker</code> 必須能向 <code>DigitalComponent</code> 送出目前時間，根據 <code>ClockBroker</code> 需求，訂出 <code>SubscriberInterface</code>，期望 <code>DigitalComponent</code> 能遵守</li>
<li><code>ClockBroker</code> 必須能向 <code>ClockPublisher</code> 設定 broker，根據 <code>ClockBroker</code> 需求，訂出 <code>PublisherInterface</code>，期望 <code>ClockPublisher</code> 能遵守</li>
</ul>
<h2 id="Implementation">Implementation</h2><hr>
<h3 id="DigitalClock1sComponent">DigitalClock1sComponent</h3><p><img src="/images/angular/pubsub/pub002.svg" alt="pub002"></p>
<p><strong>digital-clock1s.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; now | date:'HH:mm:ss'&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>HTML 負責顯示 <code>目前時間</code>，至於 <code>時:分:秒</code> 部分就不用自己寫程式處理了，靠 pipe 即可。</p>
<p><strong>digital-clock1s.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Inject, OnDestroy, OnInit &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ClockBroker &#125; from <span class="string">'../../broker/clock.broker'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubscriberInterface &#125; from <span class="string">'../../interface/subscriber.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubjectEnum &#125; from <span class="string">'../../enum/subject.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrokerInterface &#125; from <span class="string">'../../interface/broker.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrokerInterfaceToken &#125; from <span class="string">'../../interface/injection.token'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-digital-clock1s'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./digital-clock1s.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./digital-clock1s.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DigitalClock1sComponent <span class="keyword">implements</span> SubscriberInterface, OnInit, OnDestroy &#123;</span><br><span class="line">  now: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(</span><br><span class="line">    @Inject(BrokerInterfaceToken)</span><br><span class="line">    private clockBroker: BrokerInterface) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clockBroker.subscribe(SubjectEnum.Clock1s, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnDestroy(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clockBroker.unsubscribe(SubjectEnum.Clock3s, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update(date: <span class="built_in">Date</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.now = date;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DigitalClock1sComponent <span class="keyword">implements</span> SubscriberInterface</span><br></pre></td></tr></table></figure>
<p>先不考慮 <code>DigitalClock1sComponent</code> 所使用的 <code>SubscriberInterface</code> ，稍後會討論。</p>
<p>也因為是實現 <code>SubscriberInterface</code>，因此 <code>DigitalClock1sComponent</code> 本質上就是一個 <code>Subscriber</code>，只是藉由 component 實作。</p>
<blockquote>
<p><code>subscriber</code>  在觀念上很類似 Observer Pattern 的 <code>observer</code></p>
</blockquote>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.clockBroker.subscribe(SubjectEnum.Clock1s, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回想 <code>subscriber</code> 的初衷，除了顯示 <code>目前時間</code> 外，另外一個目的就是能對 <code>broker</code> 加以 <code>訂閱</code> 與 <code>取消訂閱</code>。</p>
<p>既然要訂閱，該在什麼時候執行呢 ?</p>
<p>最好是在 <code>subscriber</code> 開始 <code>初始化</code> 時就對 <code>broker</code> 加以訂閱，因此選擇使用 <code>ngOnInit()</code> lifecycle hook。</p>
<p>並且希望 <code>broker</code> 有 <code>subscribe()</code>，提供 <code>訂閱</code>功能。</p>
<p><code>subscribe()</code> 第 1 個參數為 <code>SubjectEnum</code>，設定要 subscribe 什麼 subject；第 2 個參數則是將 <code>this</code> 傳進去，準備將來 callback 使用。</p>
<blockquote>
<p>Sub/Pub Pattern 與 Observer Pattern 一個主要的差異是 observer 會直接對 subject 加以訂閱，但 Sub/Pub Pattern 則會透過 broker 加以訂閱</p>
</blockquote>
<p>24 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngOnDestroy(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.clockBroker.unsubscribe(SubjectEnum.Clock1s, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然有 <code>訂閱</code>，就應該有 <code>取消訂閱</code>，該在什麼時候取消呢 ?</p>
<p>最好是在 <code>subscriber</code> 最後 <code>被消滅</code> 時對 <code>broker</code> 加以 <code>取消註冊</code>，因此選擇 <code>ngOnDestroy()</code> lifecycle hook。</p>
<p>並且希望 <code>broker</code> 有 <code>unsubscribe()</code> ，提供 <code>取消訂閱</code> 功能。</p>
<blockquote>
<p>綜合 <code>ngOnInit()</code> 與 <code>ngOnDestroy()</code>，根據 <code>介面隔離原則</code>，已經大概可猜到 broker 的 interface 該提供 <code>subscribe()</code> 與 <code>unsubscribe()</code> </p>
</blockquote>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(</span><br><span class="line">  @Inject(BrokerInterfaceToken)</span><br><span class="line">  private clockBroker: BrokerInterface) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>subscriber</code> 需要 <code>ClockBroker</code>，因此必須在 constructor 將 <code>ClockBroker</code> DI 注入進來。</p>
<p>根據 <code>依賴反轉原則</code> : <code>subscriber</code> 不應該依賴底層的 <code>broker</code>，兩者應該依賴於 interface。</p>
<p>根據 <code>介面隔離原則</code> : <code>subscriber</code> 應該只相依於他所需要的 interface，目前看來只需要 <code>subscribe()</code> 與 <code>unsubscribe()</code>，因此由 <code>subscriber</code> 需求角度訂出的 broker 的 interface。</p>
<p>因此 DI 注入的 <code>ClockBroker</code> ，其型別為 <code>BrokerInterface</code>，這樣就符合 <code>依賴反轉原則</code> 與 <code>介面隔離原則</code>。</p>
<blockquote>
<p><code>subscribe()</code> 在觀念上類似於 Observer Pattern 的 <code>addObserver()</code> ；而 <code>unsubscribe()</code> 類似於 <code>removeObserver()</code></p>
</blockquote>
<h3 id="Clock1sPublisher">Clock1sPublisher</h3><p><img src="/images/angular/pubsub/pub003.svg" alt="pub003"></p>
<p><strong>clock1s.publisher.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PublisherInterface &#125; from <span class="string">'../../interface/publisher.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrokerInterface &#125; from <span class="string">'../../interface/broker.interface'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Clock1sPublisher <span class="keyword">implements</span> PublisherInterface &#123;</span><br><span class="line">  <span class="keyword">private</span> interval = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">private</span> clockBroker: BrokerInterface;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    setInterval(() =&gt; <span class="keyword">this</span>.tick(), <span class="keyword">this</span>.interval);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setBroker(broker: BrokerInterface): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clockBroker = broker;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> tick(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clockBroker.publish(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Clock1sPublisher <span class="keyword">implements</span> PublisherInterface</span><br></pre></td></tr></table></figure>
<p>先不考慮 <code>Clock1sPublisher</code> 所使用的 <code>PublisherInterface</code> ，稍後會討論。</p>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">  setInterval(() =&gt; <span class="keyword">this</span>.tick(), <span class="keyword">this</span>.interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據需求，<code>publisher</code> 要能夠每秒送出 <code>目前時間</code>，所以使用 JavaScript 原生的 <code>setInterval()</code>，每 1 秒鐘呼叫 <code>tick()</code> 一次。</p>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> tick(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.clockBroker.publish(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一秒執行 <code>tick()</code> 時，會將 <code>目前時間</code> 透過 <code>publish()</code> 發佈至 broker。</p>
<blockquote>
<p>根據 <code>介面隔離原則</code>，已經大概可猜到 <code>broker</code> 的 interface 該提供 <code>publish()</code> </p>
</blockquote>
<h3 id="BrokerInterface">BrokerInterface</h3><p><img src="/images/angular/pubsub/pub004.svg" alt="pub004"></p>
<p><strong>broker.interface.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; SubjectEnum &#125; from <span class="string">'../enum/subject.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubscriberInterface &#125; from <span class="string">'./subscriber.interface'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> BrokerInterface </span>&#123;</span><br><span class="line">  publish(date: <span class="built_in">Date</span>): <span class="built_in">void</span>;</span><br><span class="line">  subscribe(subject: SubjectEnum, subscriber: SubscriberInterface): <span class="built_in">void</span>;</span><br><span class="line">  unsubscribe(subject: SubjectEnum, subscriber: SubscriberInterface): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 <code>介面隔離原則</code>，<code>subscriber</code> 與 <code>publisher</code> 應該只相依於他所需要的 interface，目前看來共需要  <code>publish()</code>、<code>subscribe()</code> 與 <code>unsubscribe()</code>，因此訂出 <code>BrokerInterface</code>，而 <code>broker</code> 必須實作此 interface。</p>
<h3 id="ClockBroker">ClockBroker</h3><p><img src="/images/angular/pubsub/pub005.svg" alt="pub005"></p>
<p><strong>clock.broker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Clock1sPublisher &#125; from <span class="string">'../publisher/clock1s/clock1s.publisher'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrokerInterface &#125; from <span class="string">'../interface/broker.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubscriberInterface &#125; from <span class="string">'../interface/subscriber.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Clock3sPublisher &#125; from <span class="string">'../publisher/clock3s/clock3s.publisher'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubjectEnum &#125; from <span class="string">'../enum/subject.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubjectSubscriber &#125; from <span class="string">'../model/subject-subscriber.model'</span>;</span><br><span class="line"><span class="keyword">import</span> * as _ from <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ClockBroker <span class="keyword">implements</span> BrokerInterface &#123;</span><br><span class="line">  <span class="keyword">private</span> subscribers: SubjectSubscriber[] = [];</span><br><span class="line">  <span class="keyword">private</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> maxCounter = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private clock1sPublisher: Clock1sPublisher,</span><br><span class="line">              private clock3sPublisher: Clock3sPublisher) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clock1sPublisher.setBroker(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.clock3sPublisher.setBroker(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  publish(date: <span class="built_in">Date</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.counter === <span class="keyword">this</span>.maxCounter) &#123;</span><br><span class="line">      <span class="keyword">this</span>.publishToClock3sSubscriber(date);</span><br><span class="line">      <span class="keyword">this</span>.counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.publishToClock1sSubscriber(date);</span><br><span class="line">    <span class="keyword">this</span>.counter++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  subscribe(subject: SubjectEnum, subscriber: SubscriberInterface): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> subjectSubscriber: SubjectSubscriber = &#123;</span><br><span class="line">      subject: subject,</span><br><span class="line">      subscriber: subscriber</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.subscribers.push(subjectSubscriber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  unsubscribe(subject: SubjectEnum, subscriber: SubscriberInterface): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> subjectSubscriber: SubjectSubscriber = &#123;</span><br><span class="line">      subject: subject,</span><br><span class="line">      subscriber: subscriber</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    _.remove(<span class="keyword">this</span>.subscribers, subjectSubscriber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> publishToClock3sSubscriber(date: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers</span><br><span class="line">      .filter(item =&gt; item.subject === SubjectEnum.Clock3s)</span><br><span class="line">      .forEach(item =&gt; item.subscriber.update(date));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> publishToClock1sSubscriber(date: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers</span><br><span class="line">      .filter(item =&gt; item.subject === SubjectEnum.Clock1s)</span><br><span class="line">      .forEach(item =&gt; item.subscriber.update(date));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ClockBroker <span class="keyword">implements</span> BrokerInterface</span><br></pre></td></tr></table></figure>
<p>根據 <code>依賴反轉原則</code>，<code>broker</code> 應該相依於 <code>subscriber</code> 與 <code>publisher</code> 所訂出的 interface，因此必須實現 <code>BrokerInterface</code>。</p>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private clock1sPublisher: Clock1sPublisher,</span><br><span class="line">            private clock3sPublisher: Clock3sPublisher) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.clock1sPublisher.setBroker(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.clock3sPublisher.setBroker(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ClockBroker</code> 的角色就是做 <code>publisher</code> 與 <code>subscriber</code> 的中介角色，除了 <code>被</code> <code>subscriber</code> 注入外，還必須自己注入多個 <code>publisher</code>。</p>
<p>因為 <code>publisher</code> 將來會對 <code>broker</code> 加以 callback，因此使用 <code>setBroker()</code> 將 <code>broker</code> 的 reference 傳進去，讓 <code>publisher</code> 可對 <code>broker</code> 做 callback。</p>
<blockquote>
<p>根據 <code>介面隔離原則</code>，已經大概可猜到 <code>publisher</code> 的 interface 該提供 <code>setBroker()</code> </p>
</blockquote>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> subscribers: SubjectSubscriber[] = [];</span><br></pre></td></tr></table></figure>
<p><code>subscribers</code> 陣列儲存所有訂閱的 <code>subscriber</code>，每個物件型別為 <code>SubjectSubscriber</code>。</p>
<p>至於什麼是 <code>SubjectSubscriber</code>，稍後會討論。</p>
<p>34 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">subscribe(subject: SubjectEnum, subscriber: SubscriberInterface): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> subjectSubscriber: SubjectSubscriber = &#123;</span><br><span class="line">    subject: subject,</span><br><span class="line">    subscriber: subscriber</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.subscribers.push(subjectSubscriber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>BlockerInterface</code> 已經定義了 <code>subscribe()</code>，<code>broker</code> 就必須加以實作。</p>
<p><code>SubjectSubscriber</code> 物件提供了 <code>subject</code> 與 <code>subscriber</code> 兩個 field，<code>subject</code> 儲存所訂閱的主題，其型別為 <code>SubjectEnum</code>，<code>subscriber</code> 儲存有訂閱的 <code>subscriber</code>，其型別為 <code>SubscriberInterface</code>。</p>
<p><code>subscribers</code> 為陣列，使用 <code>push()</code> 新增資料進陣列。</p>
<p>22 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">publish(date: <span class="built_in">Date</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.counter === <span class="keyword">this</span>.maxCounter) &#123;</span><br><span class="line">    <span class="keyword">this</span>.publishToClock3sSubscriber(date);</span><br><span class="line">    <span class="keyword">this</span>.counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.publishToClock1sSubscriber(date);</span><br><span class="line">  <span class="keyword">this</span>.counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>BlockerInterface</code> 已經定義了 <code>publish()</code>，<code>broker</code> 就必須加以實作。</p>
<p>目前 <code>broker</code> 主要應付兩種 <code>publisher</code>，一種是 <code>每秒</code>，另一種是 <code>每三秒</code>。</p>
<p>每一秒 <code>counter</code> 會 <code>+1</code>，當 <code>counter</code> 為 <code>3</code> 會 reset 為 <code>0</code>。</p>
<p>每 <code>3</code> 秒會執行 <code>publishToClock3sSubscriber()</code>，而每 <code>1</code> 秒會執行 <code>publishToClock1sSubscriber()</code>，並將 <code>目前時間</code> 送出。</p>
<p>42 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> publishToClock3sSubscriber(date: <span class="built_in">Date</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.subscribers</span><br><span class="line">    .filter(item =&gt; item.subject === SubjectEnum.Clock3s)</span><br><span class="line">    .forEach(item =&gt; item.subscriber.update(date));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每 <code>3</code> 秒執行 <code>publishToClock3sSubscriber()</code> 一次，先 filter 只訂閱 <code>3 秒更新</code> 的 <code>subscriber</code>，然後 foreach 執行每個 <code>subscriber</code> 的 <code>update()</code>，並送出 <code>目前時間</code>。</p>
<p>51 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> publishToClock1sSubscriber(date: <span class="built_in">Date</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.subscribers</span><br><span class="line">    .filter(item =&gt; item.subject === SubjectEnum.Clock1s)</span><br><span class="line">    .forEach(item =&gt; item.subscriber.update(date));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每 <code>1</code> 秒執行 <code>publishToClock1sSubscriber()</code> 一次，先 filter 只訂閱 <code>1 秒更新</code> 的 <code>subscriber</code>，然後 foreach 執行每個 <code>subscriber</code> 的 <code>update()</code>，並送出 <code>目前時間</code>。</p>
<blockquote>
<p>根據 <code>介面隔離原則</code>，已經大概可猜到 <code>subscriber</code> 的 interface 該提供 <code>update()</code> </p>
</blockquote>
<p>40 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unsubscribe(subject: SubjectEnum, subscriber: SubscriberInterface): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> subjectSubscriber: SubjectSubscriber = &#123;</span><br><span class="line">      subject: subject,</span><br><span class="line">      subscriber: subscriber</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    _.remove(<span class="keyword">this</span>.subscribers, subjectSubscriber);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>BlockerInterface</code> 已經定義了 <code>subscribe()</code>，<code>broker</code> 就必須加以實作。</p>
<blockquote>
<p>使用 Lodash 的 <code>remove()</code> 對陣列刪除物件</p>
</blockquote>
<h3 id="PublisherInterface">PublisherInterface</h3><p><img src="/images/angular/pubsub/pub006.svg" alt="pub006"></p>
<p><strong>publisher.interface.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrokerInterface &#125; from <span class="string">'./broker.interface'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> PublisherInterface </span>&#123;</span><br><span class="line">  setBroker(broker: BrokerInterface): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 <code>介面隔離原則</code>，<code>publisher</code> 應該只相依於他所需要的 interface，目前看來需要  <code>setBroker()</code>，因此訂出 <code>PublisherInterface</code>，而 <code>publisher</code> 必須實作此 interface。</p>
<h3 id="Clock1sPublisher-1">Clock1sPublisher</h3><p><img src="images/pub003.svg" alt="pub003"></p>
<p><strong>clock1s.publisher.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PublisherInterface &#125; from <span class="string">'../../interface/publisher.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrokerInterface &#125; from <span class="string">'../../interface/broker.interface'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Clock1sPublisher <span class="keyword">implements</span> PublisherInterface &#123;</span><br><span class="line">  <span class="keyword">private</span> interval = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">private</span> clockBroker: BrokerInterface;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    setInterval(() =&gt; <span class="keyword">this</span>.tick(), <span class="keyword">this</span>.interval);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setBroker(broker: BrokerInterface): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clockBroker = broker;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> tick(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clockBroker.publish(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Clock1sPublisher <span class="keyword">implements</span> PublisherInterface</span><br></pre></td></tr></table></figure>
<p>根據 <code>依賴反轉原則</code>，<code>publisher</code> 應該相依於 <code>broker</code> 所訂出的 interface，因此必須實現 <code>PublisherInterface</code>。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setBroker(broker: BrokerInterface): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.clockBroker = broker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>PublisherInterface</code> 已經定義了 <code>setBroker()</code>，<code>publisher</code> 就必須加以實作。</p>
<h3 id="SubscriberInterface">SubscriberInterface</h3><p><img src="/images/angular/pubsub/pub007.svg" alt="pub007"></p>
<p><strong>subscriber.interface.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> SubscriberInterface </span>&#123;</span><br><span class="line">  update(date: <span class="built_in">Date</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 <code>介面隔離原則</code>，<code>broker</code> 應該只相依於他所需要的 interface，目前看來需要  <code>update()</code>，因此訂出 <code>SubscriberInterface</code>，而 <code>subscriber</code> 必須實作此 interface。</p>
<h3 id="DigitalClock1sComponent-1">DigitalClock1sComponent</h3><p><img src="images/pub002.svg" alt="pub002"></p>
<p><strong>digital-clock1s.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Inject, OnDestroy, OnInit &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ClockBroker &#125; from <span class="string">'../../broker/clock.broker'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubscriberInterface &#125; from <span class="string">'../../interface/subscriber.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubjectEnum &#125; from <span class="string">'../../enum/subject.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrokerInterface &#125; from <span class="string">'../../interface/broker.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrokerInterfaceToken &#125; from <span class="string">'../../interface/injection.token'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-digital-clock1s'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./digital-clock1s.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./digital-clock1s.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DigitalClock1sComponent <span class="keyword">implements</span> SubscriberInterface, OnInit, OnDestroy &#123;</span><br><span class="line">  now: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(</span><br><span class="line">    @Inject(BrokerInterfaceToken)</span><br><span class="line">    private clockBroker: BrokerInterface) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clockBroker.subscribe(SubjectEnum.Clock1s, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnDestroy(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clockBroker.unsubscribe(SubjectEnum.Clock3s, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update(date: <span class="built_in">Date</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.now = date;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DigitalClock1sComponent <span class="keyword">implements</span> SubscriberInterface, OnInit, OnDestroy</span><br></pre></td></tr></table></figure>
<p>根據 <code>依賴反轉原則</code>，<code>subscriber</code> 應該相依於 <code>broker</code> 所訂出的 interface，因此必須實現 <code>SubscriberInterface</code>。</p>
<p>25 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update(date: <span class="built_in">Date</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.now = date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>SubscriberInterface</code> 已經定義了 <code>update()</code>，<code>subscriber</code> 就必須加以實作。</p>
<h3 id="AppModule">AppModule</h3><p><strong>app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ClockBroker &#125; from <span class="string">'./broker/clock.broker'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Clock1sPublisher &#125; from <span class="string">'./publisher/clock1s/clock1s.publisher'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DigitalClock1sComponent &#125; from <span class="string">'./component/digital-clock1s/digital-clock1s.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DigitalClock3sComponent &#125; from <span class="string">'./component/digital-clock3s/digital-clock3s.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Clock3sPublisher &#125; from <span class="string">'./publisher/clock3s/clock3s.publisher'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrokerInterfaceToken &#125; from <span class="string">'./interface/injection.token'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    DigitalClock1sComponent,</span><br><span class="line">    DigitalClock3sComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;provide: BrokerInterfaceToken, useClass: ClockBroker&#125;,</span><br><span class="line">    Clock1sPublisher,</span><br><span class="line">    Clock3sPublisher</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  &#123; provide: BrokerInterfaceToken, useClass: ClockBroker &#125;,</span><br><span class="line">  Clock1sPublisher,</span><br><span class="line">  Clock3sPublisher</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p><code>broker</code> 採用 interface 方式注入，要特別使用 token。</p>
<p>兩個 <code>publisher</code> 直接對 class 注入即可。</p>
<h2 id="Summary">Summary</h2><blockquote>
<p>Pub/Sub Pattern vs. Observer Pattern</p>
</blockquote>
<p>Observer Pattern 是原始 GoF 23 個 Design Pattern 之一，Pub/Sub Pattern 與 Observer Pattern 理念上非常接近，廣義上來說，Pub/Sub Pattern 算是 Observer Pattern 的變形，有些書甚至也認為 Pub/Sub Pattern 就是 Observer Pattern，但嚴格來說，兩者還是有些微差異：</p>
<p><strong>相同點</strong></p>
<ul>
<li>Observer Pattern 的 <code>observer</code> 相當於 Pub/Sub Pattern 的 <code>subscriber</code></li>
<li>Observer Pattern 的 <code>subject</code> 相當於 Pub/Sub Pattern 的 <code>publisher</code></li>
<li>Observer Pattern 的 <code>SubjectInterface</code> 有 <code>addObserver()</code> 與 <code>removeObserver()</code> ； Pub/Sub Pattern 的 <code>BrokerInterface</code> 也有 <code>subscribe()</code> 與  <code>unsubscribe()</code></li>
<li>Observer Pattern 的 <code>ObserverInterface</code> 有 <code>update()</code>；Pub/Sub Pattern 的 <code>SubscriberInterface</code> 也有 <code>update()</code></li>
</ul>
<p><strong>相異點</strong></p>
<ul>
<li>Pub/Sub Pattern 多了 <code>broker</code> 介入</li>
<li>對於 <code>publisher</code> 而言，<code>broker</code> 是 <code>publisher</code> 的 <code>subscriber</code>；對於 <code>subscriber</code> 而言，<code>broker</code> 是 <code>subscriber</code> 的 <code>publisher</code>，所以 <code>broker</code> 兼具 <code>subscriber</code> 與 <code>publisher</code> 的角色</li>
<li>Observer Pattern 只有一個 <code>subject</code>，但 Pub/Sub Pattern 有多個 <code>publisher</code></li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Observer Pattern 適合 <code>一對多</code> 場景；而 Pub/Sub Pattern 適合 <code>多對多</code> 場景</li>
<li><code>一對一</code> 當然也可以使用 Pub/Sub Pattern 實現，只是 Design Pattern 強調的是 intention，應該依照使用場景選擇適合的 pattern</li>
<li>Pub/Sub Pattern 與 Observer Pattern 的最大差異在於 <code>broker</code> 的介入，讓 <code>publisher</code> 與 <code>subscriber</code> 都只相依於 <code>broker</code> 即可，將來有任何修改，都集中在 <code>broker</code>，符合 <code>開放封閉原則</code></li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52PubSubPattern" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[與 Observer Pattern 很接近的 Pub/Sub Pattern]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何以 Command 方式執行 WebStorm 並開啟專案 ?]]></title>
    <link href="http://oomusou.io/webstorm/run-by-command/"/>
    <id>http://oomusou.io/webstorm/run-by-command/</id>
    <published>2018-02-03T12:23:43.000Z</published>
    <updated>2018-02-03T12:19:01.000Z</updated>
    <content type="html"><![CDATA[<p>我們看到 Visual Studio Code 可以在 terminal 下 command 開啟目前目錄的專案，WebStorm 是否也能以這種方式啟動呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>WebStorm 2017.3.4</p>
<h2 id="建立啟動_Script">建立啟動 Script</h2><hr>
<p><img src="/images/webstorm/run-by-command/cmd000.png" alt="cmd000"></p>
<p><strong><em>Tools -&gt; Create Command-line Launcher…</em></strong></p>
<p><img src="/images/webstorm/run-by-command/cmd002.png" alt="cmd002"></p>
<p>WebStorm 預設會將 script 建立在 <code>/usr/local/bin/</code>，將來將以 <code>webstorm</code> command 啟動。</p>
<blockquote>
<p>為了少打點字，你也可以自行命名，如 <code>/usr/local/bin/ws</code></p>
</blockquote>
<h2 id="在_Terminal_執行_WebStorm">在 Terminal 執行 WebStorm</h2><hr>
<p><img src="/images/webstorm/run-by-command/cmd001.png" alt="cmd001"></p>
<p>在 terminal 下進入專案目錄，輸入 <code>webstorm .</code> ，WebStorm 會自動執行，並且開啟 <code>NG52MergeMap</code> 專案。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>WebStorm 除了使用 <code>JetBrains ToolBox</code> 開啟專案外，也可以使用 command 方式在直接開啟</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[更快速的啟動方式]]>
    
    </summary>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何刪除陣列中的物件 ?]]></title>
    <link href="http://oomusou.io/javascript/remove-object-array/"/>
    <id>http://oomusou.io/javascript/remove-object-array/</id>
    <published>2018-02-03T12:23:43.000Z</published>
    <updated>2018-02-01T15:46:43.000Z</updated>
    <content type="html"><![CDATA[<p>JavaScript 並沒有內建刪除陣列元素的 operator，必須使用一些技巧才能刪除，若陣列內放的是 object，則狀況將更加詭異，這也是 JavaScript 初學者一定會踩到的雷。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Node.js 8.9.4<br>Angular CLI 1.6.7<br>Angular 5.2.3</p>
<h2 id="splice()">splice()</h2><hr>
<h3 id="典型錯誤寫法">典型錯誤寫法</h3><p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubjectSubscriber &#125; from <span class="string">'../model/subject-subscriber.model'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubjectEnum &#125; from <span class="string">'../enum/subject.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SubscriberInterface &#125; from <span class="string">'../interface/SubscriberInterface'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> SubscriberInterface &#123;</span><br><span class="line">  message: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> subscribers: SubjectSubscriber[] = [];</span><br><span class="line"></span><br><span class="line">  update(message: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSubscribeClick() &#123;</span><br><span class="line">    <span class="keyword">const</span> subjectSubscriber: SubjectSubscriber = &#123;</span><br><span class="line">      subject: SubjectEnum.FrontEnd,</span><br><span class="line">      subscriber: <span class="keyword">this</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.subscribers.push(subjectSubscriber);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.subscribers.length);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onUnSubscribeClick() &#123;</span><br><span class="line">    <span class="keyword">const</span> subjectSubscriber: SubjectSubscriber = &#123;</span><br><span class="line">      subject: SubjectEnum.FrontEnd,</span><br><span class="line">      subscriber: <span class="keyword">this</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.subscribers.indexOf(subjectSubscriber);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.subscribers.splice(index, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.subscribers.length);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> subscribers: SubjectSubscriber[] = [];</span><br></pre></td></tr></table></figure>
<p>宣告一個陣列，注意其型別為 <code>SubjectSubscriber</code>，也就是 <code>subscribers</code> 為一個物件陣列。</p>
<p>19 行</p>
 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">onSubscribeClick() &#123;</span><br><span class="line">  <span class="keyword">const</span> subjectSubscriber: SubjectSubscriber = &#123;</span><br><span class="line">    subject: SubjectEnum.FrontEnd,</span><br><span class="line">    subscriber: <span class="keyword">this</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.subscribers.push(subjectSubscriber);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.subscribers.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>準備好一個物件，使用 JavaScript array 原生的 <code>push()</code> 將物件新增至陣列。</p>
<p>30 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">onUnSubscribeClick() &#123;</span><br><span class="line">  <span class="keyword">const</span> subjectSubscriber: SubjectSubscriber = &#123;</span><br><span class="line">    subject: SubjectEnum.FrontEnd,</span><br><span class="line">    subscriber: <span class="keyword">this</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> index = <span class="keyword">this</span>.subscribers.indexOf(subjectSubscriber);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.subscribers.splice(index, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.subscribers.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直覺會使用 <code>onSubscribeClick()</code> 方法，準備好一個物件，使用 JavaScript 原生的 <code>indexOf()</code> 去尋找該物件的 <code>index</code>，然後再加以 <code>splice()</code>。</p>
<p>問題在於 <code>subjectSubscriber</code> 是一個全新的物件，有新的 reference， 因此 <code>indexOf()</code> 會找不到物件而傳回 <code>-1</code>。</p>
<h3 id="正確寫法">正確寫法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">onUnSubscribeClick() &#123;</span><br><span class="line">  <span class="keyword">const</span> index = <span class="keyword">this</span>.subscribers.findIndex(</span><br><span class="line">    item =&gt; item.subject === SubjectEnum.FrontEnd &amp;&amp; item.subscriber === <span class="keyword">this</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.subscribers.splice(index, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.subscribers.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改用  <code>findIndex()</code>，需要傳入 arrow function，直接用物件內的 field 做判斷，這樣就可以抓到正確的 <code>index</code>。</p>
<h2 id="filter()">filter()</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onUnSubscribeClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.subscribers = <span class="keyword">this</span>.subscribers.filter(</span><br><span class="line">    item =&gt; !(item.subject === SubjectEnum.FrontEnd &amp;&amp; item.subscriber === <span class="keyword">this</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.subscribers.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外一個方法是改用 JavaScript 原生的 <code>filter()</code> ，傳入 arrow function 找出所有 <code>不符合條件</code> 的陣列，重新指定給 <code>subscribers</code>。</p>
<p>由於 <code>filter()</code> 會產生一個新的陣列，所以效率會較差一點，不過符合 FP 的 pure function 要求。</p>
<h2 id="_-remove()">_.remove()</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">onUnSubscribeClick() &#123;</span><br><span class="line">  <span class="keyword">const</span> subjectSubscriber: SubjectSubscriber = &#123;</span><br><span class="line">    subject: SubjectEnum.FrontEnd,</span><br><span class="line">    subscriber: <span class="keyword">this</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  _.remove(<span class="keyword">this</span>.subscribers, subjectSubscriber);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.subscribers.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若使用 Lodash 的 <code>remove()</code>，則有更直覺的寫法，一樣準備好物件，傳進 <code>remove()</code> 即可，雖然物件是 reference type，但 Lodash 的 <code>remove()</code> 會自己比較每個物件的 field 值是否相等。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>indexOf()</code> 找不到物件，並不是 <code>indexOf()</code> 不能使用在物件，而是常常因為新建立物件的 reference 已經改變，導致 <code>indexOf()</code> 找不到</li>
<li>Lodash 的  <code>remove()</code> 提供更直覺的方式刪除物件陣列中的元素，無論是 value type 或 reference type 都適用</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52RemoveItemInObjectArray" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 3 種方式刪除陣列中的物件]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對 Route 單元測試 ?]]></title>
    <link href="http://oomusou.io/angular/route-unit-test/"/>
    <id>http://oomusou.io/angular/route-unit-test/</id>
    <published>2018-02-02T12:23:43.000Z</published>
    <updated>2018-02-05T08:09:24.000Z</updated>
    <content type="html"><![CDATA[<p>前後端分離後，Angular 有自己的 route，在 component 也必須處理 route。由於 component 是 DI 注入 <code>Router</code>，因此若要對 route 單元測試，首先必須要解決的就是 <code>Router</code> 注入問題 。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Node.js 8.9.4<br>Angular CLI 1.6.7<br>Angular 5.2.3</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/angular/route-unit-test/router000.png" alt="router000"></p>
<p>首頁使用的是 <code>PostComponent</code>，按下 <code>Redirect to comment</code> 將會導到 <code>/comment</code>。</p>
<p><img src="/images/angular/route-unit-test/router001.png" alt="router001"></p>
<p>導到 <code>/comment</code> 之後，將顯示 <code>CommentComponent</code> 。</p>
<h2 id="Task">Task</h2><hr>
<p>對 <code>PostComponent</code> 單元測試，確定有正確導到 <code>/comment</code>。</p>
<h2 id="Implementation">Implementation</h2><hr>
<p><strong>app-routing.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule, Routes &#125; from <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostComponent &#125; from <span class="string">'./post/post.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommentComponent &#125; from <span class="string">'./comment/comment.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">''</span>, component: PostComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'comment'</span>, component: CommentComponent &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">''</span>, component: PostComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'comment'</span>, component: CommentComponent &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>實際的 route 設定，為了單元測試也能使用，所以特別使用 <code>export</code> 。</p>
<p><strong>post.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>post works!<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onRedirectClick()"</span>&gt;</span>Redirect to comment<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>當按下 <code>Redirect to comment</code> 時，會執行  <code>onRedirectClick()</code>。</p>
<p><strong>post.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; from <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-post'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./post.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./post.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PostComponent &#123;</span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private router: Router) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onRedirectClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.router.navigateByUrl(<span class="string">'comment'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private router: Router) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要使用 <code>Router</code> 去切換 route，因此 DI 注入 <code>Router</code>。</p>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onRedirectClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.router.navigateByUrl(<span class="string">'comment'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Router.navigateByUrl()</code> 切換到 <code>comment</code>。</p>
<p><strong>post.component.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ComponentFixture, fakeAsync, TestBed, tick &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostComponent &#125; from <span class="string">'./post.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouterTestingModule &#125; from <span class="string">'@angular/router/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; from <span class="string">'../app-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommentComponent &#125; from <span class="string">'../comment/comment.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; from <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'PostComponent'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;PostComponent&gt;;</span><br><span class="line">  <span class="keyword">let</span> postComponent: PostComponent;</span><br><span class="line">  <span class="keyword">let</span> router: Router;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      imports: [</span><br><span class="line">        RouterTestingModule.withRoutes(routes)</span><br><span class="line">      ],</span><br><span class="line">      declarations: [</span><br><span class="line">        PostComponent,</span><br><span class="line">        CommentComponent</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line">    fixture = TestBed.createComponent(PostComponent);</span><br><span class="line">    postComponent = fixture.componentInstance;</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">    router = TestBed.get(Router);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should create'</span>, () =&gt; &#123;</span><br><span class="line">    expect(postComponent).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should navigate to comment`, fakeAsync(() =&gt; &#123;</span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    postComponent.onRedirectClick();</span><br><span class="line">    tick();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    expect(router.url).toEqual(<span class="string">'/comment'</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  RouterTestingModule.withRoutes(routes)</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>Angular 對於 route 單元測試，另外提供了 <code>RouterTestingModule</code>，使用 <code>withRoutes()</code> 將原本的 route 帶入。</p>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">declarations: [</span><br><span class="line">  PostComponent,</span><br><span class="line">  CommentComponent</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>由於我們由 <code>RouterTestingModule.withRoutes()</code> 所載入的 route 包含 <code>PostComponent</code> 與 <code>CommentComponent</code>，因此需要特別在 <code>declarations</code> 宣告。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> router: Router;</span><br></pre></td></tr></table></figure>
<p>宣告要測試的 <code>router</code>。</p>
<blockquote>
<p>由於其型別仍然是 <code>Router</code>，而不是如 <code>HttpClient</code> 的 <code>HttpTestingController</code>，所以不算 mock，<code>RouterTestingModule</code> 只是幫我們解決了 DI 的問題</p>
</blockquote>
<p>27 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router = TestBed.get(Router);</span><br></pre></td></tr></table></figure>
<p>由 DI 幫我們建立 <code>router</code> 物件。</p>
<p>34 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(`should navigate to comment`, fakeAsync(() =&gt; &#123;</span><br><span class="line">  <span class="comment">/** act */</span></span><br><span class="line">  postComponent.onRedirectClick();</span><br><span class="line">  tick();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** assert */</span></span><br><span class="line">  expect(router.url).toEqual(<span class="string">'/comment'</span>);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>這裡使用了 <code>fackAsync()</code> 與 <code>tick()</code>，這是 Angular 提供的非同步測試機制。</p>
<p>主要的原因是 <code>Router.navigateByUrl()</code> 回傳的是 <code>Promise&lt;boolean&gt;</code>，也就是非同步，因此必須使用 <code>fackAsync()</code> 與  <code>tick()</code>。</p>
<p>簡單的說，由於在 <code>onRedirectClick()</code> 的 <code>Router.navigateByUrl()</code> 為非同步，我們必須使用 <code>tick()</code> 等待非同步執行完畢後，才能繼續執行 <code>expect()</code>，<code>tick()</code> 讓我們不用寫 callback，以更同步的寫法來測試非同步行為。</p>
<p>最後直接 <code>expect()</code> <code>router.url</code>，測試目前 url 有沒有如預期。</p>
<p><img src="/images/angular/route-unit-test/router002.png" alt="router002"></p>
<p>使用 Wallaby.js 通過所有 route 單元測試。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Route 單元測試的可貴在於不用執行 <code>ng serve</code>，就可以測試 route 是否正確</li>
<li>Route 單元測試的難點在於該如何解決 <code>Router</code> DI 注入，所幸搭配 <code>RouterTestingModule</code>，就可以幫我們解決</li>
<li><code>RouterTestingModule</code> 所提供的方式不算 mock <code>Router</code>，只是幫我們解決了 <code>Router</code> DI 注入問題，不管如何，能夠在不執行 <code>ng serve</code> 就可執行測試，就非常難得</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52RouteUnitTest" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://angular.io" target="_blank" rel="external">Angular</a>, <a href="https://angular.io/guide/testing" target="_blank" rel="external">Testing</a><br><a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fcodecraft.tv%2Fcourses%2Fangular%2Funit-testing%2Frouting%2F&amp;ref_src=twsrc%5Etfw&amp;screen_name=jawache&amp;tw_p=followbutton" target="_blank" rel="external">Asim</a>, <a href="https://codecraft.tv/courses/angular/unit-testing/routing/" target="_blank" rel="external">Testing Routing</a><br><a href="https://medium.com/@buraktasci" target="_blank" rel="external">Burak Tasci</a>, <a href="https://medium.com/burak-tasci/using-jasmine-framework-to-test-angular-router-b568a232efed" target="_blank" rel="external">Using Jasmine framework to test Angular Router</a></p>
]]></content>
    <summary type="html">
    <![CDATA[不執行 ng serve 下就可以測試 route]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Angular Testing" scheme="http://oomusou.io/tags/Angular-Testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Angular 使用傳統 JavaScript 套件 ?]]></title>
    <link href="http://oomusou.io/angular/javascript-package/"/>
    <id>http://oomusou.io/angular/javascript-package/</id>
    <published>2018-02-01T12:23:43.000Z</published>
    <updated>2018-02-02T03:13:38.000Z</updated>
    <content type="html"><![CDATA[<p>Lodash 是 JavaScript 很有名的 package，尤其對於處理 array 很有一套，Angular 該如何使用 <code>lodash</code> 呢 ? 這也可以視為在 Angular 使用傳統 JavaScript package 的 SOP。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Node.js 8.9.4<br>Angular CLI 1.6.2<br>Angular 5.2.2<br>Lodash 4.17.4</p>
<h2 id="安裝_Lodash">安裝 Lodash</h2><hr>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ npm <span class="operator"><span class="keyword">install</span> lodash <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<p>使用  npm 安裝 <code>lodash</code>。</p>
<h2 id="安裝_Lodash_Type_定義檔">安裝 Lodash Type 定義檔</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ <span class="built_in">npm</span> install <span class="property">@types</span>/lodash --save-dev</span><br></pre></td></tr></table></figure>
<p>傳統 JavaScript 並沒有型別，但 TypeScript 是個強型別語言，除了型別外還有泛型，這該怎麼與傳統 JavaScript 搭配呢 ?</p>
<p>TypeScript 的解決方案是另外使用 <code>*.d.ts</code>，此為 type 定義檔。</p>
<p>一般來說，若是知名的 JavaScript library，都已經有人維護 type 定義檔，其 package 的規則是 <code>@types/package</code>。</p>
<p>由於 type 定義檔只是 TypeScript 編譯使用，以此加上 <code>--save-dev</code>。</p>
<h2 id="Import_Lodash">Import Lodash</h2><hr>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> * as _ from <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  title = <span class="string">'app'</span>;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> scores: <span class="built_in">number</span>[] = [<span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>];</span><br><span class="line"></span><br><span class="line">    _.remove(scores, <span class="number">2</span>);</span><br><span class="line">    scores.forEach((score) =&gt; <span class="built_in">console</span>.log(score));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 2 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * as _ from <span class="string">'lodash'</span>;</span><br></pre></td></tr></table></figure>
<p>載入 <code>lodash</code> 。</p>
<blockquote>
<p>因為 lodash 習慣以 <code>_</code> 使用，因此 import 時特別取別名為 <code>_</code></p>
<p>WebStorm 對於 Angular 內建的 API，都可以自動 import，但對於 JavaScript 的 package，目前 WebStorm 還沒有辦法自動 import，需手動載入</p>
</blockquote>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.remove(scores, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>移除陣列元素一直是 JavaScript 比較麻煩的部分，透過 lodash 的 <code>remove()</code>，可以很簡單的使用。</p>
<blockquote>
<p>目前 WebStorm 在輸入 <code>_.</code> 之後的 intellisense 速度較慢，需要等 1s  之後才會顯示，這應該是 WebStorm 本身的問題</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上若有 Angular 版本的 package，當然優先使用；若遇到必須使用 JavaScript package 不可的場合，除了安裝 package 外，還要安裝 type 定義檔，如此才可以在 Angular 正確使用並通過編譯</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52Lodash" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://blog.kevinyang.net" target="_blank" rel="external">CK’s Notepad</a>,  <a href="https://blog.kevinyang.net/2016/11/17/ng2-3rdLibrary/" target="_blank" rel="external">Angular 3rd Library 的安裝筆記</a></p>
]]></content>
    <summary type="html">
    <![CDATA[在 Angular 內使用 JavaScript Package]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對 Service 單元測試 ?]]></title>
    <link href="http://oomusou.io/angular/service-unit-test/"/>
    <id>http://oomusou.io/angular/service-unit-test/</id>
    <published>2018-01-28T12:23:43.000Z</published>
    <updated>2018-02-05T05:30:19.000Z</updated>
    <content type="html"><![CDATA[<p>凡與顯示相關邏輯，我們會寫在 component；凡與資料相關邏輯，我們會寫在 service。而 service 最常見的應用，就是透過 <code>HttpClient</code> 存取 API。</p>
<p>對於 service 單元測試而言，我們必須對 <code>HttpClient</code> 加以隔離；而對 component 單元測試而言，我們必須對 <code>service</code> 加以隔離，我們該如何對 service 與 component 進行單元測試呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.6.2<br>Node.js 8.9.4<br>Angular 5.2.2</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/angular/service-unit-test/service000.png" alt="service000"></p>
<ul>
<li>Header 會顯示 <code>Welcome to app!</code></li>
<li>程式一開始會顯示 <code>所有 post</code></li>
<li>按 <code>Add Post</code> 會呼叫 <code>POST</code> API <code>新增 post</code></li>
<li>按 <code>List Posts</code> 會呼叫 <code>GET</code> API 回傳 <code>所有 post</code>    </li>
</ul>
<h2 id="Task">Task</h2><hr>
<ul>
<li>目前有 <code>PostService</code> 使用 <code>HttpClient</code> 存取 API，為了對 <code>PostService</code> 做 <code>單元測試</code>，必須對 <code>HttpClient</code> 加以隔離</li>
<li>目前有 <code>AppComponent</code> 使用 <code>PostService</code>， 為了對 <code>AppComponent</code> 做 <code>單元測試</code>，必須對 <code>PostService</code> 加以隔離</li>
</ul>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/angular/service-unit-test/service001.svg" alt="service001"></p>
<ul>
<li><code>AppComponent</code> 負責 <code>新增 post</code> 與 <code>顯示 post</code> 的介面顯示；而 <code>PostService</code> 負責 API 的串接</li>
<li>根據 <code>依賴反轉原則</code>，<code>AppComponent</code> 不應該直接相依於 <code>PostService</code>，而是兩者相依於 interface</li>
<li>根據 <code>介面隔離原則</code>，<code>AppComponent</code> 只相依於它所需要的 interface，因此以 <code>AppComponent</code> 的角度訂出 <code>PostInterface</code>，且 <code>PostService</code> 必須實作此 interface</li>
<li>因為 <code>AppComponent</code> 與 <code>PostService</code> 都相依於 <code>PostInterface</code>，兩者都只知道 <code>PostInterface</code> 而已，而不知道彼此，因此 <code>AppComponent</code> 與  <code>PostService</code> 徹底解耦合</li>
<li>透過 DI 將實作 <code>PostInterface</code> 的 <code>PostService</code> 注入到 <code>AppComponent</code> ，且將 <code>HttpClient</code> 注入到 <code>PostService</code></li>
</ul>
<h2 id="Implementation">Implementation</h2><hr>
<p><code>AppComponent</code> 與 <code>PostService</code> 的實作並非本文的重點，本文的重點在於實作 <code>AppComponent</code> 與 <code>PostService</code> 的 <code>單元測試</code> 部分。</p>
<h3 id="PostService">PostService</h3><p><img src="/images/angular/service-unit-test/service002.svg" alt="service002"></p>
<p><strong>post.service.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostService &#125; from <span class="string">'./post.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClientTestingModule, HttpTestingController &#125; from <span class="string">'@angular/common/http/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostInterfaceToken &#125; from <span class="string">'../interface/injection.token'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Post &#125; from <span class="string">'../../model/post.model'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; from <span class="string">'../../environments/environment'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostInterface &#125; from <span class="string">'../interface/post.interface'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'PostService'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> postService: PostInterface;</span><br><span class="line">  <span class="keyword">let</span> mockHttpClient: HttpTestingController;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      imports: [</span><br><span class="line">        HttpClientTestingModule</span><br><span class="line">      ],</span><br><span class="line">      providers: [</span><br><span class="line">        &#123;provide: PostInterfaceToken, useClass: PostService&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    postService = TestBed.get(PostInterfaceToken, PostService);</span><br><span class="line">    mockHttpClient = TestBed.get(HttpTestingController);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should be created'</span>, () =&gt; &#123;</span><br><span class="line">    expect(PostService).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should list all posts`, () =&gt; &#123;</span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="keyword">const</span> expected: Post[] = [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">        author: <span class="string">'Dr. Eric Gamma'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    postService.listPosts$().subscribe(posts =&gt; &#123;</span><br><span class="line">      <span class="comment">/** assert */</span></span><br><span class="line">      expect(posts).toEqual(expected);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="keyword">const</span> mockResponse: Post[] = [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">        author: <span class="string">'Eric Gamma'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    mockHttpClient.expectOne(&#123;</span><br><span class="line">      url: `$&#123;environment.apiServer&#125;/posts`,</span><br><span class="line">      method: <span class="string">'GET'</span></span><br><span class="line">    &#125;).flush(mockResponse);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should add post`, () =&gt; &#123;</span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="keyword">const</span> expected: Post = &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'OOP'</span>,</span><br><span class="line">      author: <span class="string">'Sam'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    postService.addPost(expected).subscribe(post =&gt; &#123;</span><br><span class="line">      <span class="comment">/** assert */</span></span><br><span class="line">      expect(post).toBe(expected);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    mockHttpClient.expectOne(&#123;</span><br><span class="line">      url: `$&#123;environment.apiServer&#125;/posts`,</span><br><span class="line">      method: <span class="string">'POST'</span></span><br><span class="line">    &#125;).flush(expected);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterEach(() =&gt; &#123;</span><br><span class="line">    mockHttpClient.verify();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TestBed.configureTestingModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    HttpClientTestingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;provide: PostInterfaceToken, useClass: PostService&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Angular 有 module 觀念，若使用到了其他 module，必須在 <code>imports</code> 設定；若使用到 DI，則必須在 <code>providers</code> 設定。</p>
<p>若只有一個 module，則在 <code>AppModule</code> 設定。</p>
<p>但是單元測試時，並沒有使用 <code>AppModule</code> 的設定，因為我們可能在測試時使用其他替代 module，也可能自己實作 fake 另外 DI。</p>
<p>Angular 提供了 <code>TestBed.configureTestingModule()</code>，讓我們另外設定跑測試時的 <code>imports</code> 與 <code>providers</code> 部分。</p>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  HttpClientTestingModule</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>原本 <code>HttpClient</code> 使用的是 <code>HttpClientModule</code>，這會使得 <code>HttpClient</code> 真的透過網路去打 API，這就不符合單元測試 <code>隔離</code> 的要求，因此 Angular 另外提供 <code>HttpClientTestingModule</code> 取代 <code>HttpClientModule</code>。</p>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  &#123;provide: PostInterfaceToken, useClass: PostService&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>由於我們要測試的就是 <code>PostService</code>，因此 <code>PostService</code> 也必須由 DI 幫我們建立。</p>
<p>但因爲 <code>PostService</code> 是基於 <code>PostInterface</code> 建立，因此必須透過 <code>PostInterfaceToken</code> mapping 到 <code>PostService</code>。</p>
<p>23 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postService = TestBed.get(PostInterfaceToken, PostService);</span><br><span class="line">mockHttpClient = TestBed.get(HttpTestingController);</span><br></pre></td></tr></table></figure>
<p>由 <code>providers</code> 設定好 interface 與 class 的 mapping 關係後，我們必須透過 DI 建立 <code>postService</code> 與 <code>mockHttpClient</code>。</p>
<p>其中 <code>HttpTestingController</code> 相當於 mock 版的 <code>HttpClient</code>，因此取名為 <code>mockHttpClient</code>。</p>
<blockquote>
<p>TestBed.get() 其實相當於 <code>new</code>，只是這是藉由 DI 幫我們 <code>new</code> 而已</p>
</blockquote>
<p>31 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">it(`should list all posts`, () =&gt; &#123;</span><br><span class="line">  <span class="comment">/** act */</span></span><br><span class="line">  <span class="keyword">const</span> expected: Post[] = [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">      author: <span class="string">'Dr. Eric Gamma'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  postService.listPosts$().subscribe(posts =&gt; &#123;</span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    expect(posts).toEqual(expected);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** arrange */</span></span><br><span class="line">  <span class="keyword">const</span> mockResponse: Post[] = [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">      author: <span class="string">'Eric Gamma'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  mockHttpClient.expectOne(&#123;</span><br><span class="line">    url: `$&#123;environment.apiServer&#125;/posts`,</span><br><span class="line">    method: <span class="string">'GET'</span></span><br><span class="line">  &#125;).flush(mockResponse);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>先談談如何測試 <code>GET</code>。</p>
<p>3A 原則的 <code>arrange</code> 習慣都會寫在最前面，但在 service 的單元測試時，<code>arrange</code> 必須寫在最後面，否則會執行錯誤，稍後會解釋原因。</p>
<p>32 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="keyword">const</span> expected: Post[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">    author: <span class="string">'Dr. Eric Gamma'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">postService.listPosts$().subscribe(posts =&gt; &#123;</span><br><span class="line">  <span class="comment">/** assert */</span></span><br><span class="line">  expect(posts).toEqual(expected);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>直接對 <code>PostService.listPost$()</code> 測試，由於 <code>listPost$()</code> 回傳 <code>Observable</code>，因此 <code>expect()</code> 必須寫在 <code>subscribe()</code> 內。</p>
<p>將預期的測試結果寫在 <code>expected</code> 內。</p>
<blockquote>
<p>一般 <code>Observable</code> 會在 <code>subscribe()</code> 後執行，不過在 <code>HttpTestingController</code> 的設計裡，<code>subscribe()</code> 會在 <code>flush()</code> 才執行，稍後會看到 <code>flush()</code>，所以此時並還沒有執行 <code>expect()</code> 測試</p>
</blockquote>
<p>46 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line"><span class="keyword">const</span> mockResponse: Post[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">    author: <span class="string">'Eric Gamma'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">mockHttpClient.expectOne(&#123;</span><br><span class="line">  url: `$&#123;environment.apiServer&#125;/posts`,</span><br><span class="line">  method: <span class="string">'GET'</span></span><br><span class="line">&#125;).flush(mockResponse);</span><br></pre></td></tr></table></figure>
<p>之前已經使用 <code>HttpClientTestingModule</code> 取代 <code>HttpClient</code>，<code>HttpTestingController</code> 取代 <code>HttpClient</code>，這只能確保呼叫 API 時不用透過網路。</p>
<p>還要透過 <code>expectOne()</code> 設定要 mock 的 URI 與 action，之所以取名為 <code>expectOne()</code>，就是期望有人真的呼叫這個 URI <code>一次</code>，且必須為 <code>GET</code>，若沒有呼叫這個 URI 或者不是 <code>GET</code>，將造成單元測試 <code>紅燈</code>。</p>
<p>這也是為什麼 <code>HttpTestingController</code> 的設計是 <code>act</code> 與 <code>assert</code> 要先寫，最後再寫 <code>arrange</code>，因為 <code>HttpTestingController</code> 本身也有 <code>assert</code> 功能，必須有 <code>act</code>，才能知道 <code>assert</code> URI 與 GET 有沒有錯誤。</p>
<p>最後使用 <code>flush()</code> 設定 mock 的回傳值，<code>flush</code> 英文就是 <code>沖水</code>，當 <code>HttpTestingController</code> 將 <code>mockResponse</code> 沖出去後，才會執行 <code>subscribe()</code> 內的 <code>expect()</code> 測試。</p>
<blockquote>
<p>也就是說若你忘了寫 <code>flush()</code>，其實單元測試也會 <code>綠燈</code>，但此時的綠燈並不是真的測試通過，而是根本沒有執行到 <code>subscribe()</code> 內的 <code>expect()</code>。</p>
</blockquote>
<p>81 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">afterEach(() =&gt; &#123;</span><br><span class="line">  mockHttpClient.verify();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>實務上可能真的忘了寫 <code>expectOne()</code> 與  <code>flush()</code>，導致 <code>subscribe()</code> 內的 <code>expect()</code> 根本沒跑到而造成單元測試 <code>綠燈</code>，因此必須在每個單元測試跑完補上 <code>mockHttpClient.verify()</code>，若有任何 API request 卻沒有經過 <code>expectOne()</code> 與 <code>flush()</code> 測試，則 <code>verify()</code> 會造成單元測試 <code>紅燈</code>，藉以彌補忘了寫 <code>expectOne()</code> 與 <code>flush()</code> 的人為錯誤。</p>
<blockquote>
<p>Q : 我們在 <code>listPosts$()</code> 的單元測試到底測試了什麼 ?</p>
</blockquote>
<ul>
<li>若 service 的 API 與 mock 不同，會出現單元測試 <code>紅燈</code>，可能是 service 的 API 錯誤</li>
<li>若 service 的 action 與 mock 不同，會出現單元測試 <code>紅燈</code>，可能是 service 的 action 錯誤</li>
<li>若 service 的 response 與 expected 不同，可能是 service 的邏輯錯誤</li>
</ul>
<p>61 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(`should add post`, () =&gt; &#123;</span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="keyword">const</span> expected: Post = &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'OOP'</span>,</span><br><span class="line">      author: <span class="string">'Sam'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    postService.addPost(expected).subscribe(post =&gt; &#123;</span><br><span class="line">      <span class="comment">/** assert */</span></span><br><span class="line">      expect(post).toBe(expected);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    mockHttpClient.expectOne(&#123;</span><br><span class="line">      url: `$&#123;environment.apiServer&#125;/posts`,</span><br><span class="line">      method: <span class="string">'POST'</span></span><br><span class="line">    &#125;).flush(expected);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>再來談談如何測試 <code>POST</code>。</p>
<p>62 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="keyword">const</span> expected: Post = &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  title: <span class="string">'OOP'</span>,</span><br><span class="line">  author: <span class="string">'Sam'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">postService.addPost(expected).subscribe(post =&gt; &#123;</span><br><span class="line">  <span class="comment">/** assert */</span></span><br><span class="line">  expect(post).toBe(expected);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>直接對 <code>PostService.addPost()</code> 測試，由於 <code>addPost()</code> 回傳 <code>Observable</code>，因此 <code>expect()</code> 必須寫在 <code>subscribe()</code> 內。</p>
<p>將預期的測試結果寫在 <code>expected</code> 內。</p>
<p>74 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line">mockHttpClient.expectOne(&#123;</span><br><span class="line">  url: `$&#123;environment.apiServer&#125;/posts`,</span><br><span class="line">  method: <span class="string">'POST'</span></span><br><span class="line">&#125;).flush(expected);</span><br></pre></td></tr></table></figure>
<p>因為要 mock <code>POST</code>，因此 <code>method</code> 部分改為 <code>POST</code>，其他部分與 <code>GET</code> 部分完全相同。</p>
<blockquote>
<p>Q : 我們在 <code>addPost()</code> 到底測試了什麼 ?</p>
</blockquote>
<ul>
<li>若 service 的 API 與 mock 不同，會出現單元測試 <code>紅燈</code>，可能是 service 的 API 錯誤</li>
<li>若 service 的 action 與 mock 不同，會出現單元測試 <code>紅燈</code>，可能是 service 的 action 錯誤</li>
<li>若 service 的 response 與 expected 不同，可能是 service 的邏輯錯誤</li>
</ul>
<p><img src="/images/angular/service-unit-test/service004.png" alt="service004"></p>
<p>使用 Wallaby.js 通過所有 service 單元測試。</p>
<h3 id="AppComponent">AppComponent</h3><p><img src="/images/angular/service-unit-test/service003.svg" alt="service003"></p>
<p><strong>app.component.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; async, ComponentFixture, TestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClientTestingModule &#125; from <span class="string">'@angular/common/http/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostService &#125; from <span class="string">'./service/post.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostInterfaceToken &#125; from <span class="string">'./interface/injection.token'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DebugElement &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/of'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PostInterface &#125; from <span class="string">'./interface/post.interface'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'AppComponent'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;AppComponent&gt;;</span><br><span class="line">  <span class="keyword">let</span> appComponent: AppComponent;</span><br><span class="line">  <span class="keyword">let</span> debugElement: DebugElement;</span><br><span class="line">  <span class="keyword">let</span> htmlElement: HTMLElement;</span><br><span class="line">  <span class="keyword">let</span> postService: PostInterface;</span><br><span class="line"></span><br><span class="line">  beforeEach(async(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">      ],</span><br><span class="line">      imports: [</span><br><span class="line">        FormsModule,</span><br><span class="line">        HttpClientTestingModule</span><br><span class="line">      ],</span><br><span class="line">      providers: [</span><br><span class="line">        &#123;provide: PostInterfaceToken, useClass: PostService&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;).compileComponents();</span><br><span class="line"></span><br><span class="line">    fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">    appComponent = fixture.componentInstance;</span><br><span class="line">    debugElement = fixture.debugElement;</span><br><span class="line">    htmlElement = debugElement.nativeElement;</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">    postService = TestBed.get(PostInterfaceToken, PostService);</span><br><span class="line">  &#125;));</span><br><span class="line">  </span><br><span class="line">  it(<span class="string">'should create the app'</span>, async(() =&gt; &#123;</span><br><span class="line">    expect(appComponent).toBeTruthy();</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  it(`should have as title <span class="string">'app'</span>`, async(() =&gt; &#123;</span><br><span class="line">    expect(appComponent.title).toEqual(<span class="string">'app'</span>);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should render title in a h1 tag'</span>, async(() =&gt; &#123;</span><br><span class="line">    expect(htmlElement.querySelector(<span class="string">'h1'</span>).textContent).toContain(<span class="string">'Welcome to app!'</span>);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  it(`should list posts`, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> expected$ = Observable.of([</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">        author: <span class="string">'Dr. Eric Gamma'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    spyOn(postService, <span class="string">'listPosts$'</span>).and.returnValue(expected$);</span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    appComponent.onListPostsClick();</span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    expect(appComponent.posts$).toEqual(expected$);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`should add post`, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> expected$ = Observable.of(</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">        author: <span class="string">'Dr. Eric Gamma'</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="keyword">const</span> spy = spyOn(postService, <span class="string">'addPost'</span>).and.returnValue(expected$);</span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    appComponent.onAddPostClick();</span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    expect(spy).toHaveBeenCalled();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TestBed.configureTestingModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpClientTestingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;provide: PostInterfaceToken, useClass: PostService&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;).compileComponents();</span><br></pre></td></tr></table></figure>
<p>跑 component 單元測試時，一樣沒有使用 <code>AppModule</code> 的設定，因為我們可能在測試時使用其他替代 module，也可能自己實作 fake 另外 DI。</p>
<p>因此一樣使用 <code>TestBed.configureTestingModule()</code>，讓我們另外設定跑測試時的 <code>imports</code> 與 <code>providers</code> 部分。</p>
<p>24 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  FormsModule,</span><br><span class="line">  HttpClientTestingModule</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>因為在 component 使用了 two-way binding，因此要加上 <code>FormsModule</code>。</p>
<blockquote>
<p>Q : 為什麼要 import <code>HttpClientTestingModule</code> 呢 ?</p>
</blockquote>
<p><code>AppComponent</code> 依賴的是 <code>PostService</code>，看起來與 <code>HttpClient</code> 無關，應該不需要注入 <code>HttpClientTestingModule</code>。</p>
<p>但其實 DI 並不是這樣運作，雖然 <code>AppComponent</code> 只用到了 <code>PostService</code>，但 DI 會將 <code>PostService</code> 下所有的 dependency 都一起注入，所以也要 import <code>HttpClientTestingModule</code>。</p>
<p>28 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  &#123;provide: PostInterfaceToken, useClass: PostService&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>由於我們要測試的就是 <code>PostService</code>，因此 <code>PostService</code> 也必須由 DI 幫我們建立。</p>
<p>但因爲 <code>PostService</code> 是基於 <code>PostInterface</code> 建立，因此必須透過 <code>PostInterfaceToken</code> mapping 到 <code>PostService</code>。</p>
<p>39 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postService = TestBed.get(PostInterfaceToken, PostService);</span><br></pre></td></tr></table></figure>
<p>由 <code>providers</code> 設定好 interface 與 class 的 mapping 關係後，我們必須透過 DI 建立 <code>postService</code> 與。</p>
<p>53 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(`should list posts`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> expected$ = Observable.of([</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">      author: <span class="string">'Dr. Eric Gamma'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** arrange */</span></span><br><span class="line">  spyOn(postService, <span class="string">'listPosts$'</span>).and.returnValue(expected$);</span><br><span class="line">  <span class="comment">/** act */</span></span><br><span class="line">  appComponent.onListPostsClick();</span><br><span class="line">  <span class="comment">/** assert */</span></span><br><span class="line">  expect(appComponent.posts$).toEqual(expected$);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>55 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> expected$ = Observable.of([</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">    author: <span class="string">'Dr. Eric Gamma'</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>透過 <code>Observable.of()</code> 將 <code>Post[]</code> 轉成 <code>Observable&lt;Post[]&gt;</code>。</p>
<p>63 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line">spyOn(postService, <span class="string">'listPosts$'</span>).and.returnValue(expected$);</span><br></pre></td></tr></table></figure>
<p>由於我們要隔離 <code>PostService</code>，因此使用 <code>spyOn()</code> 對 <code>PostService</code> 的 <code>listPost$()</code> 加以 mock，並設定其假的回傳值。</p>
<p>65 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line">appComponent.onListPostsClick();</span><br></pre></td></tr></table></figure>
<p>實際測試 <code>onListPostClick()</code>。</p>
<p>67 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line">expect(appComponent.posts$).toEqual(expected$);</span><br></pre></td></tr></table></figure>
<p>測試 <code>AppComponent.post$</code> 是否如預期。</p>
<blockquote>
<p>Q : 我們在 <code>onListPostsClick()</code> 到底測試了什麼 ?</p>
</blockquote>
<ul>
<li>若 component 的 return 與 expected 不同，可能是 component 的邏輯錯誤</li>
</ul>
<p>70 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(`should add post`, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> expected$ = Observable.of(</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">      author: <span class="string">'Dr. Eric Gamma'</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** arrange */</span></span><br><span class="line">  <span class="keyword">const</span> spy = spyOn(postService, <span class="string">'addPost'</span>).and.returnValue(expected$);</span><br><span class="line">  <span class="comment">/** act */</span></span><br><span class="line">  appComponent.onAddPostClick();</span><br><span class="line">  <span class="comment">/** assert */</span></span><br><span class="line">  expect(spy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>72 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> expected$ = Observable.of(</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    title: <span class="string">'Design Pattern'</span>,</span><br><span class="line">    author: <span class="string">'Dr. Eric Gamma'</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>透過 <code>Observable.of()</code> 將 <code>Post</code> 轉成 <code>Observable&lt;Post&gt;</code>。</p>
<p>80 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line"><span class="keyword">const</span> spy = spyOn(postService, <span class="string">'addPost'</span>).and.returnValue(expected$);</span><br></pre></td></tr></table></figure>
<p>由於我們要隔離 <code>PostService</code>，因此使用 <code>spyOn()</code> 對 <code>PostService</code> 的 <code>addPost</code> 加以 mock，並設定其假的回傳值。</p>
<p>82 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line">appComponent.onAddPostClick();</span><br></pre></td></tr></table></figure>
<p>實際測試 <code>onAddPostClick()</code>。</p>
<p>84 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line">expect(spy).toHaveBeenCalled();</span><br></pre></td></tr></table></figure>
<p>由於 <code>onAddPostClick()</code> 回傳值為 <code>void</code>，且 <code>PostService.addPost()</code> 已經有單元測試保護，因此只要測試 <code>PostService.addPost()</code> 曾經被呼叫過即可。</p>
<p><img src="/images/angular/service-unit-test/service005.png" alt="service005"></p>
<p>使用 Wallaby.js 通過所有 component 單元測試。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>當 component 使用了 service，若要單元測試就牽涉到 DI 與 <code>spyOn()</code></li>
<li>Service 單元測試可透過 <code>HttpTestingController</code> 加以隔離 <code>HttpClient</code></li>
<li>Component 單元測試可透過 <code>spyOn()</code> 加以隔離 service</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52ServiceUnitTest" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://angular.io" target="_blank" rel="external">Angular</a>, <a href="https://angular.io/guide/testing" target="_blank" rel="external">Testing</a><br><a href="https://angular.io" target="_blank" rel="external">Angular</a>, <a href="https://angular.io/guide/http" target="_blank" rel="external">HttpClient</a><br><a href="https://offering.solutions/blog/author/" target="_blank" rel="external">Fabian Gosebrink</a>, <a href="https://offering.solutions/blog/articles/2017/10/02/testing-angular-2-http-service/" target="_blank" rel="external">Testing Angular Http Service</a><br><a href="https://medium.com/@paynoattn?source=post_header_lockup" target="_blank" rel="external">Chris Pawlukiewicz</a>, <a href="https://medium.com/@paynoattn/simple-observable-unit-testing-in-angular2-43c4f4a0bfe2" target="_blank" rel="external">Simple Observable Unit Testing in Angular 2</a><br>Jesse Palmer, <a href="https://www.manning.com/books/testing-angular-applications" target="_blank" rel="external">Testing Angular Applications</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 HttpTestingController 將大幅簡化單元測試]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Angular Testing" scheme="http://oomusou.io/tags/Angular-Testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何以 JSON Server 模擬 Query String API ?]]></title>
    <link href="http://oomusou.io/json-server/querystring/"/>
    <id>http://oomusou.io/json-server/querystring/</id>
    <published>2018-01-22T12:23:43.000Z</published>
    <updated>2018-01-22T15:51:43.000Z</updated>
    <content type="html"><![CDATA[<p>雖然我們都盡量希望  API 以 URI 的方式表示，但實務上仍有一些 API 使用老式的 query string，我們該如何使用 JSON Server 模擬這類的  API 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>JSON Server 0.12.0</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/json-server/querystring/qs000.png" alt="qs000"></p>
<p>Server 端並沒有提供類似 <code>http://localhost/posts/1</code> 使用 URI 的 API，而是提供 <code>http://localhost:3000/api/posts?id=1</code> 使用 query string 的 API</p>
<h2 id="Task">Task</h2><hr>
<p>希望能夠使用 JSON Server 模擬出 query string 風格的 API，讓前端與後端可以同時開發。</p>
<h2 id="Implementation">Implementation</h2><hr>
<h3 id="新增_routes-json">新增 <code>routes.json</code></h3><p><strong>routes.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">/api/posts</span>": <span class="value"><span class="string">"/posts"</span></span>,</span><br><span class="line">  "<span class="attribute">/api/posts?id=:id</span>": <span class="value"><span class="string">"/posts/:id"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>JSON Server 本身只提供 URI 風格的 API，必須靠自訂 route，將 <code>posts?id=:id</code> 轉成 <code>/posts/:id</code>， 其中 <code>:id</code> 為變數。</p>
<p><img src="/images/json-server/querystring/qs001.png" alt="qs001"></p>
<ol>
<li>新增 <code>routes.json</code> </li>
<li>新增 <code>&quot;/api/posts?id=:id&quot;: &quot;/posts/:id&quot;</code>，將 query string 對應到 URI，其中 <code>:id</code> 為變數</li>
</ol>
<h3 id="啟動_JSON_Sever">啟動 JSON Sever</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject <span class="variable">$json-server</span> ./json/db.json --routes ./json/routes.json</span><br></pre></td></tr></table></figure>
<p>啟動 JSON Server，除了 <code>db.json</code> 外，另外加上 <code>--routes</code> 參數與 <code>routes.json</code>。</p>
<p><img src="/images/json-server/querystring/qs002.png" alt="qs002"></p>
<h3 id="使用_Postman_測試">使用 Postman 測試</h3><p><img src="/images/json-server/querystring/qs000.png" alt="qs000"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>只要透過簡單的 route 設定，JSON Server 也能模擬出 query string 風格的 API</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在 <a href="https://github.com/oomusou/JsonServerQueryString" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[讓 JSON Server 的應用更全面]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="JSON Server" scheme="http://oomusou.io/tags/JSON-Server/"/>
    
  </entry>
  
</feed>
