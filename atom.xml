<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2016-11-20T06:20:51.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何使用 PHPUnit 測試 private 與 protected method?]]></title>
    <link href="http://oomusou.io/phpunit/phpunit-test-private/"/>
    <id>http://oomusou.io/phpunit/phpunit-test-private/</id>
    <published>2016-11-20T12:23:43.000Z</published>
    <updated>2016-11-20T06:20:51.000Z</updated>
    <content type="html"><![CDATA[<p>剛開始學習寫測試時，最多人的疑問就是該如何測試 <code>private</code> 與 <code>protected</code> method?，理論上不該去測試 <code>private</code> 與 <code>protected</code>，本文會介紹一個 PHP 邪惡的技巧來完成測試，但建議除非萬不得已，不要使用此方法。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>在 PHPConf 第二天的 workshop，我曾經舉手問 PHPUnit 的原作者 Sabastian Bergmann：<code>How to test private and protected method?</code>，Sabastian 的回答也很鏗鏘有力：<code>You can&#39;t</code>，實務上我也真的沒測試過 <code>private</code> 與  <code>protected</code> method，不過藉此機會理解為什麼不該測試 <code>private</code> 與 <code>protected</code> 也是不錯的。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.3.10<br>PHPUnit 5.5.5</p>
<h2 id="為什麼不該測試_priavate_與_protected?">為什麼不該測試 priavate 與 protected?</h2><hr>
<ol>
<li><p>測試案例是來自於需求，<code>public</code> 才是來自於需求，而 <code>private</code> 與 <code>protected</code> 則是來自於<strong>重構</strong>，所以不應該特別去測試，而應該由 <code>public</code> 的測試案例自然去測試 <code>private</code> 與 <code>protected</code>。</p>
</li>
<li><p>若特別去測試 <code>private</code> 與 <code>protected</code>，則 coverage 將沒有意義，可以特別只針對 <code>private</code> 與 <code>protected</code> 寫測試，而達成 coverage 為 <code>100%</code>，正確方法應該只測試 <code>public</code>，若有些 <code>private</code> 與 <code>protected</code> 因而沒測試到，則有兩種可能：一個是測試案例不足，導致 <code>private</code> 與 <code>protected</code> 沒測到，另一個則是目前根本無此需求，<code>private</code> 與 <code>protected</code> 為 over design。</p>
</li>
<li><p>根據物件導向的<strong>封裝</strong>特性，<code>public</code> 會根據 interface 而穩定，但 <code>private</code> 與 <code>protected</code> 則會隨著日後<strong>重構</strong>而變化，若直接針對 <code>private</code> 與 <code>protected</code> 寫測試，則日後只要一重構，就必須修改測試，則將影響測試程式的<strong>健狀性</strong>，測試應該隨著<strong>需求</strong>改變而修改，不該隨著程式碼<strong>重構</strong>而修改。</p>
</li>
</ol>
<h2 id="實際案例">實際案例</h2><hr>
<p>若真的萬不得已，需要對 <code>private</code> 與 <code>protected</code> 做測試時，以下介紹一個簡單的方式。</p>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitPrivateTest_demo/commit/17f65cac2469d1d6af871cebde10a3b9d01bb80f" target="_blank" rel="external">新增 ShippingService</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若 <code>calculateFee()</code> 為 <code>private</code>，我們該怎麼為這段程式補上測試呢?</p>
<p><strong> 單元測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitPrivateTest_demo/commit/89bdc1540df918a362a4acf3dedbc523fd174add" target="_blank" rel="external">單元測試 : ShippingService 使用 Closure::call()</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 當重量為1<span class="title">kg</span>時費用為110元<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$__calculateFee</span> = <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$this</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$__calculateFee</span>-&gt;call(<span class="variable">$target</span>, <span class="variable">$weight</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$target</span> = App::make(ShippingService::class);</span><br></pre></td></tr></table></figure></p>
<p>建立 <code>$target</code> 測試物件，在本範例寫 <code>$target = new ShippingService()</code> 亦可，不過若在 class 內有使用到依賴注入，則必須使用 <code>App::make()</code>， 此時 Laravel 的 service container 會自動幫你啟動依賴注入，注入相對應的物件，實務上在寫測試時，建議使用 <code>App::make()</code> 取代 <code>new</code>。</p>
<p>15 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$__calculateFee</span> = <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>因為 <code>calculateFee()</code> 為 <code>private</code>，我們無法測試，因此特別建立一個 <code>$__calculateFee</code> closure，由 closure 內部去呼叫 <code>private</code> 的 <code>calculateFee()</code>。</p>
<p>20 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$actual</span> = <span class="variable">$__calculateFee</span>-&gt;call(<span class="variable">$target</span>, <span class="variable">$weight</span>);</span><br></pre></td></tr></table></figure></p>
<p>在 PHP 7，<code>Closure</code> 物件新提供了 <code>call()</code>，可以讓我們直接將自己建立的 closure 動態綁定到一個物件上。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於 PHP 7 的 <code>Closure::call()</code>，詳細請參考 <a href="http://php.net/manual/en/closure.call.php" target="_blank" rel="external">Closure::call</a></span></span></span></p>
<p>closure 內的 <code>$this</code>，就會如同 JavaScript 的 <code>this</code> 一樣，自動指向被綁定的物件，如此我們就可以由自己建立的 closure，透過 <code>this</code> 去存取 <code>private</code> method。</p>
<p><code>call()</code> 的第一個參數為要綁定的物件，之後的參數為要傳給 closure 的參數。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>事實上這就是 PHP 5.4 所提供的 <code>bindTo()</code>，只是 PHP 7 的 <code>Closure::bind()</code> 可讀性更高，若想了解 <code>bindTo()</code>，詳細請參考 <a href="/php/php-bindTo/">深入探討 bindTo()</a></span></span></span></p>
<p>24 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>測試結果是否如預期。</p>
<p><img src="/images/phpunit/phpunit-test-private/private000.png" alt=""></p>
<p>實際跑單元測試，會得到 <span class="label label-success">綠燈</span>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>非到萬不得已，不應該直接測試 <code>private</code> 與 <code>protected</code>。</li>
<li>本文以 <code>private</code> 為範例，也可以套用在 <code>protected</code>，一樣使用 <code>Closure::call()</code> 的方式。</li>
<li><code>Closure::call()</code> 違反物件導向封裝原則，實務上不建議使用，除非真的萬不得已。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel53PHPUnitPrivateTest_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PHP, <a href="http://php.net/manual/en/closure.call.php" target="_blank" rel="external">Closure::call</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Closure::call() 測試 private 與 protected method]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PHPUnit mock Closure?]]></title>
    <link href="http://oomusou.io/phpunit/phpunit-closure-mock/"/>
    <id>http://oomusou.io/phpunit/phpunit-closure-mock/</id>
    <published>2016-11-19T12:23:43.000Z</published>
    <updated>2016-11-20T02:52:57.000Z</updated>
    <content type="html"><![CDATA[<p>若有需求需要抽換，物件導向編程教我們的是開 interface 達成解耦合，然後使用依賴注入，最後達成依賴反轉目標，隨著函數式編程越來越流行，函數式編程教我們將 closure 當成參數傳進函式，一樣可以解耦合與依賴反轉，尤其對於只使用一次的需求特別有效，不用在另外開 interface 與 class，但在單元測試則面臨挑戰，我們該如何 mock closure 呢？</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>在 PHPConf 第二天的 workshop，我曾經舉手問 PHPUnit 的原作者 Sabastian Bergmann：<code>How to mock closure?</code>，Sabastian 的回答也很鏗鏘有力：<code>You can&#39;t</code>，在這篇 PHPUnit 的 <a href="https://github.com/sebastianbergmann/phpunit-mock-objects/issues/257" target="_blank" rel="external">Closure mock Issue</a>，也有人建議 PHPUnit 支援 mock closure，不過 Sabastian 的回答是</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  I might accept a pull request that implements this but I won't implement it myself.</div>
<p>不過實務上，仍有 mock closure 的需求，如 closure 內包含外部 API 或別人的 package，為了單元測試，能不 mock closure 嗎? 顯然不可能，除非你不使用 closure 寫法，而改用傳統物件導向的 interface 方式。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.3.10<br>PHPUnit 5.5.5</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>假設目前有 3 家貨運公司，每家公司的計費方式不同，使用者可以動態選擇不同的貨運公司。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>完整重構過程請參考 <a href="/tdd/tdd-di/">深入探討依賴注入</a>，本文只從 method injection 繼續重構成 closure。</span></span></span></p>
<h2 id="Method_Injection">Method Injection</h2><hr>
<p><strong> 單元測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/9bfce794d885ece5547b475b547e232aeda6bac9" target="_blank" rel="external">單元測試 : ShippingService 使用 interface</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$mock</span> = <span class="variable">$this</span>-&gt;createMock(BlackCat::class);</span><br><span class="line">        <span class="variable">$mock</span>-&gt;expects(<span class="variable">$this</span>-&gt;once())</span><br><span class="line">            -&gt;method(<span class="string">'calculateFee'</span>)</span><br><span class="line">            -&gt;withAnyParameters()</span><br><span class="line">            -&gt;willReturn(<span class="number">110</span>);</span><br><span class="line"></span><br><span class="line">        App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span> = <span class="variable">$this</span>-&gt;createMock(BlackCat::class);</span><br></pre></td></tr></table></figure></p>
<p>PHPUnit 直接使用 <code>createMock()</code> 建立 mock 物件。</p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span>-&gt;expects(<span class="variable">$this</span>-&gt;once())</span><br><span class="line">    -&gt;method(<span class="string">'calculateFee'</span>)</span><br><span class="line">    -&gt;withAnyParameters()</span><br><span class="line">    -&gt;willReturn(<span class="number">110</span>);</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>expects()</code> : 設定預期該 mock 的 method 要執行幾次，<code>$this-&gt;once()</code> 為只執行一次。</li>
<li><code>method()</code> : 設定要 mock 的 method 名稱。</li>
<li><code>withAnyParameters()</code> : 不考慮 method 的任何參數。</li>
<li><code>willReturn()</code> : 設定該 mock 的 method 的回傳值。</li>
</ul>
<p>19 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br></pre></td></tr></table></figure></p>
<p>告訴 Laravel 的 service container，當遇到 <code>LogisticsInterface</code> 的依賴注入時，一律改注入成剛剛由 PHPUnit 所建立的 mock。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>實際測試 <code>ShippingService</code> 的 <code>calculateFee()</code>。</p>
<p>由於 <code>calculateFee()</code> 使用了 method injection，所以必須改用 Laravel service container 所提供的 <code>App::call()</code> 執行，才會啟動 method injection，自動注入剛剛建立的 mock。</p>
<p>第一個參數要傳進 class 的完整名稱，加上 <code>@</code> 與 method 名稱。</p>
<p>第二個參數為陣列，傳進其他參數，其中 key 為 參數名稱，value 為要傳進參數的變數。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於 <code>App::call()</code>，詳細請參考<a href="/tdd/tdd-di/#Method_Injection">深入探討依賴注入之 Method Injection</a>。</span></span></span></p>
<p>28 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>實際測試結果是否為 <code>110</code>。</p>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/6eb814f4aeeca9a58a52db55c5465861e78569b8" target="_blank" rel="external">建立 ShippingService 使用 interface</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>, LogisticsInterface <span class="variable">$logistics</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 method injection 由 <code>LogisticsInterface</code> 注入 <code>$logistics</code>。</p>
<p>由於 <code>LogisticsInterface</code> 有定義 <code>calculateFee()</code>，因此我們可以在 <code>$logistics</code> 物件使用 <code>calculateFee()</code>。</p>
<p><strong> LogisticsInterface.php </strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/24aa08e727caa463edaad771ea221687ad9ee22f" target="_blank" rel="external">建立 LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/LogisticsInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>)</span> : <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>定義 <code>LogisticsInterface</code> 有 <code>calculateFee()</code>。</p>
<p><strong> BlackCat.php </strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/c25e20315b873a9fe139e2ef9114516f20b09f9e" target="_blank" rel="external">建立 BlackCat 實現 LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>BlackCat</code> 必須實現 <code>LogisticsInterface</code> 所定義的 <code>calculateFee()</code>，將實際的計算運費演算法在此實現。</p>
<p><img src="/images/phpunit/phpunit-closure-mock/closure000.png" alt=""></p>
<p>實際跑單元測試，會得到第 1 個 <span class="label label-success">綠燈</span>。</p>
<p><strong> 整合測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/ffabd0f165734227fce1e39996869d128739a055" target="_blank" rel="external">整合測試 : ShippingService 使用 interface</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓整合測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        App::bind(LogisticsInterface::class, BlackCat::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>12 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line">App::bind(LogisticsInterface::class, BlackCat::class);</span><br></pre></td></tr></table></figure></p>
<p>整合測試就不再 mock 了，而是實際由 <code>App::bind()</code> 告訴 Laravel service container，當遇到 <code>LogisticsInterface</code> 時，要依賴注入 <code>BlackCat</code> 物件。</p>
<p>15 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>一樣使用 <code>App::call()</code> 呼叫 <code>ShippingService</code> 的 <code>calculateFee()</code>，因為使用了 method injection。</p>
<p><img src="/images/phpunit/phpunit-closure-mock/closure001.png" alt=""></p>
<p>實際跑整合測試，會得到第 2 個 <span class="label label-success">綠燈</span>。</p>
<h2 id="重構成_Closure">重構成 Closure</h2><hr>
<p>若<strong>計算運費</strong>的邏輯在整個專案只使用一次，為此大費周章建立 interface 與 class， 或許殺雞用牛刀了，對於這種只使用一次的需求，函數式編程就特別有效，我們可以再繼續將 interface 重構成 closure。</p>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/fb691e1027ee6f5e1025bbf8f4c80c2cbd1fce18" target="_blank" rel="external">重構 ShippingService 使用 closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@param</span> callable $logistics</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>, callable <span class="variable">$logistics</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 <code>$logistics</code> 的 type hint 從原本的 <code>LogisticsInterface</code> 改成 <code>callable</code>，因為我們要重構成 closure 方式。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>關於 <code>callable</code>，詳細請參考 <a href="http://localhost:4000/php/php-closure/" target="_blank" rel="external">如何使用 Closure?</a></span></span></span></p>
<p>既然 <code>$logistics</code> 為 closure，我們就可以直接以 <code>$logistics($weight)</code> 的方式執行了。</p>
<p><strong> 單元測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/9a1347a16940686651b8333d3fad1a0a0a1ea9e7" target="_blank" rel="external">單元測試 : ShippingService 使用 closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$mock</span> = <span class="variable">$this</span>-&gt;createPartialMock(stdClass::class, [<span class="string">'__invoke'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mock</span>-&gt;expects(<span class="variable">$this</span>-&gt;once())</span><br><span class="line">            -&gt;method(<span class="string">'__invoke'</span>)</span><br><span class="line">            -&gt;withAnyParameters()</span><br><span class="line">            -&gt;willReturn(<span class="number">110</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span>    =&gt; <span class="variable">$weight</span>,</span><br><span class="line">            <span class="string">'logistics'</span> =&gt; <span class="variable">$mock</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>11 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span> = <span class="variable">$this</span>-&gt;createPartialMock(stdClass::class, [<span class="string">'__invoke'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>這一行有 3 個重點 :</p>
<ol>
<li>為什麼要 mock <code>__invoke</code>?</li>
<li>為什麼是 <code>stdClass</code> ?</li>
<li>什麼是 Partial Mock?</li>
</ol>
<p><strong> 為什麼要 mock <code>__invoke</code>? </strong><br><figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$anonyFunc</span> = <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$name</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> . <span class="variable">$name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$anonyFunc</span>(<span class="string">"Josh"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// Hello Josh</span></span><br></pre></td></tr></table></figure></p>
<p>將 anoymous function 指定給 <code>anonyFunc</code> 變數，但實際上 <code>anonyFunc</code> 為 <code>Closure</code> 物件，它看起來像函式，卻是個物件，與函式相同語法，可接受參數，也可回傳參數，但是卻沒有函式名稱。</p>
<p>但事實上在 PHP 底層，這個 anonymous function 是實作在 <code>Closure</code> 物件的 <code>__invoke()</code> 這個 magic method，因此我們也可以這樣寫</p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$anonyFunc</span> = <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$name</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">return</span> <span class="string">'Hello '</span> . <span class="variable">$name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$anonyFunc</span>-&gt;__invoke(<span class="string">"Josh"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// Hello Josh</span></span><br></pre></td></tr></table></figure>
<p>執行結果完全一樣。</p>
<p>實務上我們不會去使用 <code>__invoke()</code>，但 PHP 底層卻是靠 <code>__invoke()</code> 去實作 anonymous function。<span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>關於 <code>__invoke()</code>，詳細請參考 <a href="http://localhost:4000/php/php-closure/" target="_blank" rel="external">如何使用 Closure?</a></span></span></span></p>
<p>但因為我們現在是要去 mock closure，因此就相當於要去 mock <code>__invoke()</code>。</p>
<p><strong> 為什麼是 <code>stdClass</code>? </strong></p>
<p>我們知道 anonymous function 底層是 <code>Closure</code> 物件，理論上要去 mock <code>Closure</code> class，但令人沮喪的是，<code>Closure</code> 在 PHP 內部已經被宣告成 <code>final</code>，因此無從 mock。</p>
<blockquote><p>The predefined final class Closure was introduced in PHP 5.3.0. It is used for representing anonymous functions.</p>
<footer><strong>PHP </strong><cite><a href="http://php.net/manual/en/reserved.classes.php" target="_blank" rel="external">Closure</a></cite></footer></blockquote>
<p>別忘了 PHP 的 Duck Type 特性 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當看到一隻鳥走起來像鴨子、游泳起來像鴨子、叫起來也像鴨子，那麼這隻鳥就可以被稱為鴨子。</div>
<p>既然如此，我們就可以對 <code>stdClass</code> 動刀，讓他加上 <code>__invoke()</code>，並對 <code>__invoke()</code> 加以 mock，讓他看起來像 <code>Closure</code>。</p>
<p><strong> 什麼是 Partial Mock? </strong></p>
<p>一般我們只會使用普通 Mock，但有兩個地方可能會用到 Partial Mock :</p>
<ol>
<li>當你不想 mock 一個 class 所有 method，只想 mock 其中一兩個 method 時。</li>
<li>當你想 mock 一個無中生有的 method 時。</li>
</ol>
<p><code>stdClass</code> 並沒有任何 method，且 <code>__invoke()</code> 本應屬於 <code>Closure</code>，對於 <code>stdClass</code> 是無中生有的，因此我們必須使用 Partial Mock 才能將 <code>__invoke()</code> 加在 <code>stdClass</code> 上。</p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span>-&gt;expects(<span class="variable">$this</span>-&gt;once())</span><br><span class="line">    -&gt;method(<span class="string">'__invoke'</span>)</span><br><span class="line">    -&gt;withAnyParameters()</span><br><span class="line">    -&gt;willReturn(<span class="number">110</span>);</span><br></pre></td></tr></table></figure></p>
<p>接下來則跟普通 mock 方式一樣，可以發現我們是直接對 <code>__invoke()</code> 做 mock。</p>
<p>19 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">   <span class="string">'weight'</span>    =&gt; <span class="variable">$weight</span>,</span><br><span class="line">   <span class="string">'logistics'</span> =&gt; <span class="variable">$mock</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>將 mock 物件透過 <code>App::call()</code> 傳入。</p>
<p><img src="/images/phpunit/phpunit-closure-mock/closure002.png" alt=""></p>
<p>實際跑單元測試，會得到第 3 個 <span class="label label-success">綠燈</span>。</p>
<p><strong> 整合測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/1303628c3c07cce3cf53572c7ddc1d2b3729bc15" target="_blank" rel="external">整合測試 : ShippingService 使用 closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓整合測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span>    =&gt; <span class="variable">$weight</span>,</span><br><span class="line">            <span class="string">'logistics'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> + <span class="number">10</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span>    =&gt; <span class="variable">$weight</span>,</span><br><span class="line">    <span class="string">'logistics'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>整合測試與單元測試的差異就是不 mock，因此我們直接將 closure 傳入。</p>
<p><img src="/images/phpunit/phpunit-closure-mock/closure003.png" alt=""></p>
<p>實際跑整合測試，會得到第 4 個 <span class="label label-success">綠燈</span>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Mock closure 並非是炫技，實務上經常用到，尤其當你從物件導向編程，慢慢趨向函數式編程時，常常會重構成 closure，Taylor Otwell 在 Laravel 內部也大量使用 closure，只要使用到 closure，就可能面臨在單元測試時隔離 closure 的需求，透過本文的方式，你將可輕鬆的將 closure 加以 mock。<span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>關於 closure 實務上的應用，詳細請參考 <a href="/php/php-closure-practice/">實務上如何活用 Closure?</a></span></span></span></li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PHPUnit, <a href="https://github.com/sebastianbergmann/phpunit-mock-objects/issues/257" target="_blank" rel="external">Closure mock Issue</a><br>Sabastian Bergmann, <a href="https://thephp.cc/dates/2016/10/phpconf-taiwan/lately-in-phpunit" target="_blank" rel="external">PHPConf Taiwan 2016 Lately in PHP(Unit)</a><br>大澤木小鐵, <a href="http://jaceju.net/2015-11-09-php-closure-testing/" target="_blank" rel="external">在 PHPUnit 中測試需要 closure 的函式</a></p>
]]></content>
    <summary type="html">
    <![CDATA[為了隔離測試，實務上還是有 mock closure 的需求，不過 PHPUnit 目前無法直接 mock closure]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 使用 Angular CLI 建立 Angular 2 專案?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-angular-cli/"/>
    <id>http://oomusou.io/webstorm/webstorm-angular-cli/</id>
    <published>2016-11-15T12:23:43.000Z</published>
    <updated>2016-11-15T13:48:06.000Z</updated>
    <content type="html"><![CDATA[<p>Angluar 2 提供了 Angular CLI，一些原本必須自己使用前端自動化工具的部分，Angular CLI 都能幫我做到，讓我們不用為整合前端工具煩惱；除此之外，WebStorm 也支援 Angular CLI，讓我們可以在 WebStorm 內直接使用 Angular CLI。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular 2.1.2<br>Angular CLI 1.0.0-beta.19-3<br>WebStorm 2016.3</p>
<h2 id="安裝_Angular_CLI">安裝 Angular CLI</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ npm install -g angular-cli</span><br></pre></td></tr></table></figure>
<h2 id="建立新專案">建立新專案</h2><hr>
<p><img src="/images/webstorm/webstorm-angular-cli/hello000.png" alt=""></p>
<p>選擇 <code>Create New Project</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello001.png" alt=""></p>
<p>選擇左側 <code>Angular CLI</code>，WebStorm 會自動抓到你目前所安裝的 Node.js 與 Angular CLI 路徑。</p>
<p>只要輸入專案路徑即可。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello002.png" alt=""></p>
<p>當 NPM 安裝完所有套件後，會顯示 <code>Done</code>。</p>
<h2 id="啟動_Web_Server">啟動 Web Server</h2><hr>
<p><img src="/images/webstorm/webstorm-angular-cli/hello003.png" alt=""></p>
<p>選擇 <code>package.json</code>，按滑鼠右鍵選擇 <code>Show npm Scripts</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello004.png" alt=""></p>
<p>點兩下 <code>start</code> 啟動 Angular CLI 內建的 Web Server。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello005.png" alt=""></p>
<p>在瀏覽器輸入 <code>http://localhost:4200</code>，若出現 <code>app works!</code>，表示 Angular 2 已經正常啟動。</p>
<h2 id="建立_Component">建立 Component</h2><hr>
<p><img src="/images/webstorm/webstorm-angular-cli/hello006.png" alt=""></p>
<p>選擇 <code>src</code> 目錄，按熱鍵 &#8984; +  N，選擇 <code>Angular CLI...</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello007.png" alt=""></p>
<p>選擇 <code>component</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello008.png" alt=""></p>
<p>輸入 component 名稱 : <code>hello-world</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello009.png" alt=""></p>
<p>WebStorm 會呼叫 Angular CLI 幫我們建立 <code>hello-world</code> component，其 selector 為 <code>app-hello-world</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2HelloWorld/commit/fbaf4864f3f7b265dd2a2e1793ba356ceb91bee9" target="_blank" rel="external">建立 hello-world component</a></span></span></span></p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello012.png" alt=""></p>
<p>其 HTML 為 <code>hello-world works!</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello010.png" alt=""></p>
<p>在 <code>app.component.html</code> 加上 <code>app-hello-world</code> tag。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2HelloWorld/commit/c944bbbceed1fda1959306f9e019a13a8d7181b2" target="_blank" rel="external">加入 hello-world component</a></span></span></span></p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello011.png" alt=""></p>
<p>瀏覽器會自動更新，顯示我們新加上的 <code>hello-world</code> component。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>WebStorm 內建支援 Angular CLI，除了可以直接透過 Angular CLI 建立專案外，還可以直接在 WebStorm 建立 component、directive、service …等，非常方便。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Angular2HelloWorld" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>JetBrains, <a href="https://blog.jetbrains.com/webstorm/2016/08/webstorm-2016-3-early-access-preview/#ng-cli" target="_blank" rel="external">WebStorm 2016.3 Early Access Preview : Flow, PostCSS, and more</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Angluar 2 提供了 Angular CLI，一些原本必須自己使用前端自動化工具的部分，Angular CLI 都能幫我做到，讓我們不用為整合前端工具煩惱；除此之外，WebStorm 也支援 Angular CLI，讓我們可以在 WebStorm 內直接使用 Angular CLI。</p>]]>
    
    </summary>
    
      <category term="Angular 2" scheme="http://oomusou.io/tags/Angular-2/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何設定 WebStorm 的 TypeScript 與 TSLint ?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-typescript-version/"/>
    <id>http://oomusou.io/webstorm/webstorm-typescript-version/</id>
    <published>2016-11-11T12:23:43.000Z</published>
    <updated>2016-11-11T08:34:53.000Z</updated>
    <content type="html"><![CDATA[<p>WebStorm 已經內建 TypeScript，只要安裝完 WebStorm 就可以開始寫 TypeScript，但由於 TypeScript 更新快速，你可能會想自己更新 TypeScript 版本，此外，WebStorm 並沒有內建 TSLint，需另外安裝設定。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.0.9<br>WebStorm 2016.2.4</p>
<h2 id="TypeScript">TypeScript</h2><hr>
<h3 id="安裝_TypeScript">安裝 TypeScript</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ npm install -g typescript</span><br></pre></td></tr></table></figure>
<h3 id="設定_WebStorm">設定 WebStorm</h3><p><img src="/images/webstorm/webstorm-typescript-version/version000.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; TypeScript </em></strong></p>
<p>WebStorm 內建已安裝 TypeScript 1.8.10，按 <code>Edit</code> 設定其他版本。</p>
<p><img src="/images/webstorm/webstorm-typescript-version/version001.png" alt=""></p>
<p>在 <code>Custom directory</code> 輸入 TypeScript 目錄。</p>
<p>TypeScript 預設會安裝在該 Node.js 版本下的 <code>lib/node_modules/typescript/lib</code> 。</p>
<p>以 Node.js 6.5 為例，TypeScript 會安裝在 <code>/Users/oomusou/.nvm/versions/node/v6.5.0/lib/node_modules/typescript/lib</code> 。</p>
<h2 id="TSLint">TSLint</h2><hr>
<h3 id="安裝_TSList">安裝 TSList</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ npm install -g tslint typescript</span><br></pre></td></tr></table></figure>
<h3 id="設定_WebStorm-1">設定 WebStorm</h3><p><img src="/images/webstorm/webstorm-typescript-version/version002.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; TypeScript -&gt; TSLint </em></strong></p>
<p>TSLint 預設會安裝在該 Node.js 版本下的 <code>lib/node_modules/tslint</code>。</p>
<ul>
<li>將 <code>Enable</code> 打勾。</li>
<li><strong>TSLint package</strong> : 以 Node.js 6.5 為例，TSLint 會安裝在 <code>/Users/oomusou/.nvm/versions/node/v6.5.0/lib/node_modules/tslint</code> 。</li>
</ul>
<p>安裝好 TSLint 之後，當你在寫 TypeScript 時，WebStorm 就會整合 Code Inspection，在編譯前就會顯示警告。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>WebStorm 非常適合開發 TypeScript，只要設定好環境，就可以發揮 WebStorm 的威力。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Microsoft, <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a><br>Palantir, <a href="https://palantir.github.io/tslint/" target="_blank" rel="external">TSLint</a><br>WebStorm Online Help, <a href="https://www.jetbrains.com/help/webstorm/2016.2/using-tslint-code-quality-tool.html" target="_blank" rel="external">Using TSLint Code Quality Tool</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓 WebStorm 支援 TypeScript 與 TSLint]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 Anonymous Function 與 Arrow Function 的 this]]></title>
    <link href="http://oomusou.io/typescript/typescript-this/"/>
    <id>http://oomusou.io/typescript/typescript-this/</id>
    <published>2016-11-05T12:23:43.000Z</published>
    <updated>2016-11-06T12:27:42.000Z</updated>
    <content type="html"><![CDATA[<p>一般人印象，Arrow Function 只是 Anonymous Function 的 syntax sugur，讓我們用更精簡的語法來表達這類只使用一次的 function，但對於 <code>this</code> 的認知， 兩種表示法卻有很大的差別。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.0.7</p>
<h2 id="this_在_Anonymous_Function">this 在 Anonymous Function</h2><hr>
<p>在 ES5，class 是使用 function 來表示，我們先使用 ES5 的方式。</p>
<p><strong>this_anonymous_function.ts</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/64810f888b29993c148eb73acfb3f888549262e4" target="_blank" rel="external">this 在 anonymous function</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_anonymous_function.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 4 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 anonymous function 來定義 <code>say()</code>，並在 anonymous function 使用 <code>this</code>。</p>
<p>10 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>建立 <code>foo</code> 物件，並將 <code>foo.say</code> 傳入 <code>setTimeout()</code>。</p>
<p><img src="/images/typescript/typescript-this/this000.png" alt=""></p>
<p>實際執行，會發現 <code>this.name</code> 會 <code>undefined</code>，因為 JavaScript 的特性，<code>foo.say</code> 會變成 <code>setTimeout</code> 物件的一部分，但 <code>setTimeout</code> 並沒有定義 <code>name</code>，因此會 <code>undefined</code>，這符合我們之前對 JavaScript 對 <code>this</code> 的認知，與一般物件導向語言的 <code>this</code> 並不相同，當然也與 PHP 的 <code>$this</code> 不相同。</p>
<h2 id="this_在_Arrow_Function">this 在 Arrow Function</h2><hr>
<p>ES6 提供了 arrow function，大凡本來使用 anonymous function 的地方，都可以使用 arrow function 取代。</p>
<p><strong>this_arrow_function.ts</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/9a3d5b83757e5a192a9bb3511f14dce798109a96" target="_blank" rel="external">this 在 arrow function</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_arrow_function.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.say = () =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 4 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.say = () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 anonymous function 改用 arrow function，其他都不變，一樣使用 <code>this</code>。</p>
<p><img src="/images/typescript/typescript-this/this001.png" alt=""></p>
<p>實際執行，竟然出現 <code>Hello, Sam</code>，不再是 <code>undefined</code>，跟原來 anonymous function 結果不一樣！</p>
<p><img src="/images/typescript/typescript-this/this002.png" alt=""></p>
<p>去看編譯過的 js 檔，會發現一開始先 <code>var _this = this</code>。</p>
<p>而 <code>this.say</code> 所執行的並不是 <code>this</code>，而是 <code>_this</code>。</p>
<p>也就是 ES6 的 arrow function，其 <code>this</code> 跟 ES5 的 anonymous function 不同，反而跟主流物件導向語言的 <code>this</code> 相同，當然也跟 PHP 的 <code>$this</code> 相同。</p>
<h2 id="this_在_Class_Function">this 在 Class Function</h2><hr>
<p>ES6 多了 <code>class</code> 關鍵字，當然要使用 <code>class</code> 可讀性較高。</p>
<p><strong>this_class_function.ts</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/fad393cfe415c717dbfe7df9fd358c59d07c28b5" target="_blank" rel="external">this 在 class function</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_class_function.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Foo &#123;</span><br><span class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="constructor"><span class="keyword">constructor</span>(name: string) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> say() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> say() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>使用了我們熟悉的一般物件導向語言方式定義 <code>say()</code>，一樣使用 <code>this</code>。</p>
<p><img src="/images/typescript/typescript-this/this003.png" alt=""></p>
<p>實際執行，又出現 <code>undefined</code>，也就是雖然是 ES6，<code>this</code> 並不是全部跟主流程式語言一樣，這裡仍維持 ES5 的 <code>this</code> 觀念。</p>
<h2 id="this_在_Class_內使用_Arrow_Function">this 在 Class 內使用 Arrow Function</h2><hr>
<p>若在 ES6 的 class 使用 arrow function，又會變成怎樣呢？我們繼續看下去：</p>
<p><strong>this_class_arrow_function1.ts</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/465c28b27dc74d1570e9e7a4553ac17d3c61178a" target="_blank" rel="external">this 在 class 內使用 arrow function 第一種方法</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_class_arrow_function1.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Foo &#123;</span><br><span class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="constructor"><span class="keyword">constructor</span>(name: string) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> say: ()=&gt;<span class="built_in">void</span> = ()=&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> say: ()=&gt;<span class="built_in">void</span> = ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>由於 TypeScript 是強行別語言，所以需要定義 say 的型別為 <code>()=&gt;void</code> 這種 arrow function 型別，接著才能定義 arrow function，一樣使用 <code>this</code>。</p>
<p><img src="/images/typescript/typescript-this/this004.png" alt=""></p>
<p>這樣就不會 <code>undefined</code> 了。</p>
<p>還有另外一種寫法，讓我們在 constructor 去定義 arrow function。</p>
<p><strong>this_class_arrow_function2.ts</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/2f2a824f497fc1daa0fecd8b382ee4750935bac1" target="_blank" rel="external">this 在 class 內使用 arrow function 第二種方法</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_class_arrow_function2.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Foo &#123;</span><br><span class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">public</span> say: ()=&gt;<span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">        <span class="constructor"><span class="keyword">constructor</span>(name: string) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.say = () =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 4 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> say: ()=&gt;<span class="built_in">void</span>;</span><br></pre></td></tr></table></figure></p>
<p>先在 field 內定義好 <code>say</code> 的型別為 arrow function。</p>
<p>第 6 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(name: string) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.say = () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 constructor 內去定義 arrow function，雖然可行，不過實務上不建議這樣寫，除非 method 真的程式碼很短，否則 constructor 會非常的大而難以維護。</p>
<p><img src="/images/typescript/typescript-this/this005.png" alt=""></p>
<p>實際執行，也不再 <code>undefined</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>無論 ES5 或 ES6，<code>this</code> 都維持 JavaScript 一貫的想法，也就是當 function 內掛在哪一個物件，<code>this</code> 就是那個物件。</li>
<li>唯獨 arrow function 例外，arrow function 會事先將 <code>_this = this</code>，而之後都使用 <code>_this</code>，這種思維與一般物件導向語言相同，但跟傳統 JavaScript 不同。</li>
<li>Anonymous function 與 arrow function 對於 <code>this</code> 的看法都有他的道理，要視狀況使用，大部分狀況，arrow function 與一般物件導向語言的思維一樣，但有些應用，anonymous function 的想法比較方便。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/TypeScript18this" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[一樣的 this，在 Anonymous Function 與 Arrow Function 大大不同]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對 Laravel 進行自動化驗收測試?]]></title>
    <link href="http://oomusou.io/selenium/selenium-phpunit/"/>
    <id>http://oomusou.io/selenium/selenium-phpunit/</id>
    <published>2016-10-29T12:23:43.000Z</published>
    <updated>2016-11-05T12:09:04.000Z</updated>
    <content type="html"><![CDATA[<p>Laravel 在 5.1 之後，提供了<strong>應用程式測試</strong> (<a href="https://laravel.com/docs/master/application-testing" target="_blank" rel="external">Application Testing</a>)，讓我們不用開啟瀏覽器，就可以直接對 route、controller 與 blade 進行驗收測試，且執行速度非常快，但也因為沒有開啟瀏覽器，所以無法對 JavaScript 與 AJAX 進行測試，若搭配了 Selenium，配合我們熟悉的 PHPUnit，就能對驗收測試加以自動化。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>Laravel 的應用程式測試非常好用，API 語意清楚，且提供 fluent 方式串接，不過 Seleinum 提供的又是另外一套 API 方式，若能將應用程式測試與 Selenium 測試整合成相同的 API，那就太棒了。</p>
<h2 id="Version">Version</h2><hr>
<p>macOS Sierra 10.12<br>Java 1.8.0_102<br>PHP 7.0.8<br>Laravel 5.3.18<br>PhpStorm 2016.2.2<br>PHPUnit 5.5.5<br>phpunit-selenium 3.0.2<br>Selenium Standalone Server 2.53.1<br>ChromeDriver 2.24<br>Chrome 53.0.2785.143 (64-bit)</p>
<h2 id="測試種類簡介">測試種類簡介</h2><hr>
<ul>
<li><strong>單元測試</strong> : 針對單一 class 與 method 去做測試，此時會將其相依的 class 加以 mock，也稱為<strong>隔離測試</strong>，為粒度最小，速度最快的測試。</li>
<li><strong>整合測試</strong> : 對相依的 class 不加以 mock，主要在測試各 class 整合的結果。</li>
<li><strong>驗收測試</strong> : 以使用者角度對瀏覽器做測試，為速度最慢的測試。</li>
</ul>
<h2 id="驗收測試">驗收測試</h2><hr>
<h3 id="應用程式測試">應用程式測試</h3><p>前身是 Jeffery Way 所寫的 <code>laracasts/integrated</code> 套件，運用 Symfony 所提供的底層元件，可直接對 GUI 做測試，在 Laravel 5.1 正式被整合進來。</p>
<p><strong>優點</strong> :<br><div class="alert alert-info"><i class="fa fa-info"></i>  不需啟動瀏覽器，速度與單元測試一樣快。</div></p>
<p><strong>缺點</strong> :<br><div class="alert alert-danger"><i class="fa fa-bug"></i>  僅能測試 form 與 submit，無法測試 JavaScript 與 AJAX。</div></p>
<h3 id="Selenium_測試">Selenium 測試</h3><p>能對瀏覽器的鍵盤滑鼠動作加以自動化。</p>
<p><strong>優點</strong> :<br><div class="alert alert-info"><i class="fa fa-info"></i>  能測試 JavaScript 與 AJAX。</div></p>
<p><strong>缺點</strong> :<br><div class="alert alert-danger"><i class="fa fa-bug"></i>  須啟動瀏覽器，速度較慢。</div></p>
<div class="alert alert-danger"><i class="fa fa-bug"></i>  沒正式支援 PHP。</div>
<h2 id="PHPUnit">PHPUnit</h2><hr>
<p>JUnit 在 PHP 的實作，最多人使用的單元測試 framework，在 Laravel 已經內建，不用另外安裝。</p>
<h2 id="Selenium">Selenium</h2><hr>
<img src="/images/selenium/selenium-phpunit/selenium040.svg" width="800">
<p>Laravel 並沒有辦法直接控制 Chrome，必須藉由 Selenium Server，但由於 Selenium 目前沒有直接支援 PHP，因此我們必須透過 phpunit-selenium 套件去控制 Selenium Server。</p>
<p>對於瀏覽器部分，Selenium 預設只支援 Firefox，必須再安裝 ChromeDriver 才能讓 Selenium 控制 Chrome。</p>
<p>稍後將會介紹如何安裝紫色部分的 phpunit-selenium 、Selenium Server 與 ChromeDriver。</p>
<h2 id="安裝_Selenium_環境">安裝 Selenium 環境</h2><hr>
<h3 id="安裝_PHP7">安裝 PHP7</h3><p>請先準備好 PHP 7 環境，本範例無法在 PHP 5.6 執行。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>安裝 PHP 7，macOS 請參考 <a href="mamp/mamp-setup/">如何使用 MAMP PRO 開發 Larave?</a></span></span></span></p>
<h3 id="安裝_Composer">安裝 Composer</h3><p>Composer 是 modern PHP 的基石，負責 PHP 的套件管理與 autoloading。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>關於 Composer，詳細請參考 <a href="https://medium.com/@shengyou" target="_blank" rel="external">范聖佑</a> 的 <a href="https://medium.com/@shengyou/php-也有-day-28-composer-從入門到實戰-4d3b34a91946#.mkjysvq7w" target="_blank" rel="external">Composer 從入門到實戰</a></span></span></span></p>
<h3 id="下載範例">下載範例</h3><p>本次範例的種子專案放在 <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_seed" target="_blank" rel="external">GitHub</a>，請先下載。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ git clone https://github.com/oomusou/Laravel53SeleniumPHPUnit_seed</span><br></pre></td></tr></table></figure>
<p><img src="/images/selenium/selenium-phpunit/selenium009.png" alt=""></p>
<h3 id="重建_vendor_目錄">重建 vendor 目錄</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Laravel53SeleniumPHPUnit_seed&#10;oomusou@mac:~/Laravel53SeleniumPHPUnit_seed$ composer install</span><br></pre></td></tr></table></figure>
<p><img src="/images/selenium/selenium-phpunit/selenium052.png" alt=""></p>
<h3 id="安裝_JDK">安裝 JDK</h3><p>Selenium Server 是基於 Java 所開發，在執行 Selenium Server 之前，必須先安裝 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">JDK</a>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium041.png" alt=""></p>
<p>選擇 <code>Java SE Development Kit 8u102</code>，根據平台下載不同的 JDK 版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium042.png" alt=""></p>
<p>執行剛下載的 <code>jdk-8u102-macosx-x64.dmg</code>，安裝 <code>JDK 8 Update 102.pkg</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium043.png" alt=""></p>
<p>按 <code>Continue</code> 繼續。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium044.png" alt=""></p>
<p>按 <code>Install</code> 開始安裝。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium045.png" alt=""></p>
<p>安裝完成。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/$ java -version</span><br></pre></td></tr></table></figure>
<p>檢查所安裝的 Java 版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium046.png" alt=""></p>
<p>若看到 <code>1.8.0_102</code>，則 JDK 安裝成功。</p>
<h3 id="phpunit-selenium">phpunit-selenium</h3><p><a href="https://packagist.org/packages/phpunit/phpunit-selenium" target="_blank" rel="external">phpunit/phpunit-selenium</a> 是由 <a href="https://github.com/sebastianbergmann/phpunit" target="_blank" rel="external">PHPUnit</a> 官方所提供，讓我們可以在 PHP 與 Selenium Server 溝通，直接對瀏覽器做控制，並使用 PHPUnit 做 assertion，目前僅支援 Selenium Server 2.x。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/4d2eac6e720f2a20d35da6c64a2ec5b6af8611d8" target="_blank" rel="external">安裝 phpunit-selenium</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require phpunit/phpunit-selenium --dev</span><br></pre></td></tr></table></figure>
<p>在專案目錄下由 Composer 安裝 <code>phpunit/phpunit-selenium</code>，由於這是開發用的套件，請加上 <code>--dev</code> 參數。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>種子專案已經先將 <code>phpunit-selenium</code> 事先裝好了。</span></span></span></p>
<p><img src="/images/selenium/selenium-phpunit/selenium005.png" alt=""></p>
<h3 id="Selenium_Server">Selenium Server</h3><p>我們必須透過 Selenium 幫我們對瀏覽器下指令，因此必須先安裝 <a href="http://www.seleniumhq.org/download/" target="_blank" rel="external">Selenium Server</a>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium000.png" alt=""></p>
<p>目前 3.0 尚在 beta，且 phpunit-selenium 目前僅支援 Selenium 2.x，所以選擇 <a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="external">previous release</a> 安裝以前的版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium001.png" alt=""></p>
<p>選擇 <code>2.53</code>，這是 Selenium 2.x 的最後版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium002.png" alt=""></p>
<p>下載 <code>selenium-server-standalone-2.53.1.jar</code>，這是 <code>2.53</code> 的最後一個版本。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>種子專案已經先將 Selenium Server 事先裝好了。</span></span></span></p>
<p><img src="/images/selenium/selenium-phpunit/selenium003.png" alt=""></p>
<p>將 <code>selenium-server-standalone-2.53.1.jar</code> 複製到 Laravel 專案的根目錄下。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/b29b24f2270d80bf0a690008f87972a4b02f8870" target="_blank" rel="external">安裝 Selenium Server</a></span></span></span></p>
<h3 id="ChromeDriver">ChromeDriver</h3><p>Selenium 預設只支援 Firefox，若要使用 Chrome，需另外安裝 <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">ChromeDriver</a>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium006.png" alt=""></p>
<p>選擇目前最新版本下載。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium007.png" alt=""></p>
<p>根據平台下載不同的 ChromeDriver 版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium008.png" alt=""></p>
<p>將 <code>zip</code> 解開後，將 <code>chromedriver</code> 複製到 Laravel 專案的根目錄下。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/820b10dfea92b9bf9072da04f6b4b91f362dbc84" target="_blank" rel="external">安裝 ChromeDriver</a></span></span></span></p>
<h2 id="測試_Selenium_環境">測試 Selenium 環境</h2><hr>
<p>最後要測試整個 Selenium 測試環境是否能正常啟動。</p>
<h3 id="啟動_Web_Server">啟動 Web Server</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Laravel53SeleniumPHPUnit_seed&#10;oomusou@mac:~/Laravel53SeleniumPHPUnit_seed$ php artisan serve</span><br></pre></td></tr></table></figure>
<p>啟動 PHP 內建的 Web Server。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium053.png" alt=""></p>
<p>將啟動在 <code>http://localhost:8000</code>。</p>
<h3 id="啟動_Selenium">啟動 Selenium</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Laravel53SeleniumPHPUnit_seed&#10;oomusou@mac:~/Laravel53SeleniumPHPUnit_seed$ java -jar selenium-server-standalone-2.53.1.jar</span><br></pre></td></tr></table></figure>
<p>原來的 Web Server 必須保持啟動，另外開一個 process 啟動 Selenium Server。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium054.png" alt=""></p>
<p>若能看到 <code>Selenium Server is up and running</code>，則 Selenium 已經正常啟動。</p>
<h3 id="執行測試">執行測試</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Laravel53SeleniumPHPUnit_seed&#10;oomusou@mac:~/Laravel53SeleniumPHPUnit_seed$ vendor/bin/phpunit</span><br></pre></td></tr></table></figure>
<p>原來的 Web Server 與 Selenium Server 必須保持啟動，再另外開一個 process 執行測試。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium055.png" alt=""></p>
<p>若能看到 2 個測試都是 <span class="label label-success">綠燈</span>，表示整個 Selenium 測試環境已經安裝成功。</p>
<h2 id="安裝_PhpStorm">安裝 PhpStorm</h2><hr>
<h3 id="設定目錄">設定目錄</h3><p><strong>Sources</strong><br>設定 <code>PSR-0 namespace roots</code> 的主目錄，也就是 Laravel 的 <code>app</code> 目錄。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium056.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Directories</em></strong></p>
<p>選擇 <code>app</code> 目錄，按上方的 <code>Sources</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium057.png" alt=""></p>
<p>按上方的 <code>Sources</code> 之後，會在右側出現 <code>Source Folders app</code>。</p>
<p>按 <code>P</code> 設定該目錄的 property。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium058.png" alt=""></p>
<p>在 <code>Package prefix</code> 輸入 <code>App</code>，因為 <code>app</code> 目錄對應的正是 Laravel 的 namespace <code>App</code>。</p>
<p>這是所有 directories 設定中最重要的一個，在 Laravel 5 之後，全面使用 namespace，管理 namespace 成為很多人的惡夢，但只要設定了 <code>Sources</code> 之後，將來 PhpStorm 會幫我們管理 namespace。</p>
<p><strong>Tests</strong><br>設定測試程式的主目錄，也就是 Laravel 的 <code>tests</code> 目錄。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium059.png" alt=""></p>
<p>選擇 <code>tests</code> 目錄，按上方的 <code>Tests</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium060.png" alt=""></p>
<p>按上方的 <code>Tests</code> 之後，會在右側出現 <code>Test Source Folders tests</code>。</p>
<p><strong>Resource Root</strong><br>設定前端資源的主目錄，也就是 Laravel 的 <code>public</code> 目錄。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium061.png" alt=""></p>
<p>選擇 <code>public</code> 目錄，按上方的 <code>Resource Root</code>。，會在右側出現 <code>Resource roots public</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium062.png" alt=""></p>
<p>按上方的 <code>Resource Root</code> 之後，會在右側出現 <code>Resource roots public</code>。</p>
<h3 id="設定字型">設定字型</h3><p>PhpStorm 的字型大小預設是 <code>12</code>，個人覺得稍微小了一點，會將字型稍微調大。<br><strong>Editor</strong><br><img src="/images/phpstorm/phpstorm-mysetting/mysetting001.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Editor -&gt; Color &amp; Fonts -&gt; Font </em></strong></p>
<p>建議將字型大小調成 <code>15</code>。</p>
<p><strong>IDE</strong><br><img src="/images/phpstorm/phpstorm-mysetting/mysetting002.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Appearance &amp; Behavior -&gt; Appearance</em></strong></p>
<p>勾選 <code>Override default fonts by (not recommend)</code>，建議將字型大小改成 <code>16</code>。</p>
<p><strong>Terminal</strong><br><img src="/images/phpstorm/phpstorm-mysetting/mysetting003.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Editor -&gt; Colors &amp; Fonts -&gt; Console Font </em></strong></p>
<p>在 PhpStorm 內可以直接在 terminal 下指令，建議將字型改成 <code>16</code>。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>Terminal 字型必須重新啟動 PhpStorm 才會生效。</span></span></span></p>
<h3 id="設定_PHP">設定 PHP</h3><p>PhpStorm 內建支援 PHP，我們可以直接在 PhpStorm 內執行 PHP。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium010.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP</em></strong></p>
<ul>
<li><strong>PHP language level</strong> : <code>7 (return types, scalar type hints, etc.)</code></li>
</ul>
<p>將 language level 調整為 <code>7</code>，讓 PhpStorm Code Inspection 自動針對 PHP 7 語法加以檢查。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>關於 PhpStorm 的 Code Inspection，詳細請參考<a href="/phpstorm/phpstorm-code-inspection/">如何在 PhpStorm 使用 Code Inspection?</a></span></span></span></p>
<p>按 <code>...</code> 設定 PHP CLI 路徑。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium011.png" alt=""></p>
<p>PhpStorm 允許我們設定多組 PHP CLI 版本供切換。</p>
<ul>
<li><strong>PHP executable</strong> : <code>/Applications/MAMP/bin/php/php7.0.8/bin/php</code></li>
<li><strong>Debugger extension</strong> : <code>/Applications/MAMP/bin/php/php7.0.8/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so</code></li>
</ul>
<p>從 PhpStorm 2016.2 開始，提供了 Xdebug On Demand 功能，不必事先在 <code>php.ini</code> 啟動 Xdebug 影響 Composer 速度，只要事先設定好 <code>xdebug.so</code> 路徑，PhpStorm 會在設定中斷點除錯時，自動啟動 Xdebug。<span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>關於 PhpStorm 的 Xdebug on Demand，詳細請參考<a href="/phpstorm/phpstorm-xdebug-on-demand/">如何在 PhpStorm 使用 Xdebug on Demand?</a></span></span></span></p>
<p><img src="/images/selenium/selenium-phpunit/selenium012.png" alt=""></p>
<ul>
<li><strong>Interpreter</strong> : <code>PHP7(7.0.8)</code></li>
</ul>
<p>將 interpreter 設定為剛剛設定的 PHP CLI。</p>
<h3 id="設定_PHPUnit">設定 PHPUnit</h3><p>PhpStorm 內建支援 PHPUnit，我們可以直接在 PhpStorm 內直接執行 PHPUnit。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium013.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP -&gt; PHPUnit</em></strong></p>
<p>選擇 <code>Use Composer autoloader</code> :</p>
<ul>
<li><p><strong>Path to script</strong> : <code>/Users/oomusou/Code/PHPConf/Laravel53SeleniumPHPUnit_demo/vendor/autoload.php</code></p>
</li>
<li><p><strong>Default configuration file</strong> : <code>/Users/oomusou/Code/PHPConf/Laravel53SeleniumPHPUnit_demo/phpunit.xml</code></p>
</li>
</ul>
<p><code>Path to script</code> 指定到專案目錄下的 <code>vendor/autoload.php</code>，告訴 PhpStorm 在執行 PHPUnit 時，先執行此路徑的 autoload。</p>
<p><code>Default configuration file</code> 指定到專案根目錄下的 <code>phpunit.xml</code>，此為 PHPUnit 的設定檔，Laravel 已經在此檔設定好很多預設值。</p>
<h3 id="設定_phpunit-xml">設定 phpunit.xml</h3><p><code>phpunit.xml</code> 位於 Laravel 專案根目錄下，為 PHPUnit 設定檔，Laravel 已將幫我們做了很多設定。</p>
<p>執行測試時，Laravel 會先讀取 <code>.env</code>，再讀取 <code>phpunit.xml</code>，若有一些變數在執行測試階段設定，與原本 <code>.env</code> 設定不同，可以寫在 <code>phpunit.xml</code>。<br><strong>phpunit.xml</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/68c89838559fd33c32a9851c378ec8cdb51ccc7a" target="_blank" rel="external">設定 phpunit.xml</a></span></span></span><br><figure class="highlight xml"><figcaption><span>phpunit.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">phpunit</span> <span class="attribute">backupGlobals</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">backupStaticAttributes</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">bootstrap</span>=<span class="value">"bootstrap/autoload.php"</span></span><br><span class="line">         <span class="attribute">colors</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertErrorsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertNoticesToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertWarningsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">processIsolation</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">stopOnFailure</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">testsuites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">testsuite</span> <span class="attribute">name</span>=<span class="value">"Application Test Suite"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">"Test.php"</span>&gt;</span>./tests<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">testsuite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">testsuites</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">whitelist</span> <span class="attribute">processUncoveredFilesFromWhitelist</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">".php"</span>&gt;</span>./app<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">whitelist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"BROWSER"</span> <span class="attribute">value</span>=<span class="value">"chrome"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"WEBSERVER_URL"</span> <span class="attribute">value</span>=<span class="value">"localhost"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"WEBSERVER_PORT"</span> <span class="attribute">value</span>=<span class="value">"8000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SELENIUM_URL"</span> <span class="attribute">value</span>=<span class="value">"localhost"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SELENIUM_PORT"</span> <span class="attribute">value</span>=<span class="value">"4444"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"AJAX_DELAY"</span> <span class="attribute">value</span>=<span class="value">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">phpunit</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>26 行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"BROWSER"</span> <span class="attribute">value</span>=<span class="value">"chrome"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"WEBSERVER_URL"</span> <span class="attribute">value</span>=<span class="value">"localhost"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"WEBSERVER_PORT"</span> <span class="attribute">value</span>=<span class="value">"8000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SELENIUM_URL"</span> <span class="attribute">value</span>=<span class="value">"localhost"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SELENIUM_PORT"</span> <span class="attribute">value</span>=<span class="value">"4444"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"AJAX_DELAY"</span> <span class="attribute">value</span>=<span class="value">"1"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>BROWSER</strong> : 設定要測試的瀏覽器，目前預設為 <code>chrome</code>，若日後要測試其他瀏覽器，只要安裝好該瀏覽器的 WebDriver，修改此設定即可。</li>
<li><strong>WEBSERVER_URL</strong> : 設定 Web Server 的 URL，目前都在本機跑，所以為 <code>localhost</code>，將來配合 CI Server 時，Web Server 可能會在不同主機，修改此設定即可。</li>
<li><strong>WEBSERVER_PORT</strong> : 設定 Web Server 的 port，目前都在本機跑，所以 port 為 <code>8000</code>，將來配合 CI Server 時，Web Server 的 port 可能不同，修改此設定即可。</li>
<li><strong>SELENIUM_URL</strong> : 設定 Selenium Server 的 URL，目前都在本機跑，所以為 <code>localhost</code>，將來配合 CI Server 時，Selenium Server 可能會在不同主機，修改此設定即可。</li>
<li><strong>SELENIUM_PORT</strong> : 設定 Selenium Server 的 port，預設 Selenium Server 使用 port <code>4444</code>，將來配合 CI Server 時，Selenium Server 的 port 可能不同，修改此設定即可。</li>
<li><strong>AJAX_DELAY</strong> : 使用 AJAX 時，需要等一段時間由 Web Server 回應，由於本機速度快，只需 <code>1</code> 秒即可，將來配合 CI Server 時，等待的時間可能不同，修改此設定即可。<span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>種子專案已經先將 <code>phpunit.xml</code> 事先設定好了。</span></span></span></li>
</ul>
<h2 id="測試_PhpStorm_環境">測試 PhpStorm 環境</h2><hr>
<p>當 PhpStorm 都設定好後，確認是否能直接在 PhpStorm 內跑測試。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium063.png" alt=""></p>
<p>將專案視窗的右上方只選擇 <code>Tests</code>，將只顯示 Laravel 的 <code>tests</code> 目錄。</p>
<p>選擇 <code>tests</code> 目錄，按滑鼠右鍵選擇 <code>Run tests</code>，或按熱鍵 &#8963; + &#8679; + R 執行測試。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium064.png" alt=""></p>
<p>若也能看到 2 個測試都是 <span class="label label-success">綠燈</span>，表示整個 PhpStorm 測試環境已經設定成功。</p>
<h2 id="最簡單的驗收測試">最簡單的驗收測試</h2><hr>
<h3 id="應用程式測試-1">應用程式測試</h3><p><strong>ExampleTest.php</strong><br><figure class="highlight php"><figcaption><span>tests/ExampleTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">WithoutMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseTransactions</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A basic functional test example.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testBasicExample</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/'</span>)</span><br><span class="line">             -&gt;see(<span class="string">'Laravel'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每個 Laravel 都有這隻測試，用來測試 Laravel 預設首頁是否有 <code>Laravel</code> 字串。</p>
<ul>
<li><strong>TestCase</strong> : 每個 Laravel 的測試都要繼承 <code>TestCase</code>。</li>
<li><strong>Test Method</strong> : 每個 test method 必須以 <code>test</code> 開頭，或加上註解 <code>@test</code>，PHPUnit 才會執行。</li>
<li><strong>visit()</strong> : 以 <code>GET</code> 方式對指定 URL 加以測試。</li>
<li><strong>see()</strong> : 測試網頁內容是否包含指定字串。</li>
</ul>
<p><strong>TestCase.php</strong><br><figure class="highlight php"><figcaption><span>tests/TestCase.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCase</span> <span class="keyword">extends</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The base URL to use while testing the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$baseUrl</span> = <span class="string">'http://localhost'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Foundation\Application</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createApplication</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$app</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>為 Laravel 測試的 abstract class，主要目的在載入 Laravel kernel 部分。</p>
<h3 id="Selenium_測試-1">Selenium 測試</h3><p><strong>ExampleSeleniumTest.php</strong><br><figure class="highlight php"><figcaption><span>tests/ExampleSeleniumTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleSeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testTitle</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="string">'/'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'Laravel'</span>, <span class="variable">$this</span>-&gt;title());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這是摘自於 <code>phpunit-selenium</code> 官網，為最簡單的 Selenium 測試。</p>
<p>不同於應用程式測試是繼承於 <code>TestCase</code>，Selenium 測試要改繼承 <code>phpunit-selenium</code> 所提供的 <code>PHPUnit_Extensions_Selenium2TestCase</code>。</p>
<p>第 5 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每個測試案例執行時，都會執行 <code>setUp()</code>，可用來執行設定動作。</p>
<ul>
<li><strong>setBrowser()</strong> : 設定要測試的瀏覽器。</li>
<li><strong>setBrowserUrl()</strong> : 設定 Web Server 的 URL 與 port。</li>
<li><strong>setHost()</strong> : 設定 Selenium Server 的 URL。</li>
<li><strong>setPort()</strong> : 設定 Selenium Server 的 port。</li>
</ul>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testTitle</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;url(<span class="string">'/'</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'Laravel'</span>, <span class="variable">$this</span>-&gt;title());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>url()</strong> : 以 <code>GET</code> 方式對指定 URL 加以測試，相當於 Laravel 應用程式測試的 <code>visit()</code>。</li>
<li><strong>assertEquals()</strong> : 測試網頁的 title 是否為 <code>Laravel</code>。</li>
</ul>
<h2 id="建立_Todo_專案">建立 Todo 專案</h2><hr>
<p>以 Laravel 官方的 <a href="https://laravel.com/docs/5.2/quickstart" target="_blank" rel="external">Basic Task List</a> 為範例，建立一個簡單的 Todo 專案，將以此專案建立驗收測試 : 分別使用<strong>應用程式測試</strong>與<strong>Selenium測試</strong>。<span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/853c57dac7bf0a4d239123cd508037ed81372b6a" target="_blank" rel="external">建立 Todo</a></span></span></span></p>
<p><img src="/images/selenium/selenium-phpunit/selenium019.png" alt=""></p>
<p>一開始顯示目前所有的 task，因為還沒建立任何 task，所以是空的。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium020.png" alt=""></p>
<p>輸入 <code>Study</code>，按 <code>Add Task</code> 新增。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium021.png" alt=""></p>
<p><code>Study</code> 被新增到資料庫，並顯示在下方的 <code>Current Tasks</code>。</p>
<p>按下 <code>Delete</code> 刪除 <code>Study</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium019.png" alt=""></p>
<p><code>Study</code> 從資料庫被刪除，不顯示任何 task。</p>
<h2 id="驗收測試案例">驗收測試案例</h2><hr>
<p>目前 Todo 專案非常簡單，我們想為此專案建立 3 個測試案例。</p>
<ul>
<li>Todo 一啟動時，顯示目前資料庫的 3 筆 task。</li>
<li>新增 1 筆 task，並顯示在下方的 <code>Current Tasks</code>。</li>
<li>新增 1 筆 task，並立即刪除 task。</li>
</ul>
<h2 id="應用程式測試-2">應用程式測試</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:test TodoAppTest</span><br></pre></td></tr></table></figure>
<p>由 Laravel artisan 建立 <code>TodoAppTest</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium022.png" alt=""></p>
<h3 id="測試案例1">測試案例1</h3><div class="alert alert-info"><i class="fa fa-info"></i>  Todo 一啟動時，顯示目前資料庫的 3 筆 task。</div>
<p><strong>TodoAppTest.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/74eb13230560e0e0fde268238df7e8c52de2b620" target="_blank" rel="external">TodoAppTest (一啟動顯示 3 筆 task)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoAppTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$rootURL</span> = <span class="string">'todo'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        DB::table(<span class="string">'tasks'</span>)-&gt;truncate();</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 一啟動顯示3筆<span class="title">task</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 2'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 3'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>,</span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    DB::table(<span class="string">'tasks'</span>)-&gt;truncate();</span><br><span class="line">    <span class="keyword">parent</span>::tearDown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>撰寫測試時，只要牽涉到資料庫讀寫，就必須遵造<strong>童子軍法則</strong> : <strong>測試結束時，要負責將假資料刪除</strong>，如此才能確保下一個測試執行時，是一個完全乾淨的資料庫，測試時才沒有任何 side effect。</p>
<p>每個測試案例執行完時，都會執行 <code>tearDown()</code>，所以可以將 truncate 動作寫在 <code>tearDown()</code> 內。</p>
<p>19 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>使用後端技術做驗收測試，最大的優點就是可以根據測試案例的需求，直接對資料庫做假資料。</p>
<p>這裡直接使用 Laravel 的 Model Factory。<span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>關於 Model Factory，詳細請參考 Laravel 官網 <a href="https://laravel.com/docs/5.2/testing#model-factories" target="_blank" rel="external">Model Factories</a></span></span></span></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">    -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">    -&gt;see(<span class="string">'Task 2'</span>)</span><br><span class="line">    -&gt;see(<span class="string">'Task 3'</span>)</span><br><span class="line">    -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>,</span><br><span class="line">    ])</span><br><span class="line">    -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>,</span><br><span class="line">    ])</span><br><span class="line">    -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>,</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>visit()</code> : 以 <code>GET</code> 方式對指定 URL 加以測試。</li>
<li><code>see()</code> : 測試網頁是否包含指定字串，相當於 PHPUnit 的 <code>assertContains()</code>。</li>
<li><code>seeInDatabase()</code> : 測試資料是否存在於資料庫，第 1 個參數為 table 名稱，第 2 個參數為欲驗收資料的陣列，key 為欄位名稱，value 為資料。</li>
</ul>
<p>應用程式測試讓我們不僅可以測試網頁資料是否正確，還可以順便測試資料庫資料，也由於其 fluent API 特性，可讀性非常高，讓我們可以使用口語化的方式輕鬆閱讀測試程式碼，這也是應用程式測試最大的魅力所在。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium027.png" alt=""></p>
<p>在 <code>一啟動顯示3筆task</code> 的 method 內，按滑鼠右鍵選擇 <code>Run TodoAppTest,一啟動顯示3筆task</code>，或按熱鍵 &#8963; + &#8679; + R，只執行此測試案例。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium023.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，注意此時並沒有啟動瀏覽器，就如往常執行單元測試一樣，這也是應用程式測試速度超快的原因。</p>
<h3 id="測試案例2">測試案例2</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並顯示在下方的 <b>Current Tasks</b>。</div>
<p><strong>TodoAppTest.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/3a91cbdf05d54dad4e869a00aacd290d963a9e5e" target="_blank" rel="external">TodoAppTest (新增 1 筆 task 並顯示在下方)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoAppTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>並顯示在下方<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">            -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">    -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">    -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure></p>
<p>前一個測試我們使用了 Model Factory 對資料庫新增假資料，特別在測試一開始，先確認資料已經被刪除。</p>
<ul>
<li><code>dontSee()</code> : 測試網頁是否<code>不</code>包含指定字串，相當於 PHPUnit 的 <code>assertNotContains()</code>。</li>
<li><code>dontSeeInDatabase()</code> : 測試資料是否<code>不</code>存在於資料庫。 </li>
</ul>
<p>16 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">    -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">    -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">    -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">    -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure></p>
<p>模擬使用者打字輸入的動作與按下 button，最後再測試資料是否已經新增到資料庫。</p>
<ul>
<li><code>type()</code> : 針對 <code>&lt;input type=text&gt;</code> 做輸入，第 1 個參數為欲輸入字串，第 2 個參數為 HTML 的 name。</li>
<li><code>press()</code> : 按下 <code>&lt;input type=submit&gt;</code>，第 1 個參數為 button 顯示的字串。</li>
</ul>
<p><img src="/images/selenium/selenium-phpunit/selenium024.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，儘管這次有輸入的動作，依然沒有啟動瀏覽器。</p>
<h3 id="測試案例3">測試案例3</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並立即刪除 task。</div>
<p><strong>TodoAppTest.php</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/e2231b0dfafd14fdc7b030ab91513dd68f08f7b7" target="_blank" rel="external">TodoAppTest (新增 1 筆 task 立即刪除)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoAppTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>立即刪除<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">            -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;post(<span class="variable">$this</span>-&gt;rootURL . <span class="string">'/task/1'</span>)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>24 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;post(<span class="variable">$this</span>-&gt;rootURL . <span class="string">'/task/1'</span>)</span><br><span class="line">    -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">    -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure></p>
<p>目前每個 <code>Delete</code> 都有自己的 <code>&lt;form&gt;</code> 做 submit，但應用程式測試只能針對單一 <code>&lt;form&gt;</code> 做測試，因此無法使用 <code>press()</code> 來按 <code>Delete</code>，改用 <code>post()</code> URL 的方式。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium025.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，這次依然沒有啟動瀏覽器。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium026.png" alt=""></p>
<p>一次執行 <code>TodoAppTest</code> 的 3 個測試，都是 <span class="label label-success">綠燈</span>。</p>
<h2 id="建立_AJAX_版_Todo_專案">建立 AJAX 版 Todo 專案</h2><hr>
<p>應用程式測試有很多優點，如執行速度快、API 語意清楚、fluent 方式串接，且還可同時測試資料庫，但由於測試時沒有啟動瀏覽器，因此無法測試 JavaScript 與 AJAX 部分，只能測試 <code>&lt;form&gt;</code> 與 submit，但實務上 JavaScript 與 AJAX 需求越來越多，顯然只有應用程式測試是不夠的。<span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/6b6ab431fdcbb44b3b9ba2ec1e3b2aacdcd972b1" target="_blank" rel="external">建立 AJAX 版 Todo</a></span></span></span></p>
<p>剛剛的 Todo 專案，<code>Add Task</code> 有一個 <code>&lt;form&gt;</code>，而每個 <code>Delete</code> 都有自己的 <code>&lt;form&gt;</code>，也就是整個網頁基本上都是透過 <code>&lt;form&gt;</code> 與 submit 機制達成，因此可以順利使用應用程式測試，現在我們要將 <code>Add Task</code> 與所有的 <code>Delete</code> 都改用 JavaScript 與 AJAX 方式。</p>
<h2 id="Selenium_測試-2">Selenium 測試</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:test TodoSeleniumTest</span><br></pre></td></tr></table></figure>
<p>由 Laravel artisan 建立 <code>TodoSeleniumTest</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium050.png" alt=""></p>
<p>將原來的 <code>TodoAppTest</code> 所有測試測試複製過來，只有 URL 從 <code>/todo</code> 改成 <code>/todo2</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium028.png" alt=""></p>
<p>使用應用程式測試跑 AJAX 版的 Todo 就悲劇了，只有第 1 個測試案例能通過，因為後 <code>Add Task</code> 與 <code>Delete</code> 都改用了 JavaScript 與 AJAX，這就必須動用 Selenium 測試了。</p>
<h3 id="測試案例1-1">測試案例1</h3><div class="alert alert-info"><i class="fa fa-info"></i>  Todo 一啟動時，顯示目前資料庫的 3 筆 task。</div>
<p><strong>TodoSeleniumTest.php</strong><span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/a0812399ba5f2bcc999a8bd8c5a66be4ec446376" target="_blank" rel="external">TodoSeleniumTest (一啟動顯示 3 筆 task)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoSeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$rootURL</span> = <span class="string">'todo2'</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> int */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$ajaxDelay</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;ajaxDelay = (int)env(<span class="string">'AJAX_DELAY'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line">        <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        DB::table(<span class="string">'tasks'</span>)-&gt;truncate();</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 一啟動顯示3筆<span class="title">task</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 2'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 3'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 5 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span></span><br></pre></td></tr></table></figure></p>
<p>改用 phpunit-selenium 驅動 Selenium，因次必須繼承 phpunit-selenium 所提供的 <code>PHPUnit_Extensions_Selenium2TestCase</code>。</p>
<p>第 7 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$rootURL</span> = <span class="string">'todo2'</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> int */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$ajaxDelay</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;ajaxDelay = (int)env(<span class="string">'AJAX_DELAY'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line">    <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不同於應用程式測試，Selenium 測試必須在每個測試案例執行時，設定 Web Server URL、port、Selenium URL、port 等資訊。</p>
<p>除此之外，還要特別設定 <code>$ajaxDelay</code> 時間，好讓測試等 AJAX 回應，否則動態產生的 HTML 元素會抓不到。</p>
<p>最後在每個測試案例執行時，還必須載入 Laravel 核心部分，在應用程式測試時，我們不需要處理這些事情，因為 <code>TestCase</code> 幫我們做掉了，這裡因為改繼承 <code>PHPUnit_Extensions_Selenium2TestCase</code>，所以載入 Laravel 核心這件事情必須自己處理。</p>
<p>31 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 一啟動顯示3筆<span class="title">task</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">    factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">    factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 2'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 3'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一樣先使用 Model Factory 對資料庫新增 3 筆假資料。</p>
<ul>
<li><code>url()</code> : 為 phpunit-selenium 所提供的 API，會以 <code>GET</code> 方式對指定 URL 加以測試，相當於應用程式測試的 <code>visit()</code>。</li>
<li><code>byTag()</code> : phpunit-selenium 提供一系列 <code>byXXX()</code> 的 API，如 <code>byId()</code>、<code>byName()</code>、<code>byTag()</code>、<code>byXPath()</code> …，讓我們可以抓到 HTML 的元素，進而加以控制。</li>
<li><code>assertContains()</code> : PHPUnit 所提供的 API，測試是否包含指定字串，相當於應用程式測試的 <code>see()</code>。</li>
</ul>
<p><img src="/images/selenium/selenium-phpunit/selenium029.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，與應用程式測試不同的時，此時會真的啟動瀏覽器，因此可以測試 JavaScript 與 AJAX，也因為必須啟動瀏覽器，所以測試速度較應用程式測試來得慢。</p>
<h3 id="測試案例2-1">測試案例2</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並顯示在下方的 <b>Current Tasks</b>。</div>
<p><strong>TodoSeleniumTest.php</strong><span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/329be5e3a67842b7fc399bd088c688d91ec989f5" target="_blank" rel="external">TodoSeleniumTest (新增 1 筆 task 並顯示在下方)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>並顯示在下方<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertNotContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line">        <span class="variable">$this</span>-&gt;byName(<span class="string">'name'</span>)-&gt;value(<span class="string">'Task 1'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Add Task')]"</span>)-&gt;click();</span><br><span class="line"></span><br><span class="line">        sleep(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 7 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line"><span class="variable">$this</span>-&gt;assertNotContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br></pre></td></tr></table></figure></p>
<p>前一個測試我們使用了 Model Factory 對資料庫新增假資料，特別在測試一開始，先確認資料已經被刪除。</p>
<ul>
<li><code>assertNotContains()</code> : PHPUnit 所提供的 API，測試是否<code>不</code>包含指定字串，相當於應用程式測試的 <code>dontSee()</code>。</li>
</ul>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line"><span class="variable">$this</span>-&gt;byName(<span class="string">'name'</span>)-&gt;value(<span class="string">'Task 1'</span>);</span><br><span class="line"><span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Add Task')]"</span>)-&gt;click();</span><br></pre></td></tr></table></figure></p>
<p>模擬使用者打字輸入的動作與按下 button。</p>
<ul>
<li><code>byName()</code> : phpunit-selenium 提供的 API，讓我們可以根據 name 抓到 HTML 的元素，進而加以控制。</li>
<li><code>byXPath()</code> : phpunit-selenium 提供的 API，讓我們可以根據 XPath 抓到 HTML 的元素，進而加以控制。</li>
</ul>
<p>17 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br></pre></td></tr></table></figure></p>
<p>由於採用 AJAX 方式，需要等 server 回應，需要等一段時間，若在本機執行，實務上設定 <code>1</code> 秒即可，若要在 CI Server 上執行，時間需要設定長一點。</p>
<p>19 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br></pre></td></tr></table></figure></p>
<p>最後測試畫面是是否看得到 <code>Task 1</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium030.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，會看到瀏覽器啟動與實際輸入的動作。</p>
<h3 id="測試案例3-1">測試案例3</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並立即刪除 task。</div>
<p><strong>TodoSeleniumTest.php</strong><span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/c6f492dee8a09fb1c0bd97cf96dacb7ece89d0d0" target="_blank" rel="external">TodoSeleniumTest (新增 1 筆 task 立即刪除)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>立即刪除<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertNotContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line">        <span class="variable">$this</span>-&gt;byName(<span class="string">'name'</span>)-&gt;value(<span class="string">'Task 1'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Add Task')]"</span>)-&gt;click();</span><br><span class="line"></span><br><span class="line">        sleep(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Delete')]"</span>)-&gt;click();</span><br><span class="line"></span><br><span class="line">        sleep(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertNotContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Delete')]"</span>)-&gt;click();</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>byXPath()</code> 找到 <code>Delete</code>，並模擬使用者按下 <code>Delete</code> 動作。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium031.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，會看到瀏覽器啟動與實際輸入，最後會看到實際刪除的動作。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium032.png" alt=""></p>
<p>一次執行 <code>TodoSeleniumTest</code> 的 3 個測試，都是 <span class="label label-success">綠燈</span>。</p>
<h2 id="將兩種測試_API_統一">將兩種測試 API 統一</h2><hr>
<p>雖然直接使用 phpunit-selenium 所提供的 API，我們已經能驅動 Selenium 並對 JavaScript 與 AJAX 加以測試，但相對於 Laravel 的應用程式測試，仍然有改善的空間 :</p>
<ul>
<li>phpunit-selenium 的 API 與 應用程式 API 不同，也就是同樣寫驗收測試，必須學習兩套 API。</li>
<li>phpunit-selenium API 的語意較差，可讀性較差，將來維護不若應用程式測試般直覺。</li>
<li>phpunit-selenium 無法直接測試資料庫。</li>
</ul>
<p>其實我們已經發現 PHPUnit 與 phpunit-selenium 所提供的 API，與應用程式測試的 API 很多功能是相同的，只是 API 不同而已，我們將學習 Laravel 的 <code>TestCase</code>，另外再包一個 <code>TestCaseSelenium</code>，將應用程式測試 API 實作於此，將來測試案例將不繼承 <code>PHPUnit_Extensions_Selenium2TestCase</code>，而改繼承我們自己的 <code>TestCaseSelenium</code>，就能達到應用程式測試與 Selenium 測試完全相同 API 的目標。</p>
<p><strong>TestCaseSelenium.php</strong><span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/1237215be57feaa03c9526bc92d707d5b06ccee5" target="_blank" rel="external">建立 TestCaseSelenium</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TestCaseSelenium.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Console</span>\<span class="title">Kernel</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCaseSelenium</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ajaxDelay</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;ajaxDelay = (int)env(<span class="string">'AJAX_DELAY'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line">        <span class="variable">$app</span>-&gt;make(Kernel::class)-&gt;bootstrap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $path</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visit</span><span class="params">(string <span class="variable">$path</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $text</span><br><span class="line">     * <span class="doctag">@param</span> string $tag</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">see</span><span class="params">(string <span class="variable">$text</span>, string <span class="variable">$tag</span> = <span class="string">'body'</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="variable">$text</span>, <span class="variable">$this</span>-&gt;byTag(<span class="variable">$tag</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $text</span><br><span class="line">     * <span class="doctag">@param</span> string $tag</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dontSee</span><span class="params">(string <span class="variable">$text</span>, string <span class="variable">$tag</span> = <span class="string">'body'</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertNotContains(<span class="variable">$text</span>, <span class="variable">$this</span>-&gt;byTag(<span class="variable">$tag</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $value</span><br><span class="line">     * <span class="doctag">@param</span> string $name</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span><span class="params">(string <span class="variable">$value</span>, string <span class="variable">$name</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;byName(<span class="variable">$name</span>)-&gt;value(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> $text</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">press</span><span class="params">(string <span class="variable">$text</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), '&#123;$text&#125;')]"</span>)-&gt;click();</span><br><span class="line">        <span class="variable">$this</span>-&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> $seconds</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hold</span><span class="params">(int <span class="variable">$seconds</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        sleep(<span class="variable">$seconds</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> $table</span><br><span class="line">     * <span class="doctag">@param</span> array $data</span><br><span class="line">     * <span class="doctag">@param</span> null $connection</span><br><span class="line">     * <span class="doctag">@return</span> $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$database</span> = App::make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$connection</span> = <span class="variable">$connection</span> ?: <span class="variable">$database</span>-&gt;getDefaultConnection();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$database</span>-&gt;connection(<span class="variable">$connection</span>)-&gt;table(<span class="variable">$table</span>)-&gt;where(<span class="variable">$data</span>)-&gt;count();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertGreaterThan(<span class="number">0</span>, <span class="variable">$count</span>, sprintf(</span><br><span class="line">            <span class="string">'Unable to find row in database table [%s] that matched attributes [%s].'</span>, <span class="variable">$table</span>, json_encode(<span class="variable">$data</span>)</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span>  string $table</span><br><span class="line">     * <span class="doctag">@param</span>  array $data</span><br><span class="line">     * <span class="doctag">@param</span>  string $connection</span><br><span class="line">     * <span class="doctag">@return</span> $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dontSeeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;notSeeInDatabase(<span class="variable">$table</span>, <span class="variable">$data</span>, <span class="variable">$connection</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span>  string $table</span><br><span class="line">     * <span class="doctag">@param</span>  array $data</span><br><span class="line">     * <span class="doctag">@param</span>  string $connection</span><br><span class="line">     * <span class="doctag">@return</span> $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">notSeeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$database</span> = App::make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$connection</span> = <span class="variable">$connection</span> ?: <span class="variable">$database</span>-&gt;getDefaultConnection();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$database</span>-&gt;connection(<span class="variable">$connection</span>)-&gt;table(<span class="variable">$table</span>)-&gt;where(<span class="variable">$data</span>)-&gt;count();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="number">0</span>, <span class="variable">$count</span>, sprintf(</span><br><span class="line">            <span class="string">'Found unexpected records in database table [%s] that matched attributes [%s].'</span>, <span class="variable">$table</span>, json_encode(<span class="variable">$data</span>)</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 5 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCaseSelenium</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span></span><br></pre></td></tr></table></figure></p>
<p>由我們自己建立的 <code>TestCaseSelenium</code> 去繼承 phpunit-selenium 的 <code>PHPUnit_Extensions_Selenium2TestCase</code>。</p>
<p>第 7 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$ajaxDelay</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;ajaxDelay = (int)env(<span class="string">'AJAX_DELAY'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line">    <span class="variable">$app</span>-&gt;make(Kernel::class)-&gt;bootstrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>TodoSeleniumTest</code> 中，這些設定都是寫在每個 test 的 <code>setUp()</code>，由於這些基礎設定都一樣，將其 <code>Pull members up</code> 到 <code>TestCaseSelenium</code>，以後每個 test 就不需再寫了。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $path</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visit</span><span class="params">(string <span class="variable">$path</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;url(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>visit()</code> 其實相當於 phpunit-selenium 的 <code>url()</code>。</p>
<p>33 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $text</span><br><span class="line"> * <span class="doctag">@param</span> string $tag</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">see</span><span class="params">(string <span class="variable">$text</span>, string <span class="variable">$tag</span> = <span class="string">'body'</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertContains(<span class="variable">$text</span>, <span class="variable">$this</span>-&gt;byTag(<span class="variable">$tag</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>see()</code> 其實相當於 PHPUnit 的 <code>assertContains()</code>，若沒有特別指定 tag，相當於從 <code>body</code> 下開始找。</p>
<p>45 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $text</span><br><span class="line"> * <span class="doctag">@param</span> string $tag</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dontSee</span><span class="params">(string <span class="variable">$text</span>, string <span class="variable">$tag</span> = <span class="string">'body'</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertNotContains(<span class="variable">$text</span>, <span class="variable">$this</span>-&gt;byTag(<span class="variable">$tag</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>dontSee()</code> 其實相當於 PHPUnit 的 <code>assertNotContains()</code>，若沒有特別指定 tag，相當於從 <code>body</code> 下開始找。</p>
<p>57 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $value</span><br><span class="line"> * <span class="doctag">@param</span> string $name</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span><span class="params">(string <span class="variable">$value</span>, string <span class="variable">$name</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;byName(<span class="variable">$name</span>)-&gt;value(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>type()</code> 其實相當於 phpunit-selenium 的 <code>byName()</code> 找到元素後，再用 <code>value()</code> 去填值。</p>
<p>69 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> $text</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">press</span><span class="params">(string <span class="variable">$text</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), '&#123;$text&#125;')]"</span>)-&gt;click();</span><br><span class="line">    <span class="variable">$this</span>-&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>press()</code> 其實相當於 phpunit-selenium 的 <code>byXPath()</code> 找到元素後，再用 <code>click()</code> 去按下 button。</p>
<p>由於 button 會搭配 AJAX，故需要 <code>hold()</code> 等待一點時間。</p>
<p>80 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> $seconds</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hold</span><span class="params">(int <span class="variable">$seconds</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    sleep(<span class="variable">$seconds</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>hold()</code> 其實相當於 <code>sleep()</code>，目的在等 AJAX 回應。</p>
<p>91 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> $table</span><br><span class="line"> * <span class="doctag">@param</span> array $data</span><br><span class="line"> * <span class="doctag">@param</span> null $connection</span><br><span class="line"> * <span class="doctag">@return</span> $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$database</span> = App::make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$connection</span> = <span class="variable">$connection</span> ?: <span class="variable">$database</span>-&gt;getDefaultConnection();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$count</span> = <span class="variable">$database</span>-&gt;connection(<span class="variable">$connection</span>)-&gt;table(<span class="variable">$table</span>)-&gt;where(<span class="variable">$data</span>)-&gt;count();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertGreaterThan(<span class="number">0</span>, <span class="variable">$count</span>, sprintf(</span><br><span class="line">        <span class="string">'Unable to find row in database table [%s] that matched attributes [%s].'</span>, <span class="variable">$table</span>, json_encode(<span class="variable">$data</span>)</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此段程式是由 Laravel 的 <code>Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase</code> trait 移植過來的的，目的在測試資料是否在資料庫內。</p>
<p>112 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span>  string $table</span><br><span class="line"> * <span class="doctag">@param</span>  array $data</span><br><span class="line"> * <span class="doctag">@param</span>  string $connection</span><br><span class="line"> * <span class="doctag">@return</span> $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dontSeeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;notSeeInDatabase(<span class="variable">$table</span>, <span class="variable">$data</span>, <span class="variable">$connection</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span>  string $table</span><br><span class="line"> * <span class="doctag">@param</span>  array $data</span><br><span class="line"> * <span class="doctag">@param</span>  string $connection</span><br><span class="line"> * <span class="doctag">@return</span> $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">notSeeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$database</span> = App::make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$connection</span> = <span class="variable">$connection</span> ?: <span class="variable">$database</span>-&gt;getDefaultConnection();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$count</span> = <span class="variable">$database</span>-&gt;connection(<span class="variable">$connection</span>)-&gt;table(<span class="variable">$table</span>)-&gt;where(<span class="variable">$data</span>)-&gt;count();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="number">0</span>, <span class="variable">$count</span>, sprintf(</span><br><span class="line">        <span class="string">'Found unexpected records in database table [%s] that matched attributes [%s].'</span>, <span class="variable">$table</span>, json_encode(<span class="variable">$data</span>)</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此段程式是由 Laravel 的 <code>Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase</code> trait 移植過來的的，目的在測試資料是否<code>不</code>在資料庫內。</p>
<p><strong>composer.json</strong><span class="margin-note-marker"><sup>23</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">23</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/0e217b24fa33ce797082cff9da6708e9f18ce130" target="_blank" rel="external">修改 composer.json</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>composer.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"autoload-dev"</span>: &#123;</span><br><span class="line">    <span class="string">"classmap"</span>: [</span><br><span class="line">        <span class="string">"tests/TestCase.php"</span>,</span><br><span class="line">        <span class="string">"tests/TestCaseSelenium.php"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p><code>TestCaseSelenium</code> 為自己新建的 class，因為不是遵循 <code>PSR-4</code> 放在 <code>app</code> 目錄下，所以必須在 <code>classmap</code> 下加上 <code>tests/TestCaseSelenium.php</code>，讓 Composer 可以順利載入。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium033.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer dumpautoload</span><br></pre></td></tr></table></figure>
<p>重新命令 Composer 建立 autoload。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium034.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:test TodoSeleniumAppTest</span><br></pre></td></tr></table></figure>
<p>由 Laravel artisan 建立 <code>TodoSeleniumAppTest</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium051.png" alt=""></p>
<h3 id="測試案例1-2">測試案例1</h3><div class="alert alert-info"><i class="fa fa-info"></i>  Todo 一啟動時，顯示目前資料庫的 3 筆 task。</div>
<p><strong>TodoSeleniumAppTest.php</strong><span class="margin-note-marker"><sup>24</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">24</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/4a6b32c4e35fff6779eb4ac36f279970cf328f68" target="_blank" rel="external">TodoSeleniumAppTest (一啟動顯示 3 筆 task)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumAppTest</span> <span class="keyword">extends</span> <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$rootURL</span> = <span class="string">'todo2'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        DB::table(<span class="string">'tasks'</span>)-&gt;truncate();</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 一啟動顯示3筆<span class="title">task</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 2'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 3'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>,</span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>從原來繼承 <code>PHPUnit_Extensions_Selenium2TestCase</code> 改繼承自己的 <code>TestCaseSelenium</code>，因為 API 與應用程式測試的 API 完全一樣，只要將原來 <code>TodoAppTest</code> 的 <code>一啟動顯示3筆task()</code> 內的測試程式碼複製過來，再將 <code>rootURL</code> 從 <code>/todo</code> 改成 <code>/todo2</code> 即可。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium035.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>。</p>
<h3 id="測試案例2-2">測試案例2</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並顯示在下方的 <b>Current Tasks</b>。</div>
<p><strong>TodoSeleniumAppTest.php</strong><span class="margin-note-marker"><sup>25</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">25</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/03a151bbf7b4be9ba023998902b2aa63da64976b" target="_blank" rel="external">TodoSeleniumAppTest (新增 1 筆 task 並顯示在下方)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumAppTest</span> <span class="keyword">extends</span> <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>並顯示在下方<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">            -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">            -&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原來 <code>TodoAppTest</code> 的 <code>新增1筆task並顯示在下方()</code> 內的測試程式碼複製過來即可。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium036.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>。</p>
<h3 id="測試案例3-2">測試案例3</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並立即刪除 task。</div>
<p><strong>TodoSeleniumAppTest.php</strong><span class="margin-note-marker"><sup>26</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">26</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/df45e362b472598ae2bc92a489dfcee52d180576" target="_blank" rel="external">TodoSeleniumAppTest (新增 1 筆 task 立即刪除)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumAppTest</span> <span class="keyword">extends</span> <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>立即刪除<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">            -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">            -&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;press(<span class="string">'Delete'</span>)</span><br><span class="line">            -&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原來 <code>TodoAppTest</code> 的 <code>新增1筆task立即刪除()</code> 內的測試程式碼複製過來，唯一修改在於 <code>Delete</code> 部分，之前是直接 post URL，現在改成 <code>press(&#39;Delete&#39;)</code>，並加上<code>hold($this-&gt;ajaxDelay)</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium037.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium038.png" alt=""></p>
<p>一次執行 <code>TodoSeleniumAppTest</code> 的 3 個測試，都是 <span class="label label-success">綠燈</span>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium039.png" alt=""></p>
<p>最後將測試全部跑一遍，全部都是 <span class="label label-success">綠燈</span>，包含之前寫的應用程式測試與 Selenium 測試。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>應用程式測試適合用在單純使用 <code>&lt;form&gt;</code> 來 submit 的需求，優點是速度非常快。</li>
<li>Selenium 測試適合用在使用 JavaScript 與 AJAX 的需求，由於需要開啟瀏覽器，速度稍慢。</li>
<li>透過繼承 <code>TestCaseSelenium</code>，Selenium 測試也能使用與應用程式測試相同的 API，除了測試程式碼可無痛升級外，也能享受 API 語意清楚，fluent 方式串接的優點，還可以同時測試資料庫。</li>
<li>目前 <code>TestCaseSelenium</code> 並沒有將應用程式測試的所有 API 包進來，不過證明是個可行的方式，當所有 API 都包進來後，預計將來會以 package 方式釋出。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Taylor Otwell, <a href="https://laravel.com/docs/master/application-testing" target="_blank" rel="external">Laravel Application Testing</a><br>Sebastian Bergmann, <a href="https://github.com/sebastianbergmann/phpunit" target="_blank" rel="external">PHPUnit</a><br>Sebastian Bergmann, <a href="https://packagist.org/packages/phpunit/phpunit-selenium" target="_blank" rel="external">phpunit/phpunit-selenium</a><br>SeleniumHQ, <a href="http://www.seleniumhq.org" target="_blank" rel="external">Selenium Server</a><br>Google, <a href="https://sites.google.com/a/chromium.org/chromedriver/" target="_blank" rel="external">ChromeDriver</a><br>Jeffery Way, <a href="https://laracasts.com/series/whatcha-working-on/episodes/1" target="_blank" rel="external">Laracast : Laravel Test Helpers for Selenium</a></p>
]]></content>
    <summary type="html">
    <![CDATA[PHPUnit 搭配 Selenium 之後，就能實際對瀏覽器做驗收測試，也能測試 JavaScript 與 AJAX。]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Selenium" scheme="http://oomusou.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何修改 PhpStorm 預設的 Class Template?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-class-template/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-class-template/</id>
    <published>2016-10-05T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>當使用 PhpStorm 建立 class 時，預設會產生 <code>Created by PhpStorm</code> 的註解，並包含<strong>作者</strong>、<strong>日期</strong>、<strong>時間</strong>等資訊，有的人喜歡，有的人不喜歡，若你不希望每次建立 class 時都有這個檔頭，可以自行修改；除此之外，在 PHP 7 為了讓強行別檢查發揮作用，我們會在一開始 <code>declare(strict_types = 1);</code>，這也可以直接設定在 class template，以後只要建立新的 class，都會自動加上宣告。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p><img src="/images/phpstorm/phpstorm-class-template/template000.png" alt=""></p>
<p>預設在 PhpStorm 建立 class 時，都會在檔頭加上 <code>Created by PhpStorm</code> 的註解，很多人建立 class 後的第一件事情，就是去刪除這些註解，事實上我們可以透過修改 PhpStorm 的 class template，移除這些設定。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>PhpStorm 2016.2.1</p>
<h2 id="移除註解">移除註解</h2><hr>
<p><img src="/images/phpstorm/phpstorm-class-template/template001.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; File and Code Templates -&gt; PHP Class</em></strong></p>
<p>我們發現每個 class template 都有 <code>#parse(&quot;PHP File Header.php&quot;)</code>。</p>
<p><img src="/images/phpstorm/phpstorm-class-template/template002.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; File and Code Templates -&gt; includes -&gt; PHP File Header</em></strong></p>
<p>切換到 <code>includes</code> 的 <code>PHP File Header</code>，我們可以看到預設的註解就是在此，若你不喜歡這些註解，可以全部刪除後存檔。</p>
<h2 id="宣告_Strict_Type">宣告 Strict Type</h2><hr>
<p>PHP 7 增加了 scalar type hint 與 return type，不過為了相容於過去 PHP 弱型別傳統，預設並沒有啟動型別檢查，必須自己加上 <code>declare(strict_types = 1)</code> 之後，PHP 與 PhpStorm 的 Code Inspection 才會根據 type hint 與 return type 檢查型別。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 PhpStorm 的 Code Inspection，詳細請參考<a href="/phpstorm/phpstorm-code-inspection/">如何在 PhpStorm 使用 Code Inspection?</a></span></span></span></p>
<p>目前 PHP 7 並沒有提供全域的 <code>php.ini</code> 設定，必須自己在每個 <code>.php</code> 加上設定，很麻煩也容易忘記，若能設定在 class template 內，則以後新增 class 都會有 <code>declare(strict_types = 1)</code>。</p>
<p><img src="/images/phpstorm/phpstorm-class-template/template003.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; File and Code Templates -&gt; includes -&gt; PHP File Header</em></strong></p>
<p>刪除預設註解後，改加上 <code>declare(strict_types = 1)</code>。</p>
<p><img src="/images/phpstorm/phpstorm-class-template/template004.png" alt=""></p>
<p>以後新增 class，預設註解不見了，且自動加上 <code>declare(strict_types = 1)</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>除了移除預設註解與宣告 <code>strict types</code> 外，如一些需靠 <code>Laravel artisan</code> 建立的 controller、unit test …，事實上也可以新增一個 template，直接使用 PhpStorm 來新增。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/file-and-code-templates.html" target="_blank" rel="external">File and Code Templates</a></p>
]]></content>
    <summary type="html">
    <![CDATA[將惱人的預設檔頭拿掉，並加上 PHP 7 所需要 strict types 宣告]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Azure 使用 Laravel + Blob Storage?]]></title>
    <link href="http://oomusou.io/azure/azure-blob-storage/"/>
    <id>http://oomusou.io/azure/azure-blob-storage/</id>
    <published>2016-08-13T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>除了關聯式資料庫外，實務上我們常需要將<strong>文字檔</strong>或<strong>二進位檔</strong> (圖片檔或影音檔) 上傳到雲端，並提供下載，此時我們可以使用 Azure 的 Blob Storage 儲存這類型的檔案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.43<br>PhpStorm 2016.2</p>
<h2 id="Blob_Storage_簡介">Blob Storage 簡介</h2><hr>
<ul>
<li>在雲端中儲存檔案的服務，可儲存任何類型的檔案，包含文字檔與二進位檔。</li>
<li>全球任何地方都可透過 HTTP 或 HTTPS 來存取這些資料。您可以使用 Blob Storage 向全球公開資料，或私下儲存應用程式資料。</li>
</ul>
<h2 id="Blob_Storage_應用">Blob Storage 應用</h2><hr>
<ul>
<li>瀏覽器所需的圖片或文件。</li>
<li>檔案的分散式存取。</li>
<li>視訊和音訊的串流傳輸。</li>
<li>檔案備份、歸檔。</li>
</ul>
<h2 id="Blob_Storage_概念">Blob Storage 概念</h2><hr>
<p><img src="/images/azure/azure-blob-storage/blob018.jpg" alt=""></p>
<ul>
<li><strong>Account</strong><ul>
<li>需透過 Account 存取 Container 與 Blob。</li>
</ul>
</li>
<li><strong>Container</strong><ul>
<li>放置 Blob 的地方，類似檔案的<strong>資料夾</strong>。</li>
<li>必須以<strong>小寫</strong>命名。</li>
</ul>
</li>
<li><strong>Blob</strong><ul>
<li>任何類型的檔案。</li>
</ul>
</li>
</ul>
<h2 id="建立_Azure_Storage_Account">建立 Azure Storage Account</h2><hr>
<p>要使用 Azure Blob Storage，首先必須登入 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>，建立 storage account 。</p>
<p><img src="/images/azure/azure-blob-storage/blob001.png" alt=""></p>
<p><strong><em>New -&gt; Data + Storage -&gt; Storage account</em></strong></p>
<p><img src="/images/azure/azure-blob-storage/blob002.png" alt=""></p>
<ul>
<li><strong>Name</strong> : 輸入 storage account 名稱。</li>
<li><strong>Resource Manager</strong> : 選擇 <code>Resource manager</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>關於 <code>Resource manager</code> 與 <code>classic</code> 的差異，詳細請參考 Tom FitzMacken, <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-deployment-model/" target="_blank" rel="external">Azure Resource Manager vs. classic deployment: Understand deployment models and the state of your resources</a></span></span></span></li>
<li><strong>Account Kind</strong> : 選擇 <code>Blob storage</code>。</li>
<li><strong>Replication</strong> : 選擇最基本的 <code>Locally-redundant storage (LRS)</code> 即可。</li>
<li><strong>Access Tier</strong> : 選擇 <code>Hot</code>。</li>
</ul>
<div class="alert alert-info"><i class="fa fa-info"></i>  Replication 快速整理</div>
<ul>
<li>Azure 會自動為 storage account 的資料進行 replication，確保資料的持久性與高可用性。</li>
<li><p>提供了 4 種 replication 機制 :<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於 replication，詳細請參考 Tamra Myers, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-redundancy/#locally-redundant-storage" target="_blank" rel="external">Azure Storage replication</a></span></span></span></p>
<ol>
<li><strong>Locally Redundant Storage (LRS)</strong> : 提供本機備援。</li>
<li><strong>Zone-redundant Storage (ZRS)</strong> : 提供區域備援。</li>
<li><strong>Geo-redundant Storage (GRS)</strong> : 提供異地備援。</li>
<li><strong>Read-access Geo-redundant Storage (RA-GRS)</strong> : 提供讀取權限的異地備援。</li>
</ol>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Replication</th>
<th style="text-align:center">LRS</th>
<th style="text-align:center">ZRS</th>
<th style="text-align:center">GRS</th>
<th style="text-align:center">RA-GRS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">可跨多個設備複寫</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:left">可從次要位置及主要位置讀取資料</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:left">可在不同的節點上維護的資料副本數量</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
</tr>
</tbody>
</table>
<div class="alert alert-info"><i class="fa fa-info"></i>  Access Tier 快速整理</div>
<p>預設為 <code>Hot</code>。</p>
<p><strong>用途</strong></p>
<ul>
<li><strong>Hot</strong> : 適合經常讀、寫的檔案，例如 : 圖檔、文件等。</li>
<li><strong>Cool</strong> : 適合備份檔案，或不常使用之檔案。</li>
</ul>
<p><strong>價格</strong></p>
<ul>
<li><strong>Hot</strong> : 儲存空間費用較高、存取與交易成本較低。</li>
<li><strong>Cool</strong> : 儲存空間費用較低、存取與交易成本較高。</li>
</ul>
<p><img src="/images/azure/azure-blob-storage/blob003.png" alt=""></p>
<ul>
<li><strong>Resource Group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
<li><strong>Location</strong> : 選擇離我們最近的 <code>East Asia</code>。</li>
</ul>
<p>按 <code>Create</code> 開始建立 storage account。</p>
<p><img src="/images/azure/azure-blob-storage/blob004.png" alt=""></p>
<p>成功建立 storage account 後，可以在儀表板看到。</p>
<h2 id="安裝_Azure_SDK_for_PHP">安裝 Azure SDK for PHP</h2><hr>
<p>Azure 提供了 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a>，讓我們可以在 PHP 輕鬆地使用 Azure 服務，由於使用了 Composer 管理套件，所以不單 Laravel 可使用，其他 PHP framework 也可以使用。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/efde1a2fbfa266f483e46b668beb93de2099390a" target="_blank" rel="external">安裝 Azure SDK for PHP</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require microsoft/windowsazure</span><br></pre></td></tr></table></figure>
<p><img src="/images/azure/azure-blob-storage/blob000.png" alt=""></p>
<h2 id="建立_Azure_Storage_連接字串">建立 Azure Storage 連接字串</h2><hr>
<p>剛剛雖然在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 建立了 storage account，但 Laravel 還是不知道該如何連上 Azure Storage，我們還必須在 Laravel 建立連接字串，才能存取 Container 與 Blob。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey]</span><br></pre></td></tr></table></figure>
<p>Azure Storage 連接字串的格式需包含幾個部分 :</p>
<ul>
<li><strong>DefaultEndpointsProtocol</strong> : 選擇 <code>http</code> 或 <code>https</code>。</li>
<li><strong>AccountName</strong> : Azure Storage account 名稱。</li>
<li><strong>AccountKey</strong> : Azure Storage account 的 key。</li>
</ul>
<div class="alert alert-info"><i class="fa fa-info"></i>  AccountName 與 AccountKey 該填什麼呢?</div>
<p><img src="/images/azure/azure-blob-storage/blob005.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Access Keys</em></strong></p>
<p><img src="/images/azure/azure-blob-storage/blob006.png" alt=""></p>
<ul>
<li><code>Storage account name</code> 即為連接字串的 <code>AccountName</code>。</li>
<li><code>key1</code> 即為連接字串的 <code>AccountKey</code>。</li>
</ul>
<p><img src="/images/azure/azure-blob-storage/blob007.png" alt=""></p>
<p>在 Laravel 的 <code>.env</code> 建立以 <code>AZURE_STORAGE</code> 為 key 的連接字串。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/9f84f40aef236c30d16beb8f37311b646a1b02c1" target="_blank" rel="external">建立 Azure Storage 連接字串</a></span></span></span></p>
<h2 id="建立_Container">建立 Container</h2><hr>
<p>以 TDD 方式使用 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a>。</p>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/325d35d15c8f6b0c31d0a6eb46f7ba24bacdc0dd" target="_blank" rel="external">單元測試 : 建立 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Container</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 5 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 <code>AzureBlobService</code> 建立待測試的 <code>$target</code> 物件。</p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Container</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>createContainer()</code>，傳入 Container 名稱。</li>
<li><strong>Assert</strong> : 期望建立 Container 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/10905247074a251dc711573af1287b11310a72f0" target="_blank" rel="external">建立 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立 Container</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * AzureBlobService constructor.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 <code>env()</code> 讀取剛剛在 <code>.env</code> 建立的 <code>AZURE_STORAGE</code> 連接字串。</p>
<p>由 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a> 所提供的 <code>ServiceBuilder::getInstance()</code> 的 <code>createBlobService()</code> 在本機建立 <code>$blobProxy</code> 物件，傳入 Azure Storage 連接字串。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 建立 Container</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>createContainer()</code> 建立 Container。</p>
<p>若 Container 建立失敗 (如重複建立 Container )，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob008.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，建立 Container 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob009.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 也能看到剛剛所建立的 Container。</p>
<h2 id="建立_Blob">建立 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/0b913cd4c94a98a84c4d7a362fcabdcfb62389fd" target="_blank" rel="external">單元測試 : 建立 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">        <span class="variable">$content</span> = fopen(<span class="keyword">__DIR__</span> . <span class="string">'/blob.txt'</span>, <span class="string">'r'</span>);</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">    <span class="variable">$content</span> = fopen(<span class="keyword">__DIR__</span> . <span class="string">'/blob.txt'</span>, <span class="string">'r'</span>);</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>createBlob()</code>，傳入 Container 名稱、Blob 名稱與上傳物件。</li>
<li><strong>Assert</strong> : 期望建立 Blob 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/c9345c5b913c082588e55fe080b2bf8f0c545d17" target="_blank" rel="external">建立 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@param</span> string $blobName</span><br><span class="line">     * <span class="doctag">@param</span> $content</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>, <span class="variable">$content</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;createBlockBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 建立 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@param</span> string $blobName</span><br><span class="line"> * <span class="doctag">@param</span> $content</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>, <span class="variable">$content</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;createBlockBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>createBlockBlob()</code> 建立 Blob。</p>
<p>若 Blob 建立失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob010.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，建立 Container 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob011.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 也能看到剛剛所建立的 Blob。</p>
<h2 id="顯示所有_Blob">顯示所有 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/43cf30577d4f981439b24c1c57be268fba270067" target="_blank" rel="external">單元測試 : 顯示所有 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;listAllBlobs(<span class="variable">$containerName</span>)-&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'name'</span> =&gt; <span class="string">'myblob'</span>, <span class="string">'url'</span>  =&gt; <span class="string">'https://laravel52blobstorage.blob.core.windows.net/mycontainer/myblob'</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;listAllBlobs(<span class="variable">$containerName</span>)-&gt;all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = [</span><br><span class="line">        [<span class="string">'name'</span> =&gt; <span class="string">'myblob'</span>, <span class="string">'url'</span>  =&gt; <span class="string">'https://laravel52blobstorage.blob.core.windows.net/mycontainer/myblob'</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>listAllBlobs()</code>，傳入 Container 名稱。</li>
<li><strong>Assert</strong> : 建立期望回傳的的陣列做 assertion。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/ec3b356bc8f55d5b1a8bf0b2d25f667aa126b257" target="_blank" rel="external">顯示所有 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 列出 Container 的所有 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listAllBlobs</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> ListBlobsResult $blobLists */</span></span><br><span class="line">            <span class="variable">$blobLists</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;listBlobs(<span class="variable">$containerName</span>);</span><br><span class="line">            <span class="variable">$blobs</span> = <span class="variable">$blobLists</span>-&gt;getBlobs();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> collect(<span class="variable">$blobs</span>)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(Blob <span class="variable">$blob</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    <span class="string">'name'</span> =&gt; <span class="variable">$blob</span>-&gt;getName(),</span><br><span class="line">                    <span class="string">'url'</span>  =&gt; <span class="variable">$blob</span>-&gt;getUrl(),</span><br><span class="line">                ];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> collect([]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 列出 Container 的所有 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@return</span> Collection</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listAllBlobs</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">Collection</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> ListBlobsResult $blobLists */</span></span><br><span class="line">        <span class="variable">$blobLists</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;listBlobs(<span class="variable">$containerName</span>);</span><br><span class="line">        <span class="variable">$blobs</span> = <span class="variable">$blobLists</span>-&gt;getBlobs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> collect(<span class="variable">$blobs</span>)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(Blob <span class="variable">$blob</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="variable">$blob</span>-&gt;getName(),</span><br><span class="line">                <span class="string">'url'</span>  =&gt; <span class="variable">$blob</span>-&gt;getUrl(),</span><br><span class="line">            ];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> collect([]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>listBlobs()</code> 取得 <code>$blobLists</code> 物件，在由其 <code>getBlobs()</code> 取得所有 Blob 陣列。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob012.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，顯示所有 Blob 成功。</p>
<h2 id="下載_Blob">下載 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/fe083b525cebe45853cf536f98a0520d1b7f9259" target="_blank" rel="external">單元測試 : 下載 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 下載<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;downloadBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 下載<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;downloadBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>downloadBlob()</code>，傳入 Container 名稱與 Blob 名稱。</li>
<li><strong>Assert</strong> : 期望下載 Blob 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/ee55a135ee2ec1b0e319707674c8f2cf79893790" target="_blank" rel="external">下載 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下載 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@param</span> string $blobName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> GetBlobResult $blob */</span></span><br><span class="line">            <span class="variable">$blob</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;getBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">            fpassthru(<span class="variable">$blob</span>-&gt;getContentStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 下載 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@param</span> string $blobName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> GetBlobResult $blob */</span></span><br><span class="line">        <span class="variable">$blob</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;getBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">        fpassthru(<span class="variable">$blob</span>-&gt;getContentStream());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>getBlob()</code> 取得 <code>$blob</code> 物件，在由其 <code>getContentStream()</code> 以串流資源形式取得 Blob。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob013.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，並顯示文字檔內容為 <code>Hello Azure Blob</code>。</p>
<h2 id="刪除_Blob">刪除 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/90c6bdd5fcddae4c9c31eb06bc2c704f7f22d555" target="_blank" rel="external">單元測試 : 刪除 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>deleteBlob()</code>，傳入 Container 名稱與 Blob 名稱。</li>
<li><strong>Assert</strong> : 期望刪除 Blob 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/1ca521fece2d59b672f2edfd536a48954d02befc" target="_blank" rel="external">刪除 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@param</span> string $blobName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@param</span> string $blobName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>deleteBlob()</code> 刪除 Blob。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob014.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，刪除 Blob 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob015.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 已經看不到任何 Blob。</p>
<h2 id="刪除_Container">刪除 Container</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/ffd04ac8890c76c1313c537e22391b0474422d89" target="_blank" rel="external">單元測試 : 刪除 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Container</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Container</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>deleteContainer()</code>，傳入 Container 名稱。</li>
<li><strong>Assert</strong> : 期望刪除 Container 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/9e49ce014487beb0b8df96e7e92019103c38eeb6" target="_blank" rel="external">刪除 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除 Container</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除 Container</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>deleteContainer()</code> 刪除 Container。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob016.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，刪除 Container 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob017.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 已經看不到任何 Container。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 提供了 Blob Storage，讓我們可以方便地儲存文字檔或二進位檔。</li>
<li>Azure 還提供了 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a>，使用了 Composer 的套件管理方式，只要簡單的 <code>composer require</code> 後即可立即使用，且不限於 Laravel，其他 PHP framework 也可以使用。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Microsoft Azure, <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a></li>
<li>Microsoft Azure, <a href="https://azure.microsoft.com/en-us/develop/php/" target="_blank" rel="external">PHP Develop Center</a></li>
<li>Robert McMurray, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-php-how-to-use-blobs/" target="_blank" rel="external">How to use blob storage from PHP</a></li>
<li>Robin Shahan, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-create-storage-account/#create-a-storage-account" target="_blank" rel="external">About Azure storage accounts</a></li>
<li>Tamra Myers, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-manage-access-to-resources/" target="_blank" rel="external">Manage anonymous read access to containers and blobs</a></li>
<li>Tom FitzMacken, <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-deployment-model/" target="_blank" rel="external">Azure Resource Manager vs. classic deployment: Understand deployment models and the state of your resources</a></li>
<li>Tamra Myers, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-redundancy/#locally-redundant-storage" target="_blank" rel="external">Azure Storage replication</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[利用 Azure SDK for PHP 使用 Azure 服務]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解決安裝 IDE Helper 造成 Laravel 在 Azure 部署失敗?]]></title>
    <link href="http://oomusou.io/azure/azure-ide-helper/"/>
    <id>http://oomusou.io/azure/azure-ide-helper/</id>
    <published>2016-08-06T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/barryvdh/laravel-ide-helper" target="_blank" rel="external">Laravel IDE Helper</a> 解決了 PhpStorm 無法對 Facade 做 code completion 的問題，，為使用 Laravel 與 PhpStorm 必裝的套件，但安裝方式的差異，可能造成 Laravel 在 Azure 無法部署成功。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>因為 IDE Helper 為<strong>開發用</strong>套件，在<a href="/phpstorm/phpstorm-ide-helper/">如何在 PhpStorm 活用 PHPDoc?</a> 一文中，建議大家將 IDE Helper 安裝在 <code>require-dev</code>，事實上開發用套件都應該使用這種方式安裝，不過 IDE Helper 在 Azure 部署時卻遇到困難。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>已經在本機順利安裝 IDE Helper 的 Laravel 專案，部署到 Azure 後，出現部署失敗的錯誤。</p>
<p><img src="/images/azure/azure-ide-helper/ide000.png" alt=""></p>
<p><strong><em>Settings -&gt; Publishing -&gt; Development source</em></strong></p>
<p><img src="/images/azure/azure-ide-helper/ide001.png" alt=""></p>
<p>部署出現 <code>Failed</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide002.png" alt=""></p>
<p>繼續往下按 <code>View Log</code>，按錯誤訊息。</p>
<p><img src="/images/azure/azure-ide-helper/ide003.png" alt=""></p>
<p>錯誤訊息出現在 <code>composer install</code> 之後，在執行 <code>php artisan optimize</code> 時，出現找不到 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code> 的錯誤。</p>
<h2 id="Root_Cause">Root Cause</h2><hr>
<p><img src="/images/azure/azure-ide-helper/ide008.png" alt=""></p>
<p>觀察 <code>composer.json</code>，會發現當 Azure 在執行完 <code>composer install</code> 後，會觸發 <code>post-install-cmd</code> 事件，並執行 <code>php artisan optimize</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide007.png" alt=""></p>
<p>一旦執行 <code>php artisan optimize</code>，就會執行 <code>config/app.php</code> 的所有 service provider，當然包括我們安裝 IDE Helper 新增的 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide004.png" alt=""></p>
<p>實際由 PhpStorm 的 Remote Host 連到 Azure，會發現 Laravel 專案只出現在 <code>repository</code> 目錄下，而沒在 <code>wwwroot</code> 目錄下，事實上 Laravel 整個專案應該放在 <code>wwwroot</code> 目錄下，這表示在 Azure 的部署並沒有成功。</p>
<p><img src="/images/azure/azure-ide-helper/ide005.png" alt=""></p>
<p>我們再比較本機的 <code>vendor</code> 目錄與 Azure 的 <code>repository</code> 下的 <code>vendor</code> 目錄，會發現 Azure 的 <code>vendor</code> 目錄並沒有 IDE Helper 所需的 <code>barryvdh</code> 目錄。</p>
<p>而 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code> 這個 service provider 正是放在 <code>vendor/barryvdh</code> 目錄下。</p>
<p><img src="/images/azure/azure-ide-helper/ide006.png" alt=""></p>
<p>打開本機的 <code>composer.json</code>，我們發現 <code>barryvdh/laravel-ide-helper</code> 是放在 <code>require-dev</code>，也就是說，Azure 在部署時，是下 <code>composer install --no-dev</code>，因此才沒將 <code>barryvdh</code> 安裝在 <code>vendor</code> 目錄下。</p>
<h2 id="Solution">Solution</h2><hr>
<p><img src="/images/azure/azure-ide-helper/ide009.png" alt=""></p>
<p>在 <code>composer.json</code> 中，將 <code>barryvdh/laravel-ide-helper&quot;: &quot;^2.2&quot;</code> 從 <code>require-dev</code> 改到 <code>require</code>。</p>
<p>雖然本機已經有 <code>vendor/barryvdh</code>，但別忘了 <code>composer install</code> 吃的是 <code>composer.lock</code>，所以我們必須重新執行 <code>composer update</code> 來更新 <code>composer.lock</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide010.png" alt=""></p>
<p><code>composer update</code> 執行完後，會發現 <code>_ide_helper.php</code>、<code>composer.json</code> 與 <code>composer.lock</code> 三個檔案被變更，須重新寫入 git repository。</p>
<p>直接在 PhpStorm 的 <code>Version Control</code> 按 <code>Commit Changes</code> 即可。</p>
<p><img src="/images/azure/azure-ide-helper/ide011.png" alt=""></p>
<p>輸入 commit message 之後，直接按 <code>Commit and Push</code> 一併 push 到 GitHub。</p>
<p><img src="/images/azure/azure-ide-helper/ide012.png" alt=""></p>
<p>按 <code>Push</code> 直接送進 GitHub。</p>
<p><img src="/images/azure/azure-ide-helper/ide013.png" alt=""></p>
<p>上傳至 GitHub 成功。</p>
<p><img src="/images/azure/azure-ide-helper/ide014.png" alt=""></p>
<p>再次觀察 Azure 的部署訊息，這次就成功了。</p>
<p><img src="/images/azure/azure-ide-helper/ide015.png" alt=""></p>
<p>由 PhpStorm 的 Remote Host 去觀察 Azure，<code>wwwroot</code> 目錄下的確有完整的 Laravel 專案，表示 Azure 已經成功部署。</p>
<p><img src="/images/azure/azure-ide-helper/ide016.png" alt=""></p>
<p>再觀察 <code>vendor</code> 目錄的確多了 <code>barryvdh</code>，因此 <code>php artisan optimize</code> 時，可以順利找到 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 會自動下 <code>composer install --no-dev</code>，因此只會安裝 <code>require</code> 的套件，不會安裝 <code>requre-dev</code> 的套件。</li>
<li>開發用的套件，理論上安裝在 <code>require-dev</code> 即可，除非該套件會用到 service provider，就必須改安裝在 <code>require</code>，否則會造成 Azure 部署失敗。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureMySQL_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[將 IDE Helper 安裝在 require-dev 將造成 Azure 部署失敗]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Azure 使用 Laravel + MySQL?]]></title>
    <link href="http://oomusou.io/azure/azure-phpstorm-mysql/"/>
    <id>http://oomusou.io/azure/azure-phpstorm-mysql/</id>
    <published>2016-08-02T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>Azure 除了可以跑 PHP 與 Laravel 外，更可以跑我們喜愛的 MySQL 資料庫。本文將實際在 Azure 建立 MySQL 資料庫，透過 <code>.env</code> 的設定，讓 Laravel 可以連上 MySQL，並透過 PhpStorm 直接管理 Azure 雲端的 MySQL 資料庫。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>在 <a href="/azure/azure-phpstorm-deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure</a> 一文中，我們已經可以順利在 Azure 跑 PHP 7.0 與 Laravel，唯一就是 MySQL 還沒連上，本文將以前一篇為基礎，繼續設定 MySQL 部分。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p>請參考 <a href="/azure/azure-phpstorm-deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure</a>，將本機的 Laravel 專案部署到 Azure。</p>
<h2 id="在_Azure_建立_MySQL_資料庫">在 Azure 建立 MySQL 資料庫</h2><hr>
<p>登入 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>，在 Azure 建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql000.png" alt=""></p>
<p><strong><em>New -&gt; Data + Analytics</em></strong>，選擇 <code>See all</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql001.png" alt=""></p>
<p>在 <code>Data services</code> 下選擇 <code>More</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql002.png" alt=""></p>
<p>選擇 <code>ClearDB</code> 的 <code>MySQL Database</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql003.png" alt=""></p>
<p>按 <code>Create</code> 建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql004.png" alt=""></p>
<ul>
<li><strong>Database Name</strong> : 輸入資料庫名稱。</li>
<li><strong>Resource group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
<li><strong>Location</strong> : 選擇離我們最近的 <code>East Asia</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql005.png" alt=""></p>
<ul>
<li><strong>Pricing Tier</strong> : 選擇免費的 <code>Mercury</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql006.png" alt=""></p>
<ul>
<li><strong>Legal Terms</strong> : 確認是 <code>0.00 TWD/month</code>，按 <code>Purchase</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql007.png" alt=""></p>
<p>建議將 <code>Pin to dashboard</code> 打勾，方便我們管理。</p>
<p>按 <code>Create</code> 開始建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql008.png" alt=""></p>
<p>MySQL 資料庫建立完成，會顯示 <code>Healthy</code>。</p>
<h2 id="設定本機_-env">設定本機 .env</h2><hr>
<p>MySQL 資料庫建立完成後，馬上來測試資料庫是否建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql009.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Properties</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql010.png" alt=""></p>
<p>注意其 <code>HOSTNAME</code>、<code>PORT</code>、<code>USERNAME</code>、<code>PASSWORD</code> 與 <code>CONNECTION STRING</code> 欄位。</p>
<p>其中 <code>CONNECTION STRING</code> 的 <code>Database</code>，即為我們剛剛建立的資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql011.png" alt=""></p>
<p>將本機 <code>.env</code> 的設定與 Azure 的設定一致。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql012.png" alt=""></p>
<p>執行 <code>php artisan migrate</code>，若能成功執行 migration，表示 MySQL 資料庫已經順利建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql016.png" alt=""></p>
<p>執行 seeding，將預設資料寫入 Azure 的 MySQL 資料庫。</p>
<h2 id="設定_PhpStorm_Database">設定 PhpStorm Database</h2><hr>
<p>目前為止，我們已經將資料 seeding 到 Azure 的 MySQL，不過還無法確定資料是否真的已經寫入成功，因此要設定 PhpStorm 的 Database 工具連到 Azure 查看資料。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql013.png" alt=""></p>
<p>點選右側的 <code>Database</code>，按 <code>+</code> 新增資料庫連線。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql014.png" alt=""></p>
<p><strong><em>Data Source -&gt; MySQL</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql015.png" alt=""></p>
<p>將之前的 Azure 的 <code>Host</code>、<code>Database</code>、<code>User</code> 與 <code>Password</code> 設定填過來。</p>
<p>按 <code>Test Connection</code> 測試是否可連線成功。</p>
<p>若第一次在 PhpStorm 連接 MySQL，需安裝 MySQL 的 Java driver。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql017.png" alt=""></p>
<p>PhpStorm 的 Database 工具可以看到 Azure MySQL 上所有的 table，也能看到 <code>posts</code> 上剛剛 seeding 的三筆資料。</p>
<h2 id="設定_Azure_-env">設定 Azure .env</h2><p>資料已經上 Azure 的 MySQL了，不過在 Azure 上的 Laravel 還不認識我們剛剛建立的 MySQL 資料庫。</p>
<p>Laravel 雖然提供了 <code>.env</code>，可以設定些敏感資訊，如資料庫連線。但預設 <code>.gitignore</code> 有排除 <code>.env</code>，所以並沒有上 GitHub，因此也不會上 Azure。</p>
<p>我們須在 Azure 的 <code>Application settings</code> 設定資料庫連線資訊。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql019.png" alt=""></p>
<p>選擇我們的 Laravel Web App。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql020.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Application Settings</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql021.png" alt=""></p>
<p>建立 <code>DB_CONNECTION</code>、<code>DB_HOST</code>、<code>DB_DATABASE</code>、<code>DB_USERNAME</code> 與 <code>DB_PASSWORD</code> 這些 key，並將 <code>.env</code> 的這些值設定在這裡。</p>
<h2 id="在_Azure_執行_Laravel">在 Azure 執行 Laravel</h2><hr>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql018.png" alt=""></p>
<p>Azure 上的 Laravel 已經能順利讀取到 Azure 上的 MySQL 了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 雖然沒有原生支援 MySQL，但透過 ClearDB 所提供的 MySQL 服務，我們依然可以在 Azure 上使用 PHP + Laravel + MySQL。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureMySQL_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Cephas Lin, <a href="https://azure.microsoft.com/en-us/documentation/articles/store-php-create-mysql-database/" target="_blank" rel="external">Create and connect to a MySQL database in Azure</a></li>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+SQL+Database+in+PhpStorm" target="_blank" rel="external">Working with Windows Azure SQL Database in PhpStorm</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 Azure 一樣可以使用我們喜愛的 MySQL]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="MySQL" scheme="http://oomusou.io/tags/MySQL/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 部署 Laravel 到 Azure?]]></title>
    <link href="http://oomusou.io/azure/azure-phpstorm-deploy/"/>
    <id>http://oomusou.io/azure/azure-phpstorm-deploy/</id>
    <published>2016-08-01T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>Azure 是微軟的雲端平台，也可以跑 PHP 與 Laravel，本文將以 PhpStorm 為工具，與 GitHub 結合，將來程式有任何變更，只要 push 到 GitHub，就會自動更新到 Azure，還可透過 PhpStorm 內建的工具管理 Azure。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure000.png" alt=""></p>
<p>啟動 PhpStorm，選擇 <code>Create New Project</code> 建立新專案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure001.png" alt=""></p>
<ul>
<li><strong>專案類型</strong> :  <code>Composer Project</code>。</li>
<li><strong>Location</strong> : Laravel 專案路徑與專案名稱</li>
<li><strong>composer.phar</strong> : 選擇 <code>Use existing composer.phar</code>，輸入 <code>/usr/local/bin/composer</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>選擇 <code>Download composer.phar from getcomposer.org</code> 亦可，這種方式在 OS X 本機並不需要事先安裝 Composer，PhpStorm 會自動將 Composer 下載到目錄專案跟目錄下，唯此種方式安裝 package 將無法使用到 cache，必須從網路上下載，安裝時間較長，所以實務上建議使用 <code>Use existing composer.phar</code>。</span></span></span></li>
<li><strong>Filter packages</strong> : 輸入 <code>laravel/laravel</code>，此為 Laravel 專案的 package 名稱。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure002.png" alt=""></p>
<p>將畫面向下卷，還有其他設定。</p>
<ul>
<li><strong>Version to install</strong> : 選擇 Laravel 版本，<code>&lt;default&gt;</code> 為 Laravel 最新版本。</li>
<li><strong>Path to PHP executable</strong> : 指定 PHP 執行檔路徑，主要為了執行 Composer。</li>
<li><strong>Command line parameters</strong> : Composer 參數，輸入 <code>prefer-dist</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure003.png" alt=""></p>
<p>建立 Laravel 專案中，由於 Composer 需解析 package 相依性，需要一些時間。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve</span><br></pre></td></tr></table></figure>
<p><img src="/images/azure/azure-phpstorm-deploy/azure004.png" alt=""></p>
<p>執行 PHP 內建 Http Server。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure005.png" alt=""></p>
<p>Laravel 已經順利在 OS X 本機執行。</p>
<h2 id="建立_Local_Git_Repository">建立 Local Git Repository</h2><hr>
<p>實務上開發 Laravel 會搭配 Git 做版本控制，先在本機建立 local repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure006.png" alt=""></p>
<p><strong><em>VCS -&gt; Import ino Version Control -&gt; Create Git Repository</em></strong></p>
<p>建立 Git repository。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>相當於 <code>git init</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure007.png" alt=""></p>
<p>選擇 local repository 目錄，也就是目前專案目錄。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure008.png" alt=""></p>
<p>下方出現 <code>Version Control</code>，並顯示有檔案尚未受 Git 管理，按 <code>browse</code> 顯示檔案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure009.png" alt=""></p>
<p>選擇專案目錄，按 <code>+</code> (Add to VCS) 將檔案加入 stage。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>相當於 <code>git add .</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure010.png" alt=""></p>
<p>綠色檔案為加入 stage 的檔案，按 <code>VCS</code> (Commit Changes)。<br><img src="/images/azure/azure-phpstorm-deploy/azure011.png" alt=""></p>
<ul>
<li>不要選擇 <code>Perform code analysis</code>。</li>
<li><strong>Commit Message</strong> : Initial commit。</li>
</ul>
<p>按 <code>Commit</code> 寫檔案寫入 local repository。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>相當於 <code>git commit -m &quot;Initial commit&quot;</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure012.png" alt=""></p>
<p>Commit 成功後，下方會顯示 <code>xx files committed : initial commit</code>。</p>
<h2 id="建立_Remote_GitHub_Repository">建立 Remote GitHub Repository</h2><hr>
<p>將 local repository 上傳至 GitHub 建立 remote repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure017.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Version Control -&gt; GitHub</em></strong></p>
<p>設定 GitHub 帳號。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure013.png" alt=""></p>
<p><strong><em>VCS -&gt; Import into Version Control -&gt; Share Project on GitHub</em></strong></p>
<p>將專案發佈到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure014.png" alt=""></p>
<p>預設會使用專案名稱為 remote GitHub repository 名稱。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure015.png" alt=""></p>
<p>在 GitHub 建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure016.png" alt=""></p>
<p>在 GitHub 已經看到剛剛上傳的專案。</p>
<h2 id="建立_Azure_Web_App">建立 Azure Web App</h2><hr>
<p>之前都在 PhpStorm 操作，現在開始要在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 操作了。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure018.png" alt=""></p>
<p><strong><em>New -&gt; Web + Mobile -&gt; Web App</em></strong></p>
<p>在 Azure 建立 Web App。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure019.png" alt=""></p>
<ul>
<li><strong>App name</strong> : 將來可以使用網址 <code>https://appname.azurewebsites.net</code> 連過來。</li>
<li><strong>Resource Group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
</ul>
<p>按 <code>App Service plan/location</code> 繼續設定。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure020.png" alt=""></p>
<p>預設的 App Service plan 是在美國，並不適合我們，我們應該選離我們最近的主機，所以選擇 <code>Create New</code> 建立新的 App Service plan。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure021.png" alt=""></p>
<ul>
<li><strong>App Service plan</strong> : 替 App Service plan 選個名稱。</li>
<li><strong>Location</strong> : 選擇主機位置，離我們最近的是 <code>East Asia</code>，位在香港。</li>
<li><strong>Pricing tier</strong> : 預設為 <code>D1 Shared</code>，需要收費，由於我們只是測試用，可以選擇 <code>0</code> 元的方案。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure022.png" alt=""></p>
<p>預設只會顯示 <code>Recommended</code> 方案，按 <code>View all</code> 顯示全部方案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure023.png" alt=""></p>
<p>選擇 <code>0</code> 元的 <code>F1 Free</code> 方案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure024.png" alt=""></p>
<p>Pricing tier 改成 <code>F1 Free</code>，按 <code>OK</code> 繼續。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure025.png" alt=""></p>
<p>App Service plan/location 改成我們想要的 <code>Laravel (East Asia)</code>。</p>
<p>建議將 <code>Pin to dashboard</code> 打勾，方便我們管理。</p>
<p>按 <code>Create</code> 開始建立 Web App。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure026.png" alt=""></p>
<p>Azure 正在建立 Web App 中，需要一點時間。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure027.png" alt=""></p>
<p>Web App 建立完成，會顯示 <code>Running</code>。</p>
<h2 id="設定_PHP_版本">設定 PHP 版本</h2><hr>
<p>Web App 預設的版本為 PHP 5.4，無法執行 Laravel，必須另外設定。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure028.png" alt=""></p>
<p>選擇剛剛建立的 <code>Laravel52PhpStormAzure</code> Web App。</p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure029.png" alt=""></p>
<ul>
<li><strong>PHP version</strong> : 選擇 <code>5.6</code> 或 <code>7.0</code>。</li>
</ul>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="安裝_Composer">安裝 Composer</h2><hr>
<p>Laravel 預設的 <code>.gitignore</code> 有排除 <code>vendor</code> 目錄，使得上傳到 GitHub 不包含 <code>vendor</code> ，所以將來 Azure 從 GitHub 所抓下來的檔也沒有 <code>vendor</code> 目錄。</p>
<p>這使得 Azure 要自己下 <code>composer install</code> 安裝 <code>vendor</code> 下的 package，因此必須另外在 Azure 安裝 Composer。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure030.png" alt=""></p>
<p><strong><em>Tools -&gt; Develop -&gt; Extensions</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure031.png" alt=""></p>
<p>按 <code>Add</code> 新增 extension。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure032.png" alt=""></p>
<p>選 <code>Choose Extension</code> 與 <code>Composer</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure033.png" alt=""></p>
<p>成功安裝 Composer。</p>
<h2 id="設定_Deployment_Source">設定 Deployment Source</h2><hr>
<p>設定 Azure 從 GitHub 抓資料，只要有任何 push 到 GitHub，Azure 都會自動更新。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure034.png" alt=""></p>
<p><strong><em>Setting -&gt; Publishing -&gt; Deployment source</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure035.png" alt=""></p>
<p> <strong><em>Choose Source -&gt; GitHub</em></strong></p>
<p>Azure 支援多種 deployment source，本文以 GitHub 為例。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure036.png" alt=""></p>
<p>選擇 GitHub 上的 <code>project</code> 與 <code>branch</code>。</p>
<p>按 <code>OK</code> 後，開始第一次從 GitHub 部署到 Azure。</p>
<p>由於第一次部署，<code>composer install</code> 要重新安裝 <code>vendor</code> 目錄，需要一點時間。</p>
<h2 id="設定_Remote_Host">設定 Remote Host</h2><hr>
<p>設定 Web App 一定得設定虛擬目錄，但是之前的部署皆由 Azure 自動完成，到底 Azure 將我們的專案下載到什麼目錄下呢?</p>
<p>讓我們再回到 PhpStorm。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure037.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Build, Execution Development -&gt; Deployment</em></strong></p>
<p>按 <code>+</code> 新增。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure038.png" alt=""></p>
<p>輸入自訂 server 名稱，選擇 type 為 <code>FTP</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure039.png" alt=""></p>
<p>需要輸入 <code>FTP host</code>、<code>User name</code> 與 <code>Web server root url</code>。</p>
<p>但此時我們還不知道該輸入什麼。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure040.png" alt=""></p>
<p>回到 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>。</p>
<p><strong><em>Settings -&gt; General -&gt; Properties</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure044.png" alt=""></p>
<ul>
<li><code>URL</code> 為 <code>Web server root url</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure041.png" alt=""></p>
<ul>
<li><code>FTP/DEPLOYMENT USER</code> 為 <code>User name</code>。</li>
<li><code>FTP HOST NAME</code> 為 <code>FTP host</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure042.png" alt=""></p>
<p>再回到 PhpStorm，將 <code>FTP host</code>、<code>User name</code> 與 <code>Web server root url</code> 補上。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  FTP host 不包含 <strong>ftp://</strong></div>
<p><img src="/images/azure/azure-phpstorm-deploy/azure043.png" alt=""></p>
<p><strong><em>Tools -&gt; Deployment -&gt; Browse Remote Host</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure045.png" alt=""></p>
<p>由 <code>Remote Host</code> 視窗，我們發現 Laravel 專案是放在 <code>site/wwwroot</code> 底下，所以 virtual root 應該設定在 <code>site/wwwroot/public</code>。</p>
<h2 id="設定_Virtual_Root">設定 Virtual Root</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure046.png" alt=""></p>
<p>再回到 <a href="http://protal.azure.com" target="_blank" rel="external">Azure portal</a>。</p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure047.png" alt=""></p>
<p>在 <code>Virtual application and directories</code> 下，將 virtual root 改成 <code>site\wwwroot\public</code>。</p>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="設定_-env">設定 .env</h2><hr>
<p>Laravel 提供了 <code>.env</code>，可以設定些敏感資訊，如資料庫連線。預設 <code>.gitignore</code>有排除 <code>.env</code>，所以並沒有上 GitHub，因此也不會上 Azure。</p>
<p>但 <code>.env</code> 的 <code>APP_KEY</code> 又是 Laravel 執行時所必要資訊，必須加以補上。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure046.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure048.png" alt=""></p>
<p>將本機的 <code>.env</code> 的 <code>APP_KEY</code> 內容加以複製。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure049.png" alt=""></p>
<p>在 <code>App settings</code> 下新增 <code>APP_KEY</code>，將 <code>.env</code> 的 <code>APP_KEY</code> 值貼上。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>實務上 <code>.env</code> 的設定，都可以改設定在 Azure 的 <code>App settings</code>。</span></span></span></p>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="第一次在_Azure_執行_Laravel">第一次在 Azure 執行 Laravel</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure050.png" alt=""></p>
<p>點擊 <code>URL</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure051.png" alt=""></p>
<p>在 Azure 的網址上正確執行 Laravel。</p>
<h2 id="修改並_Push_到_GitHub">修改並 Push 到 GitHub</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure052.png" alt=""></p>
<p>將 <code>welcome.blade.php</code> 加以修改，由 <code>Laravel 5</code> 改成 <code>Hello Laravel</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure053.png" alt=""></p>
<p>點擊下方的 <code>Version control</code> 標籤，按 <code>VCS</code> 將此次變更加以 commit。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure054.png" alt=""></p>
<p>填入 commit message 後，按 <code>Commit and Push</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure055.png" alt=""></p>
<p>按 <code>Push</code> 將直接 push 到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure056.png" alt=""></p>
<p>Push 到 GitHub 成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure057.png" alt=""></p>
<p>Azure 會自動從 GitHub 更新。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文以 GitHub 為例，實務上你可以搭配你習慣的版本控制系統。</li>
<li>透過 <a href="http://protal.azure.com" target="_blank" rel="external">Azure portal</a> 與 PhpStorm，您不需要下任何一行指令，就可以經鬆的將 Laravel 部署到 Azure。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzure_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Cephas Lin, <a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-web-php-get-started/" target="_blank" rel="external">Create, configure, and deploy a PHP web app to Azure</a></li>
<li>Robert McMurray, <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-php-configure/" target="_blank" rel="external">Configure PHP in Azure App Service Web Apps</a></li>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+from+within+PhpStorm" target="_blank" rel="external">Working with Windows Azure from within PhpStorm</a></li>
<li>KevinAtStout, <a href="https://www.youtube.com/watch?v=48moauj0KtE" target="_blank" rel="external">Connecting PhpStorm to Your Azure Web Server</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用有效率的工具部署 Laravel]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://oomusou.io/tags/GitHub/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Code Generation?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-code-generation/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-code-generation/</id>
    <published>2016-07-28T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>實務上開發專案時，有一些程式碼會不斷的出現，這時可靠 PhpStorm 的 Code Generation 幫我們產生這些 code snippet，除此之外，我們也可以將自己的 code snippet 加入 Live Template，可加快發開速度，並減少 typo。<br><a id="more"></a></p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="Namespace">Namespace</h2><hr>
<p>Laravel 5 的 <code>app</code> 目錄下都遵循 PSR-4，也就是每個在 <code>app</code> 目錄下的 class 都要有 namespace，且 Laravel 與 package 都有自己的 namespace，實務上我們不可能記得了這麼長的 namespace，Code Generation 可以幫我們自動引入相對應的 namespace，若 namespace 名稱相同，會讓我們用選的。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen009.png" alt=""></p>
<p><code>return</code> type 為 <code>Collection</code>，這是 Laravel 擴充的型別，輸入 <code>Col</code> 之後，Code Completion 會顯示 <code>Collection</code>，後面為其完整的 namespace。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen010.png" alt=""></p>
<p>Code Generation 自動幫我們 <code>use</code> 了正確的 namespace，不用我們操心。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen011.png" alt=""></p>
<p><code>Post</code> 出現反白，Code Inspection 抱怨找不到 <code>Post</code> class。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen012.png" alt=""></p>
<p>將滑鼠游標放在反白的 <code>Post</code> 上，按熱鍵 &#8997; + &#8617;，選擇 <code>Import class</code>。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/e9e14ebc547c7a805d78b4c880c6112172aaa31e" target="_blank" rel="external">PostRepository 自動 use namespace</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen013.png" alt=""></p>
<p>Code Generation 自動幫我們 <code>use</code> 了 model 的 namespace，不用我們操心。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen014.png" alt=""></p>
<p>實務上我們常常只會維護程式碼，但不會去維護 namespace，造成沒用到的 namespace 越來越多。</p>
<p>如我們將 <code>return Post::all()</code> 刪除後，因為沒使用到 <code>Post</code>，所以在 PhpStorm 的 <code>use App\Post</code> 會反灰警告你此 namspace 目前沒人使用。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/79745623c4cbc82c7759e30d4cb8bdcda4cc8890" target="_blank" rel="external">PostRepository 自動刪除沒用的 namespace</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen015.png" alt=""></p>
<p>按熱鍵 &#8963; + &#8997; + O，PhpStorm 會自動幫你將沒用到的 namespace 刪除。</p>
<h2 id="Constructor">Constructor</h2><hr>
<p>使用<strong>依賴注入</strong>後，必須建立 constructor 並注入相依物件，在每天的開發過程中需要不斷發生，Code Generation 可以幫我們自動完成 constructor injection。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen000.png" alt=""></p>
<p>按熱鍵 &#8963; + N，出現 <code>Generate</code> 選單，選擇 <code>Constructor...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen001.png" alt=""></p>
<p>在 constructor 參數列輸入要依賴注入的 class 名稱，輸入前幾個字母即可，Code Completion 會啟動讓你挑選 class 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen002.png" alt=""></p>
<p>Code Generation 自動幫我們 <code>use</code> 了 <code>PostRepository</code> 的 namespace。</p>
<p>輸入 <code>$</code>，Code Completion 會自動顯示建議的參數名稱，選擇你喜歡的命名方式。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen003.png" alt=""></p>
<p>Code Inspection 會出現警告，因為還沒產生 constructor 的 PHPDoc。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen004.png" alt=""></p>
<p>按熱鍵 &#8997; + &#8617;，選擇 <code>Update PHPDoc Comment</code>，由 PhpStorm 來幫我們產生 PHPDoc。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen005.png" alt=""></p>
<p>PhpStorm 自動幫我們產生 PHPDoc。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen006.png" alt=""></p>
<p>繼續按熱鍵 &#8997; + &#8617;，選擇 <code>Initialize fields</code>，由 PhpStorm 來幫我們產生其他程式碼。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen007.png" alt=""></p>
<p>選擇要由 Code Generation 要產生 field 的程式碼。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/blob/master/app/Services/PostService.php" target="_blank" rel="external">新增 PostService</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen008.png" alt=""></p>
<p>Code Generation 一氣呵成幫我們產生了 field，在 constructor 產生了指定 field 相對應的程式碼，另外也 <code>use</code> 相對應的 namespace。</p>
<h2 id="Getter/Setter">Getter/Setter</h2><hr>
<p>實務上常常需要對 private field 加上 getter 與 setter，如<strong>重構</strong>的 <strong>Self Encapculate Field</strong> 也會用到，Code Generation 可以幫我們自動產生 getter 與 setter。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen016.png" alt=""></p>
<p>新建立一個 <code>$postId</code> field，按熱鍵 &#8997; + &#8617;，會出現各種 getter 與 setter 產生方式。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/d4da6261ee4bed2d0bf916d6ffd22b1c5c364237" target="_blank" rel="external">支援 PHP 7 type hint 與 return type 的 getter 與 setter</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen017.png" alt=""></p>
<p>若選擇 <code>Add getter and setter</code>，Code Generation 會幫我們自動產生支援 PHP 7 type hint 與 return type 的 getter 與 setter。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/d27d4e15a740666c9ad0f1be71048c91970da567" target="_blank" rel="external">支援 fluent setter</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen018.png" alt=""></p>
<p>若選擇 <code>Add fluent setter</code>，Code Generation 甚至會幫我們自動產生 fluent 風格的 setter。</p>
<h2 id="Implement_Method">Implement Method</h2><hr>
<p>在物件導向中，實踐抽象化最重要的就是 interface，所以常常有 implement interface 的需求，Code Generation 提供兩種方式讓我們快速實作 interface。</p>
<p><strong>SMSInterface.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/42fcc908afef8c8d937ff84d1fd1ae981e882b30" target="_blank" rel="external">新增 SMSInterface</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen019.png" alt=""></p>
<p>定義了 <code>SMSInterface</code>，準備對簡訊的發送加以抽象化。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen020.png" alt=""></p>
<p>建立了 <code>AzureSMSService</code>，實作 <code>SMSInterface</code>，Code Inspection 馬上提出 <code>尚未實作 SMSInterface</code> 警告。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen021.png" alt=""></p>
<p>按熱鍵 &#8997; + &#8617;，選擇 <code>Add method stubs</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen022.png" alt=""></p>
<p>Code Generation 會自動幫我們根據 interface 產生了 method 框架，連 PHPDoc 也會幫我們產生。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen023.png" alt=""></p>
<p>另外一種方式，按熱鍵 &#8963; + I，出現 <code>Choose methods to implement</code> 視窗，選擇你要 implement 的 method。</p>
<p><strong>AzureSMSService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/9db85e766750a619ba89ce75987b3d3d718f0503" target="_blank" rel="external">自動實現 interface 的 method</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen022.png" alt=""></p>
<h2 id="Override_Method">Override Method</h2><hr>
<p>繼承是實現物件導向抽象化的另一種方式，當子類別可 override 父類別的 method。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen024.png" alt=""></p>
<p><code>AzurePostService</code> 繼承了 <code>PostService</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen025.png" alt=""></p>
<p>若我們想 override 父類別 <code>PostService</code> 的 <code>showTitle()</code>，可按熱鍵 &#8963; + O，出現 <code>Choose method to override</code> 視窗，選擇你要 override 的 method。</p>
<p><strong>AzurePostService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/0766384172f9df83539dfb17600e401b2ff96686" target="_blank" rel="external">自動複寫 class 的 method</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen026.png" alt=""></p>
<p>Code Generation 會自動幫我們根據父類別產生 method 框架，連 PHPDoc 也會幫我們產生。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  AzurePostService 去繼承 PostService 可能不是實務上使用繼承的一個好例子，這裡只是為了示範 Code Generation 的功能，實務上應該為了抽象化的多型來使用繼承，並遵守 SOLID 原則的<strong>里氏替換</strong>原則，而不是為了 code reuse 去使用繼承。</div>
<h2 id="Postfix_Completion">Postfix Completion</h2><hr>
<p>很羨慕 fluent API 的好用嗎? Postfix Completion 讓我們可以類似 fluent API 的方式寫 PHP。</p>
<h3 id="not">not</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen039.png" alt=""></p>
<p>輸入 <code>$title.not</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen040.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>!</code> 區塊。</p>
<h3 id="par">par</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen041.png" alt=""></p>
<p>輸入 <code>$title.par</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen042.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>( )</code> 區塊。</p>
<h3 id="if">if</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen029.png" alt=""></p>
<p>輸入 <code>$title.if</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen030.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if ( )</code> 區塊。</p>
<h3 id="else">else</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen031.png" alt=""></p>
<p>輸入 <code>$title.else</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen032.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if (! )</code> 區塊。</p>
<h3 id="fe">fe</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen033.png" alt=""></p>
<p>輸入 <code>$title.fe</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen034.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>foreach( )</code> 區塊。</p>
<h3 id="null">null</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen035.png" alt=""></p>
<p>輸入 <code>$title.null</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen036.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if ( === null)</code> 區塊。</p>
<h3 id="nn">nn</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen037.png" alt=""></p>
<p>輸入 <code>$title.nn</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen038.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if ( !== null)</code> 區塊。</p>
<h3 id="return">return</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen043.png" alt=""></p>
<p>輸入 <code>$title.return</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen044.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>return</code>。</p>
<h3 id="echo">echo</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen027.png" alt=""></p>
<p>輸入 <code>$title.echo</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen028.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>echo $title;</code>。</p>
<h3 id="var_dump">var_dump</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen045.png" alt=""></p>
<p>輸入 <code>$title.var_dump</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen046.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>var_dump()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen047.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; General -&gt; Postfix Completion</em></strong></p>
<p>在 <strong><em>Preferences</em></strong> 設定底下，可以看到所有 PhpStorm 支援的 Postfix Completion，包含 JavaScript 與 PHP。</p>
<p>可惜 Postfix Completion 無法擴充，就只能用 PhpStorm 所提供的 postfix。</p>
<h2 id="Live_Template">Live Template</h2><hr>
<p>除了 Postfix Completion 外，PhpStorm 另外提供 Live Template，這是可以自行擴充的。</p>
<h3 id="fore">fore</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen049.png" alt=""></p>
<p>輸入 <code>fore</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen050.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>foreach( )</code> 區塊。</p>
<h3 id="forek">forek</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen051.png" alt=""></p>
<p>輸入 <code>forek</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen052.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>foreach( )</code> 區塊，並包含 key 與 value。</p>
<h3 id="thr">thr</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen053.png" alt=""></p>
<p>輸入 <code>thr</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen054.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>throw new</code> 區塊。</p>
<h3 id="prif">prif</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen055.png" alt=""></p>
<p>輸入 <code>prif</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen056.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>private function</code> 區塊。</p>
<h3 id="prof">prof</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen057.png" alt=""></p>
<p>輸入 <code>prof</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen058.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>protected function</code> 區塊。</p>
<h3 id="pubf">pubf</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen059.png" alt=""></p>
<p>輸入 <code>pubf</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen060.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>public function</code> 區塊。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen048.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; Live Templates</em></strong></p>
<p>在 <strong><em>Preferences</em></strong> 設定底下，可以看到所有 PhpStorm 支援的 Live Template，還包含各種其通語言，甚至包含 Angular 2。</p>
<h2 id="自訂_Live_Template">自訂 Live Template</h2><hr>
<p>你也可以自己將常用的 code snippet，存成自己的 Live Template。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen061.png" alt=""></p>
<p>如在寫單元測試時，<code>$this-&gt;assertEquals()</code> 常常使用，所以我們想將它存成 Live Template。</p>
<p>選擇你的 code snippet，<strong><em>Tools-&gt; Save as Live Template</em></strong>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen062.png" alt=""></p>
<p>輸入你自己的想要的縮寫，並在滑鼠游標停止處加上 <code>$END$</code>，將來 PhpStorm 會將游標停在此方便你輸入。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen063.png" alt=""></p>
<p>輸入 <code>pubf</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen064.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>$this-&gt;assertEquals()</code>，並將游標放在 <code>( )</code> 中，方便你後續輸入。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Post Completion 無法自行擴充，不過 Live Template 可以自行擴充。</li>
<li>Post Completion 與 Live Template 有些是重複的，可視需求決定用哪一種，只要能提高開發效率即可。</li>
<li>要善用工具改善開發速度，將時間花在真正需要的地方，Code Generation 讓我們可以打更少的字， 還可以避免 typo。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/generating-code.html" target="_blank" rel="external">Generating Code</a><br>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/live-templates.html" target="_blank" rel="external">Using Postfix Template</a><br>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/live-templates.html" target="_blank" rel="external">Live Template</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓我們打更少的字加快開發速度]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Code Completion?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-code-completion/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-code-completion/</id>
    <published>2016-07-25T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>PHP 進入了物件導向與 framework 時代之後，出現了大量的 namespace、class、interface 與 method，基本上這些東西已經很難用記憶的方式來寫程式，必須靠工具輔助。PhpStorm 的 Code Completion 幫我們處理了大部分的東西，讓我們只要用選的就可以開發程式，一來開發速度變快，二來也可以減少 typo，是 modern PHP 的關鍵。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="Basic_Code_Completion">Basic Code Completion</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code004.png" alt=""></p>
<p>當任何地方需要使用 Code Completion 時，就可以按熱鍵 &#8963; + &#9251;。</p>
<p>如 constructor 要依賴注入時，不知道要注入的 class 名稱，可以按熱鍵 &#8963; + &#9251;，Code Completion 會列出目前 scope 可用的 class 名稱讓你挑選。</p>
<h2 id="Smart_Type_Code_Completion">Smart Type Code Completion</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code005.png" alt=""></p>
<p>當任何地方需要使用 Code Completion 時，且希望 Code Completion 能根據型別自動選擇適當的變數，就可以按熱鍵 &#8963; + &#8679; + &#9251;。</p>
<p>如 <code>getTitle()</code> 需要輸入變數時，不知道要輸入的變數名稱，可以按熱鍵 &#8963; + &#8679; + &#9251;，Smart Type Code Completion 會根據 <code>getType()</code> 的 scalar type hint 或 PHPDoc 的 <code>@param</code> 列出目前 scope 最適合的變數讓你挑選。</p>
<h2 id="Class">Class</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code006.png" alt=""></p>
<p>一般我們都會取將物件變數名稱以 class 名稱的 camelCase 命名，當 <code>new</code> 時，Code Completion 會自動依照變數名稱抓到 class 名稱讓你選擇。</p>
<h2 id="Field">Field</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code007.png" alt=""></p>
<ul>
<li>若是一般 class，Code Completion 可以直接抓到 public field。</li>
<li>若是 model，則必須透過 IDE Helper 幫 model 加上 PHPDoc 註解，Code Completion 才能抓到。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 IDE Helper 的安裝與執行，詳細請參考<a href="/phpstorm/phpstorm-ide-helper/">如何在 PhpStorm 活用 PHPDoc?</a></span></span></span></li>
</ul>
<h2 id="Method">Method</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code000.png" alt=""></p>
<p>PhpStorm 2016.2 之前的 Code Completion，讓你選擇可以選擇 method，並提供參數資訊，老實說這樣已經很好用了。</p>
<p><img src="/images/phpstorm/phpstorm-code-completion/code001.png" alt=""></p>
<p>PhpStorm 2016.2 對於參數的 Code Completion 做了更強的支援，不過預設並沒有啟動。</p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; General -&gt; Smart Keys</em></strong></p>
<ul>
<li>將 <code>Enable smart function parameters completion</code> 打勾。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-code-completion/code002.png" alt=""></p>
<p>以後選擇 method 後，PhpStorm 還會幫你將原 method 的參數名稱複製過來，讓你可以更清楚要填什麼參數。</p>
<p>除此之外，若你使用的 PHP 7 的 type hint，或使用 PHPDoc 的 <code>@param</code> 描述參數型別，PhpStorm 會自動將相同型別的參數列在前面讓你挑選。</p>
<p><img src="/images/phpstorm/phpstorm-code-completion/code003.png" alt=""></p>
<p>按 enter 選擇了變數後，PhpStorm 會自動跳到下一個參數，也讓你用選的。</p>
<h2 id="Collection">Collection</h2><hr>
<p>Collection 並非 PHP 原生型別，是由 Laravel 所擴充，由於其實踐了 <code>ArrayAccess</code> 、 <code>Countable</code> 與 <code>IteratorAggregate</code> interface，因此 <code>Collection</code> 使用起來很像 array，若要描述 <code>Collection</code> 元素的型別，可搭配 PHPDoc。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/33f673dcbde4a935e04364c4ce4d064c9371a3cc" target="_blank" rel="external">PostRepository 新增 getAllPosts()</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code008.png" alt=""></p>
<p><code>getAllPosts()</code> 回傳的是 <code>Collection</code> 型別，若由 PhpStorm 的熱鍵 &#8997; + &#8617;，只會有 <code>@return Collection</code>，如此 <code>foreach</code> 時將無法顯示其元素的 field 與 method，必須加上 <code>|Post[]</code>，表示回傳值除了是 <code>Collection</code> 外，也是 <code>Post</code> 型別的 array。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/70964d9bf2013ebc4b092f0f7699d42f40b26568" target="_blank" rel="external">PostService 新增 showAllPosts()</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code009.png" alt=""></p>
<p>如此在 <code>foreach</code> 時，就可以顯示 <code>$post</code> 的屬性 <code>title</code>。</p>
<h2 id="Service_Container">Service Container</h2><hr>
<p><strong>PostServiceUnitTest.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/3b9d185307e4a64258fd8790439b820b44766931" target="_blank" rel="external">PostServiceUnitTest 使用 app::make()</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code010.png" alt=""></p>
<p>使用 <code>App::make()</code> 或 <code>app()</code> 透過 service container 建立物件時，PhpStorm 也可以抓到該物件的 method。</p>
<h2 id="Controller">Controller</h2><hr>
<p><strong>routes.php</strong><br><img src="/images/phpstorm/phpstorm-code-completion/code011.png" alt=""></p>
<p>在 <code>routes.php</code> 的 <code>uses</code>，可以抓到 controller 與其 method。</p>
<h2 id="Route">Route</h2><hr>
<p><strong>index.blade.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/988652b299d7bb6f2e17e91ca175b58e5f7cb325" target="_blank" rel="external">Blade 有 route 別名</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code012.png" alt=""></p>
<p>Blade 的 <code>route()</code> 可以抓到 <code>routes.php</code> 所定義的 route 別名。</p>
<h2 id="View">View</h2><hr>
<p><strong>PostController.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/ee4f0fc1673c491e176bcf5858ce35afee38e465" target="_blank" rel="external">view() 可抓到 view</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code013.png" alt=""></p>
<p>在 controller 內的 <code>return view()</code> 可以抓到 view 的名稱。</p>
<h2 id="config::get()">config::get()</h2><hr>
<p><strong>PostController.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/a6efc5f5bba41a79eab09abeeb7384c808d06653" target="_blank" rel="external">Config::get() 可抓到設定</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code014.png" alt=""></p>
<p><code>Config::get()</code> 可以抓到 array 的 key 值.</p>
<h2 id="DIR"><strong>DIR</strong></h2><hr>
<p><strong>PostServiceUnitTest.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/3227a9b15a1f441433758becf7e294bbab8a7f4e" target="_blank" rel="external"><strong>DIR</strong> 可抓到目前目錄的檔案</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code015.png" alt=""></p>
<p><code>__DIR__</code> 可抓到目前目錄的檔案，這在寫測試時特別好用，可以將測試案例檔案(如 Excel 檔)放在目前單元測試下，<code>__DIR</code> 會抓到 Excel 檔。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>寫程式重點不是在記憶力，而是在抽象化思考，Code Completion 讓我們從 namespace、class 與 method 解放，將注意力放在解決需求上。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Gary Hockin, <a href="https://blog.jetbrains.com/phpstorm/2016/07/parameter-code-completion-in-phpstorm-2016-2" target="_blank" rel="external">PhpStorm Code Completion in PhpStorm 2016.2</a><br>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/auto-completing-code.html" target="_blank" rel="external">Auto-Completing Code</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓我們忘記 Namespace，Class 與 Method]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Code Inspection?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-code-inspection/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-code-inspection/</id>
    <published>2016-07-24T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>PHP 不需編譯，只要存檔就可執行，優點是很方便，缺點是很多程式語法上的錯誤必須在瀏覽器執行才能發現。PhpStorm 的 Code Inspection 就相當於編譯器，在程式開發階段就可檢查語法上的錯誤，再搭配單元測試檢查邏輯上的錯誤，如此雙重保障，就能提早發現錯誤加以解決，降低除錯成本。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>初學者在使用 PhpStorm 時，第一個不習慣的就是原來在 Sublime Text 很漂亮的程式碼，在 PhpStorm 打開了以後，平白無故多了很多警告，覺得很礙眼。</p>
<p><strong>Authenticate.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/350f66fde6c4a532424670478cf2f5b72fed9ba9" target="_blank" rel="external">將 Authenticate.php 改成 use Auth</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect000.png" alt=""></p>
<p>與 Sublime Text 不同的是 :</p>
<ul>
<li>右上角多了 <span class="label label-warning">咖啡色</span> 的方塊 : 表示 Code Inspection 偵測到錯誤。</li>
<li>scroll bar 多了 <span class="label label-warning">咖啡色</span> 區塊 : 表示錯誤所在的相對位置。</li>
<li><code>Auth::guard()</code>多了反白警告 : 表示錯誤所在的實際位置。 </li>
</ul>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect001.png" alt=""></p>
<p>右上角方塊的顏色，表示各種不同的嚴重層級。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect002.png" alt=""></p>
<p>將滑鼠 hover 到 scroll bar 的顏色區塊上，會顯示錯誤訊息。</p>
<p>可用滑鼠直接點 scroll bar 的顏色區塊，快速跳到有錯誤的程式碼位置，或按熱鍵 F2 前進搜尋錯誤，&#8679; + F2 倒退搜尋錯誤。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect003.png" alt=""></p>
<p>將滑鼠游標放放到反白的 <code>Auth::guard()</code> 上，PhpStorm 顯示 <code>Method guard not found</code>。</p>
<p>主要是因為 <code>Auth</code> 為 Facade，執行上沒有問題，但是 Code Inspection 找不到。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect004.png" alt=""></p>
<p>將 namespace 引用改成 IDE Helper 所提供的 <code>Auth</code> 後，Code Inspection 就可以找到 <code>Auth::guard()</code> 了，右上角會出現 <span class="label label-success">綠色</span> 勾勾，表示通過 Code Inspection 檢查。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>關於使用 IDE Helper 解決 Code Inspection 警告的問題，詳細請參考<a href="/phpstorm/phpstorm-ide-helper/">如何在 PhpStorm 活用 PHPDoc?</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  實務上對於 Laravel 或 package 的程式碼，我不會要求需通過 Code Inspection 檢查，但自己寫的程式碼，都必須通過 Code Inspection 的 <span class="label label-success">綠色</span> 勾勾。</div>
<h2 id="調整_PhpStorm_檢查層級">調整 PhpStorm 檢查層級</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect005.png" alt=""></p>
<p>若你覺得 Code Inspection 檢查太嚴格，希望 PhpStorm 只幫你檢查 PHP 語法就好，可以按右下角的<strong>哨兵</strong>符號，將 Code Inspection level 調到 <code>Syntax</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect006.png" alt=""></p>
<p>調整完 Code Inspection level 後，不用改 <code>use Auth</code>，也可以達到右上角會出現 <span class="label label-success">綠色</span> 勾勾。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  實務上建議除非是 legacy code 真的不容易修正，否則不建議修改 Code Inspection level，畢竟 PhpStorm 所有的檢查都是有意義的，可以讓你及早發現淺在錯誤，避免實際在瀏覽器測試才發現錯誤的窘境。</div>
<h2 id="設定_Code_Inspection">設定 Code Inspection</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect007.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; Inspections</em></strong></p>
<p>假如你不想調整 Code Inspection level，只想將某個你認為不重要的警告拿掉，或降低層級，可以在 PhpStorm 的 preferences 設定。</p>
<p>如之前 <code>Auth::guard()</code> 的錯誤，你也可以直接在讓 <code>undefined method</code> 不要被檢查。</p>
<p>Code Inspection 所有的檢查規則都可以客製化，可以依照你的需求加以設定。</p>
<h2 id="常見_Code_Inspection">常見 Code Inspection</h2><hr>
<h3 id="使用未定義變數">使用未定義變數</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/3d187e1275e77b698b3d5487cc93e409a45511ae" target="_blank" rel="external">使用未定義變數</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect010.png" alt=""></p>
<p>直接使用一個未定義參數，Code Inspection 會加以警告。</p>
<h3 id="Namespace_不存在">Namespace 不存在</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/2855120534815ea7e14f174079a4512b30db5c2e" target="_blank" rel="external">Namespace 不存在</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect011.png" alt=""></p>
<p>Namespace 因為打錯，而引用了一個不存在的 namespace，Code Inspection 會加以警告。</p>
<h3 id="Class_不存在">Class 不存在</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/d73af1cd30f52375c62fcab8416c84f6c611397f" target="_blank" rel="external">Class 不存在</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect012.png" alt=""></p>
<p>依賴注入時 class 名稱打錯，注入了一個不存在的 class，Code Inspection 會加以警告。</p>
<h3 id="Field_不存在">Field 不存在</h3><p><strong>PostIDPO.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/d389f473081f69e088073a5daa9c5c9e26cf3b47" target="_blank" rel="external">重構成 Parameter Object</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect013.png" alt=""></p>
<p>將原 <code>showTitle()</code> 的 <code>$id</code> 與 <code>$default</code> 透過重構的 <code>Introduce to Parameter Object</code> 重構成 <code>PostIDPO</code> class。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/c7a50e8620653797d9041e406d51d2a21ee0e03b" target="_blank" rel="external">Field 不存在</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect014.png" alt=""></p>
<p><code>showTitle()</code> 改傳入 <code>PostIDPO</code> 物件。</p>
<p>若將 <code>id</code> 打錯成 <code>ip</code>，使用了一個不存在的 field，Code Inspection 會加以警告。</p>
<h3 id="Method_不存在">Method 不存在</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/4862ffd79ac52e74a245010760662932839fb68d" target="_blank" rel="external">Method 不存在</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect015.png" alt=""></p>
<p>若將 method 名稱打錯，呼叫一個物件不存在的 method，Code Inspection 會加以警告。</p>
<h3 id="參數型別檢查">參數型別檢查</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/blob/master/app/Services/PostService.php" target="_blank" rel="external">新增 PostService</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect008.png" alt=""></p>
<p>在 <code>showTitle()</code> 的參數與回傳值都使用了 PHP 7 的 scalar type hint。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/blob/master/tests/PostServiceTest.php" target="_blank" rel="external">新增 PostServiceTest</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect009.png" alt=""></p>
<p>若加上了 <code>declare(strict_type = 1);</code>，只要傳入的參數型別不對，Code Inspection 會提出警告。</p>
<h3 id="Case_忘了加_break">Case 忘了加 break</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/4c015e7c250e0db86916f15789ae216745554ecb" target="_blank" rel="external">Case 忘了加上 break</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect016.png" alt=""></p>
<p>PHP 語法上允許 <code>switch case</code> 不加上 <code>break</code> 的寫法，但大多時候是忘了加上 <code>break</code>，而造成邏輯上的錯誤，Code Inspection 會提出警告，可是需求決定是否該加上 <code>break</code>。</p>
<h3 id="沒有_PHPDoc">沒有 PHPDoc</h3><p><img src="/images/phpstorm/phpstorm-code-inspection/inspect017.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; Inspections -&gt; PHPDoc</em></strong></p>
<p>PhpStorm 預設並沒有將 <code>Missing PHPDoc comment</code> 打勾，但實務上建議將此選項打勾。</p>
<p>PHP 7 因為有完整 type hint 與 return type，所以 PHPDoc 重要性不如以往，但 PHP 7 之前，則必須靠 PHPDoc 描述型別，PhpStorm 的 Code Inspection 才能發揮威力，所以建議開啟。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect018.png" alt=""></p>
<p><code>showTitle()</code> 沒有寫 PHPDoc，Code Inspection 會提出警告。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect019.png" alt=""></p>
<p>要補上 PHPDoc 也很簡單，將滑鼠游標放在 method 名稱上，按熱鍵 &#8997; + &#8617;，選擇 <code>Generate PHPDoc Comment</code> 或 <code>Generate PHPDoc for function</code> 皆可。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/51b7adc049927b19bd87f25bf26116932b61abff" target="_blank" rel="external">加上 PHPDoc</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect020.png" alt=""></p>
<p>PhpStorm 會自動幫你加上 PHPDoc，只要再加上 method 功能的描述即可。</p>
<h2 id="執行_Code_Inpection">執行 Code Inpection</h2><hr>
<p>預設每個開啟的檔案都會自動執行 Code Inspection，此外你也可以自行選擇檔案，讓 Code Inspection 一次檢查多個檔案。</p>
<h3 id="一次檢查多個檔案">一次檢查多個檔案</h3><p><img src="/images/phpstorm/phpstorm-code-inspection/inspect021.png" alt=""></p>
<p>在 project windows 用 &#8984; 與滑鼠選擇多個檔案，按滑鼠右鍵，選擇 <code>Inspect Code...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect022.png" alt=""></p>
<p>選擇 <code>Selected files</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect023.png" alt=""></p>
<p>Code Inspection 最後會顯示有哪些檔案違反了哪些檢查規則。</p>
<h3 id="一次檢查整個專案">一次檢查整個專案</h3><p><img src="/images/phpstorm/phpstorm-code-inspection/inspect024.png" alt=""></p>
<p><strong><em>Code -&gt; Inspect Code…</em></strong></p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect025.png" alt=""></p>
<p>選擇 <code>Whole project</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect026.png" alt=""></p>
<p>Code Inspection 將整個專案做檢查，會檢查出很多警告與錯誤，可視需求決定是否該修正。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>為了使 Code Inspection 沒有出現任何警告，可能會對程式碼產生強迫症，不過提早發現淺在錯誤總是好事，可視自己需求決定是否修正，或者關閉 Code Inspection 某個檢查規則。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/code-inspection.html#phpCodeInspections" target="_blank" rel="external">Code Inspection</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓我們提早發現語法錯誤]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 的 Project Template 建立 Laravel 專案?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-project-template/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-project-template/</id>
    <published>2016-07-23T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>PhpStorm 2016.2 提供一個新功能，可以將專案打包成 project template，以後新建專案時，可以選擇此 template 直接重建專案，如常用的 package 與 codebase 可以先打包好，將來要建立新專案就很方便。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>我在寫部落格範例時，有些東西是必要的，如 IDE Helper，SQLite 環境，PHPUnit 單元測試環境，以前每次寫一個範例，就得重新安裝這些 package 與 codebase，很花時間，有了 project template之後，只要設定一次即可，以後部落格範例都可以套用此 project template，非常方便。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="建立_Project_Template">建立 Project Template</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template000.png" alt=""></p>
<p><strong><em>Tools -&gt;Save Project as Template</em></strong></p>
<p>任何你目前的 Laravel 專案，都可以存成 project template。</p>
<p><img src="/images/phpstorm/phpstorm-project-template/template001.png" alt=""></p>
<p>輸入 project template 名稱，不必與原來 project 名稱相同，只要你方便識別即可。</p>
<h2 id="建立新_Project">建立新 Project</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template002.png" alt=""></p>
<p>選擇 <code>Create New Project</code>。</p>
<p><img src="/images/phpstorm/phpstorm-project-template/template003.png" alt=""></p>
<p>選擇 <code>User-defined</code> 的 <code>Laravel52Blog</code>，這是我們剛剛所建立的 project template。</p>
<p>在 <code>Location</code> 輸入你的專案路徑。</p>
<h2 id="重建_Vendor_目錄">重建 Vendor 目錄</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template004.png" alt=""></p>
<p>如同從 GitHub 下載的 Laravel 專案一樣，<code>vendor</code> 目錄下是空的，你有兩種方法重建 <code>vendor</code> 目錄。</p>
<ul>
<li><strong>composer install</strong> : 根據 <code>composer.lock</code> 重建 <code>vendor</code> 目錄，所有 package 版本會與原 project template 完全一樣。</li>
<li><strong>composer update</strong> : 根據 <code>composer.json</code> 重建 <code>vendor</code> 目錄，所有 package 版本會升級成與原 project template 相容的版本。</li>
</ul>
<p>兩種方式都可以，端看你的需求而定，我的需求是想升級到 Laravel 最新的版本，所以下 <code>composer update</code>。</p>
<p><img src="/images/phpstorm/phpstorm-project-template/template005.png" alt=""></p>
<p><code>composer update</code> 執行完後，<code>vendor</code> 目錄已經補齊。</p>
<h2 id="設定_Excluded_Folders">設定 Excluded Folders</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template006.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Directories</em></strong></p>
<p>若你有設定 <code>Excluded Folders</code>，將所有目錄刪除。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若你由 PhpStorm 幫你建立 Laravel 專案，他會幫你設定 <code>Excluded Folders</code>，若自己由 Composer 建立 Laravel 專案，則不會有此設定。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-project-template/template007.png" alt=""></p>
<p>刪除完後，只留下 <code>Tests</code>、<code>Sources</code> 與 <code>Resource Root</code> 三個目錄設定。</p>
<h2 id="設定_PHP_7">設定 PHP 7</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template008.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP</em></strong></p>
<ul>
<li><strong>PHP language level</strong> : 設定為 <code>7</code>。</li>
<li><strong>Interpreter</strong> : 設定 PHP 7 interpreter 位置。</li>
</ul>
<h2 id="設定_PHPUnit">設定 PHPUnit</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template009.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; PHPUnit</em></strong></p>
<ul>
<li><strong>Use Composer autoloader</strong> : 選擇專案目錄下的 <code>vendor/autoload.php</code>。</li>
<li><strong>Default configuration file</strong> : 選擇專案根目錄下的 <code>phpunit.xml</code>。</li>
</ul>
<h2 id="單元測試">單元測試</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template010.png" alt=""></p>
<p>確認專案已經可以正常執行。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Project template 並不包含原專案的 git repository，也就是你必須重新建立一個新的 git local repository。</li>
<li>透過這種方式，建立新專案時將更為方便，直接套用你常用的 package 與 codebase。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormProjectTemplate_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[將常用的 Package 與 Codebase 打包成 Project Template]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Xdebug on Demand?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-xdebug-on-demand/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-xdebug-on-demand/</id>
    <published>2016-07-18T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>Xdebug 是 PhpStorm debug 的必備工具，但是啟動 Xdebug 又會使 Composer 變慢，實務上很兩難，這個問題在 PhpStorm 2016.2 得到完美解決，平時不用開啟 Xdebug，PhpStorm 會在需要 debug 時才自動啟動 Xdebug，不會影響 Composer 執行速度。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand000.png" alt=""></p>
<p>Composer 在某一個版本以後，只要在 <code>php.ini</code> 有啟動 Xdebug，就會出現以上黃色警告訊息。</p>
<p>主要是 Xdebug 會大幅影響 Composer 解析套件相依時的執行速度，因此不建議你開啟 Xdebug。</p>
<p>在之前並沒好的解法，除非你不使用 Xdebug，但 Xdebug 又是 PhpStorm 的大絕，也只好犧牲 Composer 了。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>MAMP PRO 3.5.2<br>PhpStorm 2016.2</p>
<h2 id="設定_Xdebug_On_Demand">設定 Xdebug On Demand</h2><hr>
<p>本文以 MAMP PRO 為例，在 PhpStorm 設定 Xdebug on Demand。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand001.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP </em></strong></p>
<ul>
<li><strong>PHP Language level</strong> : 選擇 <code>7</code>。</li>
<li><strong>Interpreter</strong> : 按 <code>...</code> 設定 PHP interpreter。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand002.png" alt=""></p>
<p>按 <code>+</code> 新增 PHP interpreter，因為以 MAMP PRO 為例，選擇 <code>Other Local...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand003.png" alt=""></p>
<ul>
<li><strong>Name</strong> : 輸入 <code>PHP 7</code>。</li>
<li><strong>PHP executable</strong> : 選擇 PHP interpreter 所在路徑，以 MAMP PRO 為例，其路徑為 <code>/Applications/MAMP/bin/php/php7.0.8/bin/php</code>。注意此時 <code>php.ini</code> 並沒有啟動 <code>xdebug.so</code>，所以顯示 <code>Debugger: Not installed</code>。</li>
<li><strong>Debugger extension</strong> : 選擇 <code>xdebug.so</code> 所在路徑，以 MAMP PRO 為例，其路徑為 <code>/Applications/MAMP/bin/php/php7.0.8/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so</code>。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand004.png" alt=""></p>
<p>設定好了之後，就可以選擇剛剛設定的 <code>PHP7</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand005.png" alt=""></p>
<p>在單元測試中設定中斷點，按熱鍵 &#8963; + &#8679; + D，程式碼依舊會在中斷點停止，所有變數也可以正常顯示。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand006.png" alt=""></p>
<p>由於沒有在 <code>php.ini</code> 啟動 <code>xdebug.so</code>，Composer 再也不會抱怨 Xdebug 已經啟動，可以全速執行。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Xdebug 與 Composer 一直是無解的問題，透過 PhpStorm 2016.2，我們終於可以兼顧 Xdebug 的便利與 Composer 的速度。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Gary Hockin, <a href="https://blog.jetbrains.com/phpstorm/2016/06/xdebug-on-demand-for-cli-php-scripts-in-phpstorm-2016-2-eap/" target="_blank" rel="external">Xdebug On Demand for CLI PHP Scripts in PhpStorm 2016.2</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[關閉 Xdebug 加速 Composer]]>
    
    </summary>
    
      <category term="MAMP" scheme="http://oomusou.io/tags/MAMP/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="Xdebug" scheme="http://oomusou.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Null Object 模式?]]></title>
    <link href="http://oomusou.io/dp/dp-nullobject/"/>
    <id>http://oomusou.io/dp/dp-nullobject/</id>
    <published>2016-07-15T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>當我們透過 Eloquent 對資料庫抓資料時，由於 <code>where()</code> 的條件可能撈不到資料，導致 <code>first()</code> 傳會 <code>null</code>，若再對 <code>null</code> 物件的欄位屬性做存取，會出現 <code>Trying to get property of non-object</code> 的錯誤訊息，當然有各種方法避開這個錯誤，但比較理想的方式是引入 <code>Null Object</code> 模式。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>實務上我們有個 <code>post</code> table，內有 <code>title</code>、<code>description</code> 與 <code>title</code> 三個欄位，根據需求，我們想要有個 <code>PostService</code> 有個 <code>showTitle()</code> 的 API，只要傳入 <code>post</code> table 的 <code>ID</code>，就會回傳該筆資料的 <code>title</code>。</p>
<p><strong> PostService.php </strong><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  PostRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示 title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getTitle(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>PostService</code> 的 <code>showTitle()</code>，我們會呼叫 <code>PostRepository</code> 的 <code>getTitle()</code> 傳回字串。</p>
<p><strong> PostRepository.php </strong><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳 post.title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>PostRepository</code> 的 <code>getTitle()</code>，我們會直接使用 Eloquent 的 <code>where()</code> 去抓資料，<code>get()</code> 回傳的是 <code>Collection</code>，然後再透過 <code>Collection</code> 的 <code>first()</code> 傳回第一筆 <code>Post</code> model，最後再抓 <code>Post</code> model 的 <code>title</code> 屬性。</p>
<p>目前這種寫法，若 <code>where()</code> 抓得到資料時就不會出錯，但若 <code>where()</code> 抓不到資料，<code>first()</code> 將會傳回 <code>null</code>，再存取其 <code>title</code> 屬性就會出現 <code>Trying to get property of non-object</code> 的錯誤，這是大家常見的錯誤訊息。</p>
<h2 id="常見解決方式">常見解決方式</h2><hr>
<h3 id="判斷_null">判斷 null</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$post</span> = Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">        -&gt;get()</span><br><span class="line">        -&gt;first();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$post</span> != <span class="keyword">null</span>)  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$post</span>-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'no title'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>first()</code> 可能傳回 <code>null</code>，那就在讀取 <code>title</code> 屬性前先判斷 <code>$post</code> 是否為 <code>null</code>，若不是 <code>null</code> 則傳回 <code>title</code>，若為 <code>null</code> 則傳回預設值。</p>
<h3 id="try_catch">try catch</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'no title'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然會出現 <code>Trying to get property of non-object</code> exception，就用 <code>try catch</code> 去攔，若有 exception 就傳回預設值。</p>
<p>這兩種解法雖然都可行，但有個致命傷，違反 <code>Tell, Don&#39;t Ask</code> 原則。</p>
<p>好的 API，應該只負責 tell，也就是告訴 API 我的需求是什麼，然後就傳回我要的資料，而不是 ask API 之後，呼叫端還要再做額外的判斷或加工。</p>
<p>因為只要呼叫端還需要判斷，就有可能因為忘記判斷而造成不可預期的錯誤，這就不是好的 API。</p>
<p>第一個方式必須使用 <code>if else</code> 判斷是否為 <code>null</code>，第二個方式還必須去 <code>try catch</code>，都不算是好的 API，比較理想的方式是只要 <code>return Post::whereId()-&gt;get()-&gt;first()-&gt;title</code> 一次就可以抓到想要的資料，不需要額外判斷。</p>
<h2 id="Null_Object_模式">Null Object 模式</h2><hr>
<blockquote><p>Replace the null value with the null object.</p>
<p>將 null 值替換成 null 物件。</p>
<footer><strong>Martin Fowler</strong><cite>&nbsp;- Refactoring Ch 9.7 Introduce Null Object</cite></footer></blockquote>
<p>Null Object 模式並非出自<a href="http://www.tenlong.com.tw/items/9572054112?item_id=997944" target="_blank" rel="external">設計模式</a>一書，而是出現在<a href="http://www.tenlong.com.tw/items/7115369097?item_id=1009173" target="_blank" rel="external">重構</a>的 Ch 9.7，教大家將 <code>null</code> 值重構成 <code>null</code> 物件，因為只要有 <code>null</code> 值，就必須去 <code>if</code> 判斷是否 <code>null</code>，甚至於去 <code>try catch</code>，這樣的 API 並不好用，而且只要忘記判斷就可能出錯。</p>
<p>什麼是 Null Object 呢? 剛剛會出錯，就是因為我們期望是一個 <code>Post</code> 物件，也有 <code>title</code> 屬性，但因為回傳 <code>null</code> 值，沒有 <code>title</code> 屬性才出錯，既然如此，假如我們也能傳回一個 <code>Post</code> 物件，也有 <code>title</code> 屬性，這樣就不會錯了，這就是 Null Object 概念。</p>
<p>至於 Null Object 的 <code>title</code> 屬性該存放什麼值呢? 這沒有一定的答案，完全看需求端定義，可能需求端認為若找不到資料，傳回空字串即可，也可能傳回<code>no title</code>即可，這些值就是 Null Object 的 <code>title</code> 屬性的值。</p>
<p>我們來將原來的程式碼重構成 Null Object 模式。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo/commit/99aea8c60702e4c1a6bf753689ea3139ad242e2b" target="_blank" rel="external">建立 PostService(使用 Null Object 模式)</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  PostRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示 title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@param</span> string $default</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showTitle</span><span class="params">(int <span class="variable">$id</span>, string <span class="variable">$default</span> = <span class="string">''</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getTitle(<span class="variable">$id</span>, <span class="variable">$default</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>PostService</code> 的 <code>showTitle()</code> 多了第二個參數 <code>$default</code>，預設值為空字串，若需求端想要有自己的預設值，如 <code>no title</code>，可自行傳入。</p>
<p>另外只要呼叫 <code>PostRepository</code> 的 <code>getFirstPost()</code> 即可，不用加入任何 <code>if</code> 判斷或 <code>try catch</code>。</p>
<p><strong> PostRepository.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo/commit/88660f71a28eb5360280b884ceab99641600d4b6" target="_blank" rel="external">建立 PostRepository(使用 Null Object 模式)</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳 post.title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@param</span> string $default</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>, string <span class="variable">$default</span> = <span class="string">''</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;first(<span class="keyword">null</span>, <span class="keyword">new</span> Post([<span class="string">'title'</span> =&gt; <span class="variable">$default</span>]))</span><br><span class="line">            -&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>Collection</code> 的 <code>first()</code> 第一個參數傳入 null，第二個參數傳入一個 <code>Post</code> model，也就是我們的 Null Object，至於 <code>title</code> 該如何定義，則由需求端傳入的參數 <code>$default</code> 決定。</p>
<p>這樣的 <code>first()</code> 寫法的意義為 : 若 <code>where()</code> 找得到資料，則 <code>first()</code> 依照正常方式傳回 <code>Post</code> 物件，若找不到資料，請傳回我們自己的 <code>new Post()</code>，也就是 Null Object。</p>
<p>為什麼 <code>first()</code> 的第一個參數為 <code>null</code> 呢? 在 Laravel 官網並沒有解釋，這要實際看 Laravel 的 source code。</p>
<p><strong> Collection.php </strong><br><figure class="highlight php"><figcaption><span>vendor/laravel/framework/src/illuminate/Support/Collection.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Get the first item from the collection.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span>  callable|null  $callback</span><br><span class="line"> * <span class="doctag">@param</span>  mixed  $default</span><br><span class="line"> * <span class="doctag">@return</span> mixed</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span><span class="params">(callable <span class="variable">$callback</span> = null, <span class="variable">$default</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arr::first(<span class="variable">$this</span>-&gt;items, <span class="variable">$callback</span>, <span class="variable">$default</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>Collection</code> 的 <code>first()</code>，預設可以都不傳任何參數，就會傳回第一個物件。</li>
<li>也可以第一個參數傳進 closure，告訴 <code>Collection</code> 該以何種條件去回傳第一個物件。</li>
<li>也可以第二個參數傳進 <code>$default</code>，當 <code>first()</code> 找不到任何資料時，該回傳什麼預設值。</li>
</ul>
<p>因為 Null Object 就是預設值，所以我們要傳入第二個參數，但第一個參數的 closure 我們不用傳，所以傳一個 <code>null</code> 即可。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo/commit/84ebcd8db360c865bbe8b7e01cc3e0f6818d5de4" target="_blank" rel="external">建立單元測試 PostServiceTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 有資料取<span class="title">title</span>欄位資料<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">3</span>)-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;showTitle(<span class="number">1</span>, <span class="string">'no title'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'title1'</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 無資料的<span class="title">title</span>欄位資料<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">3</span>)-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;showTitle(<span class="number">4</span>, <span class="string">'no title'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'no title'</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/dp/dp-nullobject/nullobject000.png" alt=""></p>
<p>最後補上單元測試，分別測試 <code>where()</code> 找得到資料與找不到資料的測試案例，證明 Null Object 重構成功。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Null Object 模式是實務上常常使用的模式，當程式碼出現需要判斷 <code>null</code> 值，就該考慮重構成 Null Object 模式，這種風格符合物件導向多型的原則，不該因為 <code>null</code> 值而有不同的行為，也符合 <code>Tell, Don&#39;t Ask</code> 原則，可以寫出更好用的 API。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Martin Fowler, <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672" target="_blank" rel="external">Refactoring : Improving the Design of Existing Code</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 Null Object 模式將符合 Tell, don't Ask 原則]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Collection" scheme="http://oomusou.io/tags/Laravel-Collection/"/>
    
      <category term="Laravel Eloquent" scheme="http://oomusou.io/tags/Laravel-Eloquent/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對 Collection 做 Assertion?]]></title>
    <link href="http://oomusou.io/tdd/tdd-collection-assertion/"/>
    <id>http://oomusou.io/tdd/tdd-collection-assertion/</id>
    <published>2016-07-09T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p><code>Collection</code> 並非 PHP 原生的型別，是 Laravel 所擴充，因此 PHPUnit 並無法直接對其做 assertion，本文介紹兩種方式，一種是使用 PHPUnit 的 <code>assertArraySubset()</code>，一種是自己寫 collection macro，各有其優缺點，可視需求決定要使用哪種方法。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>實務上天天都有驗證 <code>Collection</code> 的需求，在<a href="/tdd/tdd-repository-testing-mysql/">如何測試 Repository 模式(使用 MySQL)?</a>與<a href="/tdd/tdd-repository-testing-sqlite/">如何測試 Repository 模式(使用 SQLite)?</a> 一文中，對 <code>Collection</code> 都沒有提出系統化的 assertion 方式，本文整理出實務上我最常用的兩種測試手法。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以 <code>Post</code> model 為例，顯示<code>所有文章</code>，並寫單元測試判斷結果是否如預期。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>無論是對 repository 或 service 做單元測試，當其 field 或 method 回傳值為 <code>Collection</code>時，就必須面對如何 assertion 的問題。</p>
<h2 id="使用_assertArraySubset()">使用 assertArraySubset()</h2><hr>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9fa92fbedd7f367b12510dbeee10bdf8020338d9" target="_blank" rel="external">第一種測試方法</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章1<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create([</span><br><span class="line">                <span class="string">'title'</span>       =&gt; <span class="string">"title&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'description'</span> =&gt; <span class="string">"desc&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'content'</span>     =&gt; <span class="string">"content&#123;$value&#125;"</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">            -&gt;displayAllPosts()</span><br><span class="line">            -&gt;toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>12 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line">collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create([</span><br><span class="line">        <span class="string">'title'</span>       =&gt; <span class="string">"title&#123;$value&#125;"</span>,</span><br><span class="line">        <span class="string">'description'</span> =&gt; <span class="string">"desc&#123;$value&#125;"</span>,</span><br><span class="line">        <span class="string">'content'</span>     =&gt; <span class="string">"content&#123;$value&#125;"</span></span><br><span class="line">    ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將假資料透過 <code>Post::create()</code> 新增。</p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">    -&gt;displayAllPosts()</span><br><span class="line">    -&gt;toArray();</span><br></pre></td></tr></table></figure></p>
<p>測試 <code>PostService-&gt;displayAllPosts()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>PostService</code> 與 <code>displayAllPost()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostService</code> 與 <code>displayAllPost()</code>。</span></span></span></p>
<p><code>displayAllPosts()</code> 回傳的是 <code>Collection</code>，但 PHPUnit 無法對 <code>Collection</code> 做 assertion，必須先轉成 array。</p>
<p>26 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">    [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">    [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">    [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"><span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>這裡不能使用 <code>assertEquals()</code>，因為 <code>posts</code> table 還包含 <code>created_at</code> 與 <code>updated_at</code> 兩個欄位，若使用 <code>assertEquals()</code> 一定失敗，必須改用 <code>assertArraySubset()</code>。</p>
<p>也就是說，<code>$expected</code> 並不用包含 <code>Collection</code> 的所有欄位，只要包含你想測試的欄位即可。</p>
<p>剩下的 <code>PostService</code> 與 <code>PostRepository</code> 就以 TDD 的方式建立，在此不再贅述。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>若對剩下的步驟有興趣，詳細請參考 <a href="/phpstorm/phpstorm-refactor-namespace/">如何使用 PhpStorm 重構 Namespace?</a></span></span></span></p>
<h2 id="使用_Collection_Macro">使用 Collection Macro</h2><hr>
<p>使用 <code>assertArraySubset()</code> 雖然可行，但為了配合 <code>Collection-&gt;toArray()</code> 的格式，<code>$expected</code> 必須寫的比較繁瑣，連 key 都要交代，若 <code>Collection</code>只傳會我要驗證欄位的資料給 <code>$actual</code>，且 <code>$expected</code> 也只包含要驗證的資料，那測試程式就非常的簡潔。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/0bc408423156af0c7602a6d4db60bdb1bd8b7b10" target="_blank" rel="external">第二種測試方法</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章2<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create([</span><br><span class="line">                <span class="string">'title'</span>       =&gt; <span class="string">"title&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'description'</span> =&gt; <span class="string">"desc&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'content'</span>     =&gt; <span class="string">"content&#123;$value&#125;"</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">            -&gt;displayAllPosts()</span><br><span class="line">            -&gt;pick([</span><br><span class="line">                <span class="string">'title'</span>,</span><br><span class="line">                <span class="string">'description'</span>,</span><br><span class="line">                <span class="string">'content'</span></span><br><span class="line">            ])</span><br><span class="line">            -&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title1'</span>, <span class="string">'desc1'</span>, <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title2'</span>, <span class="string">'desc2'</span>, <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title3'</span>, <span class="string">'desc3'</span>, <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">    -&gt;displayAllPosts()</span><br><span class="line">    -&gt;pick([</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="string">'description'</span>,</span><br><span class="line">        <span class="string">'content'</span></span><br><span class="line">    ])</span><br><span class="line">    -&gt;all();</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>pick()</code> 從 <code>Collection</code> 只抓回要驗證欄位的資料，只要將<code>欄位名稱</code>以陣列方式傳入 <code>pick()</code> 即可。</p>
<p>但 <code>Collection</code> 並沒有內建 <code>pick()</code>，稍後會自己建立 collection macro。</p>
<p><code>all()</code> 為 <code>Collection</code> 內建 method，將 <code>Collection</code> 轉成陣列。</p>
<p>31 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">    [<span class="string">'title1'</span>, <span class="string">'desc1'</span>, <span class="string">'content1'</span>],</span><br><span class="line">    [<span class="string">'title2'</span>, <span class="string">'desc2'</span>, <span class="string">'content2'</span>],</span><br><span class="line">    [<span class="string">'title3'</span>, <span class="string">'desc3'</span>, <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>因為已經被 <code>pick()</code> 轉成簡單的陣列，且不含 key，可以簡單的使用 <code>assertEquals()</code> 來做 assertion。</p>
<p><strong>AppServiceProvider.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/31983807ab1c69261858d9c1a0217f3a4e3032e5" target="_blank" rel="external">新增 Collection::macro(), pick()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Providers/AppServiceProvider.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Bootstrap any application services.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Register any application services.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Collection::macro(<span class="string">'pick'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> collect(<span class="variable">$this</span>-&gt;items)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> collect(<span class="variable">$columns</span>)</span><br><span class="line">                    -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$column</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable">$value</span>-&gt;<span class="variable">$column</span>;</span><br><span class="line">                    &#125;)-&gt;all();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為 <code>pick()</code> 並非 <code>Collection</code> 內建的 method，因此我們必須自己在 service provider 建立 <code>pick</code> 這個 collection macro。</p>
<p>25 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collection::macro(<span class="string">'pick'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collect(<span class="variable">$this</span>-&gt;items)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> collect(<span class="variable">$columns</span>)</span><br><span class="line">            -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$column</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;<span class="variable">$column</span>;</span><br><span class="line">            &#125;)-&gt;all();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>我們將使用 <code>map()</code> 將 <code>$columns</code> 所要的欄位顯示 <code>map()</code> 回去。</p>
<p>因為 <code>$columns</code> 是陣列，我們要處理的是 <code>$columns</code> 每個元素的值，依此還要再用一層 <code>map()</code>。</p>
<p>重點在於只回傳 <code>$column</code> 欄位的值，因此我們使用 PHP 的變數讀取屬性的方式，以 <code>$value-&gt;$column</code> 的技巧，只回傳所需要欄位的值。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>詳細請參考<a href="/javascript/javascript-variable-property/">如何使用變數讀取 property?</a></span></span></span></p>
<p>因為牽涉到兩層巢狀 closure，所以程式可讀性較差，實務上建議 closure 只寫一層，不要寫兩層以上。</p>
<p>不過因為這段程式碼不需要維護，只要複製貼上到 <code>AppServiceProvider.php</code> 的 <code>register()</code>即可，我們的目的是要用 <code>pick()</code>，讓我們的測試程式更加精簡，不會去維護這段程式碼，因此還可以接受。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 PHPUnit 無法直接對 <code>Collection</code> 做 assertion，<code>assertArraySubset()</code> 算是不滿意但可以接受的方式。</li>
<li><code>pick()</code> 比較接近我理想中對 <code>Collection</code> 的 assertion 方式，但必須使用 collection macro 在 service provider 對 <code>Collection</code> 做擴充，但只要複製貼上即可，以後就可以當成 <code>Collection</code> 原生的 method 使用。</li>
<li>目前 <code>pick()</code> 只支援 <code>Illuminate\Database\Eloquent\Collection</code>，並不支援 <code>Illuminate\Support\Collection</code>，實務上無論是 repository 的單元測試，或是 service 的單元測試或整合測試，多半面對的是從 Eloquent 來的 <code>Collection</code>，也就是 <code>Illuminate\Database\Eloquent\Collection</code>，所以在實務上 <code>pick()</code> 非常好用。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Freek Ven der Herten, <a href="https://murze.be/2015/12/using-collection-macros-in-laravel/" target="_blank" rel="external">Using collection macros in Laravel</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[介紹兩種方法對 Collection 做 Assertion]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Collection" scheme="http://oomusou.io/tags/Laravel-Collection/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 將 new 重構成依賴注入?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactor-di/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactor-di/</id>
    <published>2016-07-08T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>為了可測試性與低耦合，我們會使用<code>依賴注入</code>取代 <code>new</code> 建立物件，對於 legacy code，當然可以使用手動的方式重構，透過 PhpStorm，我們可以使用更簡單的方式將 <code>new</code> 重構成 <code>依賴注入</code>。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>若使用 TDD 方式開發，為了隔離測試，一定會使用依賴注入建立物件，在<a href="/tdd/tdd-di/">深入探討依賴注入</a>一文中曾以可測試性角度探討之，不過在實務上，一直沒有以工具的角度探討如何實踐，本文將使用 PhpStorm，實際將 legacy code 的 <code>new</code> 重構成 <code>依賴注入</code>。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo/commit/b2de0729c2a8188b1f49ee1051d93aa4522cd764" target="_blank" rel="external">建立 PostService()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$postRepository</span> = <span class="keyword">new</span> PostRepository();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$postRepository</span>-&gt;getLatest3Posts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 legacy code，我們常會發現 class 直接在 method 內被 <code>new</code>，以執行結果角度而言是對的，但有以下兩個問題 :</p>
<ol>
<li>由於 <code>PostRepository</code> 在 <code>showLatest3Posts()</code> 內直接被 <code>new</code>，因此無法對 <code>PostRepository</code> 做隔離，導致無法對 <code>PostService</code> 做單元測試。</li>
<li>由於 <code>PostRepository</code> 在 <code>showLatest3Posts()</code> 內直接被 <code>new</code>，導致 <code>PostService</code> 直接相依於 <code>PostRepository</code>，耦合性太高，無法被抽換，違反 SOLID 原則的 <code>開放封閉原則</code>與<code>依賴反轉原則</code>。</li>
</ol>
<p>要解決這兩個問題，又不影響執行結果，最簡單的方式就是將 <code>new</code> <code>重構</code>成<code>依賴注入</code>。</p>
<h2 id="Extract_Field">Extract Field</h2><hr>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di000.png" alt=""></p>
<p>將來要將 <code>$postRepository</code> 重構成 field，使用 constructor injection 方式。</p>
<p>將滑鼠游標放在 <code>$postRepository</code> 變數上，按熱鍵 &#8963; + T，出現 <code>Refactor This</code> 選單，選擇 <code>Extract Field</code>。 </p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di001.png" alt=""></p>
<p>可以重構成兩種方式，因為將使用 constructor injection 來建立物件，不需要 <code>new</code>，因此選擇 <code>$postRepository</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di002.png" alt=""></p>
<p>PhpStorm 會自動使用原來變數名稱為 field 名稱。</p>
<ul>
<li><strong>Initialize in</strong> : 選 <code>Current method</code>。</li>
<li><strong>Visibility</strong> : 選 <code>private</code>。</li>
</ul>
<p>注意 <code>Initialize in</code> 並不是選擇 <code>Class constructor</code>，因為我們要用的是 constructor injection，而不是在 constructor 去 <code>new</code> 一個物件給 field。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di003.png" alt=""></p>
<p>PhpStorm 幫我們加上了 field，這是我們預期的。</p>
<p>但 PhpStorm 一樣是在 method 去 <code>new</code> 產生物件，只是改成 field，這不是我們想要的。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di004.png" alt=""></p>
<p>將 method 內有 <code>new</code> 的一行手動刪除。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di005.png" alt=""></p>
<p>在 field 加上 PHPDoc 描述型別。</p>
<p>在 PhpStorm 要替 field 加上 PHPDoc 很簡單，只要在 field 上面輸入 <code>/**</code>，再按 &#9251; 空白鍵，就會出現 <code>/** @var */</code>。</p>
<p>在 <code>@var</code> 之後輸入型別，輸入 <code>Po</code> 之後就會出現語法提示讓你用挑的。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di006.png" alt=""></p>
<p>在 field 加上型別描述，為 constructor injection 的 type hint </p>
<h2 id="Generate_Constructor">Generate Constructor</h2><p><img src="/images/phpstorm/phpstorm-refactor-di/di007.png" alt=""></p>
<p>按熱鍵 &#8984; + N，出現 <code>Generate</code> 選單，選擇 <code>Constructor</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di008.png" alt=""></p>
<p>選擇你要使用依賴注入的 field。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di009.png" alt=""></p>
<p>PhpStorm 自動幫我們在 constructor 產生依賴注入。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo/commit/682ab1054e279860ffe7ae31cf3ec61ba7e35dfc" target="_blank" rel="external">將 PostService() 重構成依賴注入</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PostRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getLatest3Posts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="單元測試">單元測試</h2><hr>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di010.png" alt=""></p>
<p>馬上跑單元測試，<span class="label label-success">綠燈</span> 打完收工。</p>
<p><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo/commit/a7c05c06d73529d6399a6d0167716561cee09c23" target="_blank" rel="external">單元測試 : 建立 PostServiceTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示最新3筆文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">100</span>)-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = App::make(PostService::class)</span><br><span class="line">            -&gt;showLatest3Posts()</span><br><span class="line">            -&gt;pluck(<span class="string">'id'</span>)</span><br><span class="line">            -&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [<span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>];</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Legacy code 蠻免會使用 <code>new</code> 去建立物件，為了降低耦合度與增加可測試性，勢必改用依賴注入，透過 PhpStorm 的重構，可以快速地將 <code>new</code> 重構成依賴注入，非常方便。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[快速快速將 Legacy Code 重構成依賴注入]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 重構成 Closure?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactor-closure/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactor-closure/</id>
    <published>2016-07-07T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>在實務上，我們常常會遇到將重複程式碼重構成 closure 的需求，PhpStorm 沒辦法直接重構，需透過一些技巧。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>以前一直不知道如何將 closure 用在自己的程式上，一直到看了 <a href="https://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collection</a> 之後，整理了一篇<a href="/php/php-closure-practice/">實務上如何活用 Closure?</a>，不過當時仍然不知道要如何在 PhpStorm 完成，都是手動複製貼上，本文以 PhpStorm 的 <code>Extract Method</code>、<code>Extract Parameter</code> 與 <code>Surround With</code> ，將重複的程式碼重構成 closure。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/e27a224d1a15054f53965d73b8e3b690d0958caf" target="_blank" rel="external">新增 displayAllPost()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若我們發現以下程式碼是重複的，想將其提出成為一個 method<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br></pre></td></tr></table></figure></p>
<p>也就是除了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br></pre></td></tr></table></figure></p>
<p>之外，其他都是重複程式碼，想 <code>Extract Method</code>。</p>
<h2 id="Extract_Method">Extract Method</h2><hr>
<p>PhpStorm 內建的 <code>Extract Method</code> 無法簡單的萃取出這段程式碼，需靠一點技巧。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure000.png" alt=""></p>
<p>先選擇全部程式碼，按熱鍵 &#8963; + T，顯示 <code>Refactor This</code> 選單，選擇 <code>Extract Method</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure001.png" alt=""></p>
<p>輸入我們要重構的新 method 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure002.png" alt=""></p>
<p>PhpStorm 會幫我們選擇的程式碼重構成 <code>loopAllPosts()</code>，並且自動加上 <code>return $this-&gt;loopAllPosts()</code>。</p>
<p>但是這樣還沒完，因為<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br></pre></td></tr></table></figure></p>
<p>並不是我們要的，而是希望由 closure 傳入的，所以我們必須將這段程式碼 <code>Extract Parameter</code>。</p>
<h2 id="Extract_Parameter">Extract Parameter</h2><hr>
<p>不過 PhpStorm 也沒有辦法簡單的的將一段程式碼 <code>Extract Parameter</code>。</p>
<p>還記得國中幾何嗎? 我們常常需要加上<code>輔助線</code>才能證明，我們來替這段程式碼加上輔助線。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure003.png" alt=""></p>
<p>因為 PhpStorm 只能將一個字串或一個數字使用 <code>Extract Parameter</code>，而無法將一段程式碼去 <code>Extract Parameter</code>，因此我們將我們要萃取的程式碼先用<code>單引號</code>括起來，騙 PhpStorm 這是一個<code>字串</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure004.png" alt=""></p>
<p>將滑鼠游標放在<code>假字串</code>內，按熱鍵 &#8963; + T，顯示 <code>Refactor This</code> 選單，選擇 <code>Extract Parameter</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure005.png" alt=""></p>
<p>輸入 paramter 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure006.png" alt=""></p>
<p>PhpStorm 或幫我們將<code>假字串</code>以 <code>$closure</code> 變數取代，並將<code>假字串</code>搬到<code>loopAllPosts()</code>的參數。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure007.png" alt=""></p>
<p>將 <code>$post</code> 傳入 closure，這個 PhpStorm 沒辦法幫我們做，必須手動加上。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure008.png" alt=""></p>
<p>這個<code>假字串</code>很像我們的 closure，但仍然不是，我們需要繼續重構。</p>
<h2 id="Surround_With">Surround With</h2><hr>
<p>一樣重施<code>輔助線</code>技巧，PhpStorm 無法將字串重構成 function，需加上 <code>return</code>，騙 PhpStorm 可以將此段程式碼重構。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure009.png" alt=""></p>
<p>選擇 <code>return</code> 與 <code>假字串</code>，按熱鍵 &#8997; + &#8984; + T，出現 <code>Surround With</code> 對話框，選擇 <code>function</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>選擇部分，可將滑鼠游標放在<code>假字串</code>內，按熱鍵 &#8997; + &#8593; 數次，直到選到你要的部分為止。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure010.png" alt=""></p>
<p>PhpStorm 會幫我們加上 <code>function</code> 關鍵字，已經很接近 closure 了。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure011.png" alt=""></p>
<p>手動將剛剛的<code>輔助線</code>全部刪除，並加上 <code>$post</code> 參數。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure012.png" alt=""></p>
<p>按熱鍵 &#8997; + &#8984; + T，PhpStorm 會將我們將程式重新 format 成漂漂亮亮符合 <code>PSR-2</code> 格式的程式碼。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/fc815ed863aa1b605ed5363d668143c687a40715" target="_blank" rel="external">重構成 Closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;loopAllPosts(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">loopAllPosts</span><span class="params">(Closure <span class="variable">$closure</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">          <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$closure</span>(<span class="variable">$post</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="單元測試">單元測試</h2><hr>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure013.png" alt=""></p>
<p>馬上跑單元測試，<span class="label label-success">綠燈</span> 打完收工。</p>
<p><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/93611680214f43c8f177b86e6159b3342204f75e" target="_blank" rel="external">單元測試 : 顯示所有 Post()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"> </span>&#123;</span><br><span class="line">     <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Post</span><span class="params">()</span></span><br><span class="line">     </span>&#123;</span><br><span class="line">         <span class="comment">/** arrange */</span></span><br><span class="line">         <span class="variable">$expected</span> = <span class="number">10</span>;</span><br><span class="line">         <span class="variable">$target</span> = App::make(PostService::class);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">/** act */</span></span><br><span class="line">         <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;displayAllPosts();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">/** assert */</span></span><br><span class="line">         <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Summary">Summary</h2><hr>
<ol>
<li>將全部程式碼以 <code>Extract Method</code> 提煉成新的 method。</li>
<li>將不同的程式碼加上單引號變成字串，使用 <code>Extract Parameter</code> 提煉參數。</li>
<li>將<code>假字串</code>使用 <code>Surround With</code> 變成 closure。</li>
<li>將<code>輔助線</code>刪除。</li>
<li>跑單元測試確認重構成功。</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm 內建的 <code>Extract Method</code> 與 <code>Extract Parameter</code>，搭配<code>輔助線</code>的小技巧，一樣的可以快速地重構出 closure。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[透過輔助線重構成 Closure]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
</feed>
