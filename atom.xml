<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2017-06-28T03:39:22.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[重構到設計模式：使用 Adapter Pattern]]></title>
    <link href="http://oomusou.io/dp/dp-adapter/"/>
    <id>http://oomusou.io/dp/dp-adapter/</id>
    <published>2017-06-28T12:23:43.000Z</published>
    <updated>2017-06-28T03:39:22.000Z</updated>
    <content type="html"><![CDATA[<p>Adapter pattern 是實務上常用的設計模式，本文將以實際案例，根據需求一步步重構，最後變成 adapter pattern。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.15</p>
<h2 id="定義">定義</h2><hr>
<blockquote>
<p>Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise of incompatible interfaces.</p>
<p>將一個 class 的接口變成使用端所期待的另外一種接口，從而使原本因接口不匹配而無法在一起工作的兩個 class 都能在一起工作。</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>當 service 原本支援某一 API ，卻被要求支援另一新 API，可開發 adapter 讓原 service 支援新 API。</p>
</blockquote>
<p><img src="/images/dp/dp-adapter/adapter000.svg" alt="adapter000"></p>
<p><img src="/images/dp/dp-adapter/adapter010.svg" alt="adapter010"></p>
<ul>
<li><strong>Client</strong> : 使用端根據 <code>Target</code> interface 使用 <code>Adapter</code> 物件。</li>
</ul>
<blockquote>
<p>Controller 根據 service 的 interface 去使用 adapter。</p>
</blockquote>
<ul>
<li><strong>Target</strong> : 根據使用端的 domain 需求定義出的 service 的 <code>Target</code> interface。</li>
</ul>
<blockquote>
<p>Service 根據 controller 的需求，定義出 service 的 interface。</p>
</blockquote>
<ul>
<li><strong>Adapter</strong> : 根據 <code>Target</code> interface 實作出 <code>Adapter</code>，再由 <code>Adapter</code> 去使用 <code>Adaptee</code>。</li>
</ul>
<blockquote>
<p>根據 service 的 interface 實作出 adapter，再由 adapter 去使用實際的第三方套件或 API。</p>
</blockquote>
<ul>
<li><strong>Adaptee</strong> : 被 <code>Adapter</code> 呼叫的 <code>Adaptee</code>。</li>
</ul>
<blockquote>
<p>實際的第三方套件或 API。</p>
</blockquote>
<h2 id="生活中的_Adapter">生活中的 Adapter</h2><hr>
<p>Adapter 在生活中到處可見。</p>
<h3 id="VGA_Adapter">VGA Adapter</h3><p><img src="/images/dp/dp-adapter/adapter001.jpg" alt="adapter001"></p>
<p>我的 Macbook Pro Retina 只有 Mini Display port，但投影機只有 VGA port，因此 Macbook 無法直接使用投影機，需要 VGA adapter 做轉接。</p>
<blockquote>
<p>我的 controller 只支援 Mini Display port interface，但第三方套件或 API 卻只提供 VGA interface，因此 controller 無法直接使用第三方套件或 API，因此需要 adapter 做轉接，才能使用第三方套件或 API。</p>
</blockquote>
<p>若以 Adapter pattern 思考</p>
<blockquote>
<p><code>Client</code> 就類似 Macbook，<code>Adaptee</code> 就類似投影機，這些都是不能修改的，我們只好以 MacBook 角度訂出 <code>Target</code> interface，然後實做 VGa Adapter 實作 <code>Target</code> interface，這樣 MacBook 就能使用投影機了。</p>
</blockquote>
<h2 id="真實案例">真實案例</h2><hr>
<h3 id="使用_AWS_S3">使用 AWS S3</h3><p>AWS 提供 S3 (Simple Storage Service) 服務，讓我們可以上傳檔案到雲端，並且下載。AWS 也提供了 <code>AWS SDK for PHP</code> 供 PHP 使用。</p>
<p>AWS 的 API 如下 (<code>AWSSDK</code>)</p>
<table>
<thead>
<tr>
<th>功能描述</th>
<th>API</th>
</tr>
</thead>
<tbody>
<tr>
<td>上傳檔案</td>
<td>putObject(＄container, ＄blob, ＄file)</td>
</tr>
<tr>
<td>下載連結</td>
<td>getObjectUrl(＄container, ＄blob)</td>
</tr>
<tr>
<td>刪除檔案</td>
<td>deleteObjet(＄container, ＄blob)</td>
</tr>
</tbody>
</table>
<p><img src="/images/dp/dp-adapter/adapter002.svg" alt="adapter002"></p>
<p><strong>下載檔案</strong><br><img src="/images/dp/dp-adapter/adapter011.svg" alt="adapter002"></p>
<p><strong>CloudStorageController</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">CloudStorageService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudStorageController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> CloudStorageService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cloudStorageService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * CloudStorageController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> CloudStorageService $cloudStorageService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(CloudStorageService <span class="variable">$cloudStorageService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudStorageService = <span class="variable">$cloudStorageService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下載檔案</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$this</span>-&gt;cloudStorageService-&gt;getFileUrl(<span class="string">'MyFolder'</span>, <span class="string">'MyRemoteFile'</span>);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudStorageService-&gt;uploadFile(<span class="string">'MyFolder'</span>, <span class="string">'MyRemoteFile'</span>, <span class="string">'MyLocalFile'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudStorageService-&gt;deleteFile(<span class="string">'MyFolder'</span>, <span class="string">'MyRemote'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> CloudStorageService */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$cloudStorageService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * CloudStorageController constructor.</span><br><span class="line"> * <span class="doctag">@param</span> CloudStorageService $cloudStorageService</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(CloudStorageService <span class="variable">$cloudStorageService</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;cloudStorageService = <span class="variable">$cloudStorageService</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CloudStorageController</code> 使用到了 <code>CloudStorageService</code>，在 constructor 使用依賴注入將 <code>CloudStorageService</code> 注入。</p>
<p>19 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 下載檔案</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$this</span>-&gt;cloudStorageService-&gt;getFileUrl(<span class="string">'MyFolder'</span>, <span class="string">'MyRemoteFile'</span>);</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>index()</code> 呼叫 <code>CloudStorageService</code> 的 <code>getFileUrl()</code> 回傳下載檔案的 url。</p>
<p>28 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;cloudStorageService-&gt;uploadFile(<span class="string">'MyFolder'</span>, <span class="string">'MyRemoteFile'</span>, <span class="string">'MyLocalFile'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>store()</code> 呼叫 <code>CloudStorageService</code>  的 <code>uploadFile()</code> 上傳檔案。</p>
<p>36 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除檔案</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;cloudStorageService-&gt;deleteFile(<span class="string">'MyFolder'</span>, <span class="string">'MyRemote'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>destroy()</code> 呼叫 <code>CloudStorageService</code> 的 <code>deleteFile()</code> 刪除檔案。</p>
<p><strong>CloudStorageService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">SDK</span>\<span class="title">AWSSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudStorageService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AWSSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$awsSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * CloudStorageService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK = <span class="keyword">new</span> AWSSDK();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     * <span class="doctag">@param</span> string $localFile</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>, string <span class="variable">$localFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK-&gt;putObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>, <span class="variable">$localFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下載檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileUrl</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;awsSDK-&gt;getObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK-&gt;deleteObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>實際的提供雲端檔案服務的 service。</p>
<p>第 10 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> AWSSDK */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$awsSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * CloudStorageService constructor.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;awsSDK = <span class="keyword">new</span> AWSSDK();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>CloudStorageService</code> 使用到了  <code>AWSSDK</code>。</p>
<blockquote>
<p>這裡可以使用依賴注入，不過依賴注入就得搭配 provider 機制，這裡故意使用 <code>new</code>，將來要搭配 Factory Pattern。</p>
</blockquote>
<p>18 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $folder</span><br><span class="line"> * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line"> * <span class="doctag">@param</span> string $localFile</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>, string <span class="variable">$localFile</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;awsSDK-&gt;putObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>, <span class="variable">$localFile</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫 <code>AWSSDK</code> 的 <code>putObject()</code> 上傳檔案。</p>
<p>29 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 下載檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $folder</span><br><span class="line"> * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileUrl</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;awsSDK-&gt;getObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫 <code>AWSSDK</code> 的 <code>getObject()</code> 下載檔案。</p>
<p>40 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $folder</span><br><span class="line"> * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;awsSDK-&gt;deleteObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫 <code>AWSSDK</code> 的 <code>deleteObject()</code> 刪除檔案。</p>
<p><strong>AWSSDK</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">SDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AWSSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'AWS S3 uploading file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span>: <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://www.aws.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'AWS S3 deleting file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@param</span> string $file</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">'AWS S3 uploading file'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>AWSSDK</code> 的 <code>putObject()</code>。</p>
<p>16 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳下載檔案 url</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span>: <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'http://www.aws.com'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>AWSSDK</code> 的 <code>getObject()</code>。</p>
<p>27 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">'AWS S3 deleting file'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>AWSSDK</code> 的 <code>deleteObject()</code>。</p>
<h3 id="使用_Azure_Blob_Storage">使用 Azure Blob Storage</h3><p>Microsof 的 Azure 雲端服務急起直追，且提供比 AWS 更優惠方案，公司高層為了降低成本，決定將檔案改放到 Azure 。</p>
<p>Azure 提供 Blob Storage 服務，功能與 S3 完全一樣，Microsoft 也提供了 <code>Azure SDK for PHP</code> 供 PHP 使用。</p>
<blockquote>
<p>公司另有但書，先不要將原本 AWS S3 的程式碼刪除，因為有可能 Azure 便宜但不好用，將來有可能會回來用 AWS S3，希望提供<strong>設定檔</strong>，能動態切換使用 AWS S3 或 Azure Blob。</p>
</blockquote>
<p>Azure 的 API 如下 (<code>AzureSDK</code>)</p>
<table>
<thead>
<tr>
<th>功能描述</th>
<th>API</th>
</tr>
</thead>
<tbody>
<tr>
<td>上傳檔案</td>
<td>createBlob(＄container, ＄blob, ＄file)</td>
</tr>
<tr>
<td>下載連結</td>
<td>getBlobUrl(＄container, ＄blob)</td>
</tr>
<tr>
<td>刪除檔案</td>
<td>deleteBlob(＄container, ＄blob)</td>
</tr>
</tbody>
</table>
<p>根據<strong>開放封閉原則</strong>，<code>AzureSDK</code> 屬於新的需求，我們可以新增 class 支援 <code>AzureSDK</code> (<strong><em>對擴展是開放的</em></strong>)，但不應該去修改原有<code>CloudStorageService</code> (<strong><em>對修改是封閉的</em></strong>)。</p>
<blockquote>
<p>我們不應該在 CloudStorageService 使用 <code>if else</code> 去判斷該使用 <code>AWSSDK</code> 或 <code>AzureSDK</code>，因為 <code>CloudStorageService</code> 應該封閉，應該新增 class，改用物件導向<strong>多型</strong>取代 <code>if else</code>。</p>
</blockquote>
<p>由於 <code>CloudStorageService</code> 原本已經使用 <code>AWSSDK</code>，為了讓 <code>CloudStorageService</code> 封閉不做修改，我們決定以既有的 <code>AWSSDK</code> 為基礎加以 <code>extract interface</code> 產生 <code>CloudSDK</code> interface 。</p>
<p><img src="/images/dp/dp-adapter/adapter003.svg" alt="adapter003"></p>
<p><strong>下載檔案</strong></p>
<p><img src="/images/dp/dp-adapter/adapter012.svg" alt="adapter012"></p>
<p><strong>CloudSDK</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CloudSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span>;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span>;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 PhpStorm，從 <code>AWSSDK</code> 抽出 <code>CloudSDK</code> interface。</p>
<p>為了讓 <code>CloudStorageService</code> 封閉不要修改，我們希望 <code>CloudStorageService</code> 使用的 SDK 都能遵守 <code>CloudSDK</code> interface，如此 <code>CloudStorageService</code> 就能完全不用修改。</p>
<p><strong>CloudStorageService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudStorageService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> CloudSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cloudSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * CloudStorageService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudSDK = CloudSDKFactory::create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     * <span class="doctag">@param</span> string $localFile</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>, string <span class="variable">$localFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudSDK-&gt;pubObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>, <span class="variable">$localFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下載檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileUrl</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;cloudSDK-&gt;getObjectUrl(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudSDK-&gt;deleteObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> CloudSDK */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$cloudSDK</span>;</span><br></pre></td></tr></table></figure>
<p>透過重構的 <code>Rename</code>，將 <code>$awsSDK</code> 重構成 <code>$cloudSDK</code>，並將型別改成 <code>CloudSDK</code>。</p>
<p>8 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * CloudStorageService constructor.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;cloudSDK = CloudSDKFactory::create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>new AWSSDK</code> 改成 <code>CloudSDKFactory::create()</code>，改由<strong>工廠</strong>來建立物件。</p>
<blockquote>
<p><strong>開放封閉原則</strong>規定我們不要修改 <code>CloudStorageService</code>，但 constructor 的修改是可接受的，但 method 內則不應該修改。</p>
</blockquote>
<p>至於 <code>CloudStorageService</code> 的其他部分則不修改，以達成<strong>開放封閉原則</strong>的要求。</p>
<p><strong>AWSAdapter</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">SDK</span>\<span class="title">AWSSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AWSAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AWSSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$awsSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AWSAdapter constructor.</span><br><span class="line">     * <span class="doctag">@param</span> AWSSDK $awsSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AWSSDK <span class="variable">$awsSDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK = <span class="variable">$awsSDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK-&gt;putObject(<span class="variable">$container</span>, <span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;awsSDK-&gt;getObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK-&gt;deleteObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AWSAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span></span><br></pre></td></tr></table></figure>
<p>因為 <code>CloudSDK</code> interface 已經確定，因此我們需要一個 adapter 將 <code>CloudSDK</code> interface 轉成各 SDK 所定義的 interface。</p>
<p>由於 <code>CloudSDK</code> 是從 <code>AWSSDK</code> 抽出來的，因此 interface 完全一樣，<code>AWSAdapter</code> 只是將相同的 method 導到 <code>AWSSDK</code> 而已。</p>
<blockquote>
<p>這裡因為 <code>CloudSDK</code> interface 與 <code>AWSSDK</code> 完全一樣，所以暫時看不到 <code>CloudSDK</code> interface 的威力，稍後才會展現。</p>
</blockquote>
<p><strong>AzureAdapter</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">SDK</span>\<span class="title">AzureSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$azureSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureAdapter constructor.</span><br><span class="line">     * <span class="doctag">@param</span> AzureSDK $azureSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AzureSDK <span class="variable">$azureSDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;azureSDK = <span class="variable">$azureSDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;azureSDK-&gt;createBlob(<span class="variable">$container</span>, <span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getObjectUrl(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;deleteObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span></span><br></pre></td></tr></table></figure>
<p><code>AzureAdapter</code> 也實現 <code>CloudSDK</code> interface。</p>
<p>第 7 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> AzureSDK */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$azureSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * AzureAdapter constructor.</span><br><span class="line"> * <span class="doctag">@param</span> AzureSDK $azureSDK</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AzureSDK <span class="variable">$azureSDK</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;azureSDK = <span class="variable">$azureSDK</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依賴注入進 <code>AzureSDK</code>。</p>
<p>19 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@param</span> string $file</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;azureSDK-&gt;createBlob(<span class="variable">$container</span>, <span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>putObject()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，轉而呼叫 <code>AzureSDK</code> 的 <code>createBlob()</code>。</p>
<p>30 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳下載檔案 url</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getObjectUrl(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getObjectUrl()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，轉而呼叫 <code>AzureSDK</code> 的 <code>getObjetUrl()</code>。</p>
<p>41 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;deleteObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>deleteObject()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，轉而呼叫 <code>AzureSDK</code>  的 <code>deleteObject()</code>。</p>
<blockquote>
<p>雖然 adapter 轉呼叫 <code>AzureSDK</code> 看似多餘，但由於實作了 <code>CloudSDK</code> interface，使得  <code>CloudStorageService</code> 不用修改就可以使用 <code>AzureSDK</code>，就類似 Macbook 不用改裝  VGA 介面，透過 adapter 就可以由 Mini Display 去使用 VGA 介面的投影機一樣，達成<strong>開放封閉原則</strong>的要求。</p>
</blockquote>
<p><strong>CloudSDKFactory</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudSDKFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span>: <span class="title">CloudSDK</span></span><br><span class="line">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CloudSDKFactory</code> 暫時只回傳 <code>CloudSDK</code> interface，至於要如何建立物件，我們最後再來實做。</p>
<p><strong>AzureSDK</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">SDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBlob</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Azure Blob uploading file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlobUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span>: <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://www.azure.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteBlob</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Azure Blob deleting file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>AzureSDK</code> 的 API。</p>
<blockquote>
<p>對 <code>CloudStorageService</code> 而言，儘管 <code>AWSSDK</code> 與 <code>AzureSDK</code> 的 API 都不一樣，但已經將兩者抽象化為 <code>CloudSDK</code>，對 service 而言都是一樣的 SDK，只要透過 <code>AWSAdapter</code> 與  <code>AzureAdapter</code> 作轉換即可。</p>
<p>就類似僅管現在投影機有 VGA 也有 HDMI，對於 Macbook 而言都是 Mini Display Port，只要提供 VGA adapter 或 HDMI adapter 即可。</p>
</blockquote>
<h3 id="使用阿里雲_OSS">使用阿里雲 OSS</h3><p>雖然 Azure 提供很便宜的價格，但公司又擔心<strong>川普</strong>上台後，放在 Azure 的資料會被中國的<strong>網路長城</strong>封鎖，導致中國無法存取 Azure 檔案，因此高層決定將同一份程式，分別放到阿里雲與 Azure，相同網址，若在中國就使用阿里雲，其他國家使用 Azure。</p>
<p>阿里雲提供 OSS (Open Storage Service) 服務，功能與 AWS S3 與 Azure Blob 完全一樣，阿里雲也提供了 <code>Aliyun SDK for PHP</code> 供 PHP 使用。</p>
<p>阿里雲的 API 如下 (<code>AliyunSDK</code>)</p>
<table>
<thead>
<tr>
<th>功能描述</th>
<th>API</th>
</tr>
</thead>
<tbody>
<tr>
<td>上傳檔案</td>
<td>setBucket(＄container); uploadFile(＄blob, ＄file)</td>
</tr>
<tr>
<td>下載連結</td>
<td>setBucket(＄container); getUrl(＄blob)</td>
</tr>
<tr>
<td>刪除檔案</td>
<td>deleteObjet(＄container, ＄blob)</td>
</tr>
</tbody>
</table>
<p>目前 Azure 與阿里雲必須並存，AWS 暫時不用，但不能刪除，根據<strong>開放封閉原則</strong>，<code>AliyunSDK</code> 屬於新的需求，我們可以新增 class 支援 <code>AliyunSDK</code> (<strong><em>對擴展是開放的</em></strong>)，但不應該去修改原有 <code>CloudStorageService</code> (<strong><em>對修改是封閉的</em></strong>)。</p>
<p><img src="/images/dp/dp-adapter/adapter004.svg" alt="adapter004"></p>
<p><strong>上傳檔案</strong></p>
<p><img src="/images/dp/dp-adapter/adapter013.svg" alt="adapter013"></p>
<p><strong>AliyunAdapter</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">SDK</span>\<span class="title">AliyunSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliyunAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AliyunSDK*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$aliyunSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AliyunAdapter constructor.</span><br><span class="line">     * <span class="doctag">@param</span> AliyunSDK $aliyunSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AliyunSDK <span class="variable">$aliyunSDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK = <span class="variable">$aliyunSDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK-&gt;setBucket(<span class="variable">$container</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK-&gt;uploadFile(<span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK-&gt;setBucket(<span class="variable">$container</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;aliyunSDK-&gt;getUrl(<span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK-&gt;deleteObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@param</span> string $file</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliyunSDK-&gt;setBucket(<span class="variable">$container</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliyunSDK-&gt;uploadFile(<span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>putObject()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，因為 <code>AliyunSDK</code> 的 API 分兩步驟，需要先 <code>setBucket()</code>，然後再 <code>uploadFile()</code>。</p>
<p>31 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳下載檔案 url</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliyunSDK-&gt;setBucket(<span class="variable">$container</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;aliyunSDK-&gt;getUrl(<span class="variable">$blob</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getObjectUrl()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，因為 <code>AliyunSDK</code> 的 API 分兩步驟，需要先 <code>setBucket()</code>，然後再 <code>getUrl()</code>。</p>
<p><strong>CloudFactory</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudSDKFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立 adapter</span><br><span class="line">     * <span class="doctag">@return</span> CloudSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span>: <span class="title">CloudSDK</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$lut</span> = config(<span class="string">'app.CloudLUT'</span>);</span><br><span class="line">        <span class="variable">$cloudStorage</span> = config(<span class="string">'app.CloudStorage'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$className</span> = collect(<span class="variable">$lut</span>)</span><br><span class="line">            -&gt;get(<span class="variable">$cloudStorage</span>, AWSAdapter::class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$className</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>$lut</code> 為工廠的對照表，紀錄什麼 key 該對應哪個 adapter。</p>
<p><code>$cloudStorage</code> 為目前該使用什麼 SDK，key 為 AWS、Azure 還是 Aliyun。</p>
<p>使用 Collection 根據 key 去抓 value，決定該 new 什麼 adapter。</p>
<blockquote>
<p>平常 service 不應該使用 <code>static</code>，但工廠是可用 <code>static</code> 的。</p>
</blockquote>
<p><strong>config/app.php</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'CloudLUT'</span> =&gt; [</span><br><span class="line">    <span class="string">'AWS'</span>    =&gt; AWSAdapter::class,</span><br><span class="line">    <span class="string">'Azure'</span>  =&gt; AzureAdapter::class,</span><br><span class="line">    <span class="string">'Aliyun'</span> =&gt; AliyunAdapter::class,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="string">'CloudStorage'</span> =&gt; <span class="string">'Azure'</span>,</span><br></pre></td></tr></table></figure>
<p><code>app.php</code> 為<strong>設定檔</strong>。</p>
<p><code>CloudLUT</code> 為 key / value 對照表，決定要 new 什麼 adapter。</p>
<p><code>CloudStorage</code> 決定目前主機要使用什麼雲端服務，這個檔案可以不放在 git，由 DevOps 去維護。</p>
<h2 id="開放封閉原則">開放封閉原則</h2><blockquote>
<p>對於擴展是開放的，對於修改是封閉的。</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>若有新的需求，可以增加程式碼，而不應該修改既有的程式碼。</p>
</blockquote>
<p>開了 <code>CloudSDK</code> interface 之後，之後雖然新增了 <code>AliyunSDK</code> 需求，我們只需要：</p>
<ul>
<li>新增 <code>AliyunAdapter</code> class。</li>
<li>新增 <code>app.php</code> 設定檔的 <code>CloudLUT</code> 。</li>
</ul>
<p>其他原本的程式碼完全沒修改。</p>
<p>整個程式碼沒看到一行的 <code>if else</code> 去切換 SDK，全部用物件導向的<strong>多型</strong>就可達成。</p>
<p>Interface 之前的 controller 與 service <strong>保持封閉</strong>，interface 之後的 adapter <strong>保持開放</strong>，達成<strong>開放封閉原則</strong>的要求。</p>
<h2 id="實務上的_Adapter">實務上的 Adapter</h2><p>我們可以發現使用 Adapter pattern 後，由於訂出 <code>Target</code> interface，可以針對不同的 <code>Adaptee</code> 擴充。</p>
<p>但所有設計模式都面臨一個最基本的問題 ：<strong>由誰決定根據 interface 所建立的物件</strong>，也就是該由誰決定 <code>Adapter</code>。</p>
<p><img src="/images/dp/dp-adapter/adapter005.svg" alt="adapter005"></p>
<p>實務上 Adapter pattern 都會搭配一個 Simple Factory pattern，由 factory 決定要使用哪一個 adapter。</p>
<h2 id="Adapter_的變形">Adapter 的變形</h2><p><img src="/images/dp/dp-adapter/adapter006.svg" alt="adapter006"></p>
<p><img src="/images/dp/dp-adapter/adapter014.svg" alt="adapter014"></p>
<p>Adapter 不限於只能搭配單一 Adaptee，實務上可以搭配多個 Adaptee，只要 Target interface 保持穩定即可。</p>
<h2 id="Conclusion">Conclusion</h2><ul>
<li><strong>資料結構</strong>相對於 C 語言的<strong>指標</strong>，就相當於<strong>設計模式</strong>相對於 <strong>interface</strong>；想學怎麼活用<strong>指標</strong>，就要去學<strong>資料結構</strong>，想學怎麼活用 <strong>interface</strong>，就要去學<strong>設計模式</strong>。</li>
<li><strong>Strategy</strong> + <strong>Simple Factory (依賴注入)</strong> 或 <strong>Adapter + Simple Factory (依賴注入)</strong> 是實務上<strong>最常</strong>用到的物件導向，學會這兩招，幾乎學會了 60% 的物件導向。</li>
<li>若會善用物件導向，程式碼的 <code>if else</code> 數量會降到最低，<strong>循環複雜度</strong>也會降到最低，會將原來該用 <code>if else</code> 改用 <code>interface</code>，用<strong>很多小檔案</strong>取代<strong>很長的檔案</strong>。</li>
<li>設計模式都會有些變形，不用在乎每本書講的設計模式都不太一樣，設計模式<strong>只重其意，不重其招</strong>，重點是搞懂設計模式所要解決問題的本質，就可以自行加以變形，靈活運用。</li>
</ul>
<p><img src="/images/dp/dp-adapter/adapter007.png" alt="adapter007"></p>
<p><img src="/images/dp/dp-adapter/adapter008.png" alt="adapter008"></p>
<p><img src="/images/dp/dp-adapter/adapter009.png" alt="adapter009"></p>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52Adapter_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[以實際範例一步步重構成 Adapter Pattern]]>
    
    </summary>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
      <category term="OOP" scheme="http://oomusou.io/tags/OOP/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Protractor 使用 $ 與 $$?]]></title>
    <link href="http://oomusou.io/protractor/protractor-shortcut/"/>
    <id>http://oomusou.io/protractor/protractor-shortcut/</id>
    <published>2017-06-27T12:23:43.000Z</published>
    <updated>2017-06-27T12:27:59.000Z</updated>
    <content type="html"><![CDATA[<p>在 Protractor 官網的 <a href="http://www.protractortest.org/#/locators" target="_blank" rel="external">Using Locators</a>，看到了 <code>$</code> 與 <code>$$</code> 兩個 shortcut，但在 Angular 卻無法使用，本文筆記解決方案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Protractor 5.1.2</p>
<h2 id="$_Shortcut">$ Shortcut</h2><hr>
<p>根據 Protractor 官網的 <a href="http://www.protractortest.org/#/locators" target="_blank" rel="external">Using Locators</a>：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element(by.css(<span class="string">'my-css'</span>));</span><br></pre></td></tr></table></figure>
<p>可以簡寫為</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'my-css'</span>);</span><br></pre></td></tr></table></figure>
<p>而</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.all(by.css(<span class="string">'.selector'</span>));</span><br></pre></td></tr></table></figure>
<p>可以簡寫為</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$(<span class="string">'.selector'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="標準_Locator_寫法">標準 Locator 寫法</h2><hr>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4ProtractorPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.css(<span class="string">'app-root h1'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> element(by.css(<span class="string">'app-root h1'</span>)).getText();</span><br></pre></td></tr></table></figure>
<p>理論上可以改用 <code>$</code> 與 <code>$$</code> 寫法。</p>
<h2 id="使用_$">使用 $</h2><hr>
<p><img src="/images/protractor/protractor-shortcut/shortcut000.png" alt="shortcut000"></p>
<p>但改成 <code>$</code> 之後，language service 對 <code>$</code> 提出警告，實際編譯後也出現錯誤。</p>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;$, browser&#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4ProtractorPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="string">'app-root h1'</span>).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;$, browser&#125; from <span class="string">'protractor'</span>;</span><br></pre></td></tr></table></figure>
<p>將 <code>$</code> import 進來即可。</p>
<p><img src="/images/protractor/protractor-shortcut/shortcut001.png" alt="shortcut001"></p>
<h2 id="使用_$$">使用 $$</h2><hr>
<p><img src="/images/protractor/protractor-shortcut/shortcut002.png" alt="shortcut002"></p>
<p>但改成 <code>$$</code> 之後，language service 對 <code>$$</code> 提出警告，實際編譯後也出現錯誤。</p>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;$$, browser&#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4ProtractorPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> $$(<span class="string">'app-root h1'</span>).get(<span class="number">0</span>).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;$$, browser&#125; from <span class="string">'protractor'</span>;</span><br></pre></td></tr></table></figure>
<p>將 <code>$</code> import 進來即可。</p>
<p><img src="/images/protractor/protractor-shortcut/shortcut003.png" alt="shortcut003"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>$</code> 與 <code>$$</code> 寫法可以使 locator 寫法更為簡潔，實務上推薦使用，但記得要將 <code>$</code> 與 <code>$$</code> import 進來。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://www.protractortest.org/" target="_blank" rel="external">Protractor</a>,  <a href="http://www.protractortest.org/#/locators" target="_blank" rel="external">Using Locators</a><br><a href="http://www.protractortest.org/" target="_blank" rel="external">Protractor</a>,  <a href="https://github.com/angular/protractor/tree/5.1.2/exampleTypescript" target="_blank" rel="external">Protractor with TypeScript</a></p>
]]></content>
    <summary type="html">
    <![CDATA[在 Angular 也能使用 $ 與 $$]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解決 iTerm2 在 WebStorm 啟動緩慢的問題?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-iterm2-slow/"/>
    <id>http://oomusou.io/webstorm/webstorm-iterm2-slow/</id>
    <published>2017-06-26T12:23:43.000Z</published>
    <updated>2017-06-26T03:15:57.000Z</updated>
    <content type="html"><![CDATA[<p>iTerm2 幾乎成為 macOS 最多人使用的 terminal，WebStorm 內也可直接使用 iTerm2，不過最近卻發現 iTerm2 在 WebStorm 內啟動時間越來越久，幾乎超過 30 秒以上…。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS Sierra 10.12.5<br>WebStorm 2017.1.4<br>iTerm2 3.0.14</p>
<h2 id="Recipe">Recipe</h2><hr>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /<span class="keyword">private</span>/<span class="built_in">var</span>/<span class="keyword">log</span>/asl<span class="comment">/*.asl</span></span><br></pre></td></tr></table></figure>
<p>macOS 會將 log 存在此目錄下，過多的 log 將導致 iTerm2 在 WebStorm 下啟動緩慢，將此目錄的 <code>*.asl</code> 刪除後，iTerm2 在 WebStorm 的啟動就變快了。</p>
<blockquote>
<p>不要刪除該目錄下的所有檔案，只要刪除 <code>*.asl</code> 即可。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>一個簡單的步驟，就能恢復 iTerm2 在 WebStorm 的啟動速度。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[iTerm2 在 WebStorm 的啟動速度會越來越慢]]>
    
    </summary>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 HTTP GET 對 API 抓資料?]]></title>
    <link href="http://oomusou.io/angular/angular-http-get/"/>
    <id>http://oomusou.io/angular/angular-http-get/</id>
    <published>2017-06-24T12:23:43.000Z</published>
    <updated>2017-06-26T02:44:34.000Z</updated>
    <content type="html"><![CDATA[<p>Angular 為前端 framework，因此必須依賴後端 API 提供資料，最常見的就是透過 HTTP GET 抓 JSON，這個看似簡單的動作，在 Angular 並不是單一 method 可完成，必須透過 DI 與 RxJS ，才能順利抓到資料。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><p>Angular CLI 1.1.2<br>Angular 4.2.3</p>
<h2 id="HTTP_GET">HTTP GET</h2><p>為了聚焦在 Angular 的 HTTP GET，在此我們就不自建後端 API，而使用網路上現成的 API 做示範。</p>
<p><img src="/images/angular/angular-http-get/httpget000.png" alt="httpget000"></p>
<p><a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="external">JSONPlaceholder</a> 提供了現成的 API 服務，非常適合 Angular 練習使用。</p>
<p><img src="/images/angular/angular-http-get/httpget001.png" alt="httpget001"></p>
<p>我們將使用 <a href="https://jsonplaceholder.typicode.com/posts" target="_blank" rel="external">https://jsonplaceholder.typicode.com/posts</a> API 作為示範。</p>
<p><img src="/images/angular/angular-http-get/httpget002.png" alt="httpget002"></p>
<p>回傳為 JSON 物件陣列，每個物件有 <code>userId</code>，<code>id</code>，<code>title</code> 與 <code>body</code> 4 個欄位。</p>
<h2 id="Service_部分">Service 部分</h2><hr>
<h3 id="建立_Service">建立 Service</h3><p>Angular 除了引入 component 概念外，還提供了 service 概念：</p>
<ol>
<li>負責前端商業邏輯</li>
<li>負責前端顯示邏輯</li>
<li>負責與 API 溝通</li>
</ol>
<blockquote>
<p>Angular 另外一個重要觀念 : component，則相當於後端 MVC 的 controller，負責管理 HTML，CSS 與 service。</p>
</blockquote>
<p>由於我們要透過 HTTP GET 抓 <a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="external">JSONPlaceholder</a> API 資料，因此必須先建立 service。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng <span class="keyword">g</span> s <span class="keyword">post</span></span><br></pre></td></tr></table></figure>
<p>使用 Angular CLI 建立 <code>PostService</code>，Angular CLI 會自動幫我們在 class 名稱加上 <code>Service</code>，，因此在建立時只要提供 <code>post</code> 即可。</p>
<blockquote>
<p>完整應為 <code>ng generate service</code>，但實務可取第一個字母即可，即 <code>ng g s</code>。</p>
</blockquote>
<p><img src="/images/angular/angular-http-get/httpget003.png" alt="httpget003"></p>
<p>Angular CLI 會幫我們建立 2 個檔案：</p>
<ul>
<li><strong>post.service.ts</strong>：class 名稱自動會以大駝峰命名為 <code>PostService</code>。</li>
<li><strong>post.service.spec.ts</strong>：<code>PostService</code> 的單元測試檔。</li>
</ul>
<p>其中 <code>PostService</code> 還會自動加上 <code>@Injectable</code> decorator，表示此 class 可透過 provider 完成 DI。</p>
<blockquote>
<figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; WARNING Service <span class="keyword">is</span> generated but <span class="keyword">not</span> <span class="keyword">provided</span>, it must <span class="keyword">be</span> <span class="keyword">provided</span> to <span class="keyword">be</span> used</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Angular CLI 還會特別加上警告：<code>此 service 僅被建立而已，還必須透過 provider 才能使用</code>。</p>
<h3 id="Module_提供_Service">Module 提供 Service</h3><p>Angular CLI 僅幫我們建立了 service 而已，我們還必須由 module 的 provider 提供 service，才能完成 DI。</p>
<p><strong>src/app/app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;PostService&#125; from <span class="string">'./post.service'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [PostService],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p><code>AppModule</code> 為 Angular 預設的 module，每個 Angular 專案一定會有此 module。</p>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providers: [PostService],</span><br></pre></td></tr></table></figure>
<p>為了要讓 <code>AppModule</code> 的 provider 提供 <code>PostService</code>，須在 <code>[]</code> 陣列中加上 service 名稱：<code>PostService</code>，整個 service 才算建立完成，之前 Angular CLI 的 warning 就是在警告這件事情。</p>
<p><img src="/images/angular/angular-http-get/httpget004.png" alt="httpget004"></p>
<blockquote>
<p>若你覺得建立 service 後，還要另外修改 <code>AppModule</code> 很麻煩，也可以在使用 Angular CLI 建立 service 時，直接下 <code>ng g s PostService -m app</code>，<code>-m</code> 表示 <code>PostService</code> 要由 <code>AppModule</code> 提供，Angular CLI 會自動幫我們在 <code>AppModule</code> 的 <code>providers</code> 加上 <code>PostService</code>。</p>
</blockquote>
<h3 id="使用_Http_Class">使用 Http Class</h3><p>Angular 提供了 <code>Http</code> class，讓我們使用 <code>XMLHttpRequest</code> 向後端 API 要資料。</p>
<p><strong>src/app/post.service.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Post&#125; from <span class="string">'./post'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Http, Response&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PostService &#123;</span><br><span class="line">  <span class="keyword">private</span> getPostsURI = <span class="string">'https://jsonplaceholder.typicode.com/posts'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private http: Http) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">  getPosts(): Observable&lt;Post[]&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="keyword">this</span>.getPostsURI)</span><br><span class="line">      .map((response: Response) =&gt; response.json());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> getPostsURI = <span class="string">'https://jsonplaceholder.typicode.com/posts'</span>;</span><br></pre></td></tr></table></figure>
<p>將 API 網址寫在 class 的 private property。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private http: Http) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<p>我們要透過 <code>Http</code> class 對後端 API 抓資料，因此要透過 constructor DI <code>Http</code> class。</p>
<blockquote>
<p>為什麼 <code>Http</code> class 可以 DI 呢？</p>
</blockquote>
<p><strong><a href="https://github.com/angular/angular/blob/master/packages/http/src/http.ts#L103" target="_blank" rel="external">angular/packages/http/src/http.ts</a></strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Http &#123;</span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>因為 <code>Http</code> class 本身也是 <code>@Injectable()</code>，所以可以透過 constructor DI <code>Http</code> class。</p>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getPosts(): Observable&lt;Post[]&gt;  &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增 <code>getPost()</code> method，負責將 HTTP GET 的資料回傳。</p>
<p>注意其回傳型別為 <code>Observable</code>，因為 Angular <code>Http class</code> 的 <code>get()</code>，已經整合了 RxJS，所以回傳為 <code>Observable</code>，因此 service 回傳也應該為 <code>Observable</code>，才能由 component 決定 <code>subscribe()</code>。</p>
<p>其中 <code>Observable</code> 的泛型為 <code>Post[]</code>，畢竟 API 回傳的資料，其實是 JSON 物件的陣列，每個物件有 <code>userId</code>，<code>id</code>，<code>title</code> 與 <code>body</code> 4 個欄位，可將此 4 個欄位視為 <code>Post</code> ViewModel，所以回傳的資料本質為 <code>Post[]</code>，會在稍後建立 <code>Post</code> ViewModel。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="keyword">this</span>.getPostsURI)</span><br></pre></td></tr></table></figure>
<p>既然已經在 constructor DI <code>Http</code> class，就可以使用 <code>this.http.get()</code> 對後端 API 抓資料。</p>
<p>值得注意的是，<code>get()</code> 的回傳值型別為 <code>Observable&lt;Response&gt;</code>，並不是我們想要回傳的 <code>Observable&lt;Post[]&gt;</code> ，因此仍需要進一步的轉換。</p>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.map((response: Response) =&gt; response.json());</span><br></pre></td></tr></table></figure>
<p>由於 <code>get()</code> 回傳的為 <code>Observable&lt;Response&gt;</code>，因此 RxJS 的 operator 都可以拿來用，其中最常用的就是 <code>map()</code>，我們可以利用 <code>map()</code> 將 <code>Observable&lt;Response&gt;</code> 轉成 <code>Observable&lt;Post[]&gt;</code>。</p>
<p>對 <code>map()</code> 傳入 arrow function，因為 <code>get()</code> 回傳為 <code>Observable&lt;Response&gt;</code>，因此 <code>map()</code> 會將 <code>Response</code> 物件傳進 arrow function 的第 1 個參數，我們就可透過 <code>response.json()</code> 回傳 <code>Post[]</code>。</p>
<blockquote>
<p>其中 <code>response: Response</code> 的 <code>Response</code>，目前 WebStorm 無法自動 import，必須手動加上 <code>import {Response} from &#39;@angular/http&#39;;</code>，正常來說，WebStorm 會對型別自動 import，不過在 arrow function 內的參數型別，目前 WebStorm 還無法自動 import，需手動 import。</p>
</blockquote>
<p><img src="/images/angular/angular-http-get/httpget006.png" alt="httpget006"></p>
<blockquote>
<p>實物上的商業邏輯，會需要更複雜的轉換與判斷，RxJS 提供了很豐富的 operator 可使用，詳細請參考 <a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="external">ReactiveX Operator</a>。</p>
</blockquote>
<h3 id="載入_HttpModule">載入 HttpModule</h3><p><strong>src/app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;PostService&#125; from <span class="string">'./post.service'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    HttpModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [PostService],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  HttpModule</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>由於 <code>Http</code> class 隸屬於 <code>HttpModule</code>，因此在 <code>app.module</code> 的 <code>imports</code> 必須手動加上 <code>HttpModule</code>。</p>
<blockquote>
<p>目前 WebStorm 只能自動 import class，但還無法自動 import module，必須手動處理。</p>
</blockquote>
<p><img src="/images/angular/angular-http-get/httpget005.png" alt="httpget005"></p>
<blockquote>
<p>為什麼我們 DI <code>Http</code> class 時，都不用自己用 provider 提供 <code>Http</code> class，但自己寫的 service 卻要 provider 提供呢？</p>
</blockquote>
<p><strong><a href="https://github.com/angular/angular/blob/master/packages/http/src/http_module.ts#L49" target="_blank" rel="external">angular/packages/http/src/http_module.ts</a></strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在 <code>HttpModule</code> 的 provider 中已經提供 <code>Http</code> class，因此我們不必自己手動提供，但<code>PostService</code> 因為是自己建立的，所以必須在 <code>AppModule</code> 手動提供。</p>
<h3 id="建立_ViewModel">建立 ViewModel</h3><p><strong>src/app/post.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Post </span>&#123;</span><br><span class="line">  userId: <span class="built_in">number</span>,</span><br><span class="line">  id: <span class="built_in">number</span>,</span><br><span class="line">  title: <span class="built_in">string</span>,</span><br><span class="line">  body: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>Post</code> ViewModel 提供 <code>userId</code>、<code>id</code>、<code>title</code> 與 <code>body</code> 4 個 property，因為要給外界使用，記得加上 <code>export</code>。</p>
<p>到目前為止，service 部分已經完成，接下來是 component 部分。</p>
<h2 id="Component_部分">Component 部分</h2><hr>
<p>Component 部分有兩種寫法，一種是使用 <code>async</code> pipe，一種是使用 <code>subscribe()</code> ，將分別討論。</p>
<h3 id="使用_Async_Pipe">使用 Async Pipe</h3><p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;PostService&#125; from <span class="string">'./post.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Post&#125; from <span class="string">'./post'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  posts: Observable&lt;Post[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private postService: PostService) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.posts = <span class="keyword">this</span>.postService.getPosts();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posts: Observable&lt;Post[]&gt;;</span><br></pre></td></tr></table></figure>
<p>將從 API 抓下來的資料設定為 <code>posts</code> property，因為 <code>PostService.getPosts()</code> 回傳為 <code>Observable&lt;Post[]&gt;</code> 型別，所以 <code>posts</code> 型別也為 <code>Observable&lt;Post[]&gt;</code>。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private postService: PostService) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由 constructor DI <code>PostService</code>，因為 <code>PostService</code> 為 <code>@Injectable</code>，且在 <code>AppModule</code> 的 providers 已經提供 <code>PostService</code>，因此可以順利 DI。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.posts = <span class="keyword">this</span>.postService.getPosts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若要在 <code>AppComponent</code> 一開始執行時就執行一段程式，可在 component 內實踐 <code>ngOnInit()</code> method，此為 <code>OnInit</code> interface 所定義。</p>
<p>將 <code>postService.getPosts()</code> 結果指定給 <code>this.posts</code>。</p>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let post of posts|async"</span>&gt;</span></span><br><span class="line">    Post ID: &#123;&#123; post.id &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    User ID: &#123;&#123; post.userId &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    Title: &#123;&#123; post.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    Body: &#123;&#123; post.body &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>將 API 全部回傳資料顯示。</p>
<p>第 2 行</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">li</span> *ngFor=<span class="string">"let post of posts|async"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>特別在 <code>posts</code> 之後加上 <code>async</code> pipe。</p>
<p>RxJS 的 Observable 有個特性，會在 <code>subscribe()</code> 後才真正執行向後端 API 抓資料，若在 HTML template 加上 <code>async</code> pipe，則會自動在顯示資料時加以 <code>subscribe()</code>，並在執行結束加以 <code>unsubscribe()</code>。</p>
<h3 id="使用_Subscribe()">使用 Subscribe()</h3><p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;PostService&#125; from <span class="string">'./post.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Post&#125; from <span class="string">'./post'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  posts: Post[];</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private postService: PostService) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.postService.getPosts()</span><br><span class="line">      .subscribe(</span><br><span class="line">        (posts: Post[]) =&gt; <span class="keyword">this</span>.posts = posts,</span><br><span class="line">        (error: <span class="built_in">any</span>) =&gt; <span class="built_in">console</span>.log(error),</span><br><span class="line">        () =&gt; <span class="built_in">console</span>.log(<span class="string">'Get posts completed'</span>)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posts: Post[];</span><br></pre></td></tr></table></figure>
<p><code>posts</code> 的型別從 <code>Observable&lt;Post[]&gt;</code> 改成 <code>Post[]</code>。</p>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.postService.getPosts()</span><br><span class="line">    .subscribe(</span><br><span class="line">      (posts: Post[]) =&gt; <span class="keyword">this</span>.posts = posts,</span><br><span class="line">      (error: <span class="built_in">any</span>) =&gt; <span class="built_in">console</span>.log(error),</span><br><span class="line">      () =&gt; <span class="built_in">console</span>.log(<span class="string">'Get posts completed'</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <code>getPosts()</code> 回傳值為 RxJS 的 <code>Observable&lt;Post[]&gt;</code>，必須在 component 下了 <code>subscribe()</code>之後，才會真正的向後端 API 抓資料。</p>
<p><code>subscribe()</code> 有 3 個參數，可分別傳入 arrow function：</p>
<ul>
<li><strong>next</strong>：<code>subscribe()</code> 後接下來要做的事情，由於 <code>map()</code> 已經在 service 內完成，要做的只剩下將 <code>posts</code> 指定到 <code>this.posts</code>。</li>
<li><strong>error</strong>：抓 API 出錯該做的事情，相當於 <code>try catch finally</code> 的 <code>catch</code>。</li>
<li><strong>complete</strong>：抓 API 結束該做的事情，相當於 <code>try catch finally</code> 的 <code>finally</code>。</li>
</ul>
<p>其中 <code>next</code> 為必須，<code>error</code> 與 <code>complete</code> 可視需求省略。</p>
<blockquote>
<p>需要自己 <code>unsubscribe()</code> 嗎？</p>
</blockquote>
<p>RxJS 中，若 <code>Observable</code> 沒有 completed 的一天，就需要手動 <code>unsubscribe()</code>，但因為 <code>Http.get()</code> 執行完後就會 completed，所以就不需要 <code>unsubscribe()</code> 動作。</p>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let post of posts"</span>&gt;</span></span><br><span class="line">    Post ID: &#123;&#123; post.id &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    User ID: &#123;&#123; post.userId &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    Title: &#123;&#123; post.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    Body: &#123;&#123; post.body &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 2 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let post of posts"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>將 <code>async</code> 拿掉。</p>
<p><img src="/images/angular/angular-http-get/httpget007.png" alt="httpget007"></p>
<blockquote>
<p>實務上該使用 <code>async</code> pipe 或是 <code>subscribe()</code> 呢？</p>
</blockquote>
<p>就功能面而言，兩種寫法結果都正確，但就程式的可維護性而言，建議使用 <code>subscribe()</code>。</p>
<p>一般來說，HTML template 建議只用於 data binding，盡量不要寫程式碼，因為日後 debug 時，注意力都是放在 TypeScript 部分，比較不會注意 HTML template，所以若有程式碼藏在 HTML template，較不容易被發現。</p>
<p>此外，在 component 看到 <code>subscribe()</code>，也可很容易看出這是 RxJS 的 <code>Observable</code>，有助於日後維護。</p>
<h2 id="為什麼要使用_Service?">為什麼要使用 Service?</h2><p>或許你會認為，明明使用  <code>XMLHttpRequest</code> 向後端 API 抓資料是很單純的事情，為什麼 Angular 還要大費周章透過 service + DI，不是提供一個簡單的 method 就好了嗎？有幾個原因：</p>
<ul>
<li>將來若其他 component 要使用 API 時，將 service 直接 DI 進 compoent 即可。</li>
<li>將來若要對 API 的 service 做抽換，可直接透過 DI 換掉即可。</li>
<li>將來若要對 component 做單元測試，可輕易的 mock API service 即可。</li>
</ul>
<p>間單的說，將 API 部分獨立成 service，目的要使 component 與 API <strong>解耦合</strong>。</p>
<h2 id="Conclusion">Conclusion</h2><ul>
<li>簡單的 HTTP GET 需求，就可以讓我們學會 DI 與 RxJS。</li>
<li>實務上建議使用 <code>subscribe()</code>，程式的可維護性較高。</li>
<li>使用 service 存取 API，而不在 component 內存取 API，可讓 component 與 API 解耦合。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG4HttpGet" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="external">ReativeX Operator</a></p>
]]></content>
    <summary type="html">
    <![CDATA[包含 DI 與 RxJS 觀念]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="RxJS" scheme="http://oomusou.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 執行 Jasmine 單元測試?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-jasmine/"/>
    <id>http://oomusou.io/webstorm/webstorm-jasmine/</id>
    <published>2017-06-22T12:23:43.000Z</published>
    <updated>2017-06-22T07:36:51.000Z</updated>
    <content type="html"><![CDATA[<p>Angular CLI 已經將 Jasmine 整好，我們可以直接在 terminal  下 <code>ng test</code> 執行單元測試；WebStorm 亦整合了 Karma + Jasmine，讓我們可以在 IDE 內直接跑 Jasmine。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Jasmine 2.6.2<br>WebStorm 2017.1.4</p>
<h2 id="設定_Karma_執行環境">設定 Karma 執行環境</h2><hr>
<p>Jasmine 是 testing framework，Karma 是 testing runner，我們必須靠 Karma 才能執行 Jasmine 單元測試。</p>
<h3 id="新增_Karma_設定">新增 Karma 設定</h3><p><img src="/images/webstorm/webstorm-jasmine/jas000.png" alt="jas000"></p>
<p><strong><em>Run -&gt; Edit Configurations</em></strong></p>
<p><img src="/images/webstorm/webstorm-jasmine/jas001.png" alt="jas001"></p>
<p>按左上角 <code>+</code> 新增 <code>Karma</code> 設定。</p>
<p><img src="/images/webstorm/webstorm-jasmine/jas002.png" alt="jas002"></p>
<p>將 Name 取名為 <code>Jasmine</code>，Configuration file 選擇專案根目錄的 <code>karma.conf.js</code>，此為 Angular CLI 為 Angular 量身定做的 Karma 設定檔。</p>
<h3 id="執行_Jasmine">執行 Jasmine</h3><p><img src="/images/webstorm/webstorm-jasmine/jas003.png" alt="jas003"></p>
<p>上方選擇 <code>Jasmine</code>，按右側的<code>綠色三角形</code>執行測試。</p>
<p><img src="/images/webstorm/webstorm-jasmine/jas004.png" alt="jas004"></p>
<p>Karma 會自動啟動瀏覽器，並顯示 <code>Karma connected</code>。</p>
<p>這個瀏覽器不用關閉，一直開啟即可，之後重跑驗收測試，Karma 會自動使用。</p>
<p><img src="/images/webstorm/webstorm-jasmine/jas005.png" alt="jas005"></p>
<p>通過 Angular 的 <code>app/app.component.spec.ts</code> 的 3  個測試案例，並顯示 <code>綠燈</code>。</p>
<p>到目前為止，已經設定好 Karma 在 WebStorm 的執行環境。</p>
<h2 id="自動執行_Jasmine">自動執行 Jasmine</h2><hr>
<p><img src="/images/webstorm/webstorm-jasmine/jas006.png" alt="jas006"></p>
<p>若你希望寫完測試後，WebStorm 可自動存檔並執行 Jasmine 測試，可按下左側的 <code>Toggle auto-test</code>，日後只要修改測試，Jasmine 會自動執行。</p>
<blockquote>
<p>不需存檔，WebStorm 會自動存檔並執行 Jasmine 測試。</p>
</blockquote>
<h2 id="手動執行_Jasmine">手動執行 Jasmine</h2><hr>
<p><img src="/images/webstorm/webstorm-jasmine/jas007.png" alt="jas007"></p>
<p>實務上會有很多測試案例，但可能目前只想執行單一測試案例，可在 <code>it</code> 前加上 <code>f</code>，表示 <code>focus</code>，再按下上方或左側的 <code>綠色三角形</code> 執行測試，則 Karma 將只執行 <code>fit()</code> 的測試案例，其他測試案例將忽略不執行。</p>
<p><img src="/images/webstorm/webstorm-jasmine/jas008.png" alt="jas008"></p>
<p>實務上若某些測試案例暫時不想執行，可在 <code>if</code> 前加上 <code>x</code>，表示 <code>exclude</code>，再按下上方或左側的 <code>綠色三角形</code> 執行測試，則 Karma 將不執行 <code>xit()</code> 的測試案例，其他測試案例則繼續執行。</p>
<h2 id="快速建立測試">快速建立測試</h2><hr>
<p><img src="/images/webstorm/webstorm-jasmine/jas009.png" alt="jas009"></p>
<p>WebStorm 已經內建 Jasmine 樣板，按熱鍵可產生 <code>Jasmine Suite</code> 、<code>Jasmine Spec</code>、<code>Jasmine beforeEach</code> 與 <code>Jasmine afterEach</code>，讓我們更快速產生驗收測試，節省開發時間。</p>
<blockquote>
<p>Windows : Ctrl + N</p>
<p>macOS : ⌘ + N</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>是否要<strong>自動執行</strong>或<strong>手動執行</strong> Protractor 因人而異，個人是比較喜歡用 <code>fit()</code> 與  <code>xit()</code>  控制要執行什麼測試，然後手動執行。</li>
<li>Angular CLI  雖然提供了 <code>ng test</code>，讓我們在 terminal 就能執行 Jasmine 單元測試，但在 WebStorm 內跑 Protractor，我們可以更明確知道哪些測試案例是 <code>紅燈綠燈</code>，也可享受圖形化介面的方便。</li>
<li>目前唯一的遺憾是儘管設定了中斷點，在 Karma 下仍然無法停止，但 Protractor 下卻可以，有待 WebStorm 解決此 bug。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[不用透過 Angular CLI 也能執行 Jasmine]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Jasmine" scheme="http://oomusou.io/tags/Jasmine/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 執行 Protractor E2E 測試?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-protractor/"/>
    <id>http://oomusou.io/webstorm/webstorm-protractor/</id>
    <published>2017-06-21T12:23:43.000Z</published>
    <updated>2017-06-22T07:21:16.000Z</updated>
    <content type="html"><![CDATA[<p>Angular CLI 已經將 Protractor 整好，我們可以直接在 terminal  下 <code>ng e2e</code> 執行 E2E 測試；WebStorm 亦整合了 Protractor，讓我們可以在 IDE 內直接跑 Protractor。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Protractor 5.1.2<br>Jasamine 2.6.2<br>WebStorm 2017.1.4</p>
<h2 id="設定_Protractor_執行環境">設定 Protractor 執行環境</h2><hr>
<h3 id="啟動_Angular_內建_Web_Server">啟動 Angular 內建 Web Server</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ng serve</span><br></pre></td></tr></table></figure>
<p>使用 <code>ng e2e</code> 跑 E2E testing 時，不用事先啟動 web server，因為 Angular CLI 會在測試前先啟動 web server，然後執行驗收測試，最後再關閉 web server，但若使用 WebStorm 跑 Protractor，則必須在背景先執行 <code>ng serve</code> 啟動 web server。</p>
<p><img src="/images/webstorm/webstorm-protractor/pro000.png" alt="pro000"></p>
<h3 id="新增_Protractor_設定">新增 Protractor 設定</h3><p><img src="/images/webstorm/webstorm-protractor/pro001.png" alt="pro001"></p>
<p><strong><em>Run -&gt; Edit Configurations</em></strong></p>
<p><img src="/images/webstorm/webstorm-protractor/pro002.png" alt="pro002"></p>
<p>按左上角 <code>+</code> 新增 <code>Protractor</code> 設定。</p>
<p><img src="/images/webstorm/webstorm-protractor/pro003.png" alt="pro003"></p>
<p>將 Name 取名為 <code>Protractor</code>，其他設定 WebStorm 會自動抓到，接受預設值即可。</p>
<h3 id="執行_Protractor">執行 Protractor</h3><p><img src="/images/webstorm/webstorm-protractor/pro005.png" alt="pro005"></p>
<p>上方選擇 <code>Protractor</code>，按右側的<code>綠色三角形</code>執行測試。</p>
<p><img src="/images/webstorm/webstorm-protractor/pro006.png" alt="pro006"></p>
<p>Protractor 會自動啟動瀏覽器在 <code>http://localhost:4200</code>，執行完測試後自動關閉瀏覽器。</p>
<p>到目前為止，已經設定好 Protractor 在 WebStorm 的執行環境。</p>
<h2 id="自動執行_Protractor">自動執行 Protractor</h2><hr>
<p><img src="/images/webstorm/webstorm-protractor/pro007.png" alt="pro007"></p>
<p>若你希望寫完測試後，WebStorm 可自動存檔並執行 Protractor 測試，可按下左側的 <code>Toggle auto-test</code>，日後只要修改測試，Protractor 會自動執行。</p>
<blockquote>
<p>不需存檔，WebStorm 會自動存檔並執行 Protractor 測試。</p>
</blockquote>
<h2 id="手動執行_Protractor">手動執行 Protractor</h2><hr>
<p><img src="/images/webstorm/webstorm-protractor/pro008.png" alt="pro008"></p>
<p>實務上會有很多測試案例，但可能目前只想執行單一測試案例，可在 <code>it</code> 前加上 <code>f</code>，表示 <code>focus</code>，再按下上方或左側的 <code>綠色三角形</code> 執行測試，則 Protractor 將只執行 <code>fit()</code> 的測試案例，其他測試案例將忽略不執行。</p>
<p><img src="/images/webstorm/webstorm-protractor/pro009.png" alt="pro009"></p>
<p>實務上若某些測試案例暫時不想執行，可在 <code>if</code> 前加上 <code>x</code>，表示 <code>exclude</code>，再按下上方或左側的 <code>綠色三角形</code> 執行測試，則 Protractor 將不執行 <code>xit()</code> 的測試案例，其他測試案例則繼續執行。</p>
<h2 id="快速建立測試">快速建立測試</h2><hr>
<p><img src="/images/webstorm/webstorm-protractor/pro010.png" alt="pro010"></p>
<p>WebStorm 已經內建 Jasmine 樣板，按熱鍵可產生 <code>Jasmine Suite</code> 、<code>Jasmine Spec</code>、<code>Jasmine beforeEach</code> 與 <code>Jasmine afterEach</code>，讓我們更快速產生驗收測試，節省開發時間。</p>
<blockquote>
<p>Windows : Ctrl + N</p>
<p>macOS : ⌘ + N</p>
</blockquote>
<h2 id="對測試下中斷點">對測試下中斷點</h2><hr>
<p><img src="/images/webstorm/webstorm-protractor/pro011.png" alt="pro011"></p>
<p>若要對測試程式下中斷點，也可以直接在程式碼左側加上 <code>紅色</code> 中斷點，按上方的 <code>綠色瓢蟲</code> 執行 debug 模式，則 WebStorm 會自動停在中斷點進行 debug。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>是否要<strong>自動執行</strong>或<strong>手動執行</strong> Protractor 因人而異，個人是比較喜歡用 <code>fit()</code> 與  <code>xit()</code>  控制要執行什麼測試，然後手動執行。</li>
<li>Angular CLI  雖然提供了 <code>ng e2e</code>，讓我們在 terminal 就能執行 Protractor E2E 測試，但在 WebStorm 內跑 Protractor，我們可以更明確知道哪些測試案例是 <code>紅燈綠燈</code>，還可以對測試下中斷點，直接 step into 做 debug。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[不用透過 Angular CLI 也能執行 Protractor]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Protractor 對 Laravel 進行驗收測試?]]></title>
    <link href="http://oomusou.io/protractor/protractor-laravel/"/>
    <id>http://oomusou.io/protractor/protractor-laravel/</id>
    <published>2017-06-19T12:23:43.000Z</published>
    <updated>2017-06-19T23:03:58.000Z</updated>
    <content type="html"><![CDATA[<p><strong>驗收測試</strong>是以使用者角度對網站做測試，屬於<strong>黑箱測試</strong>，既然是黑箱測試，原本使用 PHP/Laravel 所開發的網站，就不一定要使用 PHP/Laravel 後端技術來做驗收測試，也可以使用前端的技術來做；透過 Angular CLI，我們可使用 TypeScript + Protractor + Jasmine + Webpack 對 PHP/Laravel 做驗收測試。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.15<br>Laravel 5.4.27<br>Angular CLI 1.1.2<br>Angular 4.2.3<br>TypeScript 2.3.3<br>Protractor 5.1.2<br>Jasmine 2.6.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer <span class="operator"><span class="keyword">create</span>-<span class="keyword">project</span> laravel/laravel Laravel54 <span class="comment">--prefer-dist</span></span></span><br></pre></td></tr></table></figure>
<p>使用 Composer 建立 Laravel 專案。</p>
<h2 id="執行_Laravel">執行 Laravel</h2><hr>
<p><img src="/images/protractor/protractor-laravel/laravel000.png" alt="laravel000"></p>
<p>執行 <code>php artisan serve</code> 啟動內建的 PHP web server，預設執行在 <code>http://127.0.0.1:8000</code>。</p>
<p><img src="/images/protractor/protractor-laravel/laravel001.png" alt="laravel001"></p>
<p>在 <code>http://127.0.0.1:8000</code>，我們看到了首頁有斗大的 <code>Laravel</code>。</p>
<h2 id="安裝_Angular_CLI">安裝 Angular CLI</h2><hr>
<p>我們即將使用 Protractor 對 Laravel 做驗收測試，在 Angular CLI 中，已經將 TypeScript + Protractor + Jasmine + Webpack 都整合好了，因此我們要安裝 Angular CLI，由 Angular CLI 建立 Angular 專案後，再修改專案內的 <code>e2e</code> 目錄的測試程式，由 Protractor 對 Laravel 做驗收測試。</p>
<p><strong>安裝 Node.js</strong></p>
<p>(略)</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install -g <span class="property">@angular</span>/cli</span><br></pre></td></tr></table></figure>
<p>由 NPM 安裝 Angular CLI。</p>
<ul>
<li><strong>-g</strong>  : 表 global，將 Angular CLI 安裝在系統全域環境，整個 macOS 都能用。</li>
</ul>
<h2 id="建立_Angular_專案">建立 Angular 專案</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng <span class="keyword">new</span> NG4Protractor</span><br></pre></td></tr></table></figure>
<p>使用 Angular CLI 建立 Angular 專案。</p>
<h2 id="修改_Page_Object">修改 Page Object</h2><hr>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4ProtractorPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    browser.waitForAngularEnabled(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'http://127.0.0.1:8000/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.className(<span class="string">'title m-b-md'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>app.po.ts</code> 為 page object，目的讓我們的驗收測試不用直接面對容易變動的 HTML 與 CSS，若將來 HTML 與 CSS 有任何修改，只要統一的修改 <code>app.po.ts</code> 檔案即可，不用修改驗收測試。</p>
<p>第 4 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">navigateTo() &#123;</span><br><span class="line">  browser.waitForAngularEnabled(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> browser.get(<span class="string">'http://127.0.0.1:8000/'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Angular 的 Protractor，預設會判斷網頁是否由 Angular 開發，但目前我們要測的不是 Angular，而是 Laravel，因此必須加上 <code>browser.waitForAngularEnabled(false)</code>，避免測試失敗。</p>
<p>由於 Laravel 預設的網址為 <code>http://127.0.0.1:8000/</code>，因此在 <code>browser.get()</code> 加上網址。</p>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> getParagraphText() &#123;</span><br><span class="line">   <span class="keyword">return</span> element(by.className(<span class="string">'title m-b-md'</span>)).getText();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們想要測試的<strong>首頁是否有 Laravel</strong>。</p>
<p><img src="/images/protractor/protractor-laravel/laravel002.png" alt="laravel002"></p>
<p>根據 <code>welcome.blade.php</code>，我們發現 <code>Laravel</code> 的 <code>&lt;div&gt;</code> 的 CSS class 是 <code>title m-b-md</code>，因此使用 Protractor 的 <code>by.className(&#39;title m-b-md&#39;)</code> 抓到該 element，再由 <code>getText()</code> 抓到 <code>Laravel</code>。</p>
<h2 id="修改驗收測試">修改驗收測試</h2><hr>
<p><strong>e2e/app.e2e-spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NG4ProtractorPage &#125; from <span class="string">'./app.po'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'ng4-protractor App'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> page: NG4ProtractorPage;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    page = <span class="keyword">new</span> NG4ProtractorPage();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should display Laravel'</span>, () =&gt; &#123;</span><br><span class="line">    page.navigateTo();</span><br><span class="line">    expect(page.getParagraphText()).toEqual(<span class="string">'Laravel'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>app.e2e-spec.ts</code> 才是真正的驗收測試，如同使用 Jasmine 寫單元測試一樣。</p>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">  page = <span class="keyword">new</span> NG4ProtractorPage();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在每個驗收測試執行之前，先建立 page object 物件。</p>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should display Laravel'</span>, () =&gt; &#123;</span><br><span class="line">  page.navigateTo();</span><br><span class="line">  expect(page.getParagraphText()).toEqual(<span class="string">'Laravel'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>測試案例，想要測試是否在首頁看到 <code>Laravel</code> ，使用 page object 的 <code>getParagraphText()</code> 抓到值，再由 <code>expect().toEqual(&#39;Laravel&#39;)</code> 判斷是否為 <code>Laravel</code>。</p>
<h2 id="執行驗收測試">執行驗收測試</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ng e2e --serve=<span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>預設 <code>ng e2e</code> 會重新編譯整個 Angular，但目前我們並沒有寫 Angular，只是想藉由 Angular CLI 的 Protractor 環境測試 Laravel 而已，因此要加上 <code>—serve=false</code>，則 Angular CLI 將只會編譯 Protractor 部分的驗收測試而已，速度會快很多。 </p>
<p><img src="/images/protractor/protractor-laravel/laravel003.png" alt="laravel003"></p>
<p><code>綠燈</code> 通過 Protractor 驗收測試。</p>
<blockquote>
<p>若在公司的 proxy 內，Protractor 將無法正常執行，必須自行設定 NPM proxy。</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config -<span class="keyword">g</span> <span class="keyword">set</span> proxy http:<span class="comment">//<span class="label">xxx.xxx.xxx.xxx.xxx:80</span></span></span><br><span class="line">$ npm config -<span class="keyword">g</span> <span class="keyword">set</span> https-proxy http:<span class="comment">//<span class="label">xxx.xxx.xxx.xxx.xxx:80</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Protractor 原本是 Google 為 Angular 量身定做的 E2E testing framework，專門用來測試 Angular 所開發的網站，但也能用來測試任何以後端為主的網站，不侷限於 Laravel。</li>
<li>藉由 Angular CLI 所建立的 Angular 專案，我們將不用再手動整理 TypeScript + Protractor + Jasmine + Webpack 環境，Angular CLI 已經幫我們搞定了。</li>
<li>若將來想將 MVC 專案重構成前後端分離的專案，可藉由此方式先將 MVC 的驗收測試先用 Protractor 寫好，然後重構 MVC 專案，達到商業邏輯與後端 framework 解耦合後，將來再將後端的商業邏輯移植到前後端分離的後端 framework，下一步再使用 Angular 接後端 API，最後再使用同一份 Protractor 驗收測試來測試 Angular，由於驗收測試是同一份，更能確保從 MVC 重構成前後端分離後，功能是否完全正常。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou" target="_blank" rel="external">GitHub</a> 上找到</p>
<ul>
<li><a href="https://github.com/oomusou/Laravel54" target="_blank" rel="external">Laravel</a></li>
<li><a href="https://github.com/oomusou/NG4Protractor" target="_blank" rel="external">Protractor</a></li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://coryrylan.com" target="_blank" rel="external">Cory Rylan</a>, <a href="https://coryrylan.com/blog/introduction-to-e2e-testing-with-the-angular-cli-and-protractor" target="_blank" rel="external">Introduction to E2E Testing with the Angular CLI and Protractor</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用前端技術對後端做驗收測試]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何將 Git Bash 整合進 WebStorm？]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-git-bash/"/>
    <id>http://oomusou.io/webstorm/webstorm-git-bash/</id>
    <published>2017-06-19T12:23:43.000Z</published>
    <updated>2017-06-15T07:39:55.000Z</updated>
    <content type="html"><![CDATA[<p>WebStorm for Windows 的 terminal 預設是使用 Windows 內建的 Command Prompt，但可惜內建的 Command Prompt 不強，而 Git Bash 是 Git for Windows 所提供的 git 文字介面，讓我們可以直接對 git 下指令，並顯示當前的 branch，重點是能在 Windows 使用 Bash，且整合進 WebStorm 的 terminal。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>WebStorm 2017.1.4<br>Git for Windows 2.13.1</p>
<h2 id="下載_Git_Bash">下載 Git Bash</h2><hr>
<p>到 <a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git for Windows</a> 下載 Git Bash。</p>
<p><img src="/images/webstorm/webstorm-git-bash/bash000.png" alt="bash000"></p>
<h2 id="安裝_Git_Bash">安裝 Git Bash</h2><hr>
<p>基本下都 <code>下一步</code> 即可。</p>
<h2 id="設定_WebStorm">設定 WebStorm</h2><hr>
<p><img src="/images/webstorm/webstorm-git-bash/bash001.png" alt="bash001"></p>
<p><strong><em>File -&gt; Settings -&gt; Tools -&gt; Terminal</em></strong></p>
<ul>
<li><strong>Shell path</strong> : <code>&quot;C:\Program Files\Git\bin\sh.exe&quot; -login -i</code></li>
</ul>
<p>重新啟動 WebStorm。</p>
<h2 id="執行_Git_Bash">執行 Git Bash</h2><hr>
<p><img src="/images/webstorm/webstorm-git-bash/bash002.png" alt="bash002"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Git Bash 算是在 Windows 下最接近 Linux 血統的 terminal，實務上完全可以取代 Windows 內建的 Command Prompt。</li>
<li>WebStorm 的 terminal 也能順利跑 Git Bash。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li><a href="https://bobsguides.com/" target="_blank" rel="external">Bob’s Guide</a>, <a href="https://bobsguides.com/blog.html/2014/10/23/git-bash-inside-phpstorm/" target="_blank" rel="external">Git Bash Inside PhpStorm</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Git Bash 也能跑在 WebStorm 的 terminal]]>
    
    </summary>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之 Module]]></title>
    <link href="http://oomusou.io/typescript/typescript-module/"/>
    <id>http://oomusou.io/typescript/typescript-module/</id>
    <published>2017-06-18T12:23:43.000Z</published>
    <updated>2017-06-13T16:15:26.000Z</updated>
    <content type="html"><![CDATA[<p>ES6 提出了 module 概念，讓我們將程式碼加以模組化，避免如 ES5 一樣常常寫出幾千行的程式碼，造成日後難以維護，TypeScript 也支援 ES6 的 module。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScrpit 2.3</p>
<h2 id="Introduction">Introduction</h2><hr>
<p>Module 有自己的 scope，不是 global scope，也就是說，在 module 內的變數、function、class 與 interface …，只有在同一個 module 內才看得到，除非特別加上 <code>export</code> 關鍵字，外界才能存取；同樣的，module 要使用其他 module 的變數、function、class 與 interface …，除非特別加上 <code>import</code> 關鍵字，才能存取外界。</p>
<blockquote>
<p>在 TypeScript，只要檔案中存在 <code>import</code> 或 <code>export</code> 關鍵字，都被視為 module。</p>
</blockquote>
<h2 id="Export">Export</h2><hr>
<h3 id="直接_Export">直接 Export</h3><p><strong>Validation.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> StringValidator </span>&#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>interface</code> 前面加上 <code>export</code>，則可直接 export 出去。</p>
<p><strong>ZipCodeValidator.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ZipCodeValidator <span class="keyword">implements</span> StringValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>const</code> 之前加上 <code>export</code>，則可直接 export 出去。</p>
<p>在 <code>class</code> 之前加上 <code>export</code> ，則可直接 export 出去。</p>
<blockquote>
<p>要直接 export，只要在 <code>const</code>、<code>function</code> 、<code>class</code> 與 <code>interface</code> 之前加上 <code>export</code> 關鍵字即可。</p>
</blockquote>
<h3 id="以別名_Export">以別名 Export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> ZipCodeValidator <span class="keyword">implements</span> StringValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator as mainValidator &#125;;</span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator &#125;;</span><br></pre></td></tr></table></figure>
<p>相當於</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ZipCodeValidator <span class="keyword">implements</span> StringValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator as mainValidator &#125;;</span><br></pre></td></tr></table></figure>
<p>將原本 <code>ZipCodeValidator</code> 以 <code>mainValidator</code> 名稱 export 出去。</p>
<blockquote>
<p>實務上有可能原本要 export 的名稱太長，或者不夠貼近 domain，因此不適合使用者，需要用更簡短、更精準的名稱時，可以搭配 <code>as</code>。</p>
</blockquote>
<h3 id="重新_Export">重新 Export</h3><p><strong>ParseIntBasedZipCodeValidator.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParseIntBasedZipCodeValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; <span class="built_in">parseInt</span>(s).toString() === s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export original validator but rename it</span></span><br><span class="line"><span class="keyword">export</span> &#123;ZipCodeValidator as RegExpBasedZipCodeValidator&#125; from <span class="string">"./ZipCodeValidator"</span>;</span><br></pre></td></tr></table></figure>
<p>使用 <code>export {} from</code> 可以從另外一個 module 間接的將另外一個 module 內的東西 export 出去。</p>
<p>可明確指定要 export 什麼東西。</p>
<p><strong>AllValidators.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * from <span class="string">"./StringValidator"</span>; <span class="comment">// exports interface 'StringValidator'</span></span><br><span class="line"><span class="keyword">export</span> * from <span class="string">"./LettersOnlyValidator"</span>; <span class="comment">// exports class 'LettersOnlyValidator'</span></span><br><span class="line"><span class="keyword">export</span> * from <span class="string">"./ZipCodeValidator"</span>;  <span class="comment">// exports class 'ZipCodeValidator'</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>export * from</code> 明確另外一個 module 的<strong>所有東西</strong> export 出去。</p>
<h2 id="Import">Import</h2><hr>
<h3 id="單一_Import">單一 Import</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ZipCodeValidator &#125; from <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> ZipCodeValidator();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import {} from</code> 可以從一個 module 單一 import 一個東西。</p>
<h3 id="以別名_Import">以別名 Import</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ZipCodeValidator as ZCV &#125; from <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> ZCV();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import { as } from</code> 可以從一個 module 單一 import 後，並同時取別名。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * as validator from <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> validator.ZipCodeValidator();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import * as from</code> 將一個 module 所有東西 import 成一個變數，並透過變數去存取所有 export 的東西。</p>
<h2 id="Default_Export">Default Export</h2><hr>
<p>一個 module 僅可以有一個 default export。</p>
<p><strong>ZipCodeValidator.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ZipCodeValidator &#123;</span><br><span class="line">    <span class="keyword">static</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; ZipCodeValidator.numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>export</code> 之後加上 <code>default</code>。</p>
<p><strong>Test.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> validator from <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> validator();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import 名稱 from</code>，不需使用 <code>{}</code>，直接將 default export 成特定名稱。 </p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過 module，我們能將功能相近的變數、function、class 與 interface 放在同一個 module，讓程式碼更加模組化，避免一個檔案好幾千行而難以維護。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/modules.html" target="_blank" rel="external">Handbook : Modules</a></p>
]]></content>
    <summary type="html">
    <![CDATA[TypeScript 也支援 ES6 的 module]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之 Arrow Function]]></title>
    <link href="http://oomusou.io/typescript/typescript-arrow-function/"/>
    <id>http://oomusou.io/typescript/typescript-arrow-function/</id>
    <published>2017-06-17T12:23:43.000Z</published>
    <updated>2017-06-13T06:31:58.000Z</updated>
    <content type="html"><![CDATA[<p>Arrow function 是 ES6 最重要的發明，讓 FRP 能以更簡潔的方式呈現，TypeScript 當然可使用，在 Angular 也隨處可見，如 RxJS 就必須大量使用 arrow function，是學習 Angular 一定要會的。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.3</p>
<h2 id="以_=&gt;_取代_Anonymous_Function">以 =&gt; 取代 Anonymous Function</h2><hr>
<p>Arrow function 可以用來取代 anonymous function。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="function"><span class="keyword">function</span> (<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> `Hello $&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam Xiao</span></span><br></pre></td></tr></table></figure></p>
<p>後面是 anonymous function，但我們可發現，<code>function</code> 事實上是個虛字。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = (firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span>): <span class="built_in">string</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> `Hello $&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam Xiao</span></span><br></pre></td></tr></table></figure>
<p>將 <code>function</code> 省略，改以 <code>=&gt;</code> 取代。</p>
<p>但又發現 <code>return</code> 也是虛字。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = (firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span>): <span class="built_in">string</span> =&gt; `Hello $&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam Xiao</span></span><br></pre></td></tr></table></figure>
<p>因為只有單一 <code>return</code>，可將 <code>{return}</code> 一起省略。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = (firstName: <span class="built_in">string</span>): <span class="built_in">string</span> =&gt; `Hello $&#123;firstName&#125;`;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>假如我們只保留 <code>firstName</code> 1 個參數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = firstName =&gt; `Hello $&#123;firstName&#125;`;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>因為只有單一參數，連 <code>()</code> 都可省略。</p>
<h2 id="以_=&gt;_取代_Callback">以 =&gt; 取代 Callback</h2><hr>
<p>Arrow function 可以用來取代 callback。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> angular = [</span><br><span class="line">  <span class="string">'Kevin'</span>,</span><br><span class="line">  <span class="string">'Jeff'</span>,</span><br><span class="line">  <span class="string">'Jimmy'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = angular.map(<span class="function"><span class="keyword">function</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> person.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(length); <span class="comment">// [5, 4, 5]</span></span><br></pre></td></tr></table></figure>
<p>如常用的 <code>map()</code>，會需要我們傳入 callback，決定要回傳的新陣列。</p>
<p>但我們可發現，<code>function</code> 事實上是個虛字。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> angular = [</span><br><span class="line">  <span class="string">'Kevin'</span>,</span><br><span class="line">  <span class="string">'Jeff'</span>,</span><br><span class="line">  <span class="string">'Jimmy'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = angular.map((person) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> person.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(length); <span class="comment">// [5, 4, 5]</span></span><br></pre></td></tr></table></figure>
<p>可將 <code>function</code> 省略，改用 <code>=&gt;</code>。</p>
<p>但又發現 <code>return</code> 也是虛字。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> angular = [</span><br><span class="line">  <span class="string">'Kevin'</span>,</span><br><span class="line">  <span class="string">'Jeff'</span>,</span><br><span class="line">  <span class="string">'Jimmy'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = angular.map((person) =&gt; person.length);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(length); <span class="comment">// [5, 4, 5]</span></span><br></pre></td></tr></table></figure>
<p>因為只有單一 <code>return</code>，可將 <code>{return}</code> 一起省略。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> angular = [</span><br><span class="line">  <span class="string">'Kevin'</span>,</span><br><span class="line">  <span class="string">'Jeff'</span>,</span><br><span class="line">  <span class="string">'Jimmy'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = angular.map(person =&gt; person.length);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(length);</span><br></pre></td></tr></table></figure>
<p>因為只有單一參數，連 <code>()</code> 都可省略。</p>
<h2 id="語法規則">語法規則</h2><hr>
<h3 id="多參數">多參數</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(param1, param2, …, paramN) =&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>若有多行程式，須以 <code>{}</code> 包起來。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(param1, param2, …, paramN) =&gt; expression</span><br><span class="line">(param1, param2, …, paramN) =&gt; &#123; <span class="keyword">return</span> expression;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>若只有單一 <code>return</code>，可將 <code>{return }</code> 拿掉。</li>
</ul>
<h3 id="單一參數">單一參數</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(singleParam) =&gt; &#123; statements &#125;</span><br><span class="line">singleParam =&gt; &#123; statements &#125;</span><br><span class="line">singleParam =&gt; expression</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>若有多行程式，須以 <code>{}</code> 包起來。</li>
<li>若只有單一 <code>return</code>，可將 <code>{return }</code> 拿掉。</li>
<li>單一參數，可連 <code>()</code> 都拿掉。</li>
</ul>
<h3 id="無參數">無參數</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123; statements &#125;</span><br><span class="line">() =&gt; expression</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>若有多行程式，須以 <code>{}</code> 包起來。</li>
<li>若只有單一 <code>return</code>，可將 <code>{return }</code> 拿掉。</li>
<li>無參數必須保留 <code>()</code>。</li>
</ul>
<h3 id="回傳物件">回傳物件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">params =&gt; (&#123;foo:bar&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>多參數/單一參數/無參數的規則依舊。</li>
<li>將回傳物件外面加上 <code>()</code></li>
</ul>
<blockquote>
<p>因為 <code>{}</code> 已經被物件使用，只好改用 <code>()</code>。</p>
</blockquote>
<h2 id="Anonymous_Function_與_this">Anonymous Function 與 this</h2><hr>
<p>在 ES5 時，anonymous function 搭配 this 時，總讓人很糾結。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo =&#123;</span><br><span class="line">  name: <span class="string">"Sam"</span>,</span><br><span class="line"></span><br><span class="line">  handleMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message, callback</span>)</span>&#123;</span><br><span class="line">    callback(message);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.receive(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>結果執行錯誤，<code>this.name</code> 為 undefined。</p>
<p>因為 anonymous function 的 this，並不是指向 <code>Foo</code>，所以存取不到 <code>this.name</code>。</p>
<p>在 ES5，我們會這用以下寫法：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo =&#123;</span><br><span class="line">  name: <span class="string">"Sam"</span>,</span><br><span class="line"></span><br><span class="line">  handleMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message, callback</span>)</span>&#123;</span><br><span class="line">    callback(message);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that.name);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.receive(); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">that = <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure>
<p>讓 <code>receive</code> scope 的 <code>that</code> 指向 <code>this</code>。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(that.name);</span><br></pre></td></tr></table></figure>
<p>改用 <code>that.name</code>，就可以正確顯示 <code>Hello Sam</code>。</p>
<blockquote>
<p>很多人搞不懂 this 是什麼，就乾脆都寫成 that = this。</p>
</blockquote>
<h2 id="Arrow_Function_與_this">Arrow Function 與 this</h2><hr>
<p>我們剛剛知道，在ES6 可以使用 arrow function 取代 anonymous function。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo =&#123;</span><br><span class="line">  name: <span class="string">"Sam"</span>,</span><br><span class="line"></span><br><span class="line">  handleMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message, callback</span>)</span>&#123;</span><br><span class="line">    callback(message);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.receive(); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>使用 arrow function 後，<code>this</code> 就能如預期的抓到 <code>this.name</code>，顯示 <code>Hello Sam</code>。</p>
<p>透過 <a href="https://www.typescriptlang.org/play/" target="_blank" rel="external">TypeScript Playground</a>，我們來看看到底有什麼黑魔法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo = &#123;</span><br><span class="line">    name: <span class="string">"Sam"</span>,</span><br><span class="line">    handleMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message, callback</span>) </span>&#123;</span><br><span class="line">        callback(message);</span><br><span class="line">    &#125;,</span><br><span class="line">    receive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(_this.name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Foo.receive(); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure>
<p>原來編譯成 ES5 之後，TypeScript 自動幫我們加上 <code>_this = this</code>，因此我們可以抓到 <code>name</code>。</p>
<blockquote>
<p>雖然 anonymous function 與 arrow function 對 this 的觀點不同，但並沒有誰對誰錯，只是應用場合不同，當你比較需要類似 OOP 的方式，就使用 arrow function；若比較需要 FRP 的方式，就使用 anonymous function，當你手中不再只有錘子，所看的東西就不再只是釘子。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Arrow function 是 FRP 的重要推手，讓我們可以使用更精簡的方式使用 callback，將更多的虛字拿掉，只留下商業邏輯中最關鍵的部分。</li>
<li><code>this</code> 一直是 JavaScript 頗具爭議之處，arrow function 讓我們有另外一種方式使用 <code>this</code>，我們可以視需求決定該使用 arrow function 或 anonymous function。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/functions.html" target="_blank" rel="external">Handbook : Functions</a><br><a href="https://egghead.io" target="_blank" rel="external">Egghead.io</a>, <a href="https://egghead.io/lessons/ecmascript-6-arrow-function-in-es6" target="_blank" rel="external">Arrow Function =&gt; in ES6</a></p>
]]></content>
    <summary type="html">
    <![CDATA[探討 ES6 的招牌菜 Arrow Function]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之 Function]]></title>
    <link href="http://oomusou.io/typescript/typescript-function/"/>
    <id>http://oomusou.io/typescript/typescript-function/</id>
    <published>2017-06-17T11:23:43.000Z</published>
    <updated>2017-06-14T02:22:40.000Z</updated>
    <content type="html"><![CDATA[<p>TypeScript 的 function 可對參數做強型別檢查與 function type，此外 ES6 還多了 optional / default / rest parameter，當然 TypeScript 也可使用。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.3</p>
<h2 id="Parameter_with_Type">Parameter with Type</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// named function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// anonymous function</span></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>
<p>無論是 named function 或者是 anonymous function，都可以在參數與回傳值明確指定 type，讓編譯器幫我們做檢查，一但型別錯誤，編譯將會失敗。</p>
<h2 id="Function_Type">Function Type</h2><hr>
<p>除了參數加上型別外，我們還可以對整個 function 也加上型別，讓編譯器幫我們檢查 function 是否符合這個型別。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)=&gt;<span class="built_in">number</span> =</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>
<p><code>myAdd</code> 的型別為 <code>(x: number, y: number)=&gt;number</code>，關於 function type，主要分成兩部分：</p>
<ul>
<li>參數型別</li>
<li>回傳值型別</li>
</ul>
<p>因為宣告了 function type，在 <code>=</code> 之後的 anonymous function 就必須符合所規定的 function type，若 anonymous function 不符合 function type，編譯會錯誤。</p>
<p>不過在實務上，我們不會真的這樣寫，因為實在太冗長了，只會寫成：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>
<p>TypeScript 編譯器會自動幫我們轉成</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)=&gt;<span class="built_in">number</span> =</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>
<p>TypeScript 會自動幫我們將 <code>myAdd</code> 加上型別，若之後再指定其他 function 給 <code>myAdd</code>，只要不符合 function type 就會報錯。</p>
<blockquote>
<p>TypeScript 在觀念上有 function type，不過實務上不用特別去指定 function type，只要將 anonymous function 指定給變數，就會自動幫我們加上 function type。</p>
</blockquote>
<h2 id="Optional_Parameters">Optional Parameters</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// 編譯錯誤，少 1 個參數</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// 編譯錯誤，多 1 個參數</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// 編譯通過</span></span><br></pre></td></tr></table></figure>
<p>在 TypeScript 世界，既然宣告了參數，就代表傳入參數的個數與型別必須完全符合，過多或過少都不行。</p>
<p>但  JavaScript 世界，每個變數都是 optional，若參數個數不對，只是 <code>undefined</code> 而已，為了讓 TypeScript 有強型別檢查，又能相容於 JavaScript 習慣，可在參數後加上 <code>?</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName)</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// 編譯通過</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// 編譯錯誤，多一個</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// 編譯通過</span></span><br></pre></td></tr></table></figure>
<p>若使用 <code>?</code> optional parameter，記得將必要參數寫在最前面，後面才擺 optional parameter。</p>
<h2 id="Default_Parameter">Default Parameter</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function buildName(firstName: string, lastName = "Smith") &#123;</span><br><span class="line">    return firstName + " " + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let result1 = buildName("Bob");                  // Bob Smith</span><br><span class="line">let result2 = buildName("Bob", undefined);       // Bob Smite</span><br><span class="line">let result3 = buildName("Bob", "Adams", "Sr.");  // 編譯錯誤，多一個參數</span><br><span class="line">let result4 = buildName("Bob", "Adams");         // Bob Adams</span><br></pre></td></tr></table></figure>
<p>TypeScript 亦提供 default parameter，當傳入 <code>undefined</code> 時，則會以 default parameter 取代。</p>
<p>Default parameter 若放在必要參數後面，則相當於 optional parameter 一樣，只是差別在有預設值。</p>
<p>Default parameter 並不像 optional parameter 一樣，一定放在必要參數後面，若放在必要參數前面，則必須明確的指定 <code>undefined</code>，而不能省略。</p>
<h2 id="Rest_Parameter">Rest Parameter</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = buildName(<span class="string">"Kevin"</span>, <span class="string">"Jeff"</span>, <span class="string">"Jimmy"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(employeeName); <span class="comment">// Kevin Jeff Jimmy</span></span><br></pre></td></tr></table></figure>
<p>無論是 optional parameter，或是 default paramter，討論的都是一個參數對應一個值，但實務上可能遇到參數個數不確定，希望參數以陣列接收。</p>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...restOfName: <span class="built_in">string</span>[]</span><br></pre></td></tr></table></figure>
<p>以 <code>…</code> 宣告為 rest parameter，並明確宣告其型別為  string 陣列，則無論多少參數個數，最後都會塞進 <code>restOfName</code> 陣列。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Function 的參數加上型別檢查後，我們將可少撰寫很多檢查型別的程式碼，由 TypeScript 編譯器幫我們把關。</li>
<li>有了 optioanl / default / rest parameter，參數將更加靈活。</li>
</ul>
<h2 id="References">References</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/functions.html" target="_blank" rel="external">Handbook : Functions</a></p>
]]></content>
    <summary type="html">
    <![CDATA[TypeScript/ES6 對 function 支援的擴展]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之變數宣告與建立]]></title>
    <link href="http://oomusou.io/typescript/typescript-variable/"/>
    <id>http://oomusou.io/typescript/typescript-variable/</id>
    <published>2017-06-16T12:23:43.000Z</published>
    <updated>2017-06-15T07:34:22.000Z</updated>
    <content type="html"><![CDATA[<p>變數宣告部分，除了 <code>var</code> 以外，在 ES6 增加了 <code>let</code> 與 <code>const</code>，在變數建立部分，則增加了 destructuring 與 spread，當然 TypeScript 也完全支援。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.3</p>
<h2 id="var">var</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>var</code> 最經典的範例莫過於此，原本我們預期會輸出</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>結果輸出</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>這裡有兩個觀念：</p>
<ul>
<li><code>setTimeout()</code> 屬於非同步 function，JavaScript 的 event loop model 會在最後執行。</li>
<li><code>var</code> 看似在 <code>{}</code> 內，但沒有 scope 概念，因為其 hoisting 機制，會將 <code>var</code> 提升到程式最前面，相當於全域變數，因此 <code>console.log()</code> 印出 for loop 執行完的 <code>10</code>。</li>
</ul>
<h2 id="let">let</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>var</code> 改成 <code>let</code> 之後，結果就如預期了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> 對變數有 scope 概念，其生命週期只存在於 <code>{}</code> ，因此儘管非同步的 <code>setTimeout()</code> 最後執行，let 仍將 <code>i</code> 鎖住到最後，而不像 <code>var</code> 沒有 scope 概念，都是全域變數。</p>
<blockquote>
<p>實務上應該全面使用 let 取代 var，若你使用 var，language service 也會提出警告，要你改用 let。</p>
</blockquote>
<h2 id="const">const</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span>;</span><br></pre></td></tr></table></figure>
<p> 若此變數不會再被修改，則應宣告成 const。</p>
<blockquote>
<p>傳統我們都是確定此變數不能被修改，才會宣告成 const，但在 TypeScript 中是反過來，<strong>變數應該盡量宣告成 const，除非要修改才宣告成 let</strong>，事實上，若 language service 發現變數從來沒被修改過，會主動提出警告，要求你改成 const，這是希望大家盡量寫出 immutable 的 pure function，減少不必要的 side effect。</p>
</blockquote>
<h2 id="Destructuring">Destructuring</h2><hr>
<h3 id="Array_Destructing">Array Destructing</h3><p>ES6 允許我們直接將陣列加以解構成變數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> first = input[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> second = input[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// outputs 2</span></span><br></pre></td></tr></table></figure>
<p>在 ES5，我們必須使用 array index 方式，才能將值指定到變數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input;</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// outputs 2</span></span><br></pre></td></tr></table></figure>
<p>ES6 我們可以直接使用 <code>[]</code> 將陣列加以解構。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap variables</span></span><br><span class="line">[first, second] = [second, first];</span><br></pre></td></tr></table></figure>
<p>交換變數，只要一行就可以寫出來。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[first, second]: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(first); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(second); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure>
<p>若用在 function 的參數，可以接陣列解構成變數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// outputs [ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>
<p>配合 <code>…</code>，將剩餘的值結構成陣列。</p>
<p><code>first</code> 為單一變數，<code>rest</code> 為陣列。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br></pre></td></tr></table></figure>
<p><code>first</code> 為 <code>1</code>，其他值會忽略。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(fourth); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>只有 <code>2</code> 與 <code>4</code> 會解構，其他值會忽略。</p>
<h3 id="Object_Destructing">Object Destructing</h3><p>除了解構陣列外，ES6 還允許我們解構物件。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  a: <span class="string">"foo"</span>,</span><br><span class="line">  b: <span class="number">12</span>,</span><br><span class="line">  c: <span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure>
<p> <code>c</code> 因為沒有變數解構，會自動忽略。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  a: <span class="string">"foo"</span>,</span><br><span class="line">  b: <span class="number">12</span>,</span><br><span class="line">  c: <span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; a, ...passthrough &#125; = o;</span><br><span class="line"><span class="keyword">let</span> total = passthrough.b + passthrough.c.length</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<p>配合 <code>…</code>，將剩餘的值結構成物件。</p>
<p><code>a</code> 為單一變數，<code>passthrough</code> 為物件。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; a: <span class="built_in">string</span>, b: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;a, b&#125;: C</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// foo</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  a: <span class="string">"foo"</span>,</span><br><span class="line">  b: <span class="number">12</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">f(o);</span><br></pre></td></tr></table></figure>
<p>若用在 function 的參數，可以接物件解構成變數。</p>
<h2 id="Spread">Spread</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> bothPlus = [<span class="number">0</span>, ...first, ...second, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<p><code>…</code> 會將陣列加以展開。</p>
<p><code>bothPlus</code> 為 <code>[0, 1, 2, 3, 4, 5]</code> 。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaults = &#123; food: <span class="string">"spicy"</span>, price: <span class="string">"$$"</span>, ambiance: <span class="string">"noisy"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> search = &#123; ...defaults, food: <span class="string">"rich"</span> &#125;;</span><br></pre></td></tr></table></figure>
<p><code>…</code> 會將物件屬性加以展開。</p>
<p><code>search</code> 為 <code>{ food: &quot;rich&quot;, price: &quot;$$&quot;, ambiance: &quot;noisy&quot; }</code></p>
<blockquote>
<p>若屬性有重複，將後面蓋前面。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  p = <span class="number">12</span>;</span><br><span class="line">  m() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="keyword">let</span> clone = &#123; ...c &#125;;</span><br><span class="line">clone.p; <span class="comment">// ok</span></span><br><span class="line">clone.m(); <span class="comment">// error!</span></span><br></pre></td></tr></table></figure>
<p><code>…</code> 只能展開 property，不能展開 method。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上應該盡量使用 <code>const</code>，除非變數需要被修改才用 <code>let</code>。</li>
<li>盡量寫出 pure function 減少 side effect。</li>
<li>Destructuring 與 spread 非常好用，可以讓程式碼更精簡。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/variable-declarations.html" target="_blank" rel="external">Handbook : Variable Declaration</a></p>
]]></content>
    <summary type="html">
    <![CDATA[ES6 提供不少語法關於變數宣告與建立]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之基本型別]]></title>
    <link href="http://oomusou.io/typescript/typescript-basic-type/"/>
    <id>http://oomusou.io/typescript/typescript-basic-type/</id>
    <published>2017-06-15T12:23:43.000Z</published>
    <updated>2017-06-11T13:13:00.000Z</updated>
    <content type="html"><![CDATA[<p>TypeScript 既然稱為 TypeScript，想當然爾型別就是該語言的重頭戲，本文我們來看看 TypeScript 對於 JavaScript 增加了哪些型別支援。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.3</p>
<h2 id="Boolean">Boolean</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">isDone = <span class="number">1</span>; <span class="comment">// 編譯失敗</span></span><br></pre></td></tr></table></figure>
<p>若值只有 <code>true</code> 與 <code>false</code>，則其型別為 <code>boolean</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<p>若變數可直接由初始值 <code>true</code> 或 <code>false</code> 獲得型別，language service 會加以提示省略型別宣告，但 <code>isDone</code> 本質仍是強型別 <code>boolean</code>，<strong>編譯器會加以檢查</strong>，只是程式不用宣告 <code>boolean</code> 而已。</p>
<h2 id="Number">Number</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>; <span class="comment">// 十進位</span></span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>; <span class="comment">// 0x 開頭為十六進位</span></span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>; <span class="comment">// 0b 開頭為二進位 (ES6)</span></span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>; <span class="comment">// 0o 開頭為八進位 (ES6)</span></span><br></pre></td></tr></table></figure>
<p>TypeScript 與 JavaScript 一樣，數字只有 <code>number</code> 型別，且本質是<strong>浮點數</strong>，不像 C# 數字有 <code>int</code> 、 <code>float</code> 與 <code>double</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hex = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binary = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octal = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure>
<p>若變數可直接由初始值<strong>數字</strong>獲得型別，language service 會加以提示省略型別宣告，但變數本質仍是強型別 <code>number</code>，<strong>編譯器會加以檢查</strong>，只是程式不用宣告 <code>number</code> 而已。</p>
<h2 id="String">String</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName: <span class="built_in">string</span> = <span class="string">"Sam"</span>;</span><br><span class="line"><span class="keyword">let</span> lastName: <span class="built_in">string</span> = <span class="string">'Xiao'</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = `Hello, my name is $&#123;firstName&#125; $&#123;lastName&#125;`;</span><br></pre></td></tr></table></figure>
<p>TypeScript 與 JavaScript 一樣，提供 <code>string</code> 型別，有 3 種表示法：</p>
<ul>
<li>雙引號</li>
<li>單引號</li>
<li>Backtick</li>
</ul>
<p>其中 backtick 寫法，稱為 template string，可配合變數直接鑲在字串內，而不用靠 <code>+</code> 湊字串，可讀性較高，實務上建議使用。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">"Sam"</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">'Xiao'</span>;</span><br><span class="line"><span class="keyword">let</span> sentence = `Hello, my name is $&#123;firstName&#125; $&#123;lastName&#125;`;</span><br></pre></td></tr></table></figure>
<p>若變數可直接由初始值<strong>字串</strong>獲得型別，language service 會加以提示省略型別宣告，但變數本質仍是強型別 <code>string</code>，<strong>編譯器會加以檢查</strong>，只是程式不用宣告 <code>string</code> 而已。</p>
<blockquote>
<p>雖然 TypeScript 允許 string 使用雙引號，但 language service 會提示建議使用單引號。</p>
</blockquote>
<h2 id="Array">Array</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>TypeScript 對於陣列提供兩種寫法：</p>
<ul>
<li>傳統 JavaScript 風格寫法。</li>
<li>泛型風格寫法。</li>
</ul>
<blockquote>
<p>兩種寫法可讀性都很高，實務上都推薦，只要團隊取得共識要使用哪種寫法即可。</p>
</blockquote>
<h2 id="Tuple">Tuple</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">"hello"</span>, <span class="number">10</span>];</span><br><span class="line">x = [<span class="number">10</span>, <span class="string">"hello"</span>]; <span class="comment">// 編譯失敗</span></span><br></pre></td></tr></table></figure>
<p>陣列必須每個元素的型別都相同，若你希望陣列中有不同型別的元素，則應該使用 <code>tuple</code>。</p>
<blockquote>
<p>實務上若你希望 function 回傳多值，且型態不相同，則可使用 tuple。</p>
</blockquote>
<h2 id="Enum">Enum</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure>
<p>Enum 型別是強型別語言的代表，從 C 語言就已經有 enum，C++ 與 C# 也有 <code>enum</code>，但 JavaScript 一直都沒有 <code>enum</code> (未來有的機會也不高)，TypeScript 將之補上，它有幾個優點：</p>
<ul>
<li>參數之間的傳遞不用在使用 magic number，可以透過 enum 取可讀性更高的名字。</li>
<li>Number 不用再直接輸入，可由 enum 型別透過 intellisense 自動帶出。</li>
<li>若輸入 enum 型別沒有的數字，編譯器會幫我們擋下來。</li>
</ul>
<blockquote>
<p>TypeScript 2.4 的 enum 即將支援字串，讓我們透過 enum 可以確保所輸入的是我們要的字串。</p>
</blockquote>
<h2 id="Any">Any</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">"maybe a string instead"</span>; <span class="comment">// 編譯器不會檢查</span></span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// 編譯器不會檢查</span></span><br></pre></td></tr></table></figure>
<p>對於 JavaScript legacy code 或 3rd party library，若一時導入 TypeScript 有其困難，可先暫時宣告為 <code>any</code> 放生，讓 TypeScript 不做型別檢查，日後再慢慢重構成適當型別。</p>
<blockquote>
<p>實務上不建議使用 any 型別，因為這將喪失 TypeScript  的型別檢查機制，除非有充分的理由。</p>
</blockquote>
<h2 id="Void">Void</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">   alert(<span class="string">"This is my warning message"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message = warnUser(); <span class="comment">// 編譯失敗</span></span><br></pre></td></tr></table></figure>
<p>若 function 明確不傳回任何值，可宣告為 <code>void</code> 型別，若將此 function 的回傳值指定為變數，將編譯失敗。</p>
<h2 id="Null_與_Undefined">Null 與 Undefined</h2><p><code>null</code> 與 <code>undefined</code> 一直是寫 JavaScript 很惱人的問題，我們必須在程式碼內判斷輸入的參數是否為 <code>null</code> 或 <code>undefined</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compiled with --strictNullChecks</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: <span class="built_in">number</span> , b: <span class="built_in">number</span> | <span class="literal">null</span> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;  <span class="comment">// Produces value of type number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 TypeScript 2.0 提供了 strict null check，可以幫我們檢查參數是否為 <code>null</code> 或 <code>undefined</code>。 </p>
<p>若我們參數明確要接受 <code>null</code> 或 <code>undefined</code>，則必須在參數用 <code>|</code>  明確宣告，否則預設不接受 <code>null</code> 與 <code>undefined</code>。</p>
<p><code>a</code> 可接受的型別為 <code>number</code> ，不接受 <code>null</code> 與 <code>undefined</code> ，但 <code>b</code> 可接受的型別為 <code>number</code>、<code>null</code> ，不接受 <code>undefined</code>。</p>
<p>若輸入的參數 <code>a</code> 為 <code>null</code> 或 <code>undefined</code>，將編譯失敗。</p>
<p><img src="/images/typescript/typescript-basic-type/type000.png" alt="type000"></p>
<p>Angular 預設並沒有啟動 <code>strictNullChecks</code>，須在專案根目錄的 <code>tsconfig.json</code> 的 <code>compilerOptions</code> 加上 <code>strictNullChecks</code> 為 <code>true</code>，TypeScript 才會啟動 <code>strictNullChecks</code>。</p>
<h2 id="Never">Never</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = error(<span class="string">'Sam'</span>); <span class="comment">// 編譯失敗</span></span><br><span class="line"><span class="keyword">let</span> b = infiniteLoop(<span class="string">'Sam'</span>); <span class="comment">// 編譯失敗</span></span><br></pre></td></tr></table></figure>
<p>有些 function 永遠不傳回值，只會拋出 exception 或無窮回圈，雖然可以回傳 <code>void</code>，<strong>但語意上並不精確</strong>，TypeScript 另外提出 <code>never</code> 型別，專門對付 exception 或無窮迴圈。</p>
<p>若將回傳 <code>never</code> 型別的 function 指定給變數，將編譯失敗。</p>
<h2 id="Type_Assertion">Type Assertion</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">'this is a string'</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">'this is a string'</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue as <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure>
<p>實務上有時宣告了 <code>any</code>，但為了 intellisense 或其他變數，需要做明確的轉型，此時可使用 <code>type assertion</code> 明確轉型，也就是告訴編譯器：</p>
<ul>
<li>我自己知道此變數的明確型別，請相信我的轉型。</li>
</ul>
<blockquote>
<p>雖然 type assertion 有兩種寫法，實務上建議使用第一種，第二種是為了 React 的 JSX 所妥協的語法，在 Angular 用不到。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過 TypeScript 的明確型別宣告，可以讓編譯器幫我們檢查傳入參數是否符合型別，不用再寫一堆程式判斷。</li>
<li><code>enum</code> 在實務上非常用有，建議大家多用。</li>
<li>建議大家將 <code>strictNullCheck</code> 打開，讓 TypeScript 編譯器幫我們檢查惱人 <code>null</code> 與 <code>undefined</code>。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="external">Handbook : Basic Types</a></p>
]]></content>
    <summary type="html">
    <![CDATA[簡介 TypeScript 所有內建的型別]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 特色與歷史簡介]]></title>
    <link href="http://oomusou.io/typescript/typescript101/"/>
    <id>http://oomusou.io/typescript/typescript101/</id>
    <published>2017-06-14T12:23:43.000Z</published>
    <updated>2017-06-17T08:27:25.000Z</updated>
    <content type="html"><![CDATA[<p>TypeScript 是 Angular 欽定的開發語言，所以學 Angular 一定要學 TypeScript，但很多人認為 TypeScript 是 JavaScript 的<strong>方言</strong>，不是 JavaScript 標準，因而有所疑慮，本文簡單介紹 TypeScript 的歷史與特色，提供大家技術選擇的參考。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.3</p>
<h2 id="什麼是_TypeScript？">什麼是 TypeScript？</h2><hr>
<p><img src="/images/typescript/typescript101/ts000.png" alt="ts000"></p>
<p>在 TypeScript 官網，大大的 3 個字</p>
<blockquote>
<p>JavaScript that scales.</p>
</blockquote>
<p>簡單的說，TypeScript 就是為了讓 JavaScript 可以寫<strong>大型應用程式</strong>的<strong>商業邏輯</strong>所設計，讓 JavaScript 不再只是控制 DOM 而已，而是真的可以寫<strong>複雜</strong>商業邏輯。</p>
<blockquote>
<p>Visual Studio Code 就是使用 TypeScript 開發。</p>
</blockquote>
<p>TypeScript 既然稱為 <strong>Type</strong>Script，重點就是將 JavaScript 加上 <strong>type</strong>。</p>
<ul>
<li>更多型別 (more types) 與強型別檢查</li>
<li>多型 (interface)</li>
<li>泛型 (generic)</li>
</ul>
<p><img src="/images/typescript/typescript101/ts001.svg" alt="ts001"></p>
<p>一旦有了型別，則很多圍繞在<strong>型別</strong>的技術都可在 TypeScript 使用。</p>
<h2 id="TypeScript_的歷史">TypeScript 的歷史</h2><hr>
<p>TypeScript 是由 Turbo Pascal、Delphi、J++ 與 C# 的爸爸 <a href="https://en.wikipedia.org/wiki/Anders_Hejlsberg" target="_blank" rel="external">Anders Hejlsberg</a> 所設計的程式語言，Anders 在很年輕時，就立志要幫 JavaScript 寫一個 compiler，在他 <code>52</code> 歲時，發表了 TypeScript，幫 JavaScript 補上很多<strong>強型別</strong>語言該有的元素，並且相容 JavaScript。</p>
<p><img src="/images/typescript/typescript101/ts002.png" alt="ts002"></p>
<p>只要是 ES5、ES6 有的東西，TypeScript 都會概括承受，所以你原本在 ES5、ES6 的投資，都可以繼續用在 TypeScript。</p>
<p>Angular 團隊原本用自己的 AtScript 開發，它除了有 TypeScript 的強型別外，更擴展了一些東西，當然也包含 ES5、ES6。</p>
<p><img src="/images/typescript/typescript101/ts005.png" alt="ts005"></p>
<p>2015 年 3 月，Angular 團隊決定從原本自己的 AtScript，改用 Microsoft 的 TypeScript，Google 專心於 framework 部分，Microsoft 則專心於程式語言部分，這也是 Google 與 Microsoft 首次攜手合作。</p>
<p><img src="/images/typescript/typescript101/ts003.png" alt="ts003"></p>
<p>原本 Angular 大量依賴 AtScript 的 annotation，為了配合 Angular，TypeScript 根據了 ECMAScript 的 decorator 草案加以實作，在 NG-Conf 2015 也宣布 AtScript 與 TypeScript 合而為一。</p>
<p><img src="/images/typescript/typescript101/ts004.gif" alt="ts004"></p>
<p>在 NG-Conf 2017，Google 宣布 TypeScript 正式成為 Google 內部所使用的語言之一。</p>
<p><img src="/images/typescript/typescript101/ts006.jpg" alt="ts006"></p>
<p>TypeScript 雖然早在 2012 年就上市，但始終叫好不叫座，尤其遠不如 CoffeeScript，但在 2015 年開始有了爆炸性的成長。</p>
<p>因為 TypeScript 總算有殺手級的應用出現：Angular。</p>
<h2 id="為什麼選擇_TypeScript？">為什麼選擇 TypeScript？</h2><hr>
<p>除了 Angular 挑選 TypeScript 外，讓我們回歸<strong>需求面</strong>，為什麼要選擇 TypeScript？</p>
<h3 id="JavaScript_規格與瀏覽器支援">JavaScript 規格與瀏覽器支援</h3><p><img src="/images/typescript/typescript101/ts007.png" alt="ts007"></p>
<p>在今年的 Microsoft Build 2017，<a href="https://en.wikipedia.org/wiki/Anders_Hejlsberg" target="_blank" rel="external">Anders Hejlsberg</a> 提到了 JavaScript 所謂的 feature gap，以往我們在寫 JavaScript 時，都要很在乎瀏覽器是否支援了 JavaScript 某個 keyword 與 function，以目前來說，ES7 (ES2016) 規格都已經出來，但瀏覽器卻只有支援 ES5 與少部份 ES6，因此很多 JavaScript 語言功能根本是看得到但吃不到。</p>
<p>但透過 TypeScript，你立刻就能使用最新的 JavaScript 規格，透過編譯技術將 TypeScript 編譯成 ES5，不用再擔心瀏覽器版本問題。</p>
<h3 id="前端越來越複雜">前端越來越複雜</h3><p>JavaScript 一開始設計只是為了控制 DOM，但隨著 Ajax 與 SPA 出現後，為了更好的使用者體驗，我們開始將一部分的商業邏輯寫在 JavaScript，這也使得前端常常動不動出現上千行的程式碼，JavaScript 的<strong>可維護性</strong>一直受到質疑，因此我們需要一個能夠寫<strong>複雜商業邏輯</strong>的語言。</p>
<blockquote>
<p>JavaScript 的 ES6、ES7 … 已經朝更成熟的語言邁進，不過現階段還不夠成熟，TypeScript 則包含了開發大型應用程式所需要的必要元素。</p>
</blockquote>
<h3 id="強型別_+_編譯_=_大型應用程式的保證">強型別 + 編譯 =  大型應用程式的保證</h3><p>Web 發展之初，由於需求單純，無論是前後端，都放棄了強型別與編譯技術，改用弱型別與解譯技術，但 Web 20 年來的發展，前後端都越來越複雜，弱型別與解譯技術則面臨了強大的挑戰：</p>
<ul>
<li>Framework 越來越龐大，眾多的 class 與 method，弱型別無法 intellisense。</li>
<li>參數沒有型別，也沒有編譯器檢查，因此要撰寫大量的驗證參數的程式碼。</li>
<li>沒有編譯做第一層的把關，因此必須<strong>寫大量測試</strong>取代編譯器，測試的 coverage 必須要拉很高。</li>
</ul>
<blockquote>
<p>你覺得寫型別很麻煩？寫測試不是更麻煩？</p>
<p>你覺得寫測試很麻煩？手動測試不是更麻煩？</p>
</blockquote>
<p>有了<strong>強型別 + 編譯</strong>保護，透過編譯器檢查，讓我們可以少寫很多測試，專注在為<strong>商業邏輯的需求寫測試</strong>，而不是為了追求 coverage 100% ，為測試而寫測試。</p>
<h3 id="Multi-Paradigm">Multi-Paradigm</h3><p>因為 TypeScript 包含 JavaScript (ES5、ES6、ES7 …)，而 JavaScript 比較偏向 FRP (Functional Reactive Programming)，但 TypeScript 有自己的強型別系統，比較偏向 OOP (Object Oriented Programming) 與 GP (Generic Progrmming)，因此在寫 TypeScript 時，基本上你會有 3 套武器可用：</p>
<ul>
<li><strong>FRP</strong> : Functional Reactive Programming</li>
<li><strong>OOP</strong> : Object Oriented Programming</li>
<li><strong>GP</strong> : Generic Programming</li>
</ul>
<p>可以視專案需求與規模，選擇適當的武器，不再你手上只有錘子，所有的東西都是釘子。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>TypeScript 是我這幾年來，僅見的集<strong>優雅</strong>與<strong>強悍</strong>於一身的程式語言，原本因為 Angular 學習 TypeScript，但最後卻發現對於 TypeScript 的愛遠勝於 Angular。</li>
<li><strong>強型別 + 編譯</strong>才是開發大型應用程式的保證，讓我們可以根據需求寫測試，不是為測試而寫測試。</li>
<li>TypeScript 融合 FRP、OOP 與 GP，在 multi-paradigm 下，你可以選擇適當的武器，不再手中只有錘子。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://en.wikipedia.org/wiki/Anders_Hejlsberg" target="_blank" rel="external">Anders Hejlsberg</a>, <a href="https://www.typescriptlang.org" target="_blank" rel="external">TypeScript</a><br><a href="https://stackoverflow.com/" target="_blank" rel="external">stack overflow</a>, <a href="https://stackoverflow.com/questions/28960934/what-is-difference-between-typescript-and-atscript" target="_blank" rel="external">What is difference between TypeScript and AtScript?</a><br><a href="https://social.msdn.microsoft.com/profile/Jonathan+Turner+%5BMS%5D" target="_blank" rel="external">Jonathan Turner</a>, <a href="https://blogs.msdn.microsoft.com/typescript/2015/03/05/angular-2-built-on-typescript/" target="_blank" rel="external">Angular 2: Built on TypeScript</a><br><a href="https://twitter.com/ngconf" target="_blank" rel="external">@ngconf</a>, <a href="https://twitter.com/ngconf/status/573521849780305920" target="_blank" rel="external">AtScript is TypeScript</a><br><a href="http://developer.telerik.com/author/tvantoll/" target="_blank" rel="external">TJ VanToll</a>, <a href="http://developer.telerik.com/featured/the-rise-of-typescript/" target="_blank" rel="external">The Rise of TypeScript?</a><br><a href="https://build.microsoft.com/" target="_blank" rel="external">Microsoft Build 2017</a>, <a href="https://channel9.msdn.com/Events/Build/2017/B8088" target="_blank" rel="external">What’s new in TypeScript</a></p>
]]></content>
    <summary type="html">
    <![CDATA[以開發者角度看 TypeScript]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 對 Angular 下中斷點 Debug?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-debug/"/>
    <id>http://oomusou.io/webstorm/webstorm-debug/</id>
    <published>2017-06-07T12:23:43.000Z</published>
    <updated>2017-06-11T07:04:07.000Z</updated>
    <content type="html"><![CDATA[<p>WebStorm 允許我們如同 Visual Studio 一樣，直接在 IDE 內設定<strong>中斷點</strong>，並停止執行在那一行，我們可觀察當時的變數，也可使用 step over、step into、step out 等除錯技巧，重點是它是停止在 TypeScript 上，而非 JavaScript 上。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>WebStorm 2017.1.2<br>Angular CLI 1.0.1<br>Angular 4.1.0</p>
<h2 id="Installation">Installation</h2><hr>
<h3 id="安裝_Chrome_Extension">安裝 Chrome Extension</h3><p><img src="/images/webstorm/webstorm-debug/debug000.png" alt="debug000"></p>
<p>安裝 <code>JetBrains IDE Support</code> Chrome extension。</p>
<h3 id="WebStorm_設定">WebStorm 設定</h3><p><img src="/images/webstorm/webstorm-debug/debug001.png" alt="debug001"></p>
<p><strong><em>Run -&gt; Edit Configurations…</em></strong></p>
<p><img src="/images/webstorm/webstorm-debug/debug002.png" alt="debug002"></p>
<p>按左上角的 <code>+</code>，選擇 <code>JavaScript Debug</code>。</p>
<p><img src="/images/webstorm/webstorm-debug/debug003.png" alt="debug003"></p>
<ul>
<li><strong>URL</strong> : 輸入 <code>http://localhost:4200</code>。</li>
</ul>
<p>按 <code>Apply</code> 與 <code>OK</code> 繼續。</p>
<h2 id="Debug">Debug</h2><hr>
<h3 id="設定_TypeScript_中斷點">設定 TypeScript 中斷點</h3><p><img src="/images/webstorm/webstorm-debug/debug004.png" alt="debug004"></p>
<p>在任意 TypeScript 你想停止的地方，加上<strong>中斷點</strong>。</p>
<h3 id="開始_Debug">開始 Debug</h3><p><img src="/images/webstorm/webstorm-debug/debug005.png" alt="debug005"></p>
<p>使用 <code>ng serve</code> 啟動 Angular CLI 內建 web server，並按下上方的 <code>瓢蟲</code> 開始 debug。</p>
<p><img src="/images/webstorm/webstorm-debug/debug006.png" alt="debug006"></p>
<p>畫面會跳到 Chrome，並在上面顯示 <code>JetBrains IDE Support is debugging this browser</code>.</p>
<p>在 tod 輸入任何值，按 <code>enter</code>。</p>
<p><img src="/images/webstorm/webstorm-debug/debug007.png" alt="debug007"></p>
<p>從 Chrome 自動跳回 WebStorm，並且停到中斷點，顯示目前所有變數與 call stack。</p>
<p><img src="/images/webstorm/webstorm-debug/debug008.png" alt="debug008"></p>
<p>但這樣使用有個前提，就是要產生 source map，我們才有辦法透過 source map 將中斷點停在 TypeScript。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>後端使用<strong>中斷點</strong>的 debug 經驗，一樣可以套用在 TypeScript 與 Angular。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://manuel-rauber.com/author/manuelrauber/" target="_blank" rel="external">Manuel Rauber</a>,<a href="https://manuel-rauber.com/2016/09/30/how-to-debug-angular-2-with-webstorm/" target="_blank" rel="external">How to debug Angular 2 with WebStorm?</a></p>
]]></content>
    <summary type="html">
    <![CDATA[直接在 IDE 下中斷點 debug]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Quokka for WebStorm]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-quokka/"/>
    <id>http://oomusou.io/webstorm/webstorm-quokka/</id>
    <published>2017-06-01T12:23:43.000Z</published>
    <updated>2017-06-01T05:07:50.000Z</updated>
    <content type="html"><![CDATA[<p>Angular CLI 雖然讓我們簡化了前端工具的建置，但有時只想測試或示範 TypeScript，並不想真的去跑 Angular，此時 Quokka 就是我們的好幫手了。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>WebStorm 2017.1.3<br>Quokka 1.0.11</p>
<h2 id="Installation">Installation</h2><hr>
<p><img src="/images/webstorm/webstorm-quokka/quokka000.png" alt="quokka000"></p>
<p><strong><em>WebStorm -&gt; Preferences -&gt; Plugins</em></strong></p>
<p>按 <code>Brose repositories…</code>。</p>
<p><img src="/images/webstorm/webstorm-quokka/quokka001.png" alt="quokka001"></p>
<p>搜尋 <code>Quokka</code>，按 <code>Install</code> 安裝。</p>
<p><img src="/images/webstorm/webstorm-quokka/quokka002.png" alt="quokka002"></p>
<p>安裝完  <code>Quokka</code> 後，按 <code>Restart WebStorm</code> 重新啟動 WebStorm。</p>
<h2 id="執行_Quokka">執行 Quokka</h2><hr>
<p><img src="/images/webstorm/webstorm-quokka/quokka003.png" alt="quokka003"></p>
<p>按 <code>⌘ + ⇧ + N</code> 新增 Scratch File，這並沒有一個實體檔案，只用來測試而已。</p>
<p><img src="/images/webstorm/webstorm-quokka/quokka004.png" alt="quokka004"></p>
<p>可以開始輸入 TypeScript，不需存檔，不需編譯，馬上就可以在下方的 <code>Quokka</code> 視窗看到執行結果，而且在一行的最後面也可以立即顯示這行的執行結果。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用 Quokka，就可以在你熟悉的 WebStorm 測試 TypeScript，非常方便。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[不用編譯，不用存檔，馬上就可以顯示 TypeScript 結果]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之 Type Assertion]]></title>
    <link href="http://oomusou.io/typescript/typescript-type-assertion/"/>
    <id>http://oomusou.io/typescript/typescript-type-assertion/</id>
    <published>2017-05-22T12:23:43.000Z</published>
    <updated>2017-05-28T04:35:02.000Z</updated>
    <content type="html"><![CDATA[<p>C# 有所謂的 Object Initializer，讓我們可以很優雅的建立物件，並且將物件的 field 一次填滿，TypeScript 是否也提供如 C# 一樣的寫法呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.2</p>
<h2 id="傳統建立物件方式">傳統建立物件方式</h2><hr>
<p><strong>hero.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  state: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 class 建立 model。</p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onAddHeroClick() &#123;</span><br><span class="line">  <span class="keyword">const</span> hero = <span class="keyword">new</span> Hero();</span><br><span class="line">  hero.name = <span class="string">'Sam'</span>;</span><br><span class="line">  hero.state = <span class="string">'active'</span>;</span><br><span class="line">  <span class="keyword">this</span>.heroes.push(hero);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>Hero</code> 物件，然後指定 field 值，最後再 push 進陣列。</p>
<p>這樣寫當然沒有錯，只是必須先透過 constructor 建立物件，然後一一指定 field 值，程式行數會很多，且沒那麼優雅。</p>
<h2 id="C_Sharp">C Sharp</h2><hr>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hero = <span class="keyword">new</span> Hero</span><br><span class="line">&#123;</span><br><span class="line">  Name = <span class="string">"Sam"</span>,</span><br><span class="line">  State = <span class="string">"active"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>C# 的 Object Initializer 允許我們不用透過 constructor，直接在型別後面使用 <code>{}</code>，且 Intellisense 會自動對 field 加以提示。</p>
<p>這種方式比起傳統物件導向寫法優雅。</p>
<h2 id="TypeScript">TypeScript</h2><hr>
<p>在 2015 年，就有人開始討論如何在 TypeScript 提供 Object Initializer，也提出各種語法上的建議。</p>
<p><a href="https://github.com/Microsoft/TypeScript/issues/3895" target="_blank" rel="external">[New Feature] Initialize Classes by Using an Object Initializer#3895</a></p>
<p>TypeScript 有 3 種寫法，可以寫出類似 C# Object Initializer 風格的程式碼。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hero: Hero = &#123;</span><br><span class="line">  name: <span class="string">'Sam'</span>,</span><br><span class="line">  state: <span class="string">'active'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這種寫法也不用透過 new 與 constructor，語法精簡，且 Intellisense 會自動對 field 加以提示。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hero = &lt;Hero&gt;&#123;</span><br><span class="line">  name: <span class="string">'Sam'</span>,</span><br><span class="line">  state: <span class="string">'active'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這種寫法也不用透過 new 與 constructor，使用 type assertion，類似泛型的寫法，將 object type 轉成 <code>Hero</code>，語法精簡，且 Intellisense 會自動對 field 加以提示。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  name: <span class="string">'Sam'</span>,</span><br><span class="line">  state: <span class="string">'active'</span></span><br><span class="line">&#125; as Hero;</span><br></pre></td></tr></table></figure>
<p>這種寫法也不用透過 new 與 constructor，是 type assertion 的另一種寫法，在最後補上 <code>as</code> 將 object type 轉成 <code>Hero</code>，語法精簡，且 Intellisense 會自動對 field 加以提示。</p>
<h2 id="&lt;Foo&gt;_vs-_as_Foo"><code>&lt;Foo&gt;</code> vs. <code>as Foo</code></h2><hr>
<p><code>&lt;Foo&gt;</code> 與 <code>as Foo</code> 寫法都屬於 type assertion，該用哪一種寫法呢？</p>
<p>一開始 TypeScript 只提供 <code>&lt;Foo&gt;</code>的語法，但這種寫法搭配 JSX 會有問題。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &lt;<span class="built_in">string</span>&gt;bar;</span><br><span class="line">&lt;<span class="regexp">/string&gt;</span></span><br></pre></td></tr></table></figure>
<p>因此 TypeScript 另外提供 <code>as Foo</code> 寫法給 JSX。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = bar as <span class="built_in">string</span>;</span><br><span class="line">&lt;<span class="regexp">/string&gt;</span></span><br></pre></td></tr></table></figure>
<p>對於 Angular 來說，<code>&lt;Foo&gt;</code> 與 <code>as Foo</code> 都可以用，但就語意而言，<code>&lt;Foo&gt;</code> 寫法較優。</p>
<p>因為 type assertion 是在<strong>編譯時期</strong>的<strong>靜態轉型</strong>，而非<strong>執行時期</strong>的<strong>動態轉型</strong>，使用泛型的 <code>&lt;&gt;</code> 符號較能彰顯其<strong>編譯時期</strong>的特性。</p>
<h2 id="Type_Assertion_vs-_Type_Casting">Type Assertion vs. Type Casting</h2><hr>
<p>或許你會覺得 type assertion 就是一種轉型而已，只是使用了 <code>&lt;Foo&gt;</code> 或 <code>as Foo</code> 的語法，但事實上並不是如此。</p>
<p>在 TypeScript PlayGround，我們可以發現使用 type assertion 之後的 JavaScript 的差異：</p>
<p><strong>TypeScript</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hero = &lt;Hero&gt;&#123;</span><br><span class="line">  name: <span class="string">'Sam'</span>,</span><br><span class="line">  state: <span class="string">'active'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>JavaScript</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line"> name: <span class="string">'Sam'</span>,</span><br><span class="line"> state: <span class="string">'active'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>也就是對於 JavaScript 而言，並沒有所謂的 <code>Hero</code> 型別，只是 <code>object</code> 型別，所以並沒有所謂的<strong>執行時期</strong>的<strong>動態轉型</strong>，type assertion 實際上只有兩個功能：</p>
<ul>
<li>編譯時期的型別檢查</li>
<li>開發時期的 Intellisense。</li>
</ul>
<h2 id="Type_Assertion_的盲點">Type Assertion 的盲點</h2><hr>
<p>Type assertion 並非萬靈丹，事實上它有以下盲點，回顧一下我們的 model：</p>
<p><strong>hero.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  state: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Hero 有兩個 fields。</p>
<p><img src="/images/typescript/typescript-assertion/assert000.png" alt="assert000"></p>
<p>使用 <code>&lt;Hero&gt;</code> 寫法，就算少寫了 <code>state</code>，TypeScript language service 與 TSLint 都不會警告，且編譯後也沒有錯誤。</p>
<p><img src="/images/typescript/typescript-assertion/assert001.png" alt="assert001"></p>
<p>改用了 <code>as Hero</code> 寫法依舊，就算少寫了 <code>state</code>，TypeScript language service 與 TSLint 都不會警告，且編譯後也沒有錯誤。</p>
<p><img src="/images/typescript/typescript-assertion/assert002.png" alt="assert002"></p>
<p>若使用了型別宣告，少寫了 <code>state</code>，TypeScript language service 會提出警告，編譯也會失敗，明確告知少指定了 <code>state</code> fields。</p>
<blockquote>
<p>以上 3 種寫法，Intellisense 皆正常，但只有明確宣告型別，才能完整檢查出少了 field。</p>
</blockquote>
<h2 id="Nullable">Nullable</h2><hr>
<p>若 model 有些 field 允許不指定值，卻又希望 TypeScript 強型別檢查呢？</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  state？: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>請在 field 名稱後方加上 <code>?</code>，則 TypeScript language service 不會提出警告，編譯也不會失敗。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Type Assertion 並非最完美的強型別解決方案，只能對 Intellisense 有幫助。</li>
<li>若要完整的檢查，還是要明確的指定型別，如此才能發揮 TypeScript 的 type 威力。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG4TypeAssertion" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="external">TypeScript</a>, <a href="https://github.com/Microsoft/TypeScript/issues/3895" target="_blank" rel="external">[New Feature] Initialize Classes by Using an Object Initializer#3895</a><br><a href="https://www.gitbook.com/book/basarat/typescript/details" target="_blank" rel="external">TypeScript Deep Dive</a>, <a href="https://basarat.gitbooks.io/typescript/docs/types/type-assertion.html" target="_blank" rel="external">Type Assertion</a></p>
]]></content>
    <summary type="html">
    <![CDATA[釐清 Type Assertion 觀念與盲點]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Observable Data Service]]></title>
    <link href="http://oomusou.io/angular/angular-observable-data-service/"/>
    <id>http://oomusou.io/angular/angular-observable-data-service/</id>
    <published>2017-04-24T12:23:43.000Z</published>
    <updated>2017-04-24T13:32:31.000Z</updated>
    <content type="html"><![CDATA[<p>在 <a href="/angular/angular-ngrx/">Angular 也走 Redux 風 (使用 Ngrx)</a> 一文中，我們使用了 <code>Ngrx</code> 這種 <code>Redux</code> 風格的 store 來處理 component 之間共用的 state，雖然可行，但有一點 over design，在 RxJS 出現後，我們使用 Observable Data Service 也能實現出相同的效果。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS 10.12.4<br>Angular CLI 1.0.0<br>Angular 4.0.1</p>
<h2 id="Todo_範例">Todo 範例</h2><hr>
<p><img src="/images/angular/ods/service000.png" alt="service000"></p>
<h3 id="AppModule">AppModule</h3><p><strong>app.module.ts</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoListComponent&#125; from <span class="string">'./components/todo-list/todo-list.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoDashboardComponent&#125; from <span class="string">'./components/todo-dashboard/todo-dashboard.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoService&#125; from <span class="string">'./services/todo/todo.service'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    TodoListComponent,</span><br><span class="line">    TodoDashboardComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    TodoService</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>22 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  TodoService</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>須在 <code>AppModule</code> 的 <code>providers</code> 加入 <code>TodoService</code>。</p>
<h3 id="Component">Component</h3><h4 id="AppComponent">AppComponent</h4><p><strong>app.component.html</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Todo<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">app-todo-list</span>&gt;</span><span class="tag">&lt;/<span class="title">app-todo-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">app-todo-dashboard</span>&gt;</span><span class="tag">&lt;/<span class="title">app-todo-dashboard</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>包含了 <code>TodoList</code> 與 <code>TodoDashboard</code> 兩個 component。</p>
<h4 id="TodoList">TodoList</h4><p><strong>todo-list.component.html</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/components/todo-list/todo-list.component.html" target="_blank" rel="external">todo-list.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> #<span class="attribute">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"addTodo(title)"</span>&gt;</span>Add<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let todo of todos|async"</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"removeTodo(todo.id)"</span>&gt;</span>Remove<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>todos</code> 為 <code>Observable</code>，需加上 <code>async</code> 將 <code>Observable</code> 來 subscribe 與 unsubscribe。</p>
<p>但這有個限制，<code>todos</code> 必須為宣告成 <code>Observable&lt;Todo[]&gt;</code> 型別。</p>
<p>Component 包含了<code>Add</code> 與 <code>Remove</code> 2 個 button。</p>
<p><strong>todo-list.component.ts</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/components/todo-list/todo-list.component.ts" target="_blank" rel="external">todo-list.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoService&#125; from <span class="string">'../../services/todo/todo.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo&#125; from <span class="string">'../../models/todo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo-list'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo-list.component.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListComponent &#123;</span><br><span class="line">  todos: Observable&lt;Todo[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private todoService: TodoService) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todoService.getTodos();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo(input: HTMLInputElement) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!input.value) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.todoService.addTodo(input.value);</span><br><span class="line"></span><br><span class="line">    input.value = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.todoService.removeTodo(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private todoService: TodoService) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todoService.getTodos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>TodoService</code> 依賴注入。</p>
<p>由 <code>TodoService.getTodos()</code> 回傳所有 <code>todos</code>， 此為 <code>Observable</code> 型別。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todos: Observable&lt;Todo[]&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>todos</code> 為 <code>Observable</code> 型別，其泛型為 <code>Todo[]</code>。</p>
<blockquote>
<p>為什麼 <code>todos</code> 不是 <code>Todo[]</code> 型別，而是 <code>Observable&lt;Todo[]&gt;</code> 呢？因為 <code>TodoService.getTodos()</code>回傳的型別為 <code>Observable</code>。</p>
</blockquote>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addTodo(input: HTMLInputElement) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!input.value) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.todoService.addTodo(input.value);</span><br><span class="line"></span><br><span class="line">  input.value = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Add</code> button 的 event handler。</p>
<p>呼叫 <code>TodoService</code> 的 <code>addTodo()</code>，並直接傳入欲新增的 todo。</p>
<blockquote>
<p>使用 Observable Data Service 時，就不必呼叫 <code>Ngrx</code> 的 <code>dispatch()</code> 與傳入 action 與 payload，直接呼叫 service 的 method 與傳入資料即可。</p>
</blockquote>
<p>27 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.todoService.removeTodo(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Remove</code> button 的 event handler。</p>
<p>呼叫 <code>TodoService</code> 的 <code>removeTodo()</code>，並直接傳入欲移除的 id。</p>
<h4 id="TodoDashboard">TodoDashboard</h4><p><strong>todo-dashboard.component.html</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/components/todo-dashboard/todo-dashboard.component.html" target="_blank" rel="external">todo-dashboard.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  Last Update: &#123;&#123; lastUpdate | async | date:'mediumTime'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  Total items: &#123;&#123; (todos | async ).length &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"clearTodos()"</span>&gt;</span>Delete All<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>顯示最後更新時間與 <code>Todo</code> 筆數。</p>
<p><code>lastUpdate</code> 與 <code>todos</code> 均為 <code>Observable</code>，需加上 <code>async</code> 將 <code>Observable</code> 來 subscribe 與 unsubscribe。</p>
<p>Component 包含了 <code>Clear All</code> button。</p>
<p><strong>todo-dashboard.component.ts</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/components/todo-dashboard/todo-dashboard.component.ts" target="_blank" rel="external">todo-dashboard.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoService&#125; from <span class="string">'../../services/todo/todo.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo&#125; from <span class="string">'../../models/todo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo-dashboard'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo-dashboard.component.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoDashboardComponent &#123;</span><br><span class="line">  todos: Observable&lt;Todo[]&gt;;</span><br><span class="line">  lastUpdate: Observable&lt;<span class="built_in">Date</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private todoService: TodoService) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todoService.getTodos();</span><br><span class="line">    <span class="keyword">this</span>.lastUpdate = <span class="keyword">this</span>.todoService.getLastUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clearTodos() &#123;</span><br><span class="line">    <span class="keyword">this</span>.todoService.clearTodos();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private todoService: TodoService) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todoService.getTodos();</span><br><span class="line">  <span class="keyword">this</span>.lastUpdate = <span class="keyword">this</span>.todoService.getLastUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>TodoService</code> 依賴注入。</p>
<p>由 <code>TodoService.getTodos()</code> 回傳所有 <code>todos</code>， 此為 <code>Observable</code> 型別。</p>
<p>由 <code>TodoService.getLastUpdate()</code> 回傳 <code>LastUpdate</code>， 此為 <code>Observable</code> 型別。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">todos: Observable&lt;Todo[]&gt;;</span><br><span class="line">lastUpdate: Observable&lt;<span class="built_in">Date</span>&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>todos</code> 為 <code>Observable</code> 型別，其泛型為 <code>Todo[]</code>。</p>
<p>宣告 <code>lastUpdate</code> 為 <code>Observable</code> 型別，其泛型為 <code>Date</code>。</p>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clearTodos() &#123;</span><br><span class="line">  <span class="keyword">this</span>.todoService.clearTodos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Clear All</code> button 的 event handler。</p>
<p>呼叫 <code>TodoService</code> 的 <code>clearTodos()</code>。</p>
<h3 id="Services">Services</h3><h4 id="TodoService">TodoService</h4><p><strong>todo.service.ts</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/services/todo/todo-state.ts" target="_blank" rel="external">todo.service.ts</a></span></span></span><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo&#125; from <span class="string">'../../models/todo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;BehaviorSubject&#125; from <span class="string">'rxjs/BehaviorSubject'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;INITIAL_TODO, TodoState&#125; from <span class="string">'./todo-state'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/pluck'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoService &#123;</span><br><span class="line">  <span class="keyword">private</span> subject = <span class="keyword">new</span> BehaviorSubject&lt;TodoState&gt;(INITIAL_TODO_STATE);</span><br><span class="line"></span><br><span class="line">  getTodos(): Observable&lt;Todo[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subject.pluck(<span class="string">'todos'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getLastUpdate(): Observable&lt;<span class="built_in">Date</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subject.pluck(<span class="string">'lastUpdate'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo(title: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">      todos: [...todos, &#123;</span><br><span class="line">        id: todos.length + <span class="number">1</span>,</span><br><span class="line">        title: title</span><br><span class="line">      &#125;],</span><br><span class="line">      lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">      todos: todos.filter(todo =&gt; todo.id !== id),</span><br><span class="line">      lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clearTodos() &#123;</span><br><span class="line">    <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">      todos: [],</span><br><span class="line">      lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>全部的 state 邏輯都在 <code>TodoService</code> 內。</p>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoService &#123;</span><br></pre></td></tr></table></figure>
<p>使用 Angular 標準的 service。</p>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> subject = <span class="keyword">new</span> BehaviorSubject&lt;TodoState&gt;(INITIAL_TODO_STATE);</span><br></pre></td></tr></table></figure>
<p><code>subject</code> 為實際儲存 Observable state 之處，為 <code>BehaviorSubject</code> 型別，<code>TodoState</code> 包含 <code>Todo[]</code> 與  <code>LastUpdate</code>。</p>
<blockquote>
<p>什麼是 BehaviorSubject？</p>
</blockquote>
<p>根據 RxJS source code</p>
<p><strong>BehaviorSubject.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BehaviorSubject&lt;T&gt; extends Subject&lt;T&gt; &#123;</span><br></pre></td></tr></table></figure>
<p><code>BehaviorSubject</code> 繼承於 <code>Subject</code>。</p>
<p><strong>Subject.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Subject&lt;T&gt; extends Observable&lt;T&gt; <span class="keyword">implements</span> ISubscription &#123;</span><br></pre></td></tr></table></figure>
<p><code>Subject</code> 繼承於 <code>Observable</code>。</p>
<p>也就是 <code>Observable</code> 所有的特性，<code>Subject</code> 與 <code>BehaviorSubject</code> 都有，如 <code>subscribe()</code> 與 RxJS 的 operator 操作。</p>
<p><code>Subject</code> 與 <code>BehaviorSubject</code> 算是一種特殊的 <code>Observable</code>，提供一些原本 <code>Observable</code> 沒有的功能。</p>
<blockquote>
<p>Observable 與 Subject 的差異？</p>
</blockquote>
<p><code>Subject</code> 多提供了 <code>next()</code>，允許我們手動將值送進 <code>Observable</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject = <span class="keyword">new</span> Subject();</span><br><span class="line">subject.subscribe((value) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Subscription got '</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line">subject.next(<span class="string">'Hello World'</span>);</span><br><span class="line"><span class="comment">// Subscription got Hello World</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Subject 與 BehaviorSubject 的差異？</p>
</blockquote>
<p>可提供初始值給 <code>BehaviorSubject</code>，使用端只要 <code>subscribe()</code> 就能收到初始值。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject = <span class="keyword">new</span> BehaviorSubject(<span class="string">'Hello World'</span>);</span><br><span class="line">subject.subscribe((value) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Subscription got '</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Subscription got Hello World</span></span><br><span class="line">subject.next(<span class="string">'Hello Taiwan'</span>)</span><br><span class="line"><span class="comment">// Subscription got Hello Taiwan</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>Subject</code> 是在 <code>subscribe()</code> 之後，若將來的資料有變動，會得到通知並新資料。</li>
<li><code>BehaviorSubject</code> 是在 <code>subscribe()</code> 時，就能得到資料，因此可設定初始值。</li>
</ul>
<p>因為希望能自己手動更新 state，且有初始值，所以我們選擇使用 <code>BehaviorSubject</code>，而非 <code>Observable</code> 或 <code>Subject</code>。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getTodos(): Observable&lt;Todo[]&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subject.pluck(<span class="string">'todos'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳 <code>todos[]</code> 給使用端，型別為 <code>Observable&lt;Todo[]&gt;</code>。</p>
<blockquote>
<p>因為 <code>Subject</code> 是一種特殊的 <code>Observable</code>，所以也有 <code>pluck</code> operator，取出 <code>todos</code> 屬性值回傳。</p>
</blockquote>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getLastUpdate(): Observable&lt;<span class="built_in">Date</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subject.pluck(<span class="string">'lastUpdate'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳 <code>lastUpdate</code> 給使用端，型別為 <code>Observable&lt;Date&gt;</code>。</p>
<blockquote>
<p>因為 <code>Subject</code> 是一種特殊的 <code>Observable</code>，所以也有 <code>pluck</code> operator，取出 <code>lastUpdate</code> 屬性值回傳。</p>
</blockquote>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/pluck'</span>;</span><br></pre></td></tr></table></figure>
<p>使用 <code>pluck</code> 時，需單獨 import 進來。</p>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addTodo(title: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">    todos: [...todos, &#123;</span><br><span class="line">      id: todos.length + <span class="number">1</span>,</span><br><span class="line">      title: title</span><br><span class="line">    &#125;],</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增 todo 進 <code>BehaviorSubject</code>。</p>
<p>使用 <code>Subject.getValue()</code> 回傳目前 <code>BehaviorSubject</code> 內的 state。</p>
<p>使用 <code>Subject.next()</code> 寫入新的 state 進 <code>BehaviorSubject</code> 。</p>
<p>21 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br></pre></td></tr></table></figure>
<p><code>Subject.getValue()</code> 會回傳 <code>TodoState</code> 型別</p>
<p><strong>todo-state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>內有 <code>todos</code> 與 <code>lastUpdate</code> 兩個屬性，可使用 TypeScript 2.1 的 object destruction 將物件的屬性直接拆成兩個變數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;todos, lastUpdate&#125; = <span class="keyword">this</span>.subject.getValue();</span><br></pre></td></tr></table></figure>
<p>因為 <code>lastUpdate</code> 目前用不到，只想取 <code>todos</code> 即可，因此省略成</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br></pre></td></tr></table></figure>
<p>32 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">    todos: todos.filter(todo =&gt; todo.id !== id),</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>從 <code>BehaviorSubject</code> 移除 todo。</p>
<p>34 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clearTodos() &#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = [];</span><br><span class="line">  <span class="keyword">this</span>.updateSubject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>從 <code>BehaviorSubject</code> 移除全部 todo。</p>
<h4 id="TodoState">TodoState</h4><p><strong>todo-state.ts</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/services/todo/todo.service.ts" target="_blank" rel="external">todo-state.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Todo&#125; from <span class="string">'../../models/todo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_TODO_STATE: TodoState = &#123;todos: [], lastUpdate: <span class="literal">null</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>定義 state 型別。</p>
<p>第 3 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>TodoState</code> 與其 field。</p>
<p>其中 <code>todos</code> 為 <code>Todo</code> 型別的陣列。</p>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_TODO_STATE: TodoState = &#123;todos: [], lastUpdate: <span class="literal">null</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>定義 <code>INITIAL_TODO_STATE</code> 常數，為 <code>TodoState</code> 的初始狀態。</p>
<h3 id="Models">Models</h3><h4 id="Todo">Todo</h4><p><strong>todo.ts</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/models/todo.ts" target="_blank" rel="external">todo.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Todo </span>&#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>Todo</code> 型別。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>對於 component 來說，無論使用了 <code>Ngrx/store</code> 或 Observable Data Service，都是使用 Observable，與 state 的維護方式完全解耦合。</li>
<li>使用了 <code>BehaviorSubject</code> 後，我們能手動透過 <code>next()</code> 維護新的 state，並能通知 component 自動更新，原本跨 component 維護 state 問題將獲得解決。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/TodoObservable" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://forum.angular.tw" target="_blank" rel="external">Angular User Group Taiwan</a>, <a href="https://forum.angular.tw/t/behavior-subject-observable/285" target="_blank" rel="external">請問 Behavior Subject 與 Observable 的差異？</a><br><a href="http://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a>, <a href="http://stackoverflow.com/questions/39494058/angular-2-behavior-subject-vs-observable" target="_blank" rel="external">Angular 2 - Behavior Subject vs Observable?</a><br><a href="https://angular-university.io/" target="_blank" rel="external">Angular University</a>, <a href="http://blog.angular-university.io/how-to-build-angular2-apps-using-rxjs-observable-data-services-pitfalls-to-avoid/" target="_blank" rel="external">How to build Angular apps using Observable Data Services - Pitfalls to avoid</a><br><a href="http://jasonwatmore.com/" target="_blank" rel="external">Jason Watmore</a>, <a href="http://jasonwatmore.com/post/2016/12/01/angular-2-communicating-between-components-with-observable-subject" target="_blank" rel="external">Angular 2 - Communicating Between Components with Observable &amp; Subject</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 RxJS 的 BehaviorSubject]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="RxJS" scheme="http://oomusou.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[迪米特法則]]></title>
    <link href="http://oomusou.io/oop/oop-demeter/"/>
    <id>http://oomusou.io/oop/oop-demeter/</id>
    <published>2017-04-20T12:23:43.000Z</published>
    <updated>2017-04-21T23:12:01.000Z</updated>
    <content type="html"><![CDATA[<p><strong>迪米特法則</strong>也稱為<strong>最小知識原則</strong>，是物件導向 <code>SOLID</code> 原則中的 <code>L</code> 其中之一 <code>LKP</code> ( Least Knowledge Principle)，是 1987 年 Ian Holland 在美國東北大學所提出，此法則應用在其 The Demeter Project 而得名，是物件導的基本原則。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>很多人沒有認清<strong>迪米特法則</strong>的本質，只要看到類似 Clean Code p. 110 書中提到的 <code>Train Wreck</code> 風格的程式碼</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();</span><br></pre></td></tr></table></figure>
<p>就認為違反的迪米特法則，真的是這樣嗎？</p>
<h2 id="定義">定義</h2><hr>
<blockquote>
<p>高階模組不應該知道低階模組的內部如何運作。</p>
<p>低階模組不應該<strong>暴露內部物件</strong>，不應該<strong>暴露實踐細節</strong>，應僅提供方法給高階模組使用。</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>Controller 不應該知道 service 的內部如何運作。</p>
<p>Service 應該將內部所用的其它 service 封裝起來，提供 method 給 controller 使用，而非直接提供內部 service 給 controller 呼叫。</p>
</blockquote>
<h2 id="Train_Wreck">Train Wreck</h2><hr>
<p><strong>SMSService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessage</span><span class="params">()</span>: <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Message'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SMSService</code> 僅有一個 <code>getMessage()</code>。</p>
<p><strong>NotificationService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> SMSService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$smsService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * NotificationService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> SMSService $smsService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(SMSService <span class="variable">$smsService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;smsService = <span class="variable">$smsService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSMSService</span><span class="params">()</span>: <span class="title">SMSService</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;smsService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>NotificationService</code> 相依了 <code>SMSService</code>，直接使用 <code>getSMSService()</code> 將  <code>SMSService</code> 物件傳出去。</p>
<p><strong>PostController</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">NotificationService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">View</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> NotificationService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$notificationService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> NotificationService $notificationService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(NotificationService <span class="variable">$notificationService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;notificationService = <span class="variable">$notificationService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示所有簡訊</span><br><span class="line">     * <span class="doctag">@return</span> View</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">'message'</span>] = <span class="variable">$this</span>-&gt;notificationService-&gt;getSMSService()-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'posts.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為 <code>getSMSService()</code> 傳回  <code>SMSService</code> 物件，導致 controller 必須寫出 <code>Train Wreck</code>：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;notificationService-&gt;getSMSService()-&gt;getMessage();</span><br></pre></td></tr></table></figure>
<p>這種寫法有幾個缺點 :</p>
<ul>
<li><code>PostController</code> 與 <code>NotificationService</code> 內部的 <code>SMSService</code> 強烈耦合，若想要換掉 <code>SMSService</code> 物件，則 <code>PostController</code> 必須跟著修改，也就是<strong>暴露內部物件</strong>。</li>
<li><code>PostController</code> 為了要顯示 message，竟然還必須知道 <code>NotificationService</code> 內部使用了 <code>SMSService</code> 物件，先使用 <code>getSMSService()</code> 才行，也就是<strong>暴露實踐細節</strong>。</li>
<li>違反了物件導向的<strong>封裝</strong>原則，<code>PostController</code> 竟然可以將手伸進去執行 <code>SMSService</code> 的方法。</li>
</ul>
<blockquote>
<p>簡單來說，<strong>迪米特法則</strong>就是物件導向<strong>封裝</strong>特性的具體實現。</p>
</blockquote>
<p>建議將以上程式碼重構成以下寫法</p>
<p><strong>NotificationService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> SMSService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$smsService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * NotificationService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> SMSService $smsService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(SMSService <span class="variable">$smsService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;smsService = <span class="variable">$smsService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessage</span><span class="params">()</span>: <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;smsService-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>PostController</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">NotificationService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">View</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> NotificationService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$notificationService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> NotificationService $notificationService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(NotificationService <span class="variable">$notificationService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;notificationService = <span class="variable">$notificationService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">'message'</span>] = <span class="variable">$this</span>-&gt;notificationService-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'posts.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重構之後，<code>PostController</code> 不再出現 <code>Train Wreck</code> 。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;notificationService-&gt;getMessage();</span><br></pre></td></tr></table></figure>
<ul>
<li><code>PostController</code> 完全不知道<code>NotificationService</code>的<strong>內部物件</strong>，若想要換掉 <code>SMSService</code> 物件，則 <code>PostController</code> 完全不用修改。</li>
<li><code>PostController</code> 為了要顯示 message，不必再知道<strong>實踐細節</strong>， 直接使用 <code>getMessage()</code> 就可以抓到資料。</li>
<li>符合了物件導向的<strong>封裝</strong>原則，<code>PostController</code> 無法將手伸進去執行 <code>SMSService</code> 的方法。</li>
</ul>
<blockquote>
<p>當 service 直接將內部使用的 service 傳出後，逼 controller 必須先了解其內部實踐細節，使得 controller 與 service 的內部其它 service 強烈耦合，這違反了物件導向<strong>封裝</strong>特性，也違反了<strong>迪米特法則</strong>。</p>
<p>違反<strong>迪米特法則</strong>，通常會寫出 <code>Train Wreck</code> ，因此可使用 <code>Train Wreck</code> 檢查是否違反<strong>迪米特法則</strong>。</p>
</blockquote>
<h2 id="最小知識原則">最小知識原則</h2><hr>
<p>物件導向 <code>SOLID</code> 原則的<strong>最小知識原則</strong> <code>LKP</code> (Least Knowledge Principle)，事實上與<strong>迪米特法則</strong>講的是同一件事情。</p>
<blockquote>
<p>一個物件應該對其他物件有最少的了解。</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>Controller 應該以最簡單的方式使用 service。</p>
</blockquote>
<p>之前的 <code>PostController</code> ，因為違反了<strong>迪米特法則</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;notificationService-&gt;getSMSService()-&gt;getMessage();</span><br></pre></td></tr></table></figure>
<p>因此必須知道<code>NotificationService</code>  與 <code>SMSService</code> 之後才能 <code>getMessage()</code>。</p>
<p>但重構之後</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;notificationService-&gt;getMessage();</span><br></pre></td></tr></table></figure>
<p>只要知道 <code>NotificationService</code> 就可以 <code>getMessage()</code>了。</p>
<blockquote>
<p> 符合<strong>最小知識原則</strong>，自然符合<strong>迪米特法則</strong>。</p>
</blockquote>
<h2 id="再論_Train_Wreck">再論 Train Wreck</h2><hr>
<p>我們知道違法<strong>迪米特法則</strong>會寫出 <code>Train Wreck</code>，但寫出 <code>Train Wreck</code> 一定違反<strong>迪米特法則</strong>嗎？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();</span><br></pre></td></tr></table></figure>
<p>Clean Code p.111 認為，要看 <code>getOptions()</code> 、<code>getScratchDir()</code> 與 <code>getAbolutePath()</code> 回傳的是 object 還是 data structure？</p>
<blockquote>
<p>這裡的 data structure 不是我們在學校念書時所謂的<strong>資料結構</strong>，如 linked list、tree 那些，而是指一個<strong>物件只有資料，沒有任何商業邏輯</strong>。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Student&#10;&#123;&#10;    public $id;&#10;    public $name;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>這種完全用 public field 的物件算 data structure。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> int */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int <span class="variable">$id</span>, string <span class="variable">$name</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;name;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>儘管多了 constructor 與 getter，它還是 data structure，因為沒有任何商業邏輯。</p>
<blockquote>
<p>如果回傳的只是一種無其它行為的 data structure，那它們在本質上必然會揭露內部的結構，所以<strong>迪米特法則</strong>在這種狀況下並不適用。</p>
<p>Clean Code p.111</p>
</blockquote>
<p>如前例回傳  <code>SMSService</code>， 因為包含商業邏輯，所以回傳算是 object，而非 data structure，只要包含商業邏輯，就會<strong>暴露實踐細節</strong>，而導致商業邏輯無法抽換，因此 controller 與 service 就必須解耦合，遵守<strong>迪米特法則</strong>。</p>
<blockquote>
<p><code>Train Wreck</code> 不見得違反<strong>迪米特原則</strong>，要看回傳的是 data structure 還是 object。</p>
</blockquote>
<h2 id="Fluent_Interface">Fluent Interface</h2><p>在 Laravel 的 Eloquent，我們會這樣寫</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flights</span> = Flight::where(<span class="string">'active'</span>, <span class="number">1</span>)</span><br><span class="line">               -&gt;orderBy(<span class="string">'name'</span>, <span class="string">'desc'</span>)</span><br><span class="line">               -&gt;take(<span class="number">10</span>)</span><br><span class="line">               -&gt;get();</span><br></pre></td></tr></table></figure>
<p>這也是 <code>Train Wreck</code>，也違反<strong>迪米特法則</strong>嗎？</p>
<p><code>where()</code>、<code>orderBy()</code> 與 <code>take()</code> 這些，並沒有回傳其內部物件，而是傳回 <code>$this</code>，因此沒有<strong>暴露內部物件</strong>與<strong>暴露實踐細節</strong>的問題，也沒有與<strong>內部物件強烈耦合</strong>問題，因此 fluent interface 並沒有違反<strong>迪米特法則</strong>。</p>
<blockquote>
<p>並不是 <code>Train Wreck</code> 一定違反<strong>迪米特法則</strong>，關鍵在於有沒有<strong>暴露內部物件</strong>與<strong>暴露實踐細節</strong>，而不在於 <code>Train Wreck</code> 。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>違反<strong>迪米特法則</strong>會寫出 <code>Train Wreck</code>，但 <code>Train Wreck</code> 不一定會違反<strong>迪米特法則</strong>。</li>
<li><strong>迪米特法則</strong>重點在於強調物件導向的<strong>封裝</strong>特性，關鍵在於不該<strong>暴露內部物件</strong>，進而<strong>暴露實踐細節</strong>，導致使用端與內部物件強烈耦合而無法抽換商業邏輯。</li>
<li><strong>迪米特法則</strong>要求所有的動作都必須透過物件本身的方法操作，而不能傳出內部物件，讓使用端直接操作內部物件，而不在於是否使用 <code>Train Wreck</code> 。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Robert C. Martin, <a href="https://www.tenlong.com.tw/events/106" target="_blank" rel="external">無瑕的程式碼</a><br>良葛格, <a href="http://www.ithome.com.tw/voice/98670" target="_blank" rel="external">封裝與迪米特法則</a><br>Martin Fowler, <a href="https://www.martinfowler.com/bliki/FluentInterface.html" target="_blank" rel="external">Fluent Interface</a></p>
]]></content>
    <summary type="html">
    <![CDATA[並不是使用 Train Wreck 就違反迪米特法則]]>
    
    </summary>
    
      <category term="OOP" scheme="http://oomusou.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular 也走 Redux 風 (使用 Ngrx)]]></title>
    <link href="http://oomusou.io/angular/angular-ngrx/"/>
    <id>http://oomusou.io/angular/angular-ngrx/</id>
    <published>2017-04-19T12:23:43.000Z</published>
    <updated>2017-04-24T13:41:07.000Z</updated>
    <content type="html"><![CDATA[<p>Redux 起源於 React 社群，算是一種 design pattern，適用於某些情境，也提供一些優點，Angular 也有 Redux 的實作，但 Angular 是否該使用 Redux 呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS 10.12.4<br>Angular CLI 1.0.0<br>Angular 4.0.1<br>ngrx/store 2.2.1</p>
<h2 id="為什麼會有_Redux?">為什麼會有 Redux?</h2><hr>
<p><img src="/images/angular/ngrx/ngrx004.png" alt="ngrx004"></p>
<p>Facebook 由於在界面上有多個 component 都可讀取 message，且又同時從 server 端下載 message，也就是當每個 component 的 message 被讀取後，必須更新 unread message count，但 Facebook 發現 unread message count 總是算不準，有解不完的 bug，因此提出了 Flux 架構。</p>
<p>Redux 靈感來自於 Flux 架構，在 Angular 目前有兩套實作，一套是 <a href="https://github.com/angular-redux/ng-redux" target="_blank" rel="external">Ng-redux</a>，另一套是 <a href="https://github.com/ngrx" target="_blank" rel="external">Ngrx</a>。</p>
<ul>
<li><code>Ng-redux</code> 核心仍使用 Redux，增加對 Angular 的支援。</li>
<li><code>Ngrx</code> 只有概念使用 Redux，核心完全使用 RxJS 重新實作。</li>
</ul>
<p>目前 <code>Ngrx</code> 在 GitHub 的星星數遠高於 <code>Ng-redux</code>，本文將以 <code>Ngrx</code> 討論。</p>
<blockquote>
<p>Flux 是一種概念，Redux 是 Flux 在 React 的實作，Ngrx 則是 Redux 在 Angular 的實作。</p>
</blockquote>
<h2 id="Ngrx_簡介">Ngrx 簡介</h2><hr>
<p><img src="/images/angular/ngrx/ngrx005.png" alt="ngrx005"></p>
<p>將 component 與 service 的資料統一放到 store，當 store 的資料有更新，將會自動更新到有 subscribe 的 component 與 service。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>本圖片來自於 <a href="https://github.com/btroncone" target="_blank" rel="external">Brain Troncone</a>, <a href="https://gist.github.com/btroncone/a6e4347326749f938510" target="_blank" rel="external">A Comprehensive Introduction to @ngrx/store</a></span></span></span></p>
<p><img src="/images/angular/ngrx/ngrx006.gif" alt="ngrx006"></p>
<p>在使用 <code>Ngrx</code> 之前，首先必須了解一些專有名詞。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>本圖片來自於 <a href="https://www.pluralsight.com/guides/front-end-javascript/building-a-redux-application-with-angular-2-part-1" target="_blank" rel="external">Building a Redux application with Anguar 2 - Part 1</a></span></span></span></p>
<h3 id="View">View</h3><p>相當於 component，主要在顯示使用者介面。</p>
<h3 id="Action">Action</h3><p>當 component 有任何 event 時，會對 <code>Ngrx</code> 發出 action。</p>
<h3 id="Middleware">Middleware</h3><p>負責存取對 server 端的 API，本文暫不討論此部分。</p>
<h3 id="Dispatcher">Dispatcher</h3><p>負責接受 component 傳來的 action，並將 action 傳給 reducer。</p>
<h3 id="Store">Store</h3><p>可是為 <code>Ngrx</code> 在瀏覽器端的資料庫，各 component 的資料都可統一放在這裡。</p>
<h3 id="Reducer">Reducer</h3><p>根據 dispatcher 傳來的 action，決定該如何寫入 state。</p>
<p>當 state 有改變時，將通知有 subscribe 該 state 的 component 自動更新。</p>
<h3 id="State">State</h3><p>存放在 store 內的資料。</p>
<p><img src="/images/angular/ngrx/ngrx007.svg" alt="ngrx007"></p>
<p>有些東西 <code>Ngrx</code> 已經幫我們做了，真的要我們自己實作只有 4 個部份，且資料流為單向的 : Component -&gt; Action -&gt; Reducer -&gt; Store -&gt; Component。</p>
<h2 id="安裝_Ngrx">安裝 Ngrx</h2><hr>
<h3 id="Installation">Installation</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ <span class="built_in">npm</span> install <span class="property">@ngrx</span>/core <span class="property">@ngrx</span>/store --save</span><br></pre></td></tr></table></figure>
<p>安裝 <code>@ngrx/core</code> 與 <code>@ngrx/store</code>。</p>
<h2 id="Counter_範例">Counter 範例</h2><hr>
<p><img src="/images/angular/ngrx/ngrx002.png" alt="ngrx002"></p>
<h3 id="AppModule">AppModule</h3><p><strong>app.module.ts</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StoreModule&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;counterReducer&#125; from <span class="string">'./stores/counter/counter.reducer'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    StoreModule.provideStore(counterReducer),</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule,</span><br><span class="line">  HttpModule,</span><br><span class="line">  StoreModule.provideStore(counterReducer),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>須在 <code>AppModule</code> import <code>StoreModule.provideStore()</code>，並傳入 reducer。</p>
<h3 id="Component">Component</h3><p><strong>app.component.html</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Counter: &#123;&#123; counter | async &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"increment()"</span>&gt;</span>Increment<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"decrement()"</span>&gt;</span>Decrement<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"reset()"</span>&gt;</span>Reset<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>counter</code> 加上 <code>async</code> pipe，由 <code>async</code> 負責將 <code>ngrx/store</code> 來 subscribe 與 unsubscribe。</p>
<p>但這有個限制，<code>counter</code> 必須為宣告成 <code>Observable&lt;number&gt;</code> 型別。</p>
<p>Component 包含了 <code>Increment</code>、<code>Decrement</code> 與 <code>Reset</code> 3 個 button。</p>
<p><strong>app.component.ts</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/app.component.ts" target="_blank" rel="external">app.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;CounterState&#125; from <span class="string">'./stores/counter/counter.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Store&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;DECREMENT, INCREMENT, RESET&#125; from <span class="string">'./stores/counter/counter.action'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  counter: Observable&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;CounterState&gt;) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.counter = store.select(<span class="string">'counter'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment() &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: INCREMENT,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        value: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement() &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: DECREMENT,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        value: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reset() &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;<span class="keyword">type</span>: RESET&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;CounterState&gt;) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.counter = store.select(<span class="string">'counter'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>ngrx/store</code>  的 <code>Store</code> 依賴注入，它是個泛型，需傳入自己的 state 型別。</p>
<p>由 store 的 <code>select()</code> 傳回 store 內的 <code>counter</code> field，此為 <code>Observable</code> 型別。</p>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter: Observable&lt;<span class="built_in">number</span>&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>counter</code> 為 <code>Observable</code> 型別，其泛型為 <code>number</code>。</p>
<blockquote>
<p>為什麼 <code>counter</code> 不是 <code>number</code> 型別，而是 <code>Observable&lt;number&gt;</code> 呢？因為 <code>store.select()</code> 回傳的型別為 <code>Observable</code>。</p>
</blockquote>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">increment() &#123;</span><br><span class="line">  <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: INCREMENT,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      value: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Increment</code> button 的 event handler。</p>
<p>將 action 透過 store 的 <code>dispatch()</code> 傳入，action 物件包含 <code>type</code> 與 <code>payload</code> 兩個 field，<code>type</code> 為欲 dispatch 的 action，而 <code>payload</code> 則為欲透過 dispatch 傳入的資料，可自行決定其物件屬性，之後會由 reducer 根據 action 寫入 state。 </p>
<blockquote>
<p>可將 dispatch 概念上想成類似 event 的 emit。</p>
</blockquote>
<h3 id="Action-1">Action</h3><p><strong>counter.action.ts</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/stores/counter/counter.action.ts" target="_blank" rel="external">counter.action.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RESET     = <span class="string">'RESET'</span>;</span><br></pre></td></tr></table></figure>
<p>定義 action 常數，將來 component 可用 <code>dispatch()</code> 發布 action， 然後 reducer 再根據 action 做 <code>switch</code> 判斷寫入 state。</p>
<h3 id="Reducer-1">Reducer</h3><p><strong>counter.reducer.ts</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/stores/counter/counter.reducer.ts" target="_blank" rel="external">counter.reducer.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;CounterState, INITIAL_COUNTER_STATE&#125; from <span class="string">'./counter.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;DECREMENT, INCREMENT, RESET&#125; from <span class="string">'./counter.action'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Action&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">counterReducer</span>(<span class="params">state: CounterState = INITIAL_COUNTER_STATE, action: Action</span>): <span class="title">CounterState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="keyword">type</span>, payload&#125; = action;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> INCREMENT:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, counter: state.counter + payload.value&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> DECREMENT:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, counter: state.counter - payload.value&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> RESET:</span><br><span class="line">      <span class="keyword">return</span> INITIAL_COUNTER_STATE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一個 state 會搭配一個 reducer，由 reducer 寫入 state。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">counterReducer</span>(<span class="params">state: CounterState = INITIAL_COUNTER_STATE, action: Action</span>): <span class="title">CounterState</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p>Reducer 會以 state 與 action 為參數，並寫入 state。</p>
<ul>
<li>第 1 個參數為 <code>state</code>，可設定 reducer 一開始的預設 state，傳入目前的 state。</li>
<li>第 2 個參數為 <code>action</code>，傳入目前的 action。</li>
</ul>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="keyword">type</span>, payload&#125; = action;</span><br></pre></td></tr></table></figure>
<p>根據 ngrx 的 <code>dispatcher.d.ts</code> ，<code>Action</code> 的定義如下 :</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Action </span>&#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  payload?: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Action</code> 的兩個 field 為 <code>type</code> 與 <code>payload</code>，因此我們可以使用 TypeScript 2.1 的 object destruction 將 <code>action</code> 分解成 <code>type</code> 與 <code>payload</code> 兩個變數。</p>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> INCREMENT:</span><br><span class="line">    <span class="keyword">return</span> &#123;...state, counter: state.counter + payload.value&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> DECREMENT:</span><br><span class="line">    <span class="keyword">return</span> &#123;...state, counter: state.counter - payload.value&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> RESET:</span><br><span class="line">    <span class="keyword">return</span> INITIAL_COUNTER_STATE;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>典型的 Redux 風格，在 reducer 內會根據 action 的 type 做 <code>switch case</code>。</p>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;...state, counter: state.counter + payload.value&#125;;</span><br></pre></td></tr></table></figure>
<p>Redux 為 FP (Functional Programming) 思維的產物，要求 reducer 必須為 pure function，因此必須回傳一個新的 state，而不是去修改原本的 state。</p>
<p>TypeScript 2.1 提供了 object spread，<code>…state</code> 會將整個物件的屬性加以展開，之後的參數為要修改的屬性值，<code>{}</code> 會將物件屬性加以合併，並回傳新的物件。</p>
<blockquote>
<p>傳統會使用 <code>Object.assign()</code> 的寫法，但寫法並不直覺，且因為其第二個參數需傳入物件，還必須多一層 <code>{}</code>，建議使用 object spread 寫法可讀性較高。</p>
</blockquote>
<h3 id="Store-1">Store</h3><p><strong>counter.store.ts</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/stores/counter/counter.store.ts" target="_blank" rel="external">counter.store.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> CounterState </span>&#123;</span><br><span class="line">  counter: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_COUNTER_STATE: CounterState = &#123;</span><br><span class="line">  counter: <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 store 定義自己的 state 型別。</p>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> CounterState </span>&#123;</span><br><span class="line">  counter: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>CounterState</code> 與其 field。</p>
<blockquote>
<p>使用 interface 即可，因為 state 型別主要是給 TypeScript 編譯檢查與 IntelliSense 使用，而 JavaScript 沒有 interface，故編譯後 interface 會消失，若 state 使用 class，將來編譯後還會存在 class。</p>
</blockquote>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_COUNTER_STATE: CounterState = &#123;</span><br><span class="line">  counter: <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>定義 <code>INITIAL_COUNTER_STATE</code> 常數，為 <code>CounterState</code> 的初始狀態。</p>
<h2 id="Todo_範例">Todo 範例</h2><hr>
<p><img src="/images/angular/ngrx/ngrx003.png" alt="ngrx003"></p>
<h3 id="AppModule-1">AppModule</h3><p><strong>app.module.ts</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoListComponent&#125; from <span class="string">'./todo-list/todo-list.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoDashboardComponent&#125; from <span class="string">'./todo-dashboard/todo-dashboard.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StoreModule&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;todoReducer&#125; from <span class="string">'./stores/todo/todo.reducer'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    TodoListComponent,</span><br><span class="line">    TodoDashboardComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    StoreModule.provideStore(todoReducer)</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule,</span><br><span class="line">  HttpModule,</span><br><span class="line">  StoreModule.provideStore(todoReducer)</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>須在 <code>AppModule</code> import <code>StoreModule.provideStore()</code>，並傳入 reducer。</p>
<h3 id="Component-1">Component</h3><h4 id="AppComponent">AppComponent</h4><p><strong>app.component.html</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Todo<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">app-todo-list</span>&gt;</span><span class="tag">&lt;/<span class="title">app-todo-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">app-todo-dashboard</span>&gt;</span><span class="tag">&lt;/<span class="title">app-todo-dashboard</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>包含了 <code>TodoList</code> 與 <code>TodoDashboard</code> 兩個 component。</p>
<h4 id="TodoList">TodoList</h4><p><strong>todo-list.component.html</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/todo-list/todo-list.component.html" target="_blank" rel="external">todo-list.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> #<span class="attribute">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"addTodo(title)"</span>&gt;</span>Add<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let todo of todos | async"</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"removeTodo(todo)"</span>&gt;</span>Remove<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>todos</code> 為 <code>Observable</code>，需加上 <code>async</code> 將 <code>ngrx/store</code> 來 subscribe 與 unsubscribe。</p>
<p>但這有個限制，<code>todos</code> 必須為宣告成 <code>Observable&lt;Todo[]&gt;</code> 型別。</p>
<p>Component 包含了<code>Add</code> 與 <code>Remove</code> 2 個 button。</p>
<p><strong>todo-list.component.ts</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/todo-list/todo-list.component.ts" target="_blank" rel="external">todo-list.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo, TodoState&#125; from <span class="string">'../stores/todo/todo.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Store&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ADD_TODO, REMOVE_TODO&#125; from <span class="string">'../stores/todo/todo.action'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo-list'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo-list.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListComponent &#123;</span><br><span class="line">  todos: Observable&lt;Todo[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;TodoState&gt;) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = store.select(<span class="string">'todos'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo(input: HTMLInputElement) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!input.value) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: ADD_TODO,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        title: input.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    input.value = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(todo: Todo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: REMOVE_TODO,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        id: todo.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;TodoState&gt;) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = store.select(<span class="string">'todos'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>ngrx/store</code>  的 <code>Store</code> 依賴注入，它是個泛型，需傳入自己的 state 型別。</p>
<p>由 store 的 <code>select()</code> 傳回 store 內的 <code>todos</code> field，此為 <code>Observable</code> 型別。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todos: Observable&lt;Todo[]&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>todos</code> 為 <code>Observable</code> 型別，其泛型為 <code>Todo[]</code>。</p>
<blockquote>
<p>為什麼 <code>todos</code> 不是 <code>Todo[]</code> 型別，而是 <code>Observable&lt;Todo[]&gt;</code> 呢？因為 <code>store.select()</code> 回傳的型別為 <code>Observable</code>。</p>
</blockquote>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">addTodo(input: HTMLInputElement) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!input.value) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: ADD_TODO,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      title: input.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  input.value = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Add</code> button 的 event handler。</p>
<p>將 <code>ADD_TODO</code> action 透過 store 的 <code>dispatch()</code> 傳入，action 物件包含 <code>type</code> 與 <code>payload</code> 兩個 field，<code>type</code> 為 <code>ADD_TODO</code> action，而 <code>payload</code> 則為欲新增資料的 <code>title</code>，之後會由 reducer 根據目前 action 寫入 state。 </p>
<p>33 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">removeTodo(todo: Todo) &#123;</span><br><span class="line">  <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: REMOVE_TODO,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      id: todo.id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Remove</code> button 的 event handler。</p>
<p>將 <code>REMOVE_TODO</code> action 透過 store 的 <code>dispatch()</code> 傳入，action 物件包含 <code>type</code> 與 <code>payload</code> 兩個 field，<code>type</code> 為 <code>REMOVE_TODO</code> action，而 <code>payload</code> 則為欲移除資料的 <code>id</code>，之後會由 reducer 根據目前 action 寫入 state。 </p>
<h4 id="TodoDashboard">TodoDashboard</h4><p><strong>todo-dashboard.component.html</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/todo-dashboard/todo-dashboard.component.html" target="_blank" rel="external">todo-dashboard.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  Last Update: &#123;&#123; lastUpdate | async | date:'mediumTime'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  Total items: &#123;&#123; (todos | async).length &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"clearTodos()"</span>&gt;</span>Clear All<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>顯示最後更新時間與 <code>Todo</code> 筆數。</p>
<p><code>lastUpdate</code> 與 <code>todos</code> 均為 <code>Observable</code>，需加上 <code>async</code> 將 <code>ngrx/store</code> 來 subscribe 與 unsubscribe。</p>
<p>Component 包含了 <code>Clear All</code> button。</p>
<p><strong>todo-dashboard.component.ts</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/todo-dashboard/todo-dashboard.component.ts" target="_blank" rel="external">todo-dashboard.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo, TodoState&#125; from <span class="string">'../stores/todo/todo.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Store&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;CLEAR_TODOS&#125; from <span class="string">'../stores/todo/todo.action'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo-dashboard'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo-dashboard.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoDashboardComponent &#123;</span><br><span class="line">  todos: Observable&lt;Todo[]&gt;;</span><br><span class="line">  lastUpdate: Observable&lt;<span class="built_in">Date</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;TodoState&gt;) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = store.select(<span class="string">'todos'</span>);</span><br><span class="line">    <span class="keyword">this</span>.lastUpdate = store.select(<span class="string">'lastUpdate'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clearTodos() &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: CLEAR_TODOS</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;TodoState&gt;) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = store.select(<span class="string">'todos'</span>);</span><br><span class="line">  <span class="keyword">this</span>.lastUpdate = store.select(<span class="string">'lastUpdate'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>ngrx/store</code>  的 <code>Store</code> 依賴注入，它是個泛型，需傳入自己的 state 型別。</p>
<p>由 store 的 <code>select()</code> 傳回 store 內的 <code>todos</code> 與 <code>lastUpdate</code>field，皆為 <code>Observable</code> 型別。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">todos: Observable&lt;Todo[]&gt;;</span><br><span class="line">lastUpdate: Observable&lt;<span class="built_in">Date</span>&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>todos</code> 為 <code>Observable</code> 型別，其泛型為 <code>Todo[]</code>。</p>
<p>宣告 <code>lastUpdate</code> 為 <code>Observable</code> 型別，其泛型為 <code>Date</code>。</p>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clearTodos() &#123;</span><br><span class="line">  <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: CLEAR_TODOS</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Clear All</code> button 的 event handler。</p>
<p>將 <code>CLEAR_TODOS</code> action 透過 store 的 <code>dispatch()</code> 傳入，action 物件包含 <code>type</code> 與 <code>payload</code> 兩個 field，<code>type</code> 為 <code>REMOVE_TODO</code> action，因為沒有要傳入的資料，因此不需 <code>payload</code>，之後會由 reducer 根據目前 action 寫入 state。 。 </p>
<h3 id="Action-2">Action</h3><p><strong>todo.action.ts</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/stores/todo/todo.action.ts" target="_blank" rel="external">todo.action.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TODO    = <span class="string">'ADD_TODO'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REMOVE_TODO = <span class="string">'REMOVE_TODO'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CLEAR_TODOS = <span class="string">'CLEAR_TODOS'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DEFAULT     = <span class="string">'DEFAULT'</span>;</span><br></pre></td></tr></table></figure>
<p>在 action 定義自己的 action 常數。</p>
<p>實務上 action 常數會以 component 或 service 所要 dispatch 的 event 設計，以本範例而言，在 component 有 <code>Add</code>、<code>Remove</code> 與 <code>Delete All</code>  3 個 button，因此會配合 3 個 button 設計出 <code>ADD_TODO</code> 、<code>REMOVE_TODO</code> 與 <code>CLEAR_TODOS</code> 3 個 action。</p>
<h3 id="Reducer-2">Reducer</h3><p><strong>todo.reducer.ts</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/stores/todo/todo.reducer.ts" target="_blank" rel="external">todo.reducer.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;INITIAL_TODO_STATE, TodoState&#125; from <span class="string">'./todo.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ADD_TODO, CLEAR_TODOS, REMOVE_TODO&#125; from <span class="string">'./todo.action'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Action&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">todoReducer</span>(<span class="params">state: TodoState = INITIAL_TODO_STATE, action: Action</span>): <span class="title">TodoState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="keyword">type</span>, payload&#125; = action;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        todos: [...state.todos, &#123;</span><br><span class="line">          id: state.todos.length + <span class="number">1</span>,</span><br><span class="line">          title: payload.title</span><br><span class="line">        &#125;],</span><br><span class="line">        lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> REMOVE_TODO:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        todos: state.todos.filter(todo =&gt; todo.id !== payload.id),</span><br><span class="line">        lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> CLEAR_TODOS:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        todos: [],</span><br><span class="line">        lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 reducer 定義自己的寫入 state 邏輯。</p>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> ADD_TODO:</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    todos: [...state.todos, &#123;</span><br><span class="line">      id: state.todos.length + <span class="number">1</span>,</span><br><span class="line">      title: payload.title</span><br><span class="line">    &#125;],</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>使用 object spread 方式傳回新物件。</p>
<p><code>todos</code> 為陣列，而 <code>ADD_TODO</code> 主要的目的就是將新的物件加到 <code>todos</code> 陣列，因此可使用 array spread 方式傳回新的陣列。</p>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> REMOVE_TODO:</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    todos: state.todos.filter(todo =&gt; todo.id !== payload.id),</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>一樣使用 object spread 方式傳回新的物件。</p>
<p><code>REMOVE_TODO</code> 主要為移除 <code>payload.id</code> 的 <code>Todo</code>，但因為 <code>Ngrx</code> 要求為 pure function，因此改用 <code>filter()</code> 過濾 <code>todo.id</code> 不為 <code>payload.id</code>。</p>
<p>26 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> CLEAR_TODOS:</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    todos: [],</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>一樣使用 object spread 方式傳回新的物件。</p>
<p><code>CLEAR_TODOS</code> 為清除所有 <code>Todo</code>，但因為 <code>Ngrx</code> 要求為 pure function，因此傳回 <code>[]</code> 空陣列。</p>
<h3 id="Store-2">Store</h3><p><strong>todo.store.ts</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/stores/todo/todo.store.ts" target="_blank" rel="external">todo.store.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Todo </span>&#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_TODO_STATE: TodoState = &#123;</span><br><span class="line">  todos: [],</span><br><span class="line">  lastUpdate: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 store 定義自己的 state 型別。</p>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>TodoState</code> 與其 field。</p>
<p>其中 <code>todos</code> 為 <code>Todo</code> 型別的陣列。</p>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Todo </span>&#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>Todo</code> 型別。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_TODO_STATE: TodoState = &#123;</span><br><span class="line">  todos: [],</span><br><span class="line">  lastUpdate: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>定義 <code>INITIAL_TODO_STATE</code> 常數，為 <code>TodoState</code> 的初始狀態。</p>
<h2 id="Ngrx_DevTools">Ngrx DevTools</h2><hr>
<p><code>Ngrx</code> 所提供的開發者工具，讓我們可以針對 <code>Ngrx</code> 的 store 與 action 做 debug。</p>
<h3 id="Installation-1">Installation</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ npm <span class="operator"><span class="keyword">install</span> @ngrx/<span class="keyword">store</span>-devtools <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<p>安裝 <code>@ngrx/store-devtools</code>。</p>
<p><img src="/images/angular/ngrx/ngrx000.png" alt="ngrx000"></p>
<p>安裝 <code>Redux DevTools</code> 到 Chrome。</p>
<h3 id="AppModule-2">AppModule</h3><p><strong>app.module.ts</strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoListComponent&#125; from <span class="string">'./todo-list/todo-list.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoDashboardComponent&#125; from <span class="string">'./todo-dashboard/todo-dashboard.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StoreModule&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;todoReducer&#125; from <span class="string">'./stores/todo/todo.reducer'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StoreDevtoolsModule&#125; from <span class="string">'@ngrx/store-devtools'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    TodoListComponent,</span><br><span class="line">    TodoDashboardComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    StoreModule.provideStore(todoReducer),</span><br><span class="line">    StoreDevtoolsModule.instrumentOnlyWithExtension(),</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule,</span><br><span class="line">  HttpModule,</span><br><span class="line">  StoreModule.provideStore(todoReducer),</span><br><span class="line">  StoreDevtoolsModule.instrumentOnlyWithExtension(),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>須在 <code>AppModule</code> import <code>StoreDevtoolsModule.instrumentOnlyWithExtension()</code>。</p>
<p><img src="/images/angular/ngrx/ngrx001.png" alt="ngrx001"></p>
<p>可在 Chrome 使用 Ngrx DevTools 對 state 與 action 做 debug，並可使用 time-traveling 的方式一個 action 一個 action 的執行。</p>
<h2 id="Ngrx_的特色">Ngrx 的特色</h2><hr>
<ul>
<li>將所有 state 統一放在單一 store 內。</li>
<li>所有寫入 state 的邏輯都統一放在單一 reducer 內，且必須為 pure function。</li>
<li>Component 不寫邏輯，只負責 dispatch 適當的 action。</li>
<li>當 state 變更，component 會自動更新。</li>
</ul>
<h2 id="Ngrx_的優點">Ngrx 的優點</h2><hr>
<ul>
<li>單向的資料流程，程式碼較易理解與 debug。</li>
<li>將 state 的變更邏輯統一寫在 reducer 內，而非分散在各 component，較容易維護。</li>
<li>由於 reducer 為 pure function，很容易寫單元測試。</li>
<li>資料邏輯與 framework 解耦合，action/reducer/store 獨立於 framework，將來要移植到其他 framework 很方便。</li>
<li>有 Ngrx DevTools 方便做 time-traveling 方式的 debug。</li>
<li>可將使用者行為錄製下來。</li>
</ul>
<h2 id="Ngrx_的缺點">Ngrx 的缺點</h2><hr>
<ul>
<li>為 FP 思維產物，若只熟 OOP 較難以掌握。</li>
<li>維護的人須事先有 Redux 觀念，否則無法維護，學習門檻較高。</li>
<li>Reducer 需寫成 pure function，難度較高。</li>
<li>有點 over design 味道。</li>
</ul>
<h2 id="什麼時候該使用_Ngrx?">什麼時候該使用 Ngrx?</h2><hr>
<ul>
<li>當多個 component 需使用共用資料，且各 component 的操作會影像其他 component 的結果。</li>
<li>資料可能同時被多個 component 修改，甚至同時被 server API 修改。</li>
<li>需要實作 undo/redo 功能。</li>
</ul>
<blockquote>
<p>You’ll know when you need Flux. If you aren’t sure if you need it, you don’t need it.</p>
</blockquote>
<p>套句 <a href="https://github.com/petehunt/react-howto" target="_blank" rel="external">React How-to</a> 的名言，當你需要 <code>Ngrx</code> 的時候再使用 <code>Ngrx</code>，若你不確定，就不要使用，避免因誤用而 over design。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>Ngrx</code> 有一點 over design，相當於 command 模式與 Observable 模式的合體。</li>
<li><code>Ngrx</code> 就跟所有的 design pattern 一樣，都會使設計複雜化，並不是所有應用都適合使用 <code>Ngrx</code>，必須看需求用在刀口上。</li>
<li><code>RxJS</code> 出來之後，<code>Ngrx</code> 的寫法重要性不若以往，簡單的應用直接在 service 使用 <code>RxJS</code> 即可。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a> 上找到 <a href="https://github.com/oomusou/CounterNgrx" target="_blank" rel="external">CounterNgrx</a> 與 <a href="https://github.com/oomusou/TodoNgrx" target="_blank" rel="external">TodoNgrx</a>。</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/ngrx" target="_blank" rel="external">ngrx</a>, <a href="https://github.com/ngrx/store" target="_blank" rel="external">ngrx/store</a><br><a href="http://programmingwithmosh.com" target="_blank" rel="external">Mosh Hamedani</a>, <a href="https://www.udemy.com/angular2-advanced/" target="_blank" rel="external">Build Enterprise Applications with Angular 2</a><br><a href="https://angular-university.io" target="_blank" rel="external">Angular University</a>, <a href="http://blog.angular-university.io/angular-ngrx-store-and-effects-crash-course/" target="_blank" rel="external">Angular Ngrx Crash Course Part 1: Ngrx Store - Learn It By Understanding The Original Facebook Counter Bug</a><br><a href="https://angular-university.io" target="_blank" rel="external">Angular University</a>, <a href="http://blog.angular-university.io/angular-2-redux-ngrx-rxjs/" target="_blank" rel="external">Angular Service Layers: Redux, RxJs and Ngrx Store - When to Use a Store And Why ?</a><br><a href="https://www.pluralsight.com/guides/author/Kaizeras" target="_blank" rel="external">Hristo Georgiev</a>, <a href="https://www.pluralsight.com/guides/front-end-javascript/building-a-redux-application-with-angular-2-part-1" target="_blank" rel="external">Building a Redux application with Anguar 2 - Part 1</a><br><a href="https://www.pluralsight.com/guides/author/Kaizeras" target="_blank" rel="external">Hristo Georgiev</a>, <a href="https://www.pluralsight.com/guides/front-end-javascript/building-a-redux-application-with-angular-2-part-2" target="_blank" rel="external">Building a Redux application with Anguar 2 - Part 2</a><br><a href="https://github.com/btroncone" target="_blank" rel="external">Brain Troncone</a>, <a href="https://gist.github.com/btroncone/a6e4347326749f938510" target="_blank" rel="external">A Comprehensive Introduction to @ngrx/store</a><br><a href="https://egghead.io" target="_blank" rel="external">egghead.io</a>, <a href="https://egghead.io/courses/building-a-time-machine-with-angular-2-and-rxjs" target="_blank" rel="external">Build Redux Style Application with Angular 2, RxJS, and ngrx/store</a><br><a href="https://hackernoon.com/@MichalMajewski" target="_blank" rel="external">Michal Majewski</a>, <a href="https://hackernoon.com/@MichalMajewski" target="_blank" rel="external">What I have learned using ngrx/Redux with Angular 2</a><br><a href="https://medium.com/@dan_abramov" target="_blank" rel="external">Dan Abramov</a>, <a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367" target="_blank" rel="external">You Might Not Need Redux</a><br><a href="https://github.com/petehunt" target="_blank" rel="external">Pete Hunt</a>,  <a href="https://github.com/petehunt/react-howto" target="_blank" rel="external">React How-to</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Redux 風格開發 Angular]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="RxJS" scheme="http://oomusou.io/tags/RxJS/"/>
    
  </entry>
  
</feed>
