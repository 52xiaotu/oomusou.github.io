<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2018-03-16T08:38:41.460Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[深入探討 dotnet restore]]></title>
    <link href="http://oomusou.io/netcore/restore/"/>
    <id>http://oomusou.io/netcore/restore/</id>
    <published>2018-03-16T14:23:43.000Z</published>
    <updated>2018-03-16T08:38:41.460Z</updated>
    <content type="html"><![CDATA[<p>.NET Core SDK 提供了 <code>dotnet restore</code> 指令，但官網的說明很簡單，只說明了他是 <code>restore dependency</code>，到底什麼是 <code>restore dependency</code> 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1<br>Node.js 8.9.4<br>NPM 5.7.1</p>
<h2 id="NuGet_vs-_NPM">NuGet vs. NPM</h2><hr>
<p>NuGet 與 NPM 都是為了解決 package dependency 的問題</p>
<p>相同之處 :</p>
<ul>
<li><strong>NuGet</strong> : 採用 <code>csproj</code> 紀錄所使用 package</li>
<li><strong>NPM</strong> : 使用 <code>package.json</code> 紀錄所使用 package</li>
</ul>
<p>相異之處 :</p>
<ul>
<li><strong>NuGet</strong> : 將 package 統一放在 <code>~/.nuget/packages</code>，若該 package 有多個版本，則以版本當目錄</li>
<li><strong>NPM</strong> : 多專案共用的 global package 統一放在 <code>/usr/local/lib/node_modules/npm/node_modules</code>，但若專案自己用的 package 則放在專案目錄的 <code>node_modules</code></li>
</ul>
<blockquote>
<p>PHP Composer 哲學與 NPM 類似，也分成 global package 與 local package</p>
</blockquote>
<p><strong>NuGet 優點</strong></p>
<ul>
<li>整個系統只有一份 package，省硬碟空間，而不像 NPM 每個專案都有重複的 package。</li>
</ul>
<p><strong>NuGet 缺點</strong></p>
<ul>
<li>當你刪除專案，系統可能會留著沒用到的 package</li>
<li>必須要有一份 mapping 檔案，讓 compiler 在 build 時，知道 package 放在哪裡，因為 package 不是放在專案目錄下。</li>
</ul>
<p>第 2 點就是 dotnet restore 要解決的。</p>
<h2 id="觀察_Console_App">觀察 Console App</h2><hr>
<p><img src="/images/netcore/restore/restore000.png" alt="estore00"></p>
<ol>
<li>當使用 <code>dotnet new console</code> 時，事實上只是建立了 <code>csproj</code></li>
<li>自動執行 <code>dotnet restore</code>，根據 <code>csproj</code> 建立了 <code>nuget.g.props</code> 與 <code>nuget.g.targets</code></li>
</ol>
<p><img src="/images/netcore/restore/restore001.png" alt="estore00"></p>
<ol>
<li>觀察 <code>nuget.g.props</code>，雖然很多資訊看不懂，但最少看到 <code>&lt;NuGetPackageRoot&gt;</code> 記載著 NuGet 目錄放在 <code>/Users/oomusou/.nuget/packages</code>，這樣 compiler 就可以從這個目錄抓到 NuGet package 放哪裡<blockquote>
<p>只所以沒用 VS Code 開啟專案，是因為 VS Code 還會自動建立其他目錄與檔案，怕模糊焦點，所以這裡選擇 Sublime Text</p>
</blockquote>
</li>
</ol>
<h2 id="刪除_obj_目錄">刪除 obj 目錄</h2><hr>
<p><img src="/images/netcore/restore/restore002.png" alt="estore00"></p>
<ol>
<li>選擇 <code>obj</code> 目錄</li>
<li>刪除 <code>obj</code> 目錄</li>
</ol>
<h2 id="dotnet_restore">dotnet restore</h2><hr>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ dotnet <span class="built_in">restore</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet restore</code> 重新建立 <code>obj</code> 目錄。</p>
<p><img src="/images/netcore/restore/restore003.png" alt="estore00"></p>
<ol>
<li>輸入 <code>dotnet restore</code></li>
<li>根據 <code>csproj</code> 重新建立 <code>nuget.g.props</code> 與 <code>nuget.g.targets</code> </li>
</ol>
<p><img src="/images/netcore/restore/restore004.png" alt="estore00"></p>
<ol>
<li><code>obj</code> 目錄被 <code>restore</code> 回來了</li>
</ol>
<h2 id="-NET_Core_2-0">.NET Core 2.0</h2><hr>
<p>在 .NET Core 1.x 時代，還常常需要自己下 <code>dotnet restore</code>，但從 .NET Core 2.0 開始，當你使用以下 command 時，都會自動執行 <code>dotnet restore</code>。</p>
<ul>
<li><code>dotnet new</code></li>
<li><code>dotnet build</code></li>
<li><code>dotnet run</code></li>
<li><code>dotnet test</code></li>
<li><code>dotnet publish</code></li>
<li><code>dotnet pack</code></li>
</ul>
<p>所以在實務上已經幾乎不用自己下 <code>dotnet restore</code> 了，只要有觀念即可，為了相容，目前 .NET Core SDK 還是有留下 <code>dotnet restore</code> 指令。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>dotnet restore</code> 是根據 <code>csproj</code> 建立 package 與實際位置的 mapping 檔案</li>
<li>.NET Core 2 之後幾乎不用再自己下 <code>dotnet restore</code> 指令，只要有觀念即可</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[NuGet 特有的管理機制]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[.NET Core SDK 基本指令練習]]></title>
    <link href="http://oomusou.io/netcore/basic-sdk/"/>
    <id>http://oomusou.io/netcore/basic-sdk/</id>
    <published>2018-03-16T13:23:43.000Z</published>
    <updated>2018-03-16T08:33:31.541Z</updated>
    <content type="html"><![CDATA[<p>Console app 是最基本的 .NET Core 專案類型，常用在測試 class library、提供 class library 範例程式，或者開發跨平台的 CLI 工具，我們可以使用 <code>ng new console</code> 建立 console app 型態專案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="建立_Console_App_專案">建立 Console App 專案</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new</code> 建立專案。</p>
<ul>
<li><strong>console</strong> : 建立 console 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，建立在 <code>MyConsole</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/basic-sdk/sdk009.png" alt="sdk009"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 將 console 類型專案建立在 <code>MyConsole</code> 目錄下</li>
<li>.NET Core SDK 開始建立專案所需的檔案</li>
<li>自動 restore dependency</li>
</ol>
<h2 id="使用_VS_Code_開啟專案">使用 VS Code 開啟專案</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接開啟目錄名稱。</p>
<p><img src="/images/netcore/basic-sdk/sdk010.png" alt="sdk010"></p>
<ol>
<li>第一次使用 VS Code 開啟 .NET Core 專案，會要求建立 <code>.vscode</code> 設定檔目錄，按 <code>Yes</code> 繼續</li>
</ol>
<p><img src="/images/netcore/basic-sdk/sdk011.png" alt="sdk011"></p>
<ol>
<li><code>.vscode</code> 被 VS Code 自動建立</li>
</ol>
<h2 id="編輯_Program-cs">編輯 Program.cs</h2><hr>
<p><img src="/images/netcore/basic-sdk/sdk012.png" alt="sdk012"></p>
<ol>
<li>開啟 <code>Program.cs</code></li>
<li>將 <code>World</code> 改成 <code>Sam</code> 存檔</li>
</ol>
<h2 id="觀察_MyConsole-csproj">觀察 MyConsole.csproj</h2><hr>
<p><img src="/images/netcore/basic-sdk/sdk013.png" alt="sdk013"></p>
<ol>
<li>開啟 <code>MyConsole.csproj</code></li>
</ol>
<blockquote>
<p><code>csproj</code> 負責紀錄 project 的 project 與 package 的 reference ，以及其他與 project 相關資訊，使用 Visual Studio 配合 .NET Framework 時，我們不會去維護 <code>csproj</code> 檔案，而是靠 Visual Studio 幫我們維護，但若使用 VS Code + .NET Core CLI 的組合時，將來會有很多機會要自己維護 <code>csproj</code></p>
</blockquote>
<h2 id="還原_Dependency">還原 Dependency</h2><hr>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ dotnet <span class="built_in">restore</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet restore</code> 根據 <code>csproj</code> 建立 package 與實際位置的 mapping 檔案。</p>
<p><img src="/images/netcore/basic-sdk/sdk014.png" alt="sdk014"></p>
<ol>
<li>按熱鍵 Ctrl + ` 開啟內建的 terminal</li>
<li>輸入 <code>dotnet restore</code> 還原 dependency</li>
</ol>
<h2 id="編譯_Console_App">編譯 Console App</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ dotnet <span class="keyword">build </span>-c Release</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯專案。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet build</code> 是以 <code>Debug</code> 模式編譯，若要以 <code>Release</code> 編譯，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/basic-sdk/sdk000.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet build -c Release</code> 以 <code>Release</code> 模式編譯</li>
<li>自動執行 <code>dotnet restore</code></li>
<li>最後 build 出 <code>MyConsole.dll</code></li>
</ol>
<blockquote>
<p>注意是 build 到 <code>Release</code> 目錄</p>
</blockquote>
<h2 id="執行_Console_App">執行 Console App</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ dotnet <span class="command">run</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet run</code> 執行專案。</p>
<blockquote>
<p><code>dotnet run</code> 明顯感覺比較慢，因為 C# 不是 script，<code>dotnet run</code> 事實上做了幾件事情 :</p>
<ol>
<li><code>dotnet restore</code></li>
<li><code>dotnet build</code></li>
<li>最後才是執行程式</li>
</ol>
<p>所以才會感覺比較慢</p>
</blockquote>
<p><img src="/images/netcore/basic-sdk/sdk001.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet run</code> 顯示執行結果</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">~/MyConsole $ dotnet /</span>Users<span class="regexp">/oomusou/</span>Code<span class="regexp">/CSharp/</span>MyConsole<span class="regexp">/bin/</span>Release/netcoreapp2.</span><br><span class="line"><span class="number">0</span>/MyConsole.dll</span><br></pre></td></tr></table></figure>
<p>直接使用 <code>dontet</code> 執行 dll，由於使用 <code>Release</code> 模式編譯，速度非常快。</p>
<p><img src="/images/netcore/basic-sdk/sdk002.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet</code> 直接執行編譯過 <code>Release</code> 模式的 <code>MyConsole.dll</code></li>
<li>馬上出現 <code>Hello Sam!</code> ，不用等待</li>
</ol>
<blockquote>
<p>實務上不建議直接使用 <code>dotnet run</code>，因為速度很慢，要用 <code>dotnet</code> 執行編譯過且最佳化的 dll</p>
</blockquote>
<h2 id="清除_Assembly">清除 Assembly</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyConsole</span> $ <span class="keyword">dotnet</span> clean -c <span class="type">Release</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet clean</code> 清除所編譯的 dll。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet clean</code> 是清除 <code>Debug</code> 模式的 dll，若要清除 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/basic-sdk/sdk003.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet clean -c Release</code> 清除以 <code>Release</code> 模式 build 的 <code>MyConsole.dll</code></li>
<li>查看 <code>bin/Release/netcoreapp2.0</code> 目錄，確認所有檔案已經清除</li>
</ol>
<h2 id="發佈_Console_App">發佈 Console App</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyConsole</span> $ <span class="keyword">dotnet</span> publish -c <span class="type">Release</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet publish</code> 將編譯後的 dll 與其 dependency 整理到 <code>publish</code> 目錄，將來只要將此目錄 deploy 到 server 即可。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet publish</code> 是將 <code>Debug</code> 模式的 dll 整理至 <code>publish</code> 目錄，若要整理 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/basic-sdk/sdk004.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet publish -c Release</code> 將欲 deploy 的檔案整理到 <code>bin/Release/netcoreapp2.0/publish</code> 目錄</li>
<li>在 <code>publish</code> 目錄下，我們總共發現有 4 個檔案<ul>
<li><code>MyConsole.dll</code> : 以 IL 為內容的 assembly</li>
<li><code>MyConsole.deps.json</code> : 描述執行 dll 所需要的 dependency</li>
<li><code>MyConsole.runtimeconfig.json</code> : 描述 dll 所需要的 .NET Core runtime 版本，以及其他 runtime 設定 (Ex. Garbage Collection 方式)</li>
<li><code>MyConsole.pdb</code> : 在 production 環境啟動 debug 時使用</li>
</ul>
</li>
</ol>
<h2 id="執行_Console_App-1">執行 Console App</h2><hr>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyProject $ dotnet bin/</span>Release<span class="regexp">/netcoreapp2.0/</span>publish<span class="regexp">/MyConsole.dll</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet</code> 執行 publish 後的 dll。</p>
<p><img src="/images/netcore/basic-sdk/sdk005.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet</code> 直接執行  publish 過的 <code>MyConsole.dll</code></li>
<li>馬上出現 <code>Hello Sam!</code> ，不用等待</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>藉由 <code>Hello World</code> 練習最基本的 .NET Core SDK 指令</li>
<li><code>dotnet run</code> 因為要執行 <code>dotnet restore</code> 、<code>dotnet build</code> ，所以執行速度較慢</li>
<li><code>dotnet publish</code> 會幫我們將 dependency 加以整理，方便 deployment</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[天天都會用到的 .NET Core 指令]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[.NET Core SDK 簡介]]></title>
    <link href="http://oomusou.io/netcore/sdk/"/>
    <id>http://oomusou.io/netcore/sdk/</id>
    <published>2018-03-16T12:23:43.000Z</published>
    <updated>2018-03-16T08:23:57.894Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 為了要跨平台，在 .NET Core SDK 提供了全套的 CLI，讓我們可以完全用 command 方式管理專案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="為什麼要用_Command_?">為什麼要用 Command ?</h2><hr>
<p>傳統 .NET Framework 都是在 Visual Studio 以 GUI 方式操作，GUI 對 End User 是友善的，但對 Developer 與 DevOps 而言卻不見得友善 :</p>
<ol>
<li>GUI 很難自動化，但 command 很適合寫 script 自動化，而且可以 git 版控</li>
<li>若要遠端管理 server，GUI 只能透過 Remote Desktop，但 command 只要 SSH 就可執行</li>
<li>Command 可以寫在 Dockerfile 內，但 GUI 無法</li>
<li>.NET Core 最新功能會先在 SDK 支援，Visual Studio 支援稍慢於 SDK</li>
<li>Command 適合在 macOS 與 Linux 執行</li>
</ol>
<p>這也是為什麼目前潮流是 End User 與 Designer 使用 GUI，但 Developer 與 DevOps 使用 command。</p>
<p>.NET Core 全部的動作都可以使用 command 執行。</p>
<blockquote>
<p>就類似學 Git 要從 command 開始學，只要原理懂，自然會使用 Visual Studio / Rider 的 GUI </p>
</blockquote>
<h2 id="-NET_Core_SDK_Command">.NET Core SDK Command</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>列出全部 .NET Core SDK 指令的說明。</p>
<p><img src="/images/netcore/sdk/sdk000.png" alt="sdk000"></p>
<ul>
<li><strong>dotnet help</strong> : 顯示所有 command 與 option 的文件</li>
<li><strong>dotnet new</strong> : 根據指定 template 建立 project</li>
<li><strong>dotnet restore</strong> : 根據  <code>*.csproj</code> 的資訊 restore dependency</li>
<li><strong>dotnet run</strong> : 執行 .NET Core 應用程式</li>
<li><strong>dotnet build</strong> : 編譯 .NET Core 應用程式為 assembly (dll)</li>
<li><strong>dotnet publish</strong> : 發布 .NET Core 應用程式</li>
<li><strong>dotnet test</strong> : 執行 .NET Core 單元測試</li>
<li><strong>dotnet pack</strong> : 建立 NuGet package</li>
<li><strong>dotnet migrate</strong> : 將 project.json 專案升級到 msbuild 專案</li>
<li><strong>dotnet clean</strong> : 將之前編譯的 assembly (dll) 刪除</li>
<li><strong>dotnet sln</strong> : 管理 solution 檔</li>
<li><strong>dotnet add</strong> : 新增 project reference 或 package reference</li>
<li><strong>dotnet remove</strong> : 移除 project reference 與 package reference</li>
<li><strong>dotnet list</strong> : 列出 project 所有的 reference</li>
<li><strong>dotnet nuget</strong> : 執行 NuGet command</li>
<li><strong>dotnet msbuild</strong> : 執行 MSBuild</li>
<li><strong>dotnet vstest</strong> : 對 assembly 執行單元測試</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過 .NET Core SDK，我們可以完全使用 command 的方式管理專案，完全不需要 GUI</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[完全以 command 方式管理 .NET Core]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[F# 語法檢定考]]></title>
    <link href="http://oomusou.io/fsharp/syntax-all/"/>
    <id>http://oomusou.io/fsharp/syntax-all/</id>
    <published>2018-03-16T12:23:43.000Z</published>
    <updated>2018-03-14T07:57:49.606Z</updated>
    <content type="html"><![CDATA[<p>F# 的語法雖然很精簡，但還是得稍微花時間學習，Scott Wlaschin 所寫的這份 code，幾乎包含 F# 的所有語法，若都看得懂，F# 語法部分就算過關了。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>F# 4.1</p>
<h2 id="Overview_of_F#_Syntax">Overview of F# Syntax</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is presented with permission from Scott Wlaschin, the original author.  This has been slightly modified.</span></span><br><span class="line"><span class="comment">// Single line comments use a double slash.</span></span><br><span class="line"><span class="comment">(* </span><br><span class="line">    Multi-line comments can be done this way (though double-slash is usually used).</span><br><span class="line">*)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======== "Variables" (but not really) ==========</span></span><br><span class="line"><span class="comment">// The "let" keyword defines an (immutable) value</span></span><br><span class="line"><span class="keyword">let</span> myInt = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> myFloat = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">let</span> myString = <span class="string">"hello"</span>   <span class="comment">// note that no types needed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======== Lists ============</span></span><br><span class="line"><span class="keyword">let</span> twoToFive = [ <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span> ]        <span class="comment">// Square brackets create a list with</span></span><br><span class="line">                                     <span class="comment">// semicolon delimiters.</span></span><br><span class="line"><span class="keyword">let</span> oneToFive = <span class="number">1</span> :: twoToFive   <span class="comment">// :: creates list with new 1st element</span></span><br><span class="line"><span class="comment">// The result is [1; 2; 3; 4; 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zeroToFive = [<span class="number">0</span>;<span class="number">1</span>] @ twoToFive   <span class="comment">// @ concats two lists</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IMPORTANT: commas are never used as delimiters, only semicolons!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======== Functions ========</span></span><br><span class="line"><span class="comment">// The "let" keyword also defines a named function.</span></span><br><span class="line"><span class="keyword">let</span> square x = x * x          <span class="comment">// Note that no parens are used.</span></span><br><span class="line">square <span class="number">3</span>                      <span class="comment">// Now run the function. Again, no parens.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add x y = x + y           <span class="comment">// don't use add (x,y)! It means something</span></span><br><span class="line">                              <span class="comment">// completely different.</span></span><br><span class="line">add <span class="number">2</span> <span class="number">3</span>                       <span class="comment">// Now run the function.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// to define a multiline function, just use indents. No semicolons needed.</span></span><br><span class="line"><span class="keyword">let</span> evens list =</span><br><span class="line">   <span class="keyword">let</span> isEven x = x % <span class="number">2</span> = <span class="number">0</span>     <span class="comment">// Define "isEven" as an inner ("nested") function</span></span><br><span class="line">   List.filter isEven list      <span class="comment">// List.filter is a library function</span></span><br><span class="line">                                <span class="comment">// with two parameters: a boolean function</span></span><br><span class="line">                                <span class="comment">// and a list to work on</span></span><br><span class="line">  </span><br><span class="line">evens oneToFive               <span class="comment">// Now run the function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You can use parens to clarify precedence. In this example,</span></span><br><span class="line"><span class="comment">// do "map" first, with two args, then do "sum" on the result.</span></span><br><span class="line"><span class="comment">// Without the parens, "List.map" would be passed as an arg to List.sum</span></span><br><span class="line"><span class="keyword">let</span> sumOfSquaresTo100 =</span><br><span class="line">   List.sum (List.map square [ <span class="number">1</span> .. <span class="number">100</span> ])</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can pipe the output of one operation to the next using "|&gt;"</span></span><br><span class="line"><span class="comment">// Here is the same sumOfSquares function written using pipes</span></span><br><span class="line"><span class="keyword">let</span> sumOfSquaresTo100piped =</span><br><span class="line">   [ <span class="number">1</span> .. <span class="number">100</span> ] |&gt; List.map square |&gt; List.sum  <span class="comment">// "square" was defined earlier</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can define lambdas (anonymous functions) using the "fun" keyword</span></span><br><span class="line"><span class="keyword">let</span> sumOfSquaresTo100withFun =</span><br><span class="line">   [ <span class="number">1</span> .. <span class="number">100</span> ] |&gt; List.map (<span class="keyword">fun</span> x -&gt; x * x) |&gt; List.sum</span><br><span class="line"></span><br><span class="line"><span class="comment">// In F# returns are implicit -- no "return" needed. A function always</span></span><br><span class="line"><span class="comment">// returns the value of the last expression used.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======== Pattern Matching ========</span></span><br><span class="line"><span class="comment">// Match..with.. is a supercharged case/switch statement.</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">match</span> x <span class="keyword">with</span></span><br><span class="line">| <span class="string">"a"</span> -&gt; printfn <span class="string">"x is a"</span></span><br><span class="line">| <span class="string">"b"</span> -&gt; printfn <span class="string">"x is b"</span></span><br><span class="line">| _ -&gt; printfn <span class="string">"x is something else"</span>   <span class="comment">// underscore matches anything</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Some(..) and None are roughly analogous to Nullable wrappers</span></span><br><span class="line"><span class="keyword">let</span> validValue = Some(<span class="number">99</span>)</span><br><span class="line"><span class="keyword">let</span> invalidValue = None</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this example, match..with matches the "Some" and the "None",</span></span><br><span class="line"><span class="comment">// and also unpacks the value in the "Some" at the same time.</span></span><br><span class="line"><span class="keyword">let</span> optionPatternMatch input =</span><br><span class="line">   <span class="keyword">match</span> input <span class="keyword">with</span></span><br><span class="line">    | Some i -&gt; printfn <span class="string">"input is an int=%d"</span> i</span><br><span class="line">    | None -&gt; printfn <span class="string">"input is missing"</span></span><br><span class="line"></span><br><span class="line">optionPatternMatch validValue</span><br><span class="line">optionPatternMatch invalidValue</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========= Complex Data Types =========</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tuple types are pairs, triples, etc. Tuples use commas.</span></span><br><span class="line"><span class="keyword">let</span> twoTuple = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> threeTuple = (<span class="string">"a"</span>, <span class="number">2</span>, <span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Record types have named fields. Semicolons are separators.</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Person</span> </span>= &#123; First: string; Last: string &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = &#123; First=<span class="string">"John"</span>; Last=<span class="string">"Doe"</span> &#125;</span><br><span class="line"><span class="comment">// You can also use new lines to elide the semiclon.</span></span><br><span class="line"><span class="keyword">let</span> person2 =</span><br><span class="line">    &#123; First=<span class="string">"Jane"</span></span><br><span class="line">      Last=<span class="string">"Doe"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Union types have choices. Vertical bars are separators.</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Temp</span> </span>= </span><br><span class="line">    | DegreesC <span class="keyword">of</span> float</span><br><span class="line">    | DegreesF <span class="keyword">of</span> float</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> temp = DegreesF <span class="number">98.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Types can be combined recursively in complex ways.</span></span><br><span class="line"><span class="comment">// E.g. here is a union type that contains a list of the same type:</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Employee</span> </span>= </span><br><span class="line">  | Worker <span class="keyword">of</span> Person</span><br><span class="line">  | Manager <span class="keyword">of</span> Employee list</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jdoe = &#123; First=<span class="string">"John"</span>; Last=<span class="string">"Doe"</span> &#125;</span><br><span class="line"><span class="keyword">let</span> worker = Worker jdoe</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========= Printing =========</span></span><br><span class="line"><span class="comment">// The printf/printfn functions are similar to the</span></span><br><span class="line"><span class="comment">// Console.Write/WriteLine functions in C#.</span></span><br><span class="line">printfn <span class="string">"Printing an int %i, a float %f, a bool %b"</span> <span class="number">1</span> <span class="number">2.0</span> <span class="keyword">true</span></span><br><span class="line">printfn <span class="string">"A string %s, and something generic %A"</span> <span class="string">"hello"</span> [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// all complex types have pretty printing built in</span></span><br><span class="line">printfn <span class="string">"twoTuple=%A,\nPerson=%A,\nTemp=%A,\nEmployee=%A"</span> </span><br><span class="line">         twoTuple person1 temp worker</span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://blogs.msdn.microsoft.com/dotnet/" target="_blank" rel="external">.NET Blog</a>, <a href="https://blogs.msdn.microsoft.com/dotnet/2017/07/24/get-started-with-f-as-a-c-developer/" target="_blank" rel="external">Get Started with F# as a C# developer</a></p>
]]></content>
    <summary type="html">
    <![CDATA[一段 code 幾乎包含 F# 所有語法]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 macOS 輕鬆使用 Visual Studio 熱鍵?]]></title>
    <link href="http://oomusou.io/vs/shortcut/"/>
    <id>http://oomusou.io/vs/shortcut/</id>
    <published>2018-03-15T12:23:43.000Z</published>
    <updated>2018-03-13T14:46:57.172Z</updated>
    <content type="html"><![CDATA[<p>只要安裝了 Parallel Desktop，就可以在 macOS 執行 Windows 10 與 Visual Studio，但一些 Visual Studio 的熱鍵會先被 macOS 攔截，且 mac 鍵盤又天生沒有 Home / End / Page Down / Page Up，再加上 Touch Bar 之後，我們會希望盡量不要用到 <code>F1 ~ F12</code>，在種種條件下， 我們該如何在 macOS 上高效率的使用 Visual Studio 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Parallel Desktop 13 for Mac Pro Edition 13.3.0 (43321)<br>Windows 10 Pro 1709 16299.251<br>Visual Studio 2017 15.5.7</p>
<h2 id="Home">Home</h2><hr>
<p>Visual Studio 熱鍵眾多，在此先針對最常用的熱鍵處理，只要學會方法，可自行舉一反三。</p>
<p><img src="/images/vs/shortcut/shortcut000.png" alt="shortcut000"></p>
<ol>
<li>選擇要設定的 VM</li>
<li>按滑鼠右鍵選 <code>Configure…</code></li>
</ol>
<p><img src="/images/vs/shortcut/shortcut001.png" alt="shortcut001"></p>
<ol>
<li>選 <code>Hardware</code></li>
<li>選 <code>Mouse &amp; Keyboard</code></li>
<li>按下 <code>Open Shortcuts Preferences…</code></li>
</ol>
<p><img src="/images/vs/shortcut/shortcut002.png" alt="shortcut002"></p>
<ol>
<li>選擇你要設定的 VM</li>
<li><strong>Profile</strong> : 選擇 Widnows，Parallel Desktop 預設已經幫我們根據 macOS 的習慣，預先設定了相對應的 Windows shortcut mapping</li>
<li>若你修改了 mapping 之後不滿意，可以隨是按下 <code>Restore Defaults</code> 回到 Parallel Desktop 預設所提供的 shortcut mapping</li>
<li>按下 <code>+</code> 新增 shortcut : 雖然已經內建一下 shortcut mapping，但對於 Visual Studio 的使用仍然不足，我們必須自行增加 mapping</li>
</ol>
<p><img src="/images/vs/shortcut/shortcut003.png" alt="shortcut003"></p>
<p>根據 macOS 的習慣，<code>⌘ + ←</code> 相當於 Windows 的 <code>Home</code>。</p>
<ol>
<li><code>From</code> ：設定 macOS 的 shortcut，</li>
<li><code>To</code> ：設定 Windows 的 shortcut。</li>
</ol>
<blockquote>
<p>因為 Mac 鍵盤沒有 <code>Home</code>，可用下拉選單選擇 <code>Home</code> ，或者輸入 <code>fn + ←</code></p>
</blockquote>
<h2 id="End">End</h2><hr>
<p><img src="/images/vs/shortcut/shortcut004.png" alt="shortcut004"></p>
<p>根據 macOS 的習慣，<code>⌘ + →</code> 相當於 Windows 的 <code>End</code>。</p>
<h2 id="Page_Up">Page Up</h2><hr>
<p><img src="/images/vs/shortcut/shortcut005.png" alt="shortcut005"></p>
<p>根據 macOS 的習慣，<code>⌘ + ↑</code> 相當於 Windows 的 <code>Page Up</code>。</p>
<h2 id="Page_Down">Page Down</h2><hr>
<p><img src="/images/vs/shortcut/shortcut006.png" alt="shortcut006"></p>
<p>根據 macOS 的習慣，<code>⌘ + ↓</code> 相當於 Windows 的 <code>Page Down</code>。</p>
<h2 id="Shift_+_Home">Shift + Home</h2><hr>
<p><img src="/images/vs/shortcut/shortcut007.png" alt="shortcut007"></p>
<p>根據 macOS 的習慣，<code>⇧ + ⌘ + ←</code> 相當於 Windows 的 <code>Shift + Home</code>。</p>
<h2 id="Shift_+_End">Shift + End</h2><hr>
<p><img src="/images/vs/shortcut/shortcut008.png" alt="shortcut008"></p>
<p>根據 macOS 的習慣，<code>⇧ + ⌘ + →</code> 相當於 Windows 的 <code>Shift + End</code>。</p>
<h2 id="Delete_Line">Delete Line</h2><hr>
<p><img src="/images/vs/shortcut/shortcut009.png" alt="shortcut009"></p>
<p>根據 JetBrains 習慣，<code>⌘ + ⌦</code> 相當於 Delete Line，這在 Visual Studio 對應的熱鍵為 <code>Ctrl + Shift + L</code>。</p>
<h2 id="Start_Without_Debugging">Start Without Debugging</h2><hr>
<p><code>Start without Debugging</code> 也是 Visual Studio 常用的熱鍵，但預設是 <code>Ctrl + F5</code>，對於 macOS 而言，一般我們不會用到 <code>F1 ~ F12</code>，而是將這些熱鍵讓給 Touch Bar，所以建議更改 Visual Studio 熱鍵。</p>
<p>將 <code>⇧ + ⌥ + R</code> 設定為 Start without Debugging。</p>
<p><img src="/images/vs/shortcut/shortcut010.png" alt="shortcut010"></p>
<p><strong><em>Tools -&gt; Options</em></strong></p>
<p><img src="/images/vs/shortcut/shortcut011.png" alt="shortcut011"></p>
<ol>
<li>選擇 <code>keyboard</code></li>
<li><code>Show commands containing</code> 輸入 <code>Debug.Start</code></li>
<li>選擇 <code>Debug.StartWithoutDebugging</code></li>
<li>新增 <code>Shift + Alt + R</code> 熱鍵</li>
</ol>
<h2 id="Start_Debugging">Start Debugging</h2><hr>
<p><code>Start Debugging</code> 也是 Visual Studio 常用的熱鍵，但預設是 <code>F5</code>，我們一樣希望 <code>F1 ~ F12</code> 讓給 Touch Bar，所以建議更改 Visual Studio 熱鍵。</p>
<p>將 <code>⇧ + ⌥ + D</code> 設定為 Start Debugging。</p>
<p><img src="/images/vs/shortcut/shortcut012.png" alt="shortcut012"></p>
<ol>
<li>選擇 <code>keyboard</code></li>
<li><code>Show commands containing</code> 輸入 <code>Debug.Start</code></li>
<li>選擇 <code>Debug.Start</code></li>
<li>新增 <code>Shift + Alt + D</code> 熱鍵</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>若是熱鍵被 macOS 攔截，可在 Parallel Desktop 設定 shortcut mapping</li>
<li>若是 Visual Studio 的預設熱鍵不滿意，可在 <code>Tools -&gt; Options</code> 重新設定熱鍵</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[重新設定 Parallel Desktop 與 Visual Studio 的 shortcut mapping]]>
    
    </summary>
    
      <category term="Parallel Desktop" scheme="http://oomusou.io/tags/Parallel-Desktop/"/>
    
      <category term="Visual Studio" scheme="http://oomusou.io/tags/Visual-Studio/"/>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 .NET Framework 使用有 FIFO 的 AWS SQS ?]]></title>
    <link href="http://oomusou.io/aws/sqs/"/>
    <id>http://oomusou.io/aws/sqs/</id>
    <published>2018-03-14T12:23:43.000Z</published>
    <updated>2018-03-14T01:36:17.766Z</updated>
    <content type="html"><![CDATA[<p>在非同步的資料處理當中，Queue 是常見的應用，本文使用 .NET Framework + AWS Toolkit for Visual Studio 控制有 FIFO 的 AWS SQS。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Windows 10 Pro 1709 16299.251<br>.NET Framework 4.6.2<br>Visual Studio 2017 15.5.7<br>AWS Toolkit for Visual Studio</p>
<h2 id="安裝_AWS_Toolkit_for_Visual_Studio">安裝 AWS Toolkit for Visual Studio</h2><hr>
<p><img src="/images/aws/sqs/sqs001.png" alt="sqs001"></p>
<ol>
<li>到 AWS 官網下載 <a href="https://aws.amazon.com/visualstudio/" target="_blank" rel="external">AWS Toolkit for Visual Studio</a></li>
<li>選擇 <code>AWS Toolkit for Visual Studio 2017</code></li>
</ol>
<p><img src="/images/aws/sqs/sqs002.png" alt="sqs002"></p>
<ol>
<li>按 <code>Download</code> 開始下載</li>
</ol>
<p><img src="/images/aws/sqs/sqs003.png" alt="sqs003"></p>
<ol>
<li><code>AWSToolkitPackage.vsix</code> 會下載到 <code>Downloads</code> 目錄下</li>
<li>執行 <code>AWSToolkitPackage</code> 安裝 AWS Toolkit for Visual Studio</li>
</ol>
<p><img src="/images/aws/sqs/sqs004.png" alt="sqs004"></p>
<p>安裝完成後，重新啟動 Visual Studio 2017 就會出現 <code>AWS Getting Started</code> 首頁。</p>
<h2 id="建立_Project">建立 Project</h2><hr>
<p><img src="/images/aws/sqs/sqs005.png" alt="sqs005"></p>
<p><strong><em>File -&gt; New Project</em></strong></p>
<p><strong><em>Visual C# -&gt; AWS Samples -&gt; App Services -&gt; AWS SQS Sample</em></strong></p>
<p><img src="/images/aws/sqs/sqs006.png" alt="sqs006"></p>
<p>第一次建立專案時，會要求你建立 <code>Account Profile</code> 與 <code>Region</code>。</p>
<ol>
<li>按 <code>+</code> 新增</li>
</ol>
<p><img src="/images/aws/sqs/sqs007.png" alt="sqs007"></p>
<ol>
<li>輸入 <code>Access Key ID</code> 與 <code>Secret Access Key</code></li>
</ol>
<p><img src="/images/aws/sqs/sqs008.png" alt="sqs008"></p>
<ol>
<li>會自動選擇美西的 server</li>
</ol>
<blockquote>
<p>AWS 並不是所有的 SQS 都支援 FIFO，如東京的 server 的 SQS 就不支援 FIFO</p>
</blockquote>
<h2 id="寫入_Message_進_Queue">寫入 Message 進 Queue</h2><hr>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Amazon.SQS;</span><br><span class="line"><span class="keyword">using</span> Amazon.SQS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SQSSendMessage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">// SQSClient from AWSSDK</span></span><br><span class="line">            <span class="keyword">var</span> amazonSqsClient = <span class="keyword">new</span> AmazonSQSClient();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// FIFO quene URL</span></span><br><span class="line">            <span class="keyword">string</span> myQueueUrl = <span class="string">"https://sqs.us-west-2.amazonaws.com/781160412246/ecfe.fifo"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Send 3 messages to FIFO queue</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> message = <span class="string">"message"</span> + i;</span><br><span class="line">                    <span class="keyword">var</span> sendMessageRequest = <span class="keyword">new</span> SendMessageRequest</span><br><span class="line">                    &#123;</span><br><span class="line">                        QueueUrl = myQueueUrl,</span><br><span class="line">                        MessageBody = message,</span><br><span class="line">                        MessageGroupId = <span class="string">"Senao"</span></span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    amazonSqsClient.SendMessage(sendMessageRequest);</span><br><span class="line">                    Console.WriteLine(<span class="string">"Send message &#123;0&#125;"</span>, message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (AmazonSQSException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Caught Exception: "</span> + ex.Message);</span><br><span class="line">                Console.WriteLine(<span class="string">"Response Status Code: "</span> + ex.StatusCode);</span><br><span class="line">                Console.WriteLine(<span class="string">"Error Code: "</span> + ex.ErrorCode);</span><br><span class="line">                Console.WriteLine(<span class="string">"Error Type: "</span> + ex.ErrorType);</span><br><span class="line">                Console.WriteLine(<span class="string">"Request ID: "</span> + ex.RequestId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"Press Enter to continue..."</span>);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SQSClient from AWSSDK</span></span><br><span class="line"><span class="keyword">var</span> amazonSqsClient = <span class="keyword">new</span> AmazonSQSClient();</span><br></pre></td></tr></table></figure>
<p>要使用 SQS，首先要建立 <code>AmazonSQSClient</code> 物件，所有的操作都從 <code>AmazonSQSClient</code> 開始。</p>
<p>14 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FIFO quene URL</span></span><br><span class="line"><span class="keyword">string</span> myQueueUrl = <span class="string">"https://sqs.us-west-2.amazonaws.com/781160412246/ecfe.fifo"</span>;</span><br></pre></td></tr></table></figure>
<p>無論是 <code>寫入 message</code>、<code>讀出 message</code> 或者 <code>刪除 message</code>，都必須靠 <code>QueueUrl</code> 辨識你所要控制的 queue。</p>
<p>23 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendMessageRequest = <span class="keyword">new</span> SendMessageRequest</span><br><span class="line">&#123;</span><br><span class="line">    QueueUrl = myQueueUrl,</span><br><span class="line">    MessageBody = message,</span><br><span class="line">    MessageGroupId = <span class="string">"oomusou"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">amazonSqsClient.SendMessage(sendMessageRequest);</span><br><span class="line">Console.WriteLine(<span class="string">"Send message &#123;0&#125;"</span>, message);</span><br></pre></td></tr></table></figure>
<p>建立 <code>SendMessageRequest</code> DTO，其中 <code>QueueUrl</code> 為 queue 的 URL；而 <code>MessageBody</code> 為要傳入 queue 的內容。</p>
<blockquote>
<p>FIFO queue 與 Standard queue 最大的差別在於 <code>MessageGroupId</code>，根據 AWS 文件，只有相同的 <code>MessageGroupId</code> 才能使用 FIFO queue，並保證 message 會 <code>先進先出</code>，若沒指定 <code>MessageGroupId</code> 則視為 Standard Queue，並不保證 message 會 <code>先進先出</code>。</p>
</blockquote>
<p>再將 <code>SendMessageRequest</code> DTO 傳入 <code>AmazonSQSClient.SendMessage()</code>，正式將資料寫入 queue。</p>
<h2 id="從_Queue_讀出_Message">從 Queue 讀出 Message</h2><hr>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Amazon;</span><br><span class="line"><span class="keyword">using</span> Amazon.SQS;</span><br><span class="line"><span class="keyword">using</span> Amazon.SQS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SQSReceiveMessage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">// SQSClient from AWSSDK</span></span><br><span class="line">            <span class="keyword">var</span> amazonSqsClient = <span class="keyword">new</span> AmazonSQSClient();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// FIFO quene URL</span></span><br><span class="line">            <span class="keyword">string</span> myQueueUrl = <span class="string">"https://sqs.us-west-2.amazonaws.com/781160412246/ecfe.fifo"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Send 3 messages to FIFO queue</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Read message from FIFO queue</span></span><br><span class="line">                    <span class="keyword">var</span> receiveMessageRequest = <span class="keyword">new</span> ReceiveMessageRequest</span><br><span class="line">                    &#123;</span><br><span class="line">                        QueueUrl = myQueueUrl</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> receiveMessageResponse = amazonSqsClient.ReceiveMessage(receiveMessageRequest);</span><br><span class="line">                    <span class="keyword">if</span> (receiveMessageResponse.Messages != <span class="keyword">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> message = receiveMessageResponse.Messages[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(message.Body))</span><br><span class="line">                        &#123;</span><br><span class="line">                            Console.WriteLine(<span class="string">"Read message: &#123;0&#125;"</span>, message.Body);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Delete message from FIFO queue</span></span><br><span class="line">                        <span class="keyword">var</span> messageRecieptHandle = message.ReceiptHandle;</span><br><span class="line">                        <span class="keyword">var</span> deleteMessageRequest = <span class="keyword">new</span> DeleteMessageRequest</span><br><span class="line">                        &#123;</span><br><span class="line">                            QueueUrl = myQueueUrl,</span><br><span class="line">                            ReceiptHandle = messageRecieptHandle</span><br><span class="line">                        &#125;;</span><br><span class="line">                        amazonSqsClient.DeleteMessage(deleteMessageRequest);</span><br><span class="line">                        Console.WriteLine(<span class="string">"Delete message: &#123;0&#125;"</span>, message.Body);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (AmazonSQSException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Caught Exception: "</span> + ex.Message);</span><br><span class="line">                Console.WriteLine(<span class="string">"Response Status Code: "</span> + ex.StatusCode);</span><br><span class="line">                Console.WriteLine(<span class="string">"Error Code: "</span> + ex.ErrorCode);</span><br><span class="line">                Console.WriteLine(<span class="string">"Error Type: "</span> + ex.ErrorType);</span><br><span class="line">                Console.WriteLine(<span class="string">"Request ID: "</span> + ex.RequestId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"Press Enter to continue..."</span>);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>39 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> receiveMessageRequest = <span class="keyword">new</span> ReceiveMessageRequest</span><br><span class="line">&#123;</span><br><span class="line">    QueueUrl = myQueueUrl</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> receiveMessageResponse = amazonSqsClient.ReceiveMessage(receiveMessageRequest);</span><br></pre></td></tr></table></figure>
<p>建立 <code>ReceiveMessageRequest</code> DTO，其中 <code>QueueUrl</code> 為 queue 的 URL。</p>
<p>再將 <code>ReceiveMessageRequest</code> DTO 傳入 <code>AmazonSQSClient.ReceiveMessage()</code>，正式從 queue 讀出資料。</p>
<p>45 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (receiveMessageResponse.Messages != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> message = receiveMessageResponse.Messages[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(message.Body))</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Read message: &#123;0&#125;"</span>, message.Body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 <code>receiveMessageResponse.Messages</code> 為 <code>List&lt;Message&gt;</code>，預設每次 <code>ReceiveMessage()</code> 只會從 queue 讀出一筆 message，且資料在 <code>message.Body</code> 內。</p>
<p>55 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete message from FIFO queue</span></span><br><span class="line"><span class="keyword">var</span> messageRecieptHandle = message.ReceiptHandle;</span><br><span class="line"><span class="keyword">var</span> deleteMessageRequest = <span class="keyword">new</span> DeleteMessageRequest</span><br><span class="line">&#123;</span><br><span class="line">    QueueUrl = myQueueUrl,</span><br><span class="line">    ReceiptHandle = messageRecieptHandle</span><br><span class="line">&#125;;</span><br><span class="line">                        amazonSqsClient.DeleteMessage(deleteMessageRequest);</span><br></pre></td></tr></table></figure>
<p>建立 <code>DeleteMessageRequest</code> DTO，其中 <code>QueueUrl</code> 為 queue 的 URL；此外 <code>ReceipeHandle</code> 為要刪除 message 的 handle。</p>
<p><code>ReceipeHandle</code> 由 <code>message.ReceiptHandle</code> 獲得。</p>
<p>再將 <code>DeleteMessageRequest</code> DTO 傳入 <code>AmazonSQSClient.DeleteMessage()</code>，正式從 queue 刪除資料。</p>
<blockquote>
<p>根據 AWS SQS 特性，若不從 SQS 刪除 message， 若繼續下  <code>ReceiveMessage()</code> ，仍然會讀取到相同的 message，唯有刪除了 <code>message</code> 之後，才會依 FIFO 順序讀到下一筆 message</p>
</blockquote>
<p><img src="/images/aws/sqs/sqs010.png" alt="sqs010"></p>
<p>依序寫入 <code>message0</code>、<code>message1</code> 與 <code>message2</code> 三筆資料進有 FIFO 的 AWS SQS。</p>
<p><img src="/images/aws/sqs/sqs011.png" alt="sqs011"></p>
<p>依序讀出 <code>message0</code>、<code>message1</code> 與 <code>message2</code> 。</p>
<h2 id="Q&amp;A">Q&amp;A</h2><hr>
<blockquote>
<p>Q : 如何查看 AWS SQS API ?</p>
</blockquote>
<p><img src="/images/aws/sqs/sqs009.png" alt="sqs009"></p>
<p>到 <a href="https://docs.aws.amazon.com/sdkfornet/v3/apidocs/Index.html" target="_blank" rel="external">AWS SDK for .NET API Reference</a> 官網，查詢 <code>Amazon.SQS</code> 的 <code>AmazonSQSClient</code>，所有 SQS 的 API 都是由這裡展開出來。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>FIFO queue 與 Standard queue 最大的差異在於 <code>SendMessage()</code> 的 DTO 必須包含 <code>MessageGroupId</code>，才能保證相同 <code>MessageGroupId</code> 有 FIFO 的 <code>先進先出</code> 特性</li>
<li><code>ReceiveMessage()</code> 之後還必須 <code>DeleteMessage()</code>，才能確保 <code>SendMessage()</code> 會收到下一筆 message，否則仍然會繼續收到目前的 message</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/SQSFIFOSample" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>, <a href="https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/welcome.html" target="_blank" rel="external">AWS SDK for .NET Developer Guide</a><br><a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>, <a href="https://aws.amazon.com/visualstudio/" target="_blank" rel="external">AWS Toolkit for Visual Studio</a><br><a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>, <a href="https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/sqs-apis-intro.html" target="_blank" rel="external">Messaging Using Amazon SQS</a><br><a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>, <a href="https://docs.aws.amazon.com/sdkfornet/v3/apidocs/Index.html" target="_blank" rel="external">AWS SDK for .NET API Reference</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 .NET Framework 與 AWS Toolkit for Visual Studio]]>
    
    </summary>
    
      <category term=".NET Framework" scheme="http://oomusou.io/tags/NET-Framework/"/>
    
      <category term="AWS" scheme="http://oomusou.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Function Composition (TypeScript vs. F#)]]></title>
    <link href="http://oomusou.io/fsharp/function-composition/"/>
    <id>http://oomusou.io/fsharp/function-composition/</id>
    <published>2018-03-13T12:23:43.000Z</published>
    <updated>2018-03-11T03:16:20.860Z</updated>
    <content type="html"><![CDATA[<p>數學的 <code>fog(x) = f(g(x))</code> 就是 FP 的 Function Composition，本文分別以 TypeScript 與 F# 實現。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.5.3<br>F# 4.1</p>
<h2 id="User_Story">User Story</h2><hr>
<p>定義 <code>f(x) = x + 1</code> 與 <code>g(x) = x * 2</code>，希望實作出 <code>fog(x) = f(g(x))</code></p>
<h2 id="Task">Task</h2><hr>
<p>分別以 TypeScript 與 F# 實作。</p>
<h2 id="TypeScript">TypeScript</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = x =&gt; x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> g = x =&gt; x * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> fog = x =&gt; f(g(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v = fog(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fog = x =&gt; f(g(x));</span><br></pre></td></tr></table></figure>
<p>使用 arrow function 實作，重點是仍然回傳的 <code>f(g(x))</code> 仍是 function。</p>
<h2 id="FSharp">FSharp</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f x = x + <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> g x = x * <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> fog = g &gt;&gt; f</span><br><span class="line">   </span><br><span class="line"><span class="keyword">let</span> v = fog <span class="number">10</span></span><br><span class="line">   </span><br><span class="line">printfn <span class="string">"%i"</span> v</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fog = g &gt;&gt; f</span><br></pre></td></tr></table></figure>
<p>以 <code>g &gt;&gt; f</code> 表示，很清楚以 <code>從左至右</code> 表示。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>至於 TypeScript 與 F# 何者語法較優，結果已經很明顯了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[同時以 TypeScript 與 F# 實作 Compose Function]]>
    
    </summary>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 F# 之 Function]]></title>
    <link href="http://oomusou.io/fsharp/function/"/>
    <id>http://oomusou.io/fsharp/function/</id>
    <published>2018-03-12T12:23:43.000Z</published>
    <updated>2018-03-10T11:11:15.692Z</updated>
    <content type="html"><![CDATA[<p>F# 身為 function first-first language，最迷人的當然就是 function 部分。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>.NET Core SDK 2.4.1<br>F# 4.1</p>
<h2 id="Syntax">Syntax</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f x = x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>由於 function 也被視為 value，因此同樣使用 <code>let</code> 定義 function</li>
<li><code>f</code> 為 function name，<code>x</code> 為 parameter，之間以 space 隔開</li>
<li><code>=</code> 右側為 function 定義</li>
<li>由於 pure function 要求要有回傳值，所以 <code>x + 1</code> 將被回傳，不用加上 <code>return</code></li>
<li>不必使用 <code>;</code> 結束</li>
</ul>
<h2 id="Scope">Scope</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list1 = [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> list1 = [] <span class="comment">// module : error, function : []</span></span><br><span class="line"><span class="keyword">let</span> function1 =</span><br><span class="line">   <span class="keyword">let</span> list1 = [<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>]</span><br><span class="line">   <span class="keyword">let</span> list1 = []</span><br><span class="line">   list1 <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<ul>
<li>當 value 名稱相同時，若在 module 會 compile error，若在 function 內則是 <code>後蓋前</code>，因此 <code>list1</code> 皆為 <code>[]</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list1 = [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> sumPlus x =</span><br><span class="line"><span class="comment">// OK: inner list1 hides the outer list1.</span></span><br><span class="line">   <span class="keyword">let</span> list1 = [<span class="number">1</span>; <span class="number">5</span>; <span class="number">10</span>]</span><br><span class="line">   x + List.sum list1</span><br></pre></td></tr></table></figure>
<ul>
<li>若 function 內的 value 與 function 外的 value 名稱相同，則 function 內的 value 會蓋掉 (shadow) function 外的變數，因此 <code>sumPlus</code> 的 <code>list</code> 為 <code>[1; 5; 10]</code></li>
</ul>
<blockquote>
<p>雖然 value 相同，F# 會啟動 shadow 機制，但實務上還是不建議重複使用 value 名稱，將造成維護上的困難</p>
</blockquote>
<h2 id="Parameter">Parameter</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f (x : int) = x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>亦可在 parameter 加上型別，必須使用 <code>()</code>，在 parameter 名稱之後加上 <code>:</code> 與 <code>型別</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f x = x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>儘管 paramter 不加上型別，因為 F# 的 Type Inference 機制，compiler 會自動由 function body 推導出 parameter 型別</li>
</ul>
<p><img src="/images/fsharp/function/function000.png" alt="function000"></p>
<p>只要將滑鼠移動到 parameter，就可看到其型別為 <code>int</code>。</p>
<blockquote>
<p>F# 的 parameter 雖然不用寫型別，但不代表 F# 沒有型別，而是因為其強悍的 Type Inference 機制，讓我們可以少打點字，閱讀上真的想知道型別，就靠 IDE 顯示型別</p>
<p>實務上建議 parameter 不用寫型別，使用 Type Inference 即可</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f x = (x, x)</span><br></pre></td></tr></table></figure>
<p>若 Type Inference 無法推導出型別，就視為 <code>泛型</code>。</p>
<p><img src="/images/fsharp/function/function001.png" alt="function001"></p>
<p>由於 Type Inference 無法由 function body 推導出型別，所以啟動 Automatic Generalization 機制，其中 <code>&#39;a</code> 為自動推導出的 <code>泛型</code>。</p>
<blockquote>
<p>在 F# 要使用 <code>泛型</code>，只要不寫型別，且無法推導出具體型別，就被視為 <code>泛型</code>，syntax 比 C# 精簡很多</p>
</blockquote>
<h2 id="Function_Body">Function Body</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cylinderVolume radius length =</span><br><span class="line">    <span class="comment">// Define a local value pi.</span></span><br><span class="line">    <span class="keyword">let</span> pi = <span class="number">3.14159</span></span><br><span class="line">    length * pi * radius * radius</span><br></pre></td></tr></table></figure>
<ul>
<li><p>若 function 內的程式碼不只一行時，則 <code>=</code> 換行之後並加以縮排，不必使用 <code>{}</code></p>
</li>
<li><p>Function 內的 value 的 scope 僅限於 function 內，因此 <code>pi</code> 只有 <code>cylinderVolume</code>  可讀取</p>
</li>
</ul>
<blockquote>
<p>C# 程式碼中，<code>{}</code> 佔了不少行數，F# 利用縮排取代 <code>{}</code>，程式碼顯的更清爽，且輸入 <code>tab</code> 速度也比 <code>{}</code> 還快</p>
</blockquote>
<h2 id="Return_Value">Return Value</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cylinderVolume radius length =</span><br><span class="line">    <span class="comment">// Define a local value pi.</span></span><br><span class="line">    <span class="keyword">let</span> pi = <span class="number">3.14159</span></span><br><span class="line">    length * pi * radius * radius</span><br></pre></td></tr></table></figure>
<ul>
<li>Function 最後一行的 expression 或 value 都視為 return 值，因此回傳值為 <code>length * pi * radius * radius</code> expression</li>
<li>Function 最後一行的 expression 或 value 的型別會被推導為 return type，因為 <code>pi</code> 為 <code>float</code>，所以 return type 被推導為 <code>float</code></li>
</ul>
<p><img src="/images/fsharp/function/function002.png" alt="function002"></p>
<p>只要將滑鼠移動到 function，就可看到其 return type 為 <code>float</code>。</p>
<blockquote>
<p>C# 程式碼中會到處充滿 <code>return</code>，F# 很聰明的用最後一行的 value 或 expression 當回傳值，讓程式碼更精簡</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cylinderVolume radius length : float =</span><br><span class="line">   <span class="comment">// Define a local value pi.</span></span><br><span class="line">   <span class="keyword">let</span> pi = <span class="number">3.14159</span></span><br><span class="line">   length * pi * radius * radius</span><br></pre></td></tr></table></figure>
<ul>
<li>亦可為 return type 加上型別，只要在最後加上 <code>:</code> 與 <code>型別</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cylinderVolume (radius : float) (length : float) : float =</span><br><span class="line">   <span class="comment">// Define a local value pi.</span></span><br><span class="line">   <span class="keyword">let</span> pi = <span class="number">3.14159</span></span><br><span class="line">   length * pi * radius * radius</span><br></pre></td></tr></table></figure>
<ul>
<li>亦可為 parameter 與 return type 全部加上型別</li>
</ul>
<blockquote>
<p>實務上建議不用替 parameter 與 return type 加上型別，使用 Type Inference 即可</p>
</blockquote>
<h2 id="Calling_a_Function">Calling a Function</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vol = cylinderVolume <span class="number">2.0</span> <span class="number">3.0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Argument 不需使用 <code>()</code>，只要與 function name 用 space 隔開即可</li>
<li>Argument 之間不需要 <code>,</code>，只需用 space 隔開即可</li>
</ul>
<blockquote>
<p>傳入 parameter 不需 <code>()</code> 與 <code>,</code>，減少打字時間</p>
</blockquote>
<h2 id="Currying">Currying</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> smallPipeRadius = <span class="number">2.0</span></span><br><span class="line"><span class="keyword">let</span> bigPipeRadius = <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> smallPipeVolume = cylinderVolume smallPipeRadius</span><br><span class="line"><span class="keyword">let</span> bigPipeVolume = cylinderVolume bigPipeRadius</span><br></pre></td></tr></table></figure>
<ul>
<li>若對 function 只傳入部分 parameter，將回傳一個新的 function，可將剩下的 parameter 繼續傳給新的 function，因此可先將 <code>radius</code> 傳入 <code>cylinderVolume</code>，產生<code>smallPipeVolume</code> 與 <code>bigPipeVolume</code> 兩個新的 function</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> length1 = <span class="number">30.0</span></span><br><span class="line"><span class="keyword">let</span> length2 = <span class="number">40.0</span></span><br><span class="line"><span class="keyword">let</span> smallPipeVol1 = smallPipeVolume length1</span><br><span class="line"><span class="keyword">let</span> smallPipeVol2 = smallPipeVolume length2</span><br><span class="line"><span class="keyword">let</span> bigPipeVol1 = bigPipeVolume length1</span><br><span class="line"><span class="keyword">let</span> bigPipeVol2 = bigPipeVolume length2</span><br></pre></td></tr></table></figure>
<ul>
<li>再傳入 <code>cylinerVolume</code> 剩餘的參數 <code>length</code> 給 <code>smallPipeVolume</code> 與  <code>bigPipeVolume</code>，即可得到與  <code>cylinderVolume</code> 相同的結果</li>
</ul>
<blockquote>
<p>Q : 為什麼要使用 Currying ?</p>
</blockquote>
<p>傳統 function 必須在所有 argument 都準備好後，才可以呼叫 function，且 function 是立即執行。</p>
<p>若使用 currying，可分階段將 argument 傳入 function，並回傳新的 function，直到所有 argument 都具備後，function 才會真正執行。</p>
<blockquote>
<p>Q : 實務上何時會使用 Currying ?</p>
</blockquote>
<ol>
<li>Argument 無法一次提供，需要逐次提供時</li>
<li>Function 的某些重要 argument 先由底層 library 提供，並傳回新的 function 給 client，client 只要提供剩下的參數即可</li>
<li>實現 Decorator Pattern</li>
</ol>
<h2 id="Recursive_Function">Recursive Function</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> fib n = <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> fib (n - <span class="number">1</span>) + fib (n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>若在 function body 需要呼叫 function 本身，在 function name 前面加上 <code>rec</code>，表示此為 recursive function</li>
</ul>
<blockquote>
<p>有些演算法的數學，就是使用 recursive 表示，若要改用 loop 改寫反而有難度，若直接用 recursive 表示，不僅能忠實呈現演算法，也比較容易 implement</p>
</blockquote>
<h2 id="Function_Value">Function Value</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apply1 (transform : int -&gt; int ) y = transform y</span><br></pre></td></tr></table></figure>
<ul>
<li>FP 的核心概念就是將 function 當成 value 看，稱為 Function Value。</li>
<li>除了與 value 一樣使用 <code>let</code> 定義 function 外，也跟 value 一樣，可以將 function 當成 function 的 parameter，因此 <code>apply</code> 為 function， <code>transform</code> 為 <code>apply1</code> 的 parameter，但 <code>transform</code> 為 function，其 type 為 <code>int -&gt; int</code>，此為 <code>transfom</code> 的 input 為 <code>int</code>，output 為 <code>int</code></li>
<li>F# 以 <code>-&gt;</code> 定義 function 的 signature type</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> increment x = x + <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> result1 = apply1 increment <span class="number">100</span></span><br></pre></td></tr></table></figure>
<ul>
<li>因此可定義 <code>increment</code> function，再將 <code>increment</code> 傳入 <code>apply</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apply2 (f: int -&gt; int -&gt; int) x y = f x y</span><br><span class="line"><span class="keyword">let</span> mul x y = x * y</span><br><span class="line"><span class="keyword">let</span> result2 = apply2 mul <span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<ul>
<li>當 function 有多個 parameter 時，其型別表示為多個 <code>-&gt;</code> 串起來，如 <code>let mul x y = x * y</code>，則 <code>mul</code> 的型別為  <code>int -&gt; int -&gt; int</code></li>
</ul>
<blockquote>
<p>Q : 為什麼多 paramter 要以 <code>-&gt; … -&gt;</code> 表示</p>
</blockquote>
<p>別忘了 F# 的 Currying，如 <code>mul</code> 相當於以下寫法</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mul2 = mul <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> mul2x3 = mul2 <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>所以多個 parameter 就相當於 1 個 parameter 的 function 連續呼叫多次，因此相當於 <code>-&gt;</code> 串起來多次。</p>
<h2 id="Lambda_Expression">Lambda Expression</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result3 = apply1 (<span class="keyword">fun</span> x -&gt; x + <span class="number">1</span>) <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> result4 = apply2 (<span class="keyword">fun</span> x y -&gt; x * y ) <span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Function 的 parameter 可以傳入 function，除了使用 <code>let</code> 先定義好 function 外，也可以直接在 arguemtn 以 unnamed function 或 anonymous function 表示，這就是 Lambda Expression</li>
<li>Lambda Expression 以 <code>fun</code> 開頭，使用 <code>-&gt;</code> 取代 <code>=</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> increment = <span class="keyword">fun</span> x -&gt; x + <span class="number">1</span> <span class="comment">// let increment x = x + 1 is better</span></span><br><span class="line"><span class="keyword">let</span> result1 = apply1 increment <span class="number">100</span></span><br></pre></td></tr></table></figure>
<ul>
<li>就語法而言，的確可以 <code>let</code> 配合 <code>fun</code> ，但實務不建議這種寫法，因為 <code>increment</code> 的 parameter 必須由 <code>fun</code> 才能看出，較不直覺</li>
<li>建議 <code>let</code> 與 <code>fun</code> 不要混用，將 <code>fun</code> 用在直接傳入 function 的 argument 即可</li>
</ul>
<h2 id="Function_Composition">Function Composition</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> function1 x = x + <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> function2 x = x * <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> h = function1 &gt;&gt; function2</span><br><span class="line"><span class="keyword">let</span> result5 = h <span class="number">100</span></span><br></pre></td></tr></table></figure>
<ul>
<li>若有兩個 function，需求是先執行 <code>function1</code> ，並將 <code>function1</code> 的結果傳入 <code>function2</code>，可使用 <code>&gt;&gt;</code> 將兩個 function 組合成新的 function</li>
</ul>
<blockquote>
<p>在數學，我們常常有 fog(x) = f(g(x))，若以 F#，可使用 <code>let fog = g &gt;&gt; f</code> 表示，重點還是 <code>從左到右</code>，可讀性更數學更高</p>
</blockquote>
<h2 id="Pipelining">Pipelining</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">100</span> |&gt; function1 |&gt; function2</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>100</code> 傳入 <code>function1</code>，並將結果傳入 <code>function2</code></li>
</ul>
<blockquote>
<p>在 imperative language，我們會寫成 <code>function2(function1(100))</code>，只要層數夠多，程式碼可讀性就不高，而且還必須 <code>從右到左</code>，但使用 pipelining 之後，無論幾層都很容易閱讀，並且還是 <code>從左到右</code>。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文介紹了 F# 所有的 function 功能，一些看似直覺的如 Currying、Function Composition 與 Pipelineing ….，在 F# 寫法都很直覺，但在大部分非 FP 語言實現都有難度，這就是 F# 可愛的地方</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/" target="_blank" rel="external">F#</a>, <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/functions/" target="_blank" rel="external">Functions</a></p>
]]></content>
    <summary type="html">
    <![CDATA[強悍的 FP 支援令人著迷]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Ubuntu 安裝 VS Code ?]]></title>
    <link href="http://oomusou.io/vscode/ubuntu/"/>
    <id>http://oomusou.io/vscode/ubuntu/</id>
    <published>2018-03-11T12:23:43.000Z</published>
    <updated>2018-03-08T10:35:17.029Z</updated>
    <content type="html"><![CDATA[<p>由於 VS Code 本來就是跨平台，因此也可以在 Ubuntu 使用 VS Code。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Ubuntu 16.04<br>VS Code 1.21.0</p>
<h2 id="Download">Download</h2><hr>
<p><img src="/images/vscode/ubuntu/ubuntu000.png" alt="ubuntu000"></p>
<ol>
<li>到 <a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code</a> 官網，選擇 <code>deb</code> 格式下載。</li>
</ol>
<p><img src="/images/vscode/ubuntu/ubuntu001.png" alt="ubuntu001"></p>
<ol>
<li>選擇將檔案存下來到 <code>~/Downloads</code> 目錄</li>
</ol>
<h2 id="安裝_deb">安裝 deb</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd Downloads</span><br><span class="line">$ sudo dpkg -<span class="tag">i</span> code_1.<span class="number">21.0</span>-<span class="number">1520420608</span>_amd64<span class="class">.deb</span></span><br><span class="line">$ code</span><br></pre></td></tr></table></figure>
<p>使用 dpkg 安裝 <code>deb</code>。</p>
<ul>
<li><strong>-i</strong> : <code>i</code> stall，安裝 <code>deb</code></li>
</ul>
<p>使用 <code>code</code> 執行 VS Code。</p>
<p><img src="/images/vscode/ubuntu/ubuntu002.png" alt="ubuntu002"></p>
<ol>
<li>輸入 <code>cd Downloads</code> 將目前目錄切到 <code>Downloads</code>，因為 Firefox 將 <code>deb</code> 下載到 <code>~/Downloads</code> 目錄下</li>
<li>輸入 <code>sudo dpkg -i code_1.21.0-1520420608_amd64.deb</code> 安裝 <code>deb</code></li>
<li>輸入 <code>code</code> 執行 VS Code</li>
</ol>
<p><img src="/images/vscode/ubuntu/ubuntu003.png" alt="ubuntu003"></p>
<p>VS Code 成功執行在 Ubuntu。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>VS Code 在 Ubuntu 安裝稍微不一樣，需要使用 <code>dpkg</code> 安裝 <code>deb</code> 格式</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Ubuntu 也可以安裝 VS Code]]>
    
    </summary>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
      <category term="VS Code" scheme="http://oomusou.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 VS Code 建立 .NET Core 開發環境 ?]]></title>
    <link href="http://oomusou.io/vscode/netcore/"/>
    <id>http://oomusou.io/vscode/netcore/</id>
    <published>2018-03-10T12:23:43.000Z</published>
    <updated>2018-03-08T09:11:37.670Z</updated>
    <content type="html"><![CDATA[<p>VS Code 是 Microsoft 這幾年最成功的 open source project，也是最多人使用的 Angular 與 .NET Core 開發工具。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.4<br>VS Code 1.21.0</p>
<h2 id="Download">Download</h2><hr>
<p><img src="/images/vscode/netcore/setup000.png" alt="setup000"></p>
<p>到 <a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code</a> 官網，選擇你的平台下載。</p>
<blockquote>
<p>選擇 <code>Stable</code>，不要選擇 <code>Insiders</code> </p>
<p><code>Insiders</code> 是測試版，有可能會當機   </p>
</blockquote>
<h2 id="Extension">Extension</h2><hr>
<p><img src="/images/vscode/netcore/setup001.png" alt="setup001"></p>
<ol>
<li>按下左側 <code>Extension</code> icon</li>
<li>輸入 <code>.NET Core Extension Pack</code></li>
<li>選擇 Will 保哥所整理 .NET Core Extension Pack</li>
</ol>
<blockquote>
<p>由於 VS Code 為 open source project，當然可以自行選擇各種 extension 使用，此為保哥所整理的好用 extension，基本上安裝保哥的版本就已經足夠使用</p>
</blockquote>
<h2 id="Hello_World">Hello World</h2><hr>
<h3 id="建立專案">建立專案</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>new</strong> : 建立新專案</li>
<li><strong>console</strong> : 建立 console 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，表建立在 <code>MyConsole</code> 目錄下</li>
</ul>
<p><img src="/images/vscode/netcore/setup002.png" alt="setup002"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 將 console 類型專案建立在 <code>MyConsole</code> 目錄下</li>
<li>.NET Core SDK 開始建立專案所需的檔案</li>
<li>自動下載所需要的 NuGet package</li>
</ol>
<h3 id="VS_Code_開啟專案">VS Code 開啟專案</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接 <code>開啟目錄</code>名稱。</p>
<p><img src="/images/vscode/netcore/setup003.png" alt="setup003"></p>
<ol>
<li>輸入 <code>code MyConsole</code> 要求 VS Code 直接開啟 <code>MyConsole</code> 目錄</li>
</ol>
<p><img src="/images/vscode/netcore/setup004.png" alt="setup004"></p>
<ol>
<li>第一次使用 VS Code 開啟 .NET Core 專案，會要求建立 <code>.vscode</code> 設定檔目錄，按 <code>Yes</code> 繼續</li>
</ol>
<p><img src="/images/vscode/netcore/setup005.png" alt="setup005"></p>
<ol>
<li><code>.vscode</code> 被 VS Code 自動建立</li>
<li>點選 <code>Program.cs</code>，VS Code 已經能辨識出 C#，並支持語法變色與 Intellisense</li>
</ol>
<h3 id="編譯_-NET_Core">編譯 .NET Core</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>dotnet build</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>build</strong> : 編譯專案</li>
</ul>
<p><img src="/images/vscode/netcore/setup006.png" alt="setup006"></p>
<ol>
<li>按熱鍵 Ctrl + ` 開啟內建的 terminal，輸入 dotnet build 編譯目前專案</li>
<li>.NET Core SDK 將編譯成 <code>MyConsole.dll</code>，將路徑複製下來</li>
</ol>
<h3 id="執行_-NET_Core">執行 .NET Core</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="regexp">/Users/</span>oomusou<span class="regexp">/Code/</span>CSharp<span class="regexp">/MyConsole/</span>bin<span class="regexp">/Debug/</span>netcorea</span><br><span class="line">pp2.<span class="number">0</span><span class="regexp">/MyConsole.dll</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet</code> 執行 <code>dll</code>。</p>
<p><img src="/images/vscode/netcore/setup007.png" alt="setup007"></p>
<ol>
<li>輸入 <code>dotnet</code>，並將剛剛複製的 <code>dll</code> 路徑貼上</li>
<li>顯示<code>Hello World!</code></li>
</ol>
<p>目前已經可以成功在 VS Code 編譯 C# 並執行之。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>VS Code 是個輕量的 .NET Core 開發環境，配合 .NET Core SDK，你可以在 macOS 寫 C#</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 macOS 建立輕量級的 .NET Core 開發環境]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="VS Code" scheme="http://oomusou.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Angular 實現 State Pattern ?]]></title>
    <link href="http://oomusou.io/design-pattern/state/"/>
    <id>http://oomusou.io/design-pattern/state/</id>
    <published>2018-03-09T12:23:43.000Z</published>
    <updated>2018-03-08T02:23:22.038Z</updated>
    <content type="html"><![CDATA[<p>State Pattern 是 OOP 中著名的 Design Pattern，當 method 的行為會隨著 field 而改變時特別有效。在本文中，我們將以 Angular 與 TypeScript 實現。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Node.js 8.9.4<br>Angular CLI 1.7.2<br>TypeScript 2.5.3<br>Angular 5.2.7</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/design-pattern/state/state000.png" alt="state000"></p>
<ul>
<li>模擬 iPhone 的 <code>Home</code> 鍵動作</li>
<li><code>Home</code> 雖然只有一個按鍵，但在不同的情境下有不同的功能<ul>
<li>當在 <code>Locked</code> 下，可以 <code>Unlocked</code></li>
<li>當在 <code>Unlocked</code> 下，可以進入 <code>Home</code></li>
<li>當在 <code>App</code> 開啟下，可以回到 <code>Home</code></li>
<li>當在 <code>Desktop</code> 下，可以切換 <code>Home</code></li>
</ul>
</li>
</ul>
<h2 id="Task">Task</h2><hr>
<ul>
<li>因為 <code>Home</code> 有在不同情境下有不同的功能，勢必有很多 <code>if else</code> 判斷情境而切換功能</li>
<li>先用 <code>if else</code> 寫法完成，最後再重構成 State Pattern</li>
</ul>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>State Pattern</p>
<p>當 method 的行為會隨著 field 而改變時，將 <code>if</code> 改用 <code>state</code> 物件表示</p>
<p>將 <code>外部 nested if</code> 改由 <code>內部決定</code> 的 <code>物件串列</code> 表示，藉以消除 <code>if</code> </p>
</blockquote>
<p><img src="/images/design-pattern/state/state015.svg" alt="state015"></p>
<p>將 <code>if</code> 要處理的邏輯包在每個 state 內，但不包含 <code>if</code>。</p>
<p><img src="/images/design-pattern/state/state012.svg" alt="state012"></p>
<ul>
<li><strong>Client</strong> : <code>Context</code> 的 user，實務上可能是 component 或 controller</li>
<li><strong>Context</strong> : 根據 field 的不同，<code>request()</code> 會有不同功能，實務上可能是 service</li>
<li><strong>State</strong> : 定義 <code>ConcreteState</code> 的 interface，只有 <code>handle()</code> ，負責封裝 <code>if 要處理的邏輯</code></li>
<li><strong>ConcreteState</strong> : 將 <code>if 要處理的邏輯</code> 封裝成物件</li>
</ul>
<p>一個 <code>if</code> 要處理的邏輯放在一個 <code>ConcreteState</code> 物件內，並根據 state diagram 指定下一個 state。</p>
<p>由於 method 的行為會根據 field (state) 改變，因此稱為 <code>State</code>  Pattern。</p>
<p><strong>適用時機</strong></p>
<ul>
<li>深層 <code>nested if</code></li>
<li>在 design-time 就可決定 <code>if</code> 組合 (以 state diagram 描述)</li>
<li>當 method 的行為會隨著 field 而改變時</li>
</ul>
<p><strong>優點</strong></p>
<ul>
<li>每個 <code>if 要處理的邏輯</code> 使用一個 class，符合 <code>單一職責原則</code></li>
<li>將來若有新的 <code>if 要處理的邏輯</code>，不用修改 service，而是新增 <code>ConcreState</code>，符合 <code>開放封閉原則</code></li>
<li>Client 與 <code>if 判斷</code> 解耦合，兩者都僅相依於 interface，符合 <code>依賴反轉原則</code></li>
<li>可使用 state diagram 清楚描述狀態轉變</li>
</ul>
<p><strong>缺點</strong> </p>
<ul>
<li>若邏輯複雜，state class 可能會很多檔案，但還是比單一檔案 <code>nested if</code> 好維護</li>
</ul>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/design-pattern/state/state013.svg" alt="state013"></p>
<ul>
<li>只有在 <code>Unlock</code>、<code>App</code> 與 <code>Desktop</code> 才能使用 <code>Home</code> 鍵</li>
<li>只有在 <code>Home</code> 與 <code>Desktop</code> 才能切到 <code>App</code></li>
<li>只有 <code>Home</code> 才能切到 <code>Desktop</code></li>
</ul>
<p><img src="/images/design-pattern/state/state002.svg" alt="state002"></p>
<ul>
<li><code>AppComponent</code> 相當於 <code>Client</code></li>
<li><code>PhoneContext</code> 相當於 <code>Context</code>，<code>AppComponent</code> 負責注入 <code>PhoneContext</code>，無論怎麼重構，<code>PhoneContext</code> 都是穩定的，不會導致 <code>AppComponent</code> 修改</li>
<li><code>PhoneStateInterface</code> 相當於 <code>State</code> interface，訂出所有 state 標準</li>
<li><code>LockedState</code> 及其他 state 都是 <code>ConcreteState</code>，為實際 <code>if</code> 所處理的邏輯</li>
</ul>
<h2 id="Implmentation">Implmentation</h2><hr>
<p><strong>app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onHomeClick()"</span>&gt;</span>Home<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onOpenAppClick()"</span>&gt;</span>Open App<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onSwitchDesktopClick()"</span>&gt;</span>Switch Desktop<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; message &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>在 HTML 提供 <code>Home</code>、<code>Open App</code> 與 <code>Switch Desktop</code> 3 個 button，任何訊息將顯示在 <code>message</code>。</p>
<h3 id="If_Else">If Else</h3><p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  <span class="keyword">private</span> state = <span class="string">'Locked'</span>;</span><br><span class="line">  message = <span class="string">'The phone is locked'</span>;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Locked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Unlocked'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is unlocked'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Unlocked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span> || <span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'App'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is opening app'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Desktop'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is switching desktop'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">onHomeClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Locked'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Unlocked'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is unlocked'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Unlocked'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>Home</code> 鍵，由於 <code>Home</code> 在不同情境有不同功能，因此分成 <code>Locked</code>、<code>Unlocked</code>、<code>Home</code>、<code>App</code> 與 <code>Desktop</code> 5 個 state，使用 <code>if</code> 判斷當目前什麼 state 下，要做什麼事情，以及即將切到什麼 state。</p>
<p>31 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onOpenAppClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span> || <span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'App'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is opening app'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>開啟 App</code>，根據 state diagram，由於不可能在 <code>Locked</code>、<code>Unlocked</code> 與 <code>App</code> state 下開啟 app，將顯示 <code>The operation is not allowed</code>，並切到特別建立的 <code>Null</code> state。</p>
<p>也就是只有 <code>Home</code> 與 <code>Desktop</code> state 下才能開啟 app，因此特別使用 <code>if else</code> 做判斷。</p>
<p>41 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onSwitchDesktopClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Desktop'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is switching desktop'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>切換桌面</code>，根據 state diagram，只能在 <code>Home</code> state 下切換桌面，因此需要 <code>if else</code> 做判斷。</p>
<blockquote>
<p>以功能面來說，目前已經完全需求，只是程式碼含有眾多的 code smell，尚無法達成 production code 的標準，需要繼續重構。</p>
</blockquote>
<h3 id="Unit_Test">Unit Test</h3><p>在重構之前，必須要有測試保護，才能確保沒把原本的商業邏輯重構壞，因此我們先準備好 <code>AppComponent</code> 的 Unit Test，確保每個 <code>if else</code> 的 path 都有測到。</p>
<p><strong>app.component.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ComponentFixture, TestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DebugElement &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'AppComponent'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;AppComponent&gt;;</span><br><span class="line">  <span class="keyword">let</span> appComponent: AppComponent;</span><br><span class="line">  <span class="keyword">let</span> debugElement: DebugElement;</span><br><span class="line">  <span class="keyword">let</span> htmlElement: HTMLElement;</span><br><span class="line">  <span class="keyword">let</span> target: AppComponent;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">    appComponent = fixture.componentInstance;</span><br><span class="line">    debugElement = fixture.debugElement;</span><br><span class="line">    htmlElement = debugElement.nativeElement;</span><br><span class="line">    target = <span class="keyword">new</span> AppComponent();</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should create the app'</span>, () =&gt; &#123;</span><br><span class="line">    expect(appComponent).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`一開始應顯示 <span class="string">'The phone is locked'</span>`, () =&gt; &#123;</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is locked'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">1</span> 次按下 Home 應顯示 <span class="string">'The phone is unlocked'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is unlocked'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">2</span> 次按下 Home 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">3</span> 次按下 Home 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">2</span> 次按下 Home 與第一次按下 Open App 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onOpenAppClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is opening app'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當按下 Open App 再按下 Home 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onOpenAppClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">2</span> 次按下 Home 與第一次按下 Switch Desktop 應顯示 <span class="string">'The phone is switching desktop'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onSwitchDesktopClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is switching desktop'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當按下 Switch Desktop 再按下 Home 應顯示 <span class="string">'The phone is switching desktop'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onSwitchDesktopClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">1</span> 次按下 Home 再按下 Open App 應顯示 <span class="string">'The operation is not allowed'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onOpenAppClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The operation is not allowed'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">1</span> 次按下 Home 再按下 Switch Desktop 應顯示 <span class="string">'The operation is not allowed'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onSwitchDesktopClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The operation is not allowed'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由於本文重點不是在講 Unit Test，因此就不浪費篇幅解釋以上程式碼。</p>
<p><img src="/images/design-pattern/state/state001.png" alt="state001"></p>
<p>執行 Wallaby.js 單元測試，確保 <code>AppComponent</code> 所有的 <code>if else</code> 的 path 都有測到，也就是 coverage 是 <code>100%</code>，接下來的重構將以此 Unit Test 為標準，無論怎麼重構，都必須確保 11 個測試案例 <code>綠燈</code>。</p>
<blockquote>
<p>實務上若 TDD 有困難，其實可以先用 <code>if else</code> 寫一段 <code>比較髒</code> 的 production code，最少功能都符合需求，因為 <code>比較髒</code>，所以一定得重構，在重構之前補上 Unit Test，重點是 coverage 是 <code>100%</code>，然後不斷的重構維持 Unit Test 都是 <code>綠燈</code>，無論是先寫測試或是後寫測試，但要寫 Unit Test 與重構的目標都是一致的，只是先寫還是後寫而已。</p>
<p>若發現 <code>比較髒</code> 的 production code 已經無法寫出 Unit Test，就必須回頭修改 production code 寫法，那表示你的 production code 已經違反 SOLID 原則，導致 Unit Test 寫不出來。</p>
</blockquote>
<h3 id="Refactoring">Refactoring</h3><p>目前這段 code 至少含有以下 3 項 code smell : </p>
<ol>
<li>使用 <code>else</code> 造成 <code>nested if</code></li>
<li><code>state</code> 與 <code>message</code> 目前都以 <code>string</code> hardcode</li>
<li><code>onHomeClick()</code> 眾多 <code>if else</code> 嚴重違反 <code>單一職責原則</code> 與 <code>開放封閉原則</code></li>
</ol>
<p>我們將針對這 3 點加以重構。</p>
<h3 id="Guard_Clause">Guard Clause</h3><p>重構目標 : 使用 Guard Clause 取代 <code>else</code>。</p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  <span class="keyword">private</span> state = <span class="string">'Locked'</span>;</span><br><span class="line">  message = <span class="string">'The phone is locked'</span>;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Locked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Unlocked'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is unlocked'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Unlocked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span> || <span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'App'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is opening app'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Desktop'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is switching desktop'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>25 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line"><span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br></pre></td></tr></table></figure>
<p>以 <code>return</code> 取代 <code>else</code>，換來 <code>if</code> 全部壓平在第一層，避免寫出 <code>nested if</code>。</p>
<p>最後一行即為預設值。</p>
<p>其他皆以這種方式重構。</p>
<h3 id="Enum">Enum</h3><p>重構目標 : 使用 <code>enum</code> 取代 <code>string</code> hardcode。</p>
<p><strong>message.enum.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> MessageEnum &#123;</span><br><span class="line">  Locked   = <span class="string">'The phone is locked'</span>,</span><br><span class="line">  Unlocked = <span class="string">'The phone is unlocked'</span>,</span><br><span class="line">  Home     = <span class="string">'The phone is at home'</span>,</span><br><span class="line">  App      = <span class="string">'The phone is opening app'</span>,</span><br><span class="line">  Desktop  = <span class="string">'The phone is switching desktop'</span>,</span><br><span class="line">  Null     = <span class="string">'The operation is not allowed'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前 <code>state</code> 與 <code>message</code> 都使用 <code>string</code> hardcode，使用上雖然直覺簡單，但有兩個致命缺點 :</p>
<ol>
<li><code>message</code> 到處散佈，將來若 <code>message</code> 修改，要改的地方很多</li>
<li><code>state</code> 使用 <code>string</code>，不僅容易 typo，也無法受到 compiler 保護</li>
</ol>
<p>比較好的方式是 <code>state</code> 由 <code>string</code> 改由 <code>enum</code>，如此不會 typo，也受到 compiler 保護。</p>
<blockquote>
<p>一般語言由於 <code>enum</code> 傳統只能代表 <code>int</code>，因此還掉搭配其他 collection，如 ES6  的 <code>Map</code> 或 C# 的 <code>Dictionary</code> ，但 TypeScript 2.4 的 <code>enum</code> 可代表 <code>string</code>，因此可省掉 <code>Map</code> 或 <code>Dictionary</code>，直接使用 <code>enum</code> 搞定。</p>
</blockquote>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  message = MessageEnum.Locked;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Locked) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Unlocked;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Unlocked) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.App) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Desktop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Home || <span class="keyword">this</span>.message === MessageEnum.Desktop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.App;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = MessageEnum.Null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Home) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Desktop;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = MessageEnum.Null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = MessageEnum.Locked;</span><br></pre></td></tr></table></figure>
<p>將 <code>state</code> 拿掉，只留下 <code>message</code>。</p>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Locked) &#123;</span><br><span class="line">  <span class="keyword">this</span>.message = MessageEnum.Unlocked;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本判斷 <code>state</code>，直接判斷 <code>message</code> 即可。</p>
<p>其他以此類推。</p>
<h3 id="State_Pattern">State Pattern</h3><p>重構目標 : 使用 State Pattern 實現 <code>單一職責原則</code> 與 <code>開放封閉原則</code>。</p>
<p><strong>AppComponent</strong></p>
<p><img src="/images/design-pattern/state/state010.svg" alt="state010"></p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneContext &#125; from <span class="string">'./phone.context'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; from <span class="string">'./AppState'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DesktopState &#125; from <span class="string">'./DesktopState'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  message = MessageEnum.Locked;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private phoneContext: PhoneContext) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.request();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.setState(<span class="keyword">new</span> AppState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.setState(<span class="keyword">new</span> DesktopState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private phoneContext: PhoneContext) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 DI 依賴注入 <code>PhoneContext</code>。</p>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onHomeClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.request();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <code>onHomeClick()</code> 只剩下一行 <code>Context.request()</code>。</p>
<blockquote>
<p>我們可以發現 <code>onHomeClick()</code> 的 <code>if</code> 都不見了，也就是說，State Pattern 用多個檔案的 class 去換一個檔案的 <code>if</code> 。</p>
<ul>
<li>由於多個檔案，一個 class 代表一個 <code>if</code> ，符合 <code>單一職責原則</code></li>
<li>將來若有新的 state，只要根據 interface 新增 class，不用修改原來的 code，符合 <code>開放封閉原則</code></li>
</ul>
</blockquote>
<p>22 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onOpenAppClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.setState(<span class="keyword">new</span> AppState());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本需要在 client 判斷是否可以切換 state，現在只管新增 state 即可，不用再用 <code>if</code> 判斷。</p>
<p><strong>PhoneContext</strong></p>
<p><img src="/images/design-pattern/state/state003.svg" alt="state003"></p>
<p><strong>phone.context.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Inject, Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterfaceToken &#125; from <span class="string">'./interface.token'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PhoneContext &#123;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(@Inject(PhoneStateInterfaceToken) private state: PhoneStateInterface) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.state.handle();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">if</span> (!state.chkContext(<span class="keyword">this</span>.state)) &#123;</span><br><span class="line">      <span class="keyword">return</span> MessageEnum.Null;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">      <span class="keyword">return</span> state.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(@Inject(PhoneStateInterfaceToken) private state: PhoneStateInterface) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即將使用 State Pattern，使用 DI 依賴注入 <code>state</code>，注意其型別為 <code>PhoneStateInterface</code>。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request(): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="keyword">this</span>.state.handle();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.state.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>request()</code> 為原本 State Pattern 所設計的 method。</p>
<p>執行目前 <code>state</code> 的 <code>handle()</code>，此為目前 state 主要的商業邏輯所在。</p>
<p><code>handle()</code> 將回傳下一個 <code>state</code>。</p>
<p><code>state.getMessage()</code> 將回傳目前 <code>state</code> 要顯示的訊息。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">if</span> (!state.chkContext(<span class="keyword">this</span>.state)) &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Null;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>setState()</code> 並非 State Pattern 所設計的 method，目前因為 <code>Open App</code> 與 <code>Switch Desktop</code> 需要動態切換 state，因而衍生出動態設定 state 的需求。</p>
<p>由於不是每個 state 都能任意切換到其他 state，因此特別在每個 state 設計 <code>chkContext()</code>，判斷是否允許切換 state。</p>
<blockquote>
<p><code>Context.setState()</code> 與 <code>State.chkContext()</code> 並非原始 State Pattern 所設計，為了能動態切換 state，實務上經常會有此需求</p>
</blockquote>
<p><strong>PhoneStateInterface</strong></p>
<p><img src="/images/design-pattern/state/state004.svg" alt="state004"></p>
<p><strong>phone.state.interface.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> PhoneStateInterface </span>&#123;</span><br><span class="line">  handle(): PhoneStateInterface;  </span><br><span class="line">  getMessage(): MessageEnum;</span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 State Pattern 的 interface ：</p>
<ul>
<li><code>handle()</code> : 為 State Pattern 所設計的 method，專門放每個 <code>if</code> 的邏輯</li>
<li><code>getMessage()</code> : 回傳目前 state 的 message，非 State Pattern 所設計，為根據目前需求所設計的 method</li>
<li><code>chkContext()</code> : 檢查目前 state 是否可以允許切換到下一個 state，非 State Pattern 所設計，為根據目前需求所設計的 method</li>
</ul>
<p><strong>LockedState</strong></p>
<p><img src="/images/design-pattern/state/state005.svg" alt="state005"></p>
<p>接下來要將每個 state 的 <code>if</code> 搬進 class，實現 <code>單一職責原則</code> 與 <code>開放封閉原則</code>。</p>
<p><strong>locked.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UnlockedState &#125; from <span class="string">'./UnlockedState'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LockedState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UnlockedState();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Locked;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handle(): PhoneStateInterface &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> UnlockedState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將原本 <code>Locked</code> state 的 code 搬到 <code>handle()</code>，最後回傳下一個 state，其型別為 <code>PhoneStateInterface</code>。</p>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getMessage(): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">return</span> MessageEnum.Locked;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳目前 state 的 message，注意其型別為 <code>MessageEnum</code>，而不是 <code>string</code>。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>檢查目前 state 是否進進入 <code>Locked</code> state，因為毫無限制，傳回 <code>true</code> 即可。</p>
<p><strong>UnlockedState</strong></p>
<p><img src="/images/design-pattern/state/state006.svg" alt="state006"></p>
<p><strong>unlocked.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./HomeState'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UnlockedState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Unlocked;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage() === MessageEnum.Locked;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.getMessage() === MessageEnum.Locked;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 state diagram，只有當 <code>Locked</code> state 才能進入 <code>Unlocked</code> state。</p>
<p><strong>HomeState</strong></p>
<p><img src="/images/design-pattern/state/state007.svg" alt="state007"></p>
<p><strong>home.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomeState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>與 <code>LockedState</code> 類似，就不再贅述。</p>
<p><strong>AppState</strong></p>
<p><img src="/images/design-pattern/state/state008.svg" alt="state008"></p>
<p><strong>app.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./HomeState'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.App;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.getMessage() === MessageEnum.Home) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (state.getMessage() === MessageEnum.Desktop) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (state.getMessage() === MessageEnum.Home) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.getMessage() === MessageEnum.Desktop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 state diagram，只有 <code>Home</code> 與 <code>Desktop</code> state 才能進入 <code>App</code> state。</p>
<p><strong>DesktopState</strong></p>
<p><img src="/images/design-pattern/state/state009.svg" alt="state009"></p>
<p><strong>desktop.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./home.state'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DesktopState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Desktop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.getMessage() === MessageEnum.Home) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 state diagram，只有 <code>Home</code> state 才能進入 <code>Desktop</code> state。</p>
<h3 id="Refactoring-1">Refactoring</h3><p><strong>PhoneContext</strong></p>
<p><img src="/images/design-pattern/state/state003.svg" alt="state003"></p>
<p><strong>phone.context.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Inject, Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterfaceToken &#125; from <span class="string">'./interface.token'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PhoneContext &#123;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(@Inject(PhoneStateInterfaceToken) private state: PhoneStateInterface) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.state.handle();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">const</span> setCurrentState = (currentState) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = currentState;</span><br><span class="line">      <span class="keyword">return</span> currentState.getMessage();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !state.chkContext(<span class="keyword">this</span>.state) ? MessageEnum.Null :</span><br><span class="line">           setCurrentState(state);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">const</span> setCurrentState = (currentState) =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = currentState;</span><br><span class="line">    <span class="keyword">return</span> currentState.getMessage();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> !state.chkContext(<span class="keyword">this</span>.state) ? MessageEnum.Null :</span><br><span class="line">          setCurrentState(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將原本的 <code>if else</code> 重構成 <code>?:</code> 。</p>
<p>尤其原本 <code>else</code> 的部分抽成 function，讓可讀性更高。</p>
<p><strong>AppState</strong></p>
<p><img src="/images/design-pattern/state/state008.svg" alt="state008"></p>
<p><strong>app.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./home.state'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.App;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage() === MessageEnum.Home ? <span class="literal">true</span> :</span><br><span class="line">           state.getMessage() === MessageEnum.Desktop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.getMessage() === MessageEnum.Home ? <span class="literal">true</span> :</span><br><span class="line">         state.getMessage() === MessageEnum.Desktop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>if else</code> 重構成 <code>?:</code>。</p>
<p><strong>DesktopState</strong></p>
<p><img src="/images/design-pattern/state/state009.svg" alt="state009"></p>
<p><strong>destop.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./home.state'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DesktopState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Desktop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage() === MessageEnum.Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.getMessage() === MessageEnum.Home;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>if else</code> 重構成 <code>?:</code>。</p>
<p><img src="/images/design-pattern/state/state014.png" alt="state014"></p>
<p>經過一系列的重構成 State Pattern，一樣必須確認 Wallaby.js 單元測試的 11 個測試案例都是 <code>綠燈</code>。</p>
<h2 id="Summary">Summary</h2><hr>
<blockquote>
<p>Chain of Responsibility Pattern vs. State Pattern</p>
</blockquote>
<p><img src="/images/design-pattern/state/state016.svg" alt="state016"></p>
<p>以 class diagram 角度，Chain of Responsibility 與 State Pattern 完全一樣。</p>
<blockquote>
<p>學 Design Pattern 不能以 class diagram 的角度去思考，而要以他要解決什麼問題來思考</p>
</blockquote>
<h3 id="Similarity">Similarity</h3><ul>
<li>解決 <code>nested if</code> 難以維護</li>
<li>都是將 <code>if</code> 改用 object 表示</li>
</ul>
<h3 id="Difference">Difference</h3><ul>
<li>CoR 特別適用於一連串的 <code>判斷檢查</code>；State 特別適用於 method 功能隨 field 改變</li>
<li>CoR 內仍然會有 <code>if</code>；State 內無 <code>if</code></li>
<li>CoR 由 <code>外部</code> 決定下一個 handler；State 由 <code>內部</code> 決定下一個 state</li>
<li>State 會搭配 state diagam 描述 state 的切換</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>並不是所有的 <code>if</code> 都該使用 State Pattern，當 method 功能會隨 field 改變時特別適用，如複雜的 GUI，button 可能根據不同情境有不同功能</li>
<li>Chain of Responsibility 與 State Pattern，從 class diagram 角度，兩者完全一樣，但適用時機與語意是不同的，尤其 Chain of Responsibility 是由外部決定 <code>if</code> 順序，但 State Pattern 是由內部決定 <code>if</code> 順序</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52State" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 OOP 實現 Finite State Machine]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 macOS 與 Docker 共享目錄 ?]]></title>
    <link href="http://oomusou.io/docker/mount-host-dir/"/>
    <id>http://oomusou.io/docker/mount-host-dir/</id>
    <published>2018-03-08T12:23:43.000Z</published>
    <updated>2018-03-03T15:32:27.666Z</updated>
    <content type="html"><![CDATA[<p>當開發環境都 Docker 化，最常遇到的問題就是開發環境該如何與測試環境分離，如 IDE 裝在 macOS，如 WebStorm / Rider / VS Code，且 code 也放在 macOS，但實際 build code 或跑測試，卻是在 container 內，因此勢必要將 macOS 的目錄與 container 共享。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)</p>
<h2 id="參數_-v">參數 -v</h2><hr>
<p>由於每個人要分享的目錄都不一樣，所以不能將共享目錄寫在 <code>Dockerfile</code>，而必須在使用 <code>docker run</code> 建立 container 加上 <code>-v</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkinsCore -<span class="tag">p</span> <span class="number">8080</span>:<span class="number">8080</span> -<span class="tag">p</span> <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home -v /Users/oomusou/Code:/var/<span class="tag">code</span>   oomusou/jenkins-core</span><br></pre></td></tr></table></figure>
<p>以上為例</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">v /<span class="constant">Users</span>/oomusou/<span class="constant">Code</span><span class="symbol">:/var/code</span></span></span><br></pre></td></tr></table></figure>
<p>所有程式都放在 macOS 的 <code>/Users/oomusou/Code</code>，我們希望對應到 container 內的 <code>/var/code</code>，只要 <code>/Users/oomusou/Code</code> 有任何修改，在 container 內都看得到。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>一個很小的參數，但實務上卻非常有用</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓開發環境與測試環境分離]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何為 Slack 設定 Jenkins 通知 ?]]></title>
    <link href="http://oomusou.io/slack/jenkins/"/>
    <id>http://oomusou.io/slack/jenkins/</id>
    <published>2018-03-07T12:23:43.000Z</published>
    <updated>2018-03-03T15:13:19.299Z</updated>
    <content type="html"><![CDATA[<p>當 Jenkins 的 job 執行失敗時，我們希望在 Slack 的 channel 能收到通知，如此可避免所有訊息都透過 Email，只有真正與人相關的訊息才使用 Email，讓 Slack 成為持續整合的訊息中心。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>Jenkins 2.89.4<br>Slack 3.0.5</p>
<h2 id="設定_Slack">設定 Slack</h2><hr>
<h3 id="新增_Channel">新增 Channel</h3><p><img src="/images/jenkins/netcore-slack/slack013.png" alt="slack013"></p>
<ol>
<li>按下 <code>Channels</code> 右側的 <code>+</code> 新增 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack014.png" alt="slack014"></p>
<ol>
<li><strong>Privacy</strong> : 設定為 <code>Public</code> 或 <code>Private</code> channel</li>
<li><strong>Name</strong> : 設定 channel 名稱</li>
<li><strong>Purpose</strong> : channel 的功能描述，可以不輸入</li>
<li><strong>Send invites to</strong> : 設定 channel 成員，可以稍後再設定</li>
<li>按 <code>Create Channel</code> 開始建立 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack015.png" alt="slack015"></p>
<ol>
<li>按 <code>Got It!</code> 進入 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack016.png" alt="slack016"></p>
<ol>
<li>正式進入 channel，將來 Jenkins 訊息會傳進此 channel</li>
</ol>
<h3 id="新增_Notification">新增 Notification</h3><p><img src="/images/jenkins/netcore-slack/slack017.png" alt="slack017"></p>
<ol>
<li>選擇右上方的 <code>option</code></li>
<li>選擇 <code>Add an app</code></li>
</ol>
<h3 id="新增_Jenkins_App">新增 Jenkins App</h3><p><img src="/images/jenkins/netcore-slack/slack018.png" alt="slack018"></p>
<p>Slack 將開啟瀏覽器</p>
<ol>
<li>稍微往下捲輸入 <code>Jenkins</code></li>
<li>選擇 <code>Jenkins CI</code></li>
</ol>
<h3 id="新增_Configuration">新增 Configuration</h3><p><img src="/images/jenkins/netcore-slack/slack019.png" alt="slack019"></p>
<ol>
<li>按 <code>Add Configuration</code> 加入 Jenkins CI</li>
</ol>
<h3 id="新增_Integration">新增 Integration</h3><p><img src="/images/jenkins/netcore-slack/slack020.png" alt="slack020"></p>
<ol>
<li>按 <code>Add Bitbucket Integration</code> 正式加入整合 Jenkins</li>
</ol>
<h3 id="Slack_設定完成">Slack 設定完成</h3><p><img src="/images/jenkins/netcore-slack/slack021.png" alt="slack021"></p>
<ol>
<li>介紹 Jenkins 設定流程</li>
</ol>
<blockquote>
<p>Slack 部分已經設定完成，接下來是 Jenkins 的設定</p>
<p>Slack 網頁先不要關閉，稍後會用到</p>
</blockquote>
<h2 id="設定_Jenkins">設定 Jenkins</h2><hr>
<h3 id="Manage_Jenkins">Manage Jenkins</h3><p><img src="/images/jenkins/netcore-slack/slack022.png" alt="slack022"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Manage Plugins</code></li>
</ol>
<h3 id="安裝_Slack_Plugin">安裝 Slack Plugin</h3><p><img src="/images/jenkins/netcore-slack/slack023.png" alt="slack023"></p>
<ol>
<li>選擇 <code>Avaliable</code> tab</li>
<li>選擇 <code>Slack Notification Plugin</code></li>
<li>按 <code>Download now and Install after restart</code></li>
</ol>
<h3 id="新增_Webhook">新增 Webhook</h3><p><img src="/images/jenkins/netcore-slack/slack024.png" alt="slack024"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Configure System</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack025.png" alt="slack025"></p>
<p>在 <code>Global Slack Notifier Settings</code> 下設定</p>
<ol>
<li><strong>Base URL</strong> : 貼一段 Slack 所提供的 URL</li>
<li><strong>Integration Token</strong> : 貼一段 Slack 所提供的 token</li>
</ol>
<blockquote>
<p>Q : 要貼什麼 Base URL 與 token 呢 ?</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack026.png" alt="slack026"></p>
<p>回到 Slack 最後的網頁往下捲到 <code>Step 3</code></p>
<ol>
<li>將 <code>Base URL</code> 與 <code>Integration Token</code> 複製貼上</li>
</ol>
<p>最後按 <code>Save</code> 存檔。</p>
<h3 id="設定_Job">設定 Job</h3><p><img src="/images/jenkins/netcore-slack/slack027.png" alt="slack027"></p>
<ol>
<li>選擇要發 Slack 通知的 job</li>
<li>按 <code>Configure</code> 設定</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack028.png" alt="slack028"></p>
<p>在 Jenkins 執行完 <code>build</code> 動作後，無論成功或失敗，將結果通知 Slack</p>
<ol>
<li>選擇 <code>Post-build Actions</code></li>
<li>選擇 <code>Add post-build action</code></li>
<li>選擇 <code>Slack Notification</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack029.png" alt="slack029"></p>
<p>選擇希望 Jenkins 通知 Slack 的動作 :</p>
<ol>
<li>選擇 <code>Notify Failure</code>、 <code>Notify Success</code> 與 <code>Notify Unstable</code></li>
</ol>
<blockquote>
<p>建議不用選擇太多 action，<code>success</code> 確認 Jenkins 還活著，<code>Failure</code> 與 <code>Unstable</code> 確認 CI 失敗即可</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack030.png" alt="slack030"></p>
<p>新增一個 Git commit，就可發現 Slack 收到 Jenkins 測試成功 <code>綠燈</code> 的訊息。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Slack 提供了一個不錯的 CI 訊息平台，讓訊息從 Email 解放</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓 Slack 成為 CI 的訊息中心]]>
    
    </summary>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
      <category term="Slack" scheme="http://oomusou.io/tags/Slack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Jenkins 對 .NET Core 實現個人的持續整合 ?]]></title>
    <link href="http://oomusou.io/jenkins/netcore-slack/"/>
    <id>http://oomusou.io/jenkins/netcore-slack/</id>
    <published>2018-03-06T12:23:43.000Z</published>
    <updated>2018-03-03T14:40:49.883Z</updated>
    <content type="html"><![CDATA[<p>在使用 TDD 開發時，儘管單元測試執行速度較快，但可能僅執行一部分的單元測試而已；而整合測試與驗收測試更慢，實務上不可能真的花時間去等待測試結果，而是希望在背景不斷地執行，在本機配合 Docker 執行 Jenkins 後，只要每次有新的 commit，就會自動執行所有測試，並將測試結果傳送到 Slack。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>.NET Core 2.1.4<br>Jenkins 2.89.4<br>Slack 3.0.5<br>Rider 2017.3.1</p>
<h2 id="User_Story">User Story</h2><hr>
<p>我們希望每次 <code>git push</code> 到 Git 後，Jenkins 就會自動跑 Unit Test，若失敗則會通知 Slack。</p>
<h2 id="Task">Task</h2><hr>
<ul>
<li>Git 直接使用本機的 git repository</li>
<li>Jenkins 使用本機的 Docker</li>
<li>Slack 可裝在本機或行動裝置</li>
</ul>
<h2 id="建立_-NET_Core_專案">建立 .NET Core 專案</h2><hr>
<p><strong>NumberService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">NumberLib</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NumberService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">isEven</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">value</span></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>isEven()</code> 若為偶數傳回 <code>true</code> ，奇數傳回 <code>false</code>。</p>
<p><img src="/images/jenkins/netcore-slack/slack000.png" alt="slack000"></p>
<p><strong>NuberServiceTest.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NumberLib;</span><br><span class="line"><span class="keyword">using</span> Xunit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NumberLibTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NumberServiceTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> NumberService _numberService = <span class="keyword">new</span> NumberService();</span><br><span class="line">        </span><br><span class="line">        [Fact]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShouldReturnTrueGivenEvenValue</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = _numberService.isEven(<span class="number">2</span>);</span><br><span class="line">            Assert.True(result, <span class="string">"2 should return true"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [Fact]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShouldReturnFalseGivenOddValue</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = _numberService.isEven(<span class="number">1</span>);</span><br><span class="line">            Assert.False(result, <span class="string">"1 should return false"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提供兩個測試案例，分別測試傳回 <code>true</code> 與 <code>false</code>。</p>
<p><img src="/images/jenkins/netcore-slack/slack001.png" alt="slack001"></p>
<h2 id="執行_Unit_Test">執行 Unit Test</h2><hr>
<p><img src="/images/jenkins/netcore-slack/slack002.png" alt="slack002"></p>
<p>直接在 Rider 執行單元測試，確認結果正確。</p>
<h2 id="建立_Git_Repository">建立 Git Repository</h2><hr>
<p>要實現持續整合，Git 是其中的關鍵，唯有透過版控，才能在每個版本的變動觸發 Jenkins 自動執行測試。</p>
<p><img src="/images/jenkins/netcore-slack/slack003.png" alt="slack003"></p>
<p>直接在 Rider 建立 Git repository。</p>
<h2 id="設定_Jenkins">設定 Jenkins</h2><hr>
<p><strong>建立與執行 Jenkins Container</strong></p>
<p>若要 macOS 執行 Jenkins，最簡單的方法是透過 Docker，但只使用官方的 Jenkins image 是不夠的，因為我們必須在 Jenkins 的 Linux 環境跑單元測試，也就是說 Linux 必須要有 .NET Core SDK 環境。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於建立 image 建立，詳細請參考 <a href="/docker/jenkins-core/">如何建立含有 .NET Core SDK 的 Jenkins Docker Image ?</a></span></span></span></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkinsCore -<span class="tag">p</span> <span class="number">8080</span>:<span class="number">8080</span> -<span class="tag">p</span> <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home -v /Users/oomusou/Code:/var/<span class="tag">code</span>   oomusou/jenkins-core</span><br></pre></td></tr></table></figure>
<p>在建立 container 時，較特別的為</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">v /<span class="constant">Users</span>/oomusou/<span class="constant">Code</span><span class="symbol">:/var/code</span></span></span><br></pre></td></tr></table></figure>
<p><code>-v</code> 是設定 host os 的目錄，相當於 container 內對應的目錄。</p>
<p>如此就能使用 macOS 的開發工具，如 Rider 在 <code>/Users/oomusou/Code</code>，但 Jenkins 跑單元測試時是在 Linux 的 <code>/var/code</code> 目錄下。</p>
<p><strong>Manage Jenkins</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack004.png" alt="slack004"></p>
<ol>
<li>左側選 <code>Manage Jenkins</code></li>
<li>右側選 <code>Configure Global Security</code></li>
</ol>
<p><strong>Configure Global Security</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack005.png" alt="slack005"></p>
<ol>
<li>不勾選 <code>Enable security</code></li>
<li>不勾選 <code>CSRF Protection</code></li>
</ol>
<blockquote>
<p>因為 Jenkins 只是跑在本機，所以使用較寬鬆的 security 設定</p>
</blockquote>
<p><strong>建立 Jenkins Job</strong></p>
<p>每一個自動化，在 Jenkins 稱為 Job。</p>
<p><img src="/images/jenkins/netcore-slack/slack006.png" alt="slack006"></p>
<ol>
<li>若是第一次使用 Jenkins，可使用首頁的 <code>create new jobs</code> 建立新 job</li>
<li>若已經有其他 job，可使用左上角的 <code>New Item</code> 建立新 job</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack007.png" alt="slack007"></p>
<ol>
<li>輸入 Job 名稱</li>
<li>選擇 <code>Freestyle project</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack008.png" alt="slack008"></p>
<ol>
<li>選擇 <code>Build</code></li>
<li>選擇 <code>Add build step</code></li>
<li>選擇 <code>Execute shell</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack009.png" alt="slack009"></p>
<p>切換到 <code>/var/code</code> 的單元測試目錄下，使用 <code>dotnet test</code> 執行單元測試。</p>
<blockquote>
<p>目前是在 Linux 下跑單元測試，也可彌補之前只在 macOS 跑單元測試，但 production 是 Linux 的缺憾</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack010.png" alt="slack010"></p>
<ol>
<li>選擇 <code>Build Now</code>，第一次執行 job</li>
<li>Jenkins 執行單元測試，得到 <code>藍燈</code></li>
</ol>
<h2 id="設定_Git">設定 Git</h2><hr>
<p>目前為止，Jenkins Job 已經設定好，但必須手動使用 <code>Build Now</code> 執行 Job，我們希望的是每次 Git commit，就會自動執行 Jenkins job，不用我們操心。</p>
<p><strong>新增 post-commit</strong><br><strong>post-commit</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line">curl http://localhost:<span class="number">8080</span>/job/NumberSeriveUnitTest/build</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"post commit trigger"</span></span><br></pre></td></tr></table></figure>
<p>到專案的 <code>.git/hooks</code>目錄下，新增 <code>post-commit</code>，讓每次 Git commit 時執行 Jenkins job。</p>
<p>Jenkins 的網址規則為 <code>/job/[Job名稱]/build</code>。</p>
<p>最後記得使用 <code>chmod +x post-commit</code> 讓 <code>post-commit</code> 有執行權限。</p>
<p><strong>建立新 Commit</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack011.png" alt="slack011"></p>
<ol>
<li>將 <code>false</code> 改成 <code>true</code></li>
<li>新增 commit</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack012.png" alt="slack012"></p>
<p>Jenkins 自動執行單元測試，得到 <code>紅燈</code>。</p>
<blockquote>
<p>這個 <code>紅燈</code> 是我們預期的，因為由 <code>false</code> 改成 <code>true</code>，單元測試一定會失敗</p>
</blockquote>
<h2 id="設定_Slack">設定 Slack</h2><hr>
<p>目前為止，每次 Git commit 都會自動執行 Jenkins 單元測試，唯每次都必須回到 Jenkins 才知道單元測試是否成功，若能將結果推送到 Slack，我們就能把 Slack 當成持續整合的訊息平台。</p>
<p><strong>新增 Channel</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack013.png" alt="slack013"></p>
<ol>
<li>按下 <code>Channels</code> 右側的 <code>+</code> 新增 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack014.png" alt="slack014"></p>
<ol>
<li><strong>Privacy</strong> : 設定為 <code>Public</code> 或 <code>Private</code> channel</li>
<li><strong>Name</strong> : 設定 channel 名稱</li>
<li><strong>Purpose</strong> : channel 的功能描述，可以不輸入</li>
<li><strong>Send invites to</strong> : 設定 channel 成員，可以稍後再設定</li>
<li>按 <code>Create Channel</code> 開始建立 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack015.png" alt="slack015"></p>
<ol>
<li>按 <code>Got It!</code> 進入 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack016.png" alt="slack016"></p>
<ol>
<li>正式進入 channel，將來 Jenkins 訊息會傳進此 channel</li>
</ol>
<p><strong>新增 Notification</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack017.png" alt="slack017"></p>
<ol>
<li>選擇右上方的 <code>option</code></li>
<li>選擇 <code>Add an app</code></li>
</ol>
<p><strong>新增 Jenkins App</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack018.png" alt="slack018"></p>
<p>Slack 將開啟瀏覽器</p>
<ol>
<li>稍微往下捲輸入 <code>Jenkins</code></li>
<li>選擇 <code>Jenkins CI</code></li>
</ol>
<p><strong>新增 Configuration</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack019.png" alt="slack019"></p>
<ol>
<li>按 <code>Add Configuration</code> 加入 Jenkins CI</li>
</ol>
<p><strong>新增 Integration</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack020.png" alt="slack020"></p>
<ol>
<li>按 <code>Add Bitbucket Integration</code> 正式加入整合 Jenkins</li>
</ol>
<p><strong>Slack 設定完成</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack021.png" alt="slack021"></p>
<ol>
<li>介紹 Jenkins 設定流程</li>
</ol>
<blockquote>
<p>Slack 部分已經設定完成，接下來是 Jenkins 的設定</p>
<p>Slack 網頁先不要關閉，稍後會用到</p>
</blockquote>
<h2 id="設定_Jenkins-1">設定 Jenkins</h2><hr>
<p><strong>Manage Jenkins</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack022.png" alt="slack022"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Manage Plugins</code></li>
</ol>
<p><strong>安裝 Slack Plugin</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack023.png" alt="slack023"></p>
<ol>
<li>選擇 <code>Avaliable</code> tab</li>
<li>選擇 <code>Slack Notification Plugin</code></li>
<li>按 <code>Download now and Install after restart</code></li>
</ol>
<p><strong>新增 Webhook</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack024.png" alt="slack024"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Configure System</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack025.png" alt="slack025"></p>
<p>在 <code>Global Slack Notifier Settings</code> 下設定</p>
<ol>
<li><strong>Base URL</strong> : 貼一段 Slack 所提供的 URL</li>
<li><strong>Integration Token</strong> : 貼一段 Slack 所提供的 token</li>
</ol>
<blockquote>
<p>Q : 要貼什麼 Base URL 與 token 呢 ?</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack026.png" alt="slack026"></p>
<p>回到 Slack 最後的網頁往下捲到 <code>Step 3</code></p>
<ol>
<li>將 <code>Base URL</code> 與 <code>Integration Token</code> 複製貼上</li>
</ol>
<p>最後按 <code>Save</code> 存檔。</p>
<p><strong>設定 Job</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack027.png" alt="slack027"></p>
<ol>
<li>選擇要發 Slack 通知的 job</li>
<li>按 <code>Configure</code> 設定</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack028.png" alt="slack028"></p>
<p>在 Jenkins 執行完 <code>build</code> 動作後，無論成功或失敗，將結果通知 Slack</p>
<ol>
<li>選擇 <code>Post-build Actions</code></li>
<li>選擇 <code>Add post-build action</code></li>
<li>選擇 <code>Slack Notification</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack029.png" alt="slack029"></p>
<p>選擇希望 Jenkins 通知 Slack 的動作 :</p>
<ol>
<li>選擇 <code>Notify Failure</code>、 <code>Notify Success</code> 與 <code>Notify Unstable</code></li>
</ol>
<blockquote>
<p>建議不用選擇太多 action，<code>success</code> 確認 Jenkins 還活著，<code>Failure</code> 與 <code>Unstable</code> 確認 CI 失敗即可</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack030.png" alt="slack030"></p>
<p>新增一個 Git commit，就可發現 Slack 收到 Jenkins 測試成功 <code>綠燈</code> 的訊息。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上若 Git repository 放在 GitHub 或 Bitbucket，則可將 Jenkins 放到雲端主機的 VM 上，大致上的流程與設定與本文類似</li>
<li>本文雖然只針對單元測試示範，但也適用於整合測試與驗收測試</li>
<li>將較耗時的整合測試與驗收測試交給 Jenkins 處理，在開發時只要針對單元測試即可，若 Slack 出現紅燈，再回來關注整合測試與驗收測試失敗的部分</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Jenkins 也可與 .NET Core 搭配實現持續整合]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
      <category term="Slack" scheme="http://oomusou.io/tags/Slack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立含有 .NET Core SDK 的 Jenkins Docker Image ?]]></title>
    <link href="http://oomusou.io/docker/jenkins-core/"/>
    <id>http://oomusou.io/docker/jenkins-core/</id>
    <published>2018-03-05T12:23:43.000Z</published>
    <updated>2018-03-03T02:03:07.328Z</updated>
    <content type="html"><![CDATA[<p>雖然 .NET Core SDK 與 Jenkins 都各自提供官方 Docker image，但實務上使用 Jenkins 做持續整合時，我們會從 Jenkins 將 Git repository clone 下來，然後跑 <code>dotnet test</code> 執行單元測試，但 <code>dotnet test</code> 需要 .NET Core SDK 環境才能執行，因此我們必須建立自己的 Dockerfile，產生包含 .NET Core SDK 的 Docker image。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.12.0-ce-mac55 (23011)<br>Jenkins 2.89.4<br>.NET Core SDK 2.1.4</p>
<h2 id="Dockerfile">Dockerfile</h2><hr>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> jenkins/jenkins:lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># Switch to root to install .NET Core SDK</span></span><br><span class="line"><span class="built_in">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show distro information!</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">uname <span class="operator">-a</span> &amp;&amp; cat /etc/*release</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Based on instructiions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span></span><br><span class="line"><span class="comment"># Install dependency for .NET Core 2</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y curl libunwind8 gettext apt-transport-https</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Based on instructions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span></span><br><span class="line"><span class="comment"># Install microsoft.qpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install the .NET Core framework</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">4</span></span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Switch back to the jenkins user.</span></span><br><span class="line"><span class="built_in">USER</span> jenkins</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>
<p>以 <code>jenkins/jenkins:lts</code> 作為 image 的基底。</p>
<p>第 3 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Switch to root to install .NET Core SDK</span></span><br><span class="line"><span class="built_in">USER</span> root</span><br></pre></td></tr></table></figure>
<p>因為即將使用 <code>apt-get</code> 安裝 package，所以直接切換到 <code>root</code> 帳號執行以下動作。</p>
<p>第 6 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show distro information!</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">uname <span class="operator">-a</span> &amp;&amp; cat /etc/*release</span></span><br></pre></td></tr></table></figure>
<p>顯示目前 image 的版本資訊。</p>
<blockquote>
<p>此段並非安裝 .NET Core SDK 所必須，但因為 Linux 的 ditribution 眾多，每個 <code>Dockerfile</code> 的寫法也會有所差異，因此這行可以幫助 <code>Dockerfile</code> 撰寫，尤其  <code>jenkins/jenkins:lts</code> 是用 Debian 9 所建立，因此 dependency 又與 Ubuntu 16.04 LTS  不太一樣</p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Based on instructiions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span></span><br><span class="line"><span class="comment"># Install dependency for .NET Core 2</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y curl libunwind8 gettext apt-transport-https</span></span><br></pre></td></tr></table></figure>
<p>由於 Jenkins image 是根據 Debian 9 所建立，根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Debian 9</a>，若要在 Debian 9 安裝 .NET Core，還必須安裝以下額外 package :</p>
<ul>
<li>curl</li>
<li>libunwind8</li>
<li>gettext</li>
<li>apt-transport-https</li>
</ul>
<p>14 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Based on instructions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span></span><br><span class="line"><span class="comment"># Install microsoft.qpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Debian 9</a> 所描述，要安裝 .NET Core SDK 前，必須先將 <code>microsoft.gpg</code> 裝好。</p>
<p>20 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the .NET Core framework</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">4</span></span></span><br></pre></td></tr></table></figure>
<p>所有的 dependency 與  <code>microsoft.gpg</code> 都裝好後，就可以正式安裝 .NET Core SDK 了。</p>
<p>24 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Switch back to the jenkins user.</span></span><br><span class="line"><span class="built_in">USER</span> jenkins</span><br></pre></td></tr></table></figure>
<p>由於剛剛是以 <code>root</code> 帳號安裝 .NET Core SDK，最後切回預設的 <code>jenkins</code> 帳號。</p>
<h2 id="建立_Image">建立 Image</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/JenkinsCore $ docker <span class="keyword">build </span>-t oomusou/jenkins-core .</span><br></pre></td></tr></table></figure>
<p>進入 <code>Dockerfile</code> 所在的目錄，使用 <code>docker build</code> 建立自己的 image。</p>
<ul>
<li><strong>-t</strong> : Docker image 的名稱</li>
<li><strong>.</strong> : 將目前目錄的 <code>Dockerfile</code> 建立成 image</li>
</ul>
<p><img src="/images/docker/jenkins-core/jenkins000.png" alt="jenkins000"></p>
<ol>
<li>輸入 <code>docker build -t oomusou/jenkins-core .</code> 將 <code>Dockerfile</code> 建立成 <code>oomusou/jenkins-core</code></li>
<li><code>uname -a &amp;&amp; cat /etc/*release</code> 顯示出為 <code>Debian</code> ，證明 Jenkins image 是由 Debian 建立</li>
</ol>
<h2 id="建立並執行_Container">建立並執行 Container</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkinsCore -p <span class="number">8080</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home oomusou/jenkins-core</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container 並執行之。</p>
<ul>
<li><strong>—name</strong> : 替 container 取一個人能夠識別的名字 <code>MyJenkinsCore</code> (若省略，Docker 將隨機命名，將來不易維護)</li>
<li><strong>-p</strong> : Docker 外部與 Jenkins 內部所對應的 port，其中左邊為外部 Docker 的 port，右邊為 Jenkins 內部的 port</li>
<li><strong>-v</strong> : 建立 <code>JENKINS_HOME</code> 環境變數，其目錄在 <code>/var/jenkins_home</code>，為 Jenkins 的工作目錄</li>
</ul>
<p><img src="/images/docker/jenkins-core/jenkins001.png" alt="jenkins001"></p>
<ol>
<li>輸入 <code>docker run …</code> 建立並執行 container</li>
</ol>
<h2 id="測試_-NET_Core_SDK">測試 .NET Core SDK</h2><p>–<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker exec -it <span class="constant">MyJenkinsCore </span>bash</span><br><span class="line">root<span class="variable">@xxx</span><span class="symbol">:/</span><span class="comment"># dotnet --version</span></span><br></pre></td></tr></table></figure></p>
<p>使用 <code>docker exec</code> 對已經執行中的 container 下指令。</p>
<ul>
<li><code>-i</code> :  <code>i</code>nteractive，可對 terminal 輸入資料</li>
<li><code>-t</code> : <code>t</code>erminal，可對 terminal 顯示資料</li>
<li><code>MyUbuntuCore</code> : Container 名稱</li>
<li><code>bash</code> : 對 container 下的指令</li>
</ul>
<p><img src="/images/docker/jenkins-core/jenkins002.png" alt="jenkins002"></p>
<ol>
<li>輸入 <code>docker exec -it</code> 進入 container 的 terminal</li>
<li>輸入 <code>dotnet —version</code> 確認 .NET Core SDK 已經安裝成功</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 Jenkins 是依照 Debian 9 所建立，因此所需要的 dependency 與 Ubuntu 稍有不同</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Debian 9</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Jenkins 包含 .NET Core 才能進行單元測試]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Ubuntu 安裝 .NET Core ?]]></title>
    <link href="http://oomusou.io/netcore/linux-install/"/>
    <id>http://oomusou.io/netcore/linux-install/</id>
    <published>2018-03-04T12:23:43.000Z</published>
    <updated>2018-03-02T14:22:16.987Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 為 Microsoft 的跨平台解決方案，只要裝上 .NET Core SDK，就可在 Linux 執行與開發 .NET Core App，本文以 Ubuntu 為例。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Parallel Desktop 13 for Mac 13.3.0 (43321)<br>Ubuntu 16.04<br>.NET Core SDK 2.1.4</p>
<h2 id="安裝_Dependency">安裝 Dependency</h2><hr>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">$ sudo apt-<span class="built_in">get</span> install curl</span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a>，若要在 Linux 安裝 .NET Core，在 Ubuntu 還必須安裝以下額外 package :</p>
<ul>
<li>libunwind8</li>
<li>liblttng-ust0</li>
<li>libcurl3</li>
<li>libssl1.0.0</li>
<li>libuuid1</li>
<li>libkrb5-3</li>
<li>zlib1g</li>
<li>libicu52 (for 14.X)</li>
<li>libicu55 (for 16.X)</li>
<li>libicu57 (for 17.X)</li>
</ul>
<p>這些 package 在 Ubuntu 其實都已經內建，所以不用特別安裝。</p>
<p>其中 <code>curl</code> 在並不算 .NET Core SDK 所需要的 package，但接下來要用 <code>curl</code> 安裝 <code>microsoft.qpg</code>，所以也需要特別安裝。 </p>
<p><img src="/images/netcore/linux-install/linux000.png" alt="linux000"></p>
<ol>
<li>輸入 <code>sudo apt-get update</code> 更新本機套件清單</li>
<li>輸入  <code>sudo apt-get install curl</code> 安裝 <code>curl</code></li>
</ol>
<h2 id="安裝_microsoft-qpg">安裝 microsoft.qpg</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl https:<span class="comment">//packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span></span><br><span class="line">$ sudo mv microsoft<span class="class">.gpg</span> /etc/apt/trusted<span class="class">.gpg</span><span class="class">.d</span>/microsoft<span class="class">.gpg</span></span><br><span class="line">$ sudo sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>curl</code> 下載 <code>microsoft.qpg</code> 並安裝之。</p>
<p>加入 Microsoft 套件庫位置。</p>
<p><img src="/images/netcore/linux-install/linux001.png" alt="linux001"></p>
<ol>
<li>輸入 <code>curl …</code> 下載 <code>microsoft.qpg</code> 到本機</li>
<li>將 <code>microsoft.qpg</code> 移到適當目錄</li>
<li>加入 Microsoft 套件庫位置</li>
</ol>
<h2 id="安裝_-NET_Core_SDK">安裝 .NET Core SDK</h2><hr>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get <span class="operator"><span class="keyword">install</span> apt-transport-https</span><br><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> -y <span class="keyword">dotnet</span>-sdk-<span class="number">2.1</span><span class="number">.4</span></span></span><br></pre></td></tr></table></figure>
<p>安裝 <code>apt-transport-https</code> 套件。</p>
<p>由於剛剛新加入了 Microsoft 自己的套件庫，所以需要在執行 <code>apt-get update</code> 更新一次。</p>
<p>正式安裝 .NET Core SDK 2.1.4。</p>
<p><img src="/images/netcore/linux-install/linux002.png" alt="linux002"></p>
<ol>
<li>輸入 <code>sudo apt-get install apt-transport-https</code> 安裝 <code>apt-transport-https</code> 套件</li>
<li>輸入 <code>sudo apt-get update</code> 更新本機套件清單</li>
<li>輸入 <code>sudo apt-get install -y dotnet-sdk-2.1.4</code> 安裝 .NET Core SDK </li>
</ol>
<h2 id="測試_-NET_Core_SDK">測試 .NET Core SDK</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">dotnet</span> <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<p>輸入 <code>dotnet —version</code> 確認 .NET Core SDK 已經安裝成功</p>
<p><img src="/images/netcore/linux-install/linux003.png" alt="linux003"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Linux 有分不同 distribution，在不同 distribution 安裝 .NET Core 的方法大同小異，詳細請參考 .NET Core 官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 16.04</a> ，自行選擇不同的 distribution</li>
<li>在 Linux 上也可以選擇自行下載 <code>tar.gz</code> 方式安裝，詳情請參考 <a href="https://www.microsoft.com/net/download/thank-you/dotnet-sdk-2.1.4-linux-x64-binaries" target="_blank" rel="external">.NET Core 2.1.4 SDK (Binaries for Linux x64)</a></li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a><br><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 16.04</a><br><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://www.microsoft.com/net/download/thank-you/dotnet-sdk-2.1.4-linux-x64-binaries" target="_blank" rel="external">.NET Core 2.1.4 SDK (Binaries for Linux x64)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[自行在 Linux 安裝 .NET Core]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立含有 .NET Core SDK 的 Docker Image ?]]></title>
    <link href="http://oomusou.io/docker/ubuntu-core/"/>
    <id>http://oomusou.io/docker/ubuntu-core/</id>
    <published>2018-03-03T12:23:43.000Z</published>
    <updated>2018-03-03T01:50:26.665Z</updated>
    <content type="html"><![CDATA[<p>雖然 Microsoft 官方提供 .NET Core 的 Docker image，但實務上建置環境時，可能先使用其他 server 的 image，然後再加裝 .NET Core SDK 環境，如此就需要自行建立 <code>Dockerfile</code>，並建立自己的 image。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.12.0-ce-mac55 (23011)<br>Ubuntu 16.04.3 LTS<br>.NET Core SDK 2.1.4</p>
<h2 id="Dockerfile">Dockerfile</h2><hr>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># Switch to root to install .NET Core SDK</span></span><br><span class="line"><span class="built_in">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show distro information!</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">uname <span class="operator">-a</span> &amp;&amp; cat /etc/*release</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Based on instructiions at https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x</span></span><br><span class="line"><span class="comment"># Install dependency for .NET Core 2</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y libunwind8 liblttng-ust0 libcurl3 libssl1.<span class="number">0.0</span> libuuid1 libkrb5-<span class="number">3</span> zlib1g libicu55 curl</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Based on instructions at https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current</span></span><br><span class="line"><span class="comment"># Install microsoft.qpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install the .Net Core framework</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get install apt-transport-https</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">4</span></span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> ubuntu</span><br></pre></td></tr></table></figure>
<p>以 <code>ubuntu</code> 這個 image 為基底建立 image。</p>
<blockquote>
<p>Q : 為什麼不用 <code>ubuntu:lts</code> 呢 ?</p>
<p>預設 <code>ubuntu</code> 即 <code>ubuntu:latest</code>，而 <code>ubuntu:latest</code> 指的就是 latest lts，所以已經是 LTS 版本</p>
</blockquote>
<p>第 3 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Switch to root to install .NET Core SDK</span></span><br><span class="line"><span class="built_in">USER</span> root</span><br></pre></td></tr></table></figure>
<p>因為即將使用 <code>apt-get</code> 安裝 package，所以直接切換到 <code>root</code> 帳號執行以下動作。</p>
<p>第 6 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show distro information!</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">uname <span class="operator">-a</span> &amp;&amp; cat /etc/*release</span></span><br></pre></td></tr></table></figure>
<p>顯示目前 image 的版本資訊。</p>
<blockquote>
<p>此段並非安裝 .NET Core SDK 所必須，但因為 Linux 的 ditribution 眾多，每個 <code>Dockerfile</code> 的寫法也會有所差異，因此這行可以幫助 <code>Dockerfile</code> 撰寫</p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Based on instructiions at https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x</span></span><br><span class="line"><span class="comment"># Install depency for .NET Core 2</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y libunwind8 liblttng-ust0 libcurl3 libssl1.<span class="number">0.0</span> libuuid1 libkrb5-<span class="number">3</span> zlib1g libicu55 curl</span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a>，若要在 Linux 安裝 .NET Core，在 Ubuntu 還必須安裝以下額外 package :</p>
<ul>
<li>libunwind8</li>
<li>liblttng-ust0</li>
<li>libcurl3</li>
<li>libssl1.0.0</li>
<li>libuuid1</li>
<li>libkrb5-3</li>
<li>zlib1g</li>
<li>libicu52 (for 14.X)</li>
<li>libicu55 (for 16.X)</li>
<li>libicu57 (for 17.X)</li>
</ul>
<p>其中 <code>curl</code> 在並不算 .NET Core SDK 所需要的 package，但接下來要用 <code>curl</code> 安裝 <code>microsoft.qpg</code>，所以也需要特別安裝。 </p>
<p>14 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Based on instructions at https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current</span></span><br><span class="line"><span class="comment"># Install microsoft.qpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 16.04</a> 所描述，要安裝 .NET Core SDK 前，必須先將 <code>microsoft.gpg</code> 裝好。</p>
<p>20 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the .Net Core framework</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get install apt-transport-https</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">4</span></span></span><br></pre></td></tr></table></figure>
<p>所有的 dependency 與  <code>microsoft.gpg</code> 都裝好後，就可以正式安裝 .NET Core SDK 了。</p>
<h2 id="建立_Image">建立 Image</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/UbuntuCore $ docker <span class="keyword">build </span>-t oomusou/ubuntu-core .</span><br></pre></td></tr></table></figure>
<p>進入 <code>Dockerfile</code> 所在的目錄，使用 <code>docker build</code> 建立自己的 image。</p>
<ul>
<li><strong>-t</strong> : Docker image 的名稱</li>
<li><strong>.</strong> : 將目前目錄的 <code>Dockerfile</code> 建立成 image</li>
</ul>
<p><img src="/images/docker/ubuntu-core/ubuntu002.png" alt="ubuntu002"></p>
<ol>
<li>輸入 <code>docker build -t oomusou/ubuntu-core .</code> 將 <code>Dockerfile</code> 建立成 <code>oomusou/ubuntu-core</code></li>
<li><code>uname -a &amp;&amp; cat /etc/*release</code> 顯示出 Linux 資訊</li>
</ol>
<h2 id="建立並執行_Container">建立並執行 Container</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="command">run</span> <span class="comment">--name MyUbuntuCore -dt oomusou/ubuntu-core</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container 並執行之。</p>
<ul>
<li><code>--name</code> : 替 container 取一個人能夠識別的名字 ( 若省略，Docker 將隨機命名 )</li>
<li><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process</li>
<li><code>-t</code> : <code>t</code>erminal，預設執行 <code>/bin/bash</code> process，為了讓 container 啟動後不會立即停止</li>
<li><code>oomusou/ubuntu-core</code> : 剛剛自己建立的 image</li>
</ul>
<p><img src="/images/docker/ubuntu-core/ubuntu000.png" alt="ubuntu000"></p>
<h2 id="測試_-NET_Core_SDK">測試 .NET Core SDK</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker exec -it <span class="constant">MyUbuntuCore </span>bash</span><br><span class="line">root<span class="variable">@xxx</span><span class="symbol">:/</span><span class="comment"># dotnet --version</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker exec</code> 對已經執行中的 container 下指令。</p>
<ul>
<li><code>-i</code> :  <code>i</code>nteractive，可對 terminal 輸入資料</li>
<li><code>-t</code> : <code>t</code>erminal，可對 terminal 顯示資料</li>
<li><code>MyUbuntuCore</code> : Container 名稱</li>
<li><code>bash</code> : 對 container 下的指令</li>
</ul>
<p><img src="/images/docker/ubuntu-core/ubuntu001.png" alt="ubuntu001"></p>
<ol>
<li>輸入 <code>docker exec -it</code> 進入 container 的 terminal</li>
<li>輸入 <code>dotnet —version</code> 確認 .NET Core SDK 已經安裝成功</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>如使用 Jenkins 對 .NET Core 進行持續整合，實務上會把專案 <code>git clone</code> 到 Jenkins 端執行單元測試，此時執行 <code>dotnet test</code> 就必須有 .NET Core SDK 環境，但我們不會使用 .NET Core 的 Docker image，而會使用 Jenkins 所提供的 image，此時就必須自己寫 <code>Dockerfile</code>，並將 .NET Core SDK 環境安裝在 Jenkins 上。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a><br><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 16.04</a></p>
]]></content>
    <summary type="html">
    <![CDATA[由 Dockerfile 安裝 .NET Core SDK]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何為 Slack 設定 Bitbucket 通知 ?]]></title>
    <link href="http://oomusou.io/slack/bibucket/"/>
    <id>http://oomusou.io/slack/bibucket/</id>
    <published>2018-03-02T12:23:43.000Z</published>
    <updated>2018-03-03T14:55:00.923Z</updated>
    <content type="html"><![CDATA[<p>當對 Bitbucket 有任何動作時，我們希望在 Slack 的 channel 能收到通知，如此可避免所有訊息都透過 Email，只有真正與人相關的訊息才使用 Email，讓 Slack 成為持續整合的訊息中心。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Slack 3.0.5</p>
<h2 id="設定_Slack">設定 Slack</h2><hr>
<h3 id="新增_Channel">新增 Channel</h3><p><img src="/images/slack/bitbucket/bitbucket000.png" alt="bitbucket000"></p>
<ol>
<li>按下 <code>Channels</code> 右側的 <code>+</code> 新增 channel</li>
</ol>
<p><img src="/images/slack/bitbucket/bitbucket001.png" alt="bitbucket001"></p>
<ol>
<li><strong>Privacy</strong> : 設定為 <code>Public</code> 或 <code>Private</code> channel</li>
<li><strong>Name</strong> : 設定 channel 名稱</li>
<li><strong>Purpose</strong> : channel 的功能描述，可以不輸入</li>
<li><strong>Send invites to</strong> : 設定 channel 成員，可以稍後再設定</li>
<li>按 <code>Create Channel</code> 開始建立 channel</li>
</ol>
<h3 id="設定_Notification">設定 Notification</h3><p><img src="/images/slack/bitbucket/bitbucket002.png" alt="bitbucket002"></p>
<ol>
<li>選擇欲設定的 channel</li>
<li>選擇右上方的 <code>option</code></li>
<li>選擇 <code>Add an app</code></li>
</ol>
<h3 id="加入_Bitbucket_App">加入 Bitbucket App</h3><p><img src="/images/slack/bitbucket/bitbucket003.png" alt="bitbucket003"></p>
<p>Slack 將開啟瀏覽器</p>
<ol>
<li>稍微往下捲輸入 <code>Bitbucket</code></li>
<li>選擇 <code>Bitbucket</code></li>
</ol>
<h3 id="新增_Configuration">新增 Configuration</h3><p><img src="/images/slack/bitbucket/bitbucket004.png" alt="bitbucket004"></p>
<ol>
<li>按 <code>Add Configuration</code> 加入 Bitbucket</li>
</ol>
<h3 id="新增_Integration">新增 Integration</h3><p><img src="/images/slack/bitbucket/bitbucket005.png" alt="bitbucket005"></p>
<ol>
<li>按 <code>Add Bitbucket Integration</code> 正式加入整合 Bitbucket</li>
</ol>
<h3 id="Slack_設定完成">Slack 設定完成</h3><p><img src="/images/slack/bitbucket/bitbucket006.png" alt="bitbucket006"></p>
<ol>
<li>介紹 Bitbucket 設定流程</li>
</ol>
<blockquote>
<p>Slack 部分已經設定完成，接下來是 Bitbucket 的設定</p>
<p>Slack 網頁先不要關閉，稍後會用到</p>
</blockquote>
<h2 id="設定_Bitbucket">設定 Bitbucket</h2><hr>
<h3 id="新增_Webhooks">新增 Webhooks</h3><p><img src="/images/slack/bitbucket/bitbucket007.png" alt="bitbucket007"></p>
<ol>
<li>到 Bitbucket 選擇你要設定的 repository</li>
<li>選擇 <code>Settings</code></li>
<li>選擇 <code>Webhooks</code></li>
<li>按下 <code>Add webhook</code></li>
</ol>
<p><img src="/images/slack/bitbucket/bitbucket008.png" alt="bitbucket008"></p>
<ol>
<li><strong>Title</strong> : 依需求設定</li>
<li><strong>URL</strong> : 貼一段 Slack 所提供的 URL，至於要貼什麼呢 ? 稍後會介紹</li>
<li><strong>Triggers</strong> : 設定什麼 Bitbucket 動作要通知 Slack，預設是 <code>Push</code>，但也可以設定的更細</li>
<li>按 <code>Save</code> 儲存設定</li>
</ol>
<p><img src="/images/slack/bitbucket/bitbucket009.png" alt="bitbucket009"></p>
<blockquote>
<p>Q : <strong>URL</strong> 要設定什麼呢 ?</p>
</blockquote>
<ol>
<li>回到 Slack 最後的網頁往下捲到 <code>Step 2</code></li>
<li>將 <code>http:/hooks.slack.com……</code> 的 URL 複製下來，貼到 Bitbucket 的 <code>URL</code> 欄位</li>
</ol>
<p><img src="/images/slack/bitbucket/bitbucket010.png" alt="bitbucket010"></p>
<ol>
<li>儲存後會看到剛剛新增的 webhook 已經出現</li>
</ol>
<h2 id="Slack">Slack</h2><hr>
<p><img src="/images/slack/bitbucket/bitbucket011.png" alt="bitbucket011"></p>
<p>回到 Slack，當任何 <code>push</code> 到 GitBucket 時，channel 都會收到通知。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Slack 提供了一個不錯的 CI 訊息平台，讓訊息從 Email 解放</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓 Slack 成為 CI 的訊息中心]]>
    
    </summary>
    
      <category term="Bitbucket" scheme="http://oomusou.io/tags/Bitbucket/"/>
    
      <category term="Slack" scheme="http://oomusou.io/tags/Slack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[F# 的特色與歷史簡介]]></title>
    <link href="http://oomusou.io/fsharp/intro/"/>
    <id>http://oomusou.io/fsharp/intro/</id>
    <published>2018-03-01T12:23:43.000Z</published>
    <updated>2018-03-10T04:43:04.387Z</updated>
    <content type="html"><![CDATA[<p>F# 並不是一個新語言，早在 2005 年就已經發行 1.0，隨著 .NET Core 的跨平台，也將 F# 帶進了 .NET Core，既然在 .NET Core 我們已經有了 C#，為什麼要關注 F# 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core 2.1.4<br>F# 4.1</p>
<h2 id="FSharp_的歷史">FSharp 的歷史</h2><hr>
<p>F# 並不像 C-style 語言，反而比較像 Python，事實上 F# 是從 ML、OCaml、Python、Haskell、Scala、Erlang … 等語言獲得靈感，除了 Python  大家較為熟悉外，剩下的都是 Functional Programming Language，由此可見 F# 的 F 就是 <code>F</code>untional，所以 F# 號稱是 function first language，也就是 F# 雖然也支援 OOP，但 FP 是其主要特色。</p>
<p>個人大概在 2010 年曾經接觸過 F#，當初的感覺 F# 是個 <code>外星語言</code>，很難體會 F# 的優點在哪裡，學沒多久就放棄了，但經過這幾年 Laravel Collection、JavaScript 、Linq 、Rx.js 與 AWS Lambda 的轟炸，越來越覺得 FP 的可愛，OOP 也能藉由 FP 手法，產生出現更優雅的實作方式。</p>
<p>這幾年一直想尋找一個 FP 語言來練習，期間摸過 Elixir 、Scala、Clojure，但成效一直有限，一直到最近複習 F#，才發現 F# 是一個很簡單的 FP 語言，以前看不懂的地方，瞬間都看懂了，只是當年還無法欣賞 F#。</p>
<h2 id="Functional_Programming_定義">Functional Programming 定義</h2><hr>
<p>一個語言要能實現 FP，必須有 4 個條件：</p>
<ul>
<li>能將 function 指定為變數</li>
<li>能將 function 存到 collection 內</li>
<li>能將 function 以參數型式傳入 function</li>
<li>能在 function 回傳 function</li>
</ul>
<p>簡單來說，function 要能如一般變數與 object 一樣使用。</p>
<p><code>能將 function 以參數型式傳入 function</code> 導致了 Higher Order Function 的觀念出現，如 Rx.js 一堆 operator，就是 Higher Order Function。</p>
<p><code>能在 function 回傳 function</code> 則導致了 Pipeline、Compose 與 Currying 的觀念出現。</p>
<p>一般 OOP 語言都會某種程度的支援 FP，如 Higher Order Function 在 C#、JavaScript、PHP … 都可以實現。</p>
<p>但 Pipeline、Compose 與 Currying 在一般 OOP 語言則沒有，或者要另外安裝其他 package 才能實現，但這些觀念在 F# 都是原生支援。</p>
<h2 id="User_Story">User Story</h2><hr>
<p>我們想將陣列 <code>1, 2, 3, 4, 5</code> 的資料中，將所 <code>奇數</code> 平方再加 <code>1</code>。</p>
<h2 id="Task">Task</h2><hr>
<p>根據 JavaScript、Linq 、Rx.js 的經驗，我們不再使用迴圈，而會使用 Higher Order Function 來解決問題。</p>
<h2 id="Higher_Order_Function">Higher Order Function</h2><hr>
<p><strong>Program.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> numbers = [<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isOdd x = x % <span class="number">2</span> &lt;&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> square x = x * x</span><br><span class="line">    <span class="keyword">let</span> addOne x = x + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> func values =</span><br><span class="line">        <span class="keyword">let</span> odds = List.filter isOdd values</span><br><span class="line">        <span class="keyword">let</span> squares = List.map square odds</span><br><span class="line">        <span class="keyword">let</span> result = List.map addOne squares</span><br><span class="line">        result</span><br><span class="line">        </span><br><span class="line">    printfn <span class="string">"%A"</span> (func numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> odds = List.<span class="built_in">filter</span> isOdd <span class="built_in">values</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>List.filter</code> 先找出所有 <code>奇數</code> 。</p>
<ul>
<li><code>isOdd</code> : 傳入 <code>判斷奇數</code> 的 function</li>
<li><code>values</code> : 傳入欲處理資料</li>
<li><code>odds</code> : 回傳所有 <code>奇數</code> </li>
</ul>
<p>第 7 行</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let isOdd x = x % <span class="number">2</span> &lt;&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>定義 <code>isOdd</code>，當 <code>% 2</code> 餘數不為 <code>0</code> 時為 <code>奇數</code> 。</p>
<blockquote>
<p>在 F#，因為已經將 function 視為一般變數，所以無論是 value 或 function，都統一使用 <code>let</code></p>
</blockquote>
<p>13 行</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squares = <span class="built_in">List</span><span class="built_in">.</span><span class="built_in">map</span> square odds</span><br></pre></td></tr></table></figure>
<p>既然已經找出所有 <code>奇數</code>，接下來就是使用 <code>List.map</code> 計算 <code>平方</code>。</p>
<ul>
<li><code>square</code> : 傳入 <code>計算平方</code> 的 function</li>
<li><code>odds</code> : 傳入所有<code>奇數</code></li>
<li><code>squares</code> : 回傳所有 <code>平方</code></li>
</ul>
<p>第 8 行</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">square</span> x = x <span class="built_in">*</span> x</span><br></pre></td></tr></table></figure>
<p>定義 <code>square</code>，計算平方。</p>
<p>14 行</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="literal">result</span> = <span class="type">List</span>.map addOne squares</span><br></pre></td></tr></table></figure>
<p>既然已經計算出所有 <code>奇數的平方</code>，接下來就是使用 <code>List.map</code> 計算 <code>+1</code>。</p>
<ul>
<li><code>square</code> : 傳入 <code>計算+1</code> 的 function</li>
<li><code>odds</code> : 傳入所有<code>奇數的平方</code></li>
<li><code>squares</code> : 回傳所有 <code>平方+1</code></li>
</ul>
<p>第 9 行</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">let</span> <span class="keyword">addOne </span>x = x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>定義 <code>addOne</code>，計算 <code>+1</code>。</p>
<p>15 行</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">result</span></span><br></pre></td></tr></table></figure>
<p>要回傳的變數， F# 不用寫 <code>return</code>。</p>
<blockquote>
<p>相對於 C-style 語言，我們發現 F# 有幾個特色</p>
<ol>
<li>沒有 <code>{}</code>，完全用縮排表示，類似 Python</li>
<li>Function 傳入參數不需 <code>()</code>，只需空白隔開即可</li>
<li>變數與 function 統一使用 <code>let</code></li>
<li>回傳值不需要 <code>return</code></li>
</ol>
<p>這些只是語法的差異，只要習慣即可，不過平心而論，C-style 語言寫久，會發現 code 都一堆 <code>()</code> <code>{}</code> 與 <code>return</code> 都是贅字，F# 這種 coding style 乾淨很多</p>
</blockquote>
<h2 id="Pipeline_與_Currying">Pipeline 與 Currying</h2><hr>
<p>由於 <code>List.filter</code>、<code>List.map</code> 與 <code>List.map</code> 是依序處理，因此我們要不斷定義中繼變數 : <code>odds</code> 與 <code>squares</code> 傳入，事實上這些也是多餘的，若能省略則更好，這就是 Pipeline。</p>
<p><strong>Program.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> numbers = [<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isOdd x = x % <span class="number">2</span> &lt;&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> square x = x * x</span><br><span class="line">    <span class="keyword">let</span> addOne x = x + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> func values =</span><br><span class="line">        values </span><br><span class="line">        |&gt; List.filter isOdd</span><br><span class="line">        |&gt; List.map square</span><br><span class="line">        |&gt; List.map addOne</span><br><span class="line">        </span><br><span class="line">    printfn <span class="string">"%A"</span> (func numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">values </span><br><span class="line">|&gt; <span class="built_in">List</span><span class="built_in">.</span>filter isOdd</span><br><span class="line">|&gt; <span class="built_in">List</span><span class="built_in">.</span><span class="built_in">map</span> square</span><br><span class="line">|&gt; <span class="built_in">List</span><span class="built_in">.</span><span class="built_in">map</span> addOne</span><br></pre></td></tr></table></figure>
<p><code>|&gt;</code> 為 F# 的 Pipeline 符號，表示將 function 的 output 作為下一個 function 的 input。</p>
<p>因此我們可以透過 <code>|&gt;</code> 表示先執行 <code>List.flter</code>，然後再將結果傳入 <code>List.map</code>，最後再將結果傳入 <code>List.map</code>，這樣可以很清楚的表示流程，語意比 imperative 寫法更清楚。</p>
<blockquote>
<p> Q : 可以明明 <code>List.map</code> 與 <code>List.filter</code> 是 2 個參數，第 1 個參數是 function，第 2 個參數是 value，但為什麼 value 都不用傳呢 ?</p>
</blockquote>
<p>當 function 參數沒有傳完全時，F# 將回傳一個新的 function，新的 function 只要傳入剩下的參數即可，這稱為 Currying。</p>
<p>當 <code>List.filter isOdd</code> 只傳入 1 個參數時，由於參數沒有傳完整，將回傳一個新的  function，然後 <code>|&gt;</code> 再將 <code>values</code> 傳入新的 function，如此 <code>List.filter</code> 才算完整，才能回傳 <code>所有奇數</code>，最後再將 <code>所有奇數</code>透過 <code>|&gt;</code> 傳給下一個 <code>List.map</code>，剩下以此類推。</p>
<h2 id="Compose">Compose</h2><hr>
<p>Pipeline 雖然已經夠清楚，但 pipeline 基本上仍然是回傳 value，若我們能將所有 function 先組合好，最後統一透過一個 function 執行，那就更好了，這就是 Compose。</p>
<p><strong>Program.fs</strong><br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> numbers = [<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isOdd x = x % <span class="number">2</span> &lt;&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> square x = x * x</span><br><span class="line">    <span class="keyword">let</span> addOne x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> sqaureAddOne = square &gt;&gt; addOne</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> func = List.filter isOdd &gt;&gt; List.map sqaureAddOne</span><br><span class="line">    </span><br><span class="line">    printfn <span class="string">"%A"</span> (func numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>12 行</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="built_in">List</span><span class="built_in">.</span>filter isOdd &gt;&gt; <span class="built_in">List</span><span class="built_in">.</span><span class="built_in">map</span> sqaureAddOne</span><br></pre></td></tr></table></figure>
<p><code>&gt;&gt;</code> 為 F# 的 compose 符號，專門負責組合 function。</p>
<p>因為連續兩個 <code>List.map</code>，因此我們先將 square 與 addOne 組合成新的 <code>sqaureAddOne</code> function，再交給 <code>List.map</code> 執行。</p>
<p>由於是先執行 <code>List.fiter</code> ，再執行 <code>List.map</code>，因此使用 <code>List.filter &gt;&gt; List.map</code>。</p>
<p><code>&gt;&gt;</code> 不只代表 compose，也代表執行方向，所以也有 <code>&lt;&lt;</code>。</p>
<h2 id="Q&amp;A">Q&amp;A</h2><hr>
<blockquote>
<p>Q : 學 F# 目前能做什麼 ?</p>
</blockquote>
<ol>
<li>F# 可跑在 .NET Core，所以能用 F# 寫 ASP.NET MVC、ASP.NET Web API、UWP 與 Console App</li>
<li>F# 可用來寫 Azure Function</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文簡單的展示 F# 最關鍵的 Pipeline、Currying 與 Compose，這些都是 OOP 語言很難見到的強悍功能，透過 F# 的簡單實作，讓我們在練習 FP 時更加方便</li>
<li><p>F# 並不是要取代 C#，事實上在 .NET Core，C# 仍是必學的語言，只是透過學習 F#，能訓練自己 FP 的思維，進而用在 C# 與 TypeScript 上</p>
</li>
<li><p>若語言間的 paradigm 相同，只是 syntax 不同，則沒有學習新語言的必要；但若透過更好的 syntax，讓你學到不同的 paradigm，這就有意義了，這就是學習 F# 的原因</p>
</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/MyFirstFSharp" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/" target="_blank" rel="external">F#</a>, <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tour" target="_blank" rel="external">Tour of F#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[千年傳統，全新感受]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 Jenkins ?]]></title>
    <link href="http://oomusou.io/docker/jenkins/"/>
    <id>http://oomusou.io/docker/jenkins/</id>
    <published>2018-02-28T12:23:43.000Z</published>
    <updated>2018-02-26T10:25:35.310Z</updated>
    <content type="html"><![CDATA[<p>若要在 macOS 執行 Jenkins，由於 Jenkins 是由 Java 開發，當然可以直接在 macOS 安裝原生的 Jenkins，若是測試與學習的角度，更好的選擇就是安裝 Docker 版的 Jenkins，若要移除 Jenkins，直接刪除 Docker 的 container 與 image 即可，不會污染到 macOS 環境。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>Jenkins 2.89.4</p>
<h2 id="下載_Jenkins_Image">下載 Jenkins Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker pull jenkins/<span class="symbol">jenkins:</span>lts</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker pull</code> 下載 image 到本機。</p>
<blockquote>
<p>lts : 表示 Long time support 版本，通常較為穩定</p>
</blockquote>
<p><img src="/images/docker/jenkins/docker000.png" alt="docker000"></p>
<h2 id="建立_Container">建立 Container</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkins -p <span class="number">8080</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container 並執行之。</p>
<ul>
<li><strong>—name</strong> : 替 container 取一個人能夠識別的名字 <code>MyJenkins</code> (若省略，Docker 將隨機命名，將來不易維護)</li>
<li><strong>-p</strong> : Docker 外部與 Jenkins 內部所對應的 port，其中左邊為外部 Docker 的 port，右邊為 Jenkins 內部的 port</li>
<li><strong>-v</strong> : 建立 <code>JENKINS_HOME</code> 環境變數，其目錄在 <code>/var/jenkins_home</code>，為 Jenkins 的工作目錄</li>
</ul>
<p><img src="/images/docker/jenkins/docker001.png" alt="docker001"></p>
<ol>
<li><code>docker run</code> 除了建立 container 外，還會順便執行 container。</li>
</ol>
<h2 id="Unlock_Jenkins">Unlock Jenkins</h2><hr>
<p><img src="/images/docker/jenkins/docker002.png" alt="docker002"></p>
<p>Jenkins 一旦啟動後，就必須在 browser 設定 Jenkins，安裝 plugin。</p>
<p>一開始會要求輸入 Administrator password，並提示預設密碼已經寫在 <code>/var/jenkins_home/secrets/initialAdminPassword</code>。</p>
<p>由於我們現在是使用 Docker，因此該目錄是在 container 內，而不是在 host，因此要進入 container 內讀出 <code>initialAdminPassword</code> 。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>exec -it <span class="constant">MyJenkins </span>bash</span><br><span class="line">jenkins<span class="variable">@54ceef740712</span><span class="symbol">:/</span><span class="variable">$ </span>cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
<p>先進入 Jenkins 的 terminal，再將密碼 <code>cat</code> 出來。</p>
<p><img src="/images/docker/jenkins/docker009.png" alt="docker009"></p>
<ol>
<li>輸入 <code>exec it MyJenkins bash</code> 進入 Jenkins terminal</li>
<li>輸入 <code>cat /var/jenkins_home/secrets/initialAdminPassword</code> 顯示密碼</li>
</ol>
<h2 id="Customize_Jenkins">Customize Jenkins</h2><hr>
<p><img src="/images/docker/jenkins/docker010.png" alt="docker010"></p>
<p>選擇 <code>Install suggested plugins</code> 安裝預設 plugin。</p>
<h2 id="Getting_Started">Getting Started</h2><hr>
<p><img src="/images/docker/jenkins/docker011.png" alt="docker011"></p>
<p>需要一些時間安裝 plugin。</p>
<h2 id="Create_Admin_User">Create Admin User</h2><hr>
<p><img src="/images/docker/jenkins/docker012.png" alt="docker012"></p>
<p>建立管理者密碼，按 <code>Save and Finish</code> 繼續。</p>
<h2 id="Start_Using_Jenkins">Start Using Jenkins</h2><hr>
<p><img src="/images/docker/jenkins/docker013.png" alt="docker013"></p>
<p>按 <code>Start using Jenkins</code> 結束 <code>Jenkins</code> 設定。</p>
<h2 id="Welcome_to_Jenkins">Welcome to Jenkins</h2><hr>
<p><img src="/images/docker/jenkins/docker014.png" alt="docker014"></p>
<p>熟悉的 Jenkins 設定介面已經呈現，Jenkins 到此算安裝完成。</p>
<h2 id="將_Container_儲存成_Image">將 Container 儲存成 Image</h2><hr>
<p>目前為止 Jenkins 已經設定好，也安裝了預設 plugin，所以在 container 內的 <code>/var/jenkins_home</code> 已經有不少資料，我們將以目前 container 儲存成 image，將來若 Jenkins container 被我們玩壞了，可以直接再以此 image 建立全新 container，或者將新的 image 匯出成 <code>tar</code>，可將此 <code>tar</code> 加以備份，或者將 <code>tar</code> 檔交給其他人匯入成 image。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker commit <span class="constant">MyJenkins </span>oomusou/jenkins</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker commit</code> 將 container 儲存成自己的 image。</p>
<p><img src="/images/docker/jenkins/docker015.png" alt="docker015"></p>
<ol>
<li>輸入 <code>docker commit MyJenkins oomusou/jenkins</code> 將 <code>MyJenkins</code> container 儲存成 <code>oomusou/jenkins</code> image</li>
<li>輸入 <code>docker images</code> 可以看到 <code>oomusou/jenkins</code> 已經新增</li>
</ol>
<h2 id="將_Image_匯出成_Tar">將 Image 匯出成 Tar</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker save -o MyJenkins<span class="class">.tar</span> oomusou/jenkins</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker save</code> 將 image 匯出成 <code>tar</code> 檔。</p>
<ul>
<li><strong>-o</strong> : 指定匯出 <code>tar</code>檔的檔名</li>
</ul>
<p><img src="/images/docker/jenkins/docker016.png" alt="docker016"></p>
<ol>
<li>輸入 <code>docker save -o MyJenkins.tar oomusou/jenkins</code> 將 <code>oomusou/jenkins</code> image 匯出成 <code>MyJenkins.tar</code></li>
<li>硬碟已經產生 <code>MyJenkins.tar</code></li>
</ol>
<h2 id="從_Tar_匯入成_Image">從 Tar 匯入成 Image</h2><hr>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="operator"><span class="keyword">load</span> -<span class="keyword">i</span> MyJenkins.tar</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker load</code> 將 <code>tar</code> 檔匯入成 image。</p>
<ul>
<li><strong>-i</strong> : 指定匯入 <code>tar</code>檔的檔名</li>
</ul>
<p><img src="/images/docker/jenkins/docker017.png" alt="docker017"></p>
<ol>
<li>輸入 <code>docker load -i MyJenkins.tar</code> 將 <code>MyJenkins.tar</code> 匯入成 <code>oomusou/jenkins</code> image</li>
</ol>
<h2 id="建立新的_Container">建立新的 Container</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkins -p <span class="number">8080</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home oomusou/jenkins</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container 並執行之。</p>
<p><img src="/images/docker/jenkins/docker018.png" alt="docker018"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>若使用 Jenkins Docker，則整個過程分成 Docker 操作與 Jenkins 設定部分</li>
<li>可將最後設定好的 Jenkins 儲存成 image 與 <code>tar</code>，可將 <code>tar</code> 加以備份或傳給其他人</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[直接以 Docker 使用 Jenkins]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
  </entry>
  
</feed>
