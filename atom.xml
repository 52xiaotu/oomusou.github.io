<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2017-07-12T16:45:42.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何在 Visual Studio Code 執行 Wallaby 單元測試?]]></title>
    <link href="http://oomusou.io/vscode/vscode-wallaby/"/>
    <id>http://oomusou.io/vscode/vscode-wallaby/</id>
    <published>2017-07-13T12:23:43.000Z</published>
    <updated>2017-07-12T16:45:42.000Z</updated>
    <content type="html"><![CDATA[<p>很羨慕 Visual Studio 有 Alive 可以即時跑單元測試嗎？只要安裝了 Wallaby，在 Visual Studio Code 也可以如 Alive 一樣為 Angular 即時跑 TypeScript 與 Jasmine 單元測試。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Wallaby 1.0.52</p>
<h2 id="安裝_Wallaby">安裝 Wallaby</h2><hr>
<p><img src="/images/vscode/vscode-wallaby/vscode000.png" alt="vscode000"></p>
<ol>
<li>按左側 <code>Extension</code> 按鈕。</li>
<li>搜尋 <code>Wallaby</code>。</li>
<li>安裝 <code>Wallaby.js</code>。</li>
</ol>
<p><img src="/images/vscode/vscode-wallaby/vscode001.png" alt="vscode001"></p>
<p>Visual Studio Code 關閉重新啟動後，會開始下載 <code>Wallaby.js core</code>。</p>
<h2 id="設定_Angular_CLI">設定 Angular CLI</h2><hr>
<h3 id="新增_wallaby-js">新增 wallaby.js</h3><p><strong>wallaby.js</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wallabyWebpack = <span class="built_in">require</span>(<span class="string">'wallaby-webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compilerOptions = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./tsconfig.json'</span>).compilerOptions,</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./src/tsconfig.spec.json'</span>).compilerOptions);</span><br><span class="line"></span><br><span class="line"><span class="module"><span class="keyword">module</span>.exports = function (wallaby) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> webpackPostprocessor = wallabyWebpack(&#123;</span><br><span class="line">    entryPatterns: [</span><br><span class="line">      <span class="string">'src/wallabyTest.js'</span>,</span><br><span class="line">      <span class="string">'src/**/*spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="module"><span class="keyword">module</span>: </span>&#123;</span><br><span class="line">      loaders: [</span><br><span class="line">        &#123;test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'raw-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.html$/</span>, loader: <span class="string">'raw-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.ts$/</span>, loader: <span class="string">'@ngtools/webpack'</span>, include: <span class="regexp">/node_modules/</span>, query: &#123;tsConfigPath: <span class="string">'tsconfig.json'</span>&#125;&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.js$/</span>, loader: <span class="string">'angular2-template-loader'</span>, exclude: <span class="regexp">/node_modules/</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.json$/</span>, loader: <span class="string">'json-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.styl$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'stylus-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.less$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'less-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.scss$|\.sass$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'sass-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.(jpg|png)$/</span>, loader: <span class="string">'url-loader?limit=128000'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">      extensions: [<span class="string">'.js'</span>, <span class="string">'.ts'</span>],</span><br><span class="line">      modules: [</span><br><span class="line">        path.join(wallaby.projectCacheDir, <span class="string">'src/app'</span>),</span><br><span class="line">        path.join(wallaby.projectCacheDir, <span class="string">'src'</span>)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.ts'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.d.ts'</span>, ignore: <span class="literal">true</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.css'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.less'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.scss'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.sass'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.styl'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.html'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.json'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*spec.ts'</span>, ignore: <span class="literal">true</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*spec.ts'</span>, load: <span class="literal">false</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    testFramework: <span class="string">'jasmine'</span>,</span><br><span class="line"></span><br><span class="line">    compilers: &#123;</span><br><span class="line">      <span class="string">'**/*.ts'</span>: wallaby.compilers.typeScript(compilerOptions)</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    middleware: <span class="function"><span class="keyword">function</span> (<span class="params">app, express</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">      app.use(<span class="string">'/favicon.ico'</span>, express.static(path.join(__dirname, <span class="string">'src/favicon.ico'</span>)));</span><br><span class="line">      app.use(<span class="string">'/assets'</span>, express.static(path.join(__dirname, <span class="string">'src/assets'</span>)));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    env: &#123;</span><br><span class="line">      kind: <span class="string">'electron'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    postprocessor: webpackPostprocessor,</span><br><span class="line"></span><br><span class="line">    setup: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">window</span>.__moduleBundler.loadTests();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在專案的根目錄下新增 <code>wallaby.js</code>。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode002.png" alt="vscode002"></p>
<blockquote>
<p>注意 <code>wallaby.js</code> 為 JavaScript 檔，不是 TypeScript 檔。</p>
</blockquote>
<h3 id="新增_src/wallabyTest-ts">新增 src/wallabyTest.ts</h3><p><strong>src/wallabyTest.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./polyfills'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/long-stack-trace-zone'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/proxy.js'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/sync-test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/jasmine-patch'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/async-test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/fake-async-test'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserDynamicTestingModule,</span><br><span class="line">  platformBrowserDynamicTesting</span><br><span class="line">&#125; from <span class="string">'@angular/platform-browser-dynamic/testing'</span>;</span><br><span class="line"></span><br><span class="line">getTestBed().initTestEnvironment(</span><br><span class="line">  BrowserDynamicTestingModule,</span><br><span class="line">  platformBrowserDynamicTesting()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在 <code>src</code> 目錄下新增 <code>wallabyTest.ts</code>。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode003.png" alt="vscode003"></p>
<blockquote>
<p>注意 <code>wallabyTest.ts</code> 為 TypeScript 檔，不是 JavaScript 檔。</p>
</blockquote>
<h3 id="src/tsconfig-app-json">src/tsconfig.app.json</h3><p><strong>src/tsconfig.app.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">extends</span>": <span class="value"><span class="string">"../tsconfig.json"</span></span>,</span><br><span class="line">  "<span class="attribute">compilerOptions</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">outDir</span>": <span class="value"><span class="string">"../out-tsc/app"</span></span>,</span><br><span class="line">    "<span class="attribute">module</span>": <span class="value"><span class="string">"es2015"</span></span>,</span><br><span class="line">    "<span class="attribute">baseUrl</span>": <span class="value"><span class="string">""</span></span>,</span><br><span class="line">    "<span class="attribute">types</span>": <span class="value">[]</span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">exclude</span>": <span class="value">[</span><br><span class="line">    <span class="string">"test.ts"</span>,</span><br><span class="line">    <span class="string">"**/*.spec.ts"</span>,</span><br><span class="line">    <span class="string">"wallabyTest.ts"</span></span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"wallabyTest.ts"</span></span><br></pre></td></tr></table></figure>
<p>新增 <code>&quot;wallabyTest.ts&quot;</code>。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode004.png" alt="vscode004"></p>
<h3 id="安裝_Node-js_套件">安裝 Node.js 套件</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyProject</span>$ npm install wallaby-webpack angular2-<span class="keyword">template</span>-loader electron --save-dev</span><br></pre></td></tr></table></figure>
<p>安裝 Wallaby 所需要的 Node.js 套件。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode005.png" alt="vscode005"></p>
<h2 id="執行_Wallaby">執行 Wallaby</h2><ul>
<li>Start：⌘ + ⇧ + R, R</li>
<li>Stop：⌘ + ⇧ + R, S</li>
</ul>
<p><img src="/images/vscode/vscode-wallaby/vscode006.png" alt="vscode006"></p>
<p>第一次執行時，會要求設定 config file。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode007.png" alt="vscode007"></p>
<p>選擇剛剛在根目錄建立的 <code>wallaby.js</code>。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode008.png" alt="vscode008"></p>
<p>通過測試的案例，左側會出現<code>綠燈</code>，下方也會顯示目前通過測試案例的個數。</p>
<p><img src="/images/vscode/vscode-wallaby/vscode009.png" alt="vscode009"></p>
<p><strong>不用</strong>按存檔就可以立即跑測試顯示<code>紅燈</code>或<code>綠燈</code>，且立刻顯示實際值與期望值的差異。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Wallaby 有各種版本，如 Visual Studio、WebStorm，甚至於 Sublime Text 與 Atom 也有支援。</li>
<li>Wallaby 雖然是個付費軟體，但非常有其價值。</li>
<li>TDD 會讓開發變慢，主要是因為工具不夠方便，Wallaby 讓我們寫單元測試的同時，就即時知道<code>紅燈</code>與<code>綠燈</code>測試結果，將大幅提升 TDD 開發效率。</li>
</ul>
<h2 id="Reference">Reference</h2><p><a href="http://dm.gl" target="_blank" rel="external">Wallaby.js Blog</a>, <a href="http://dm.gl/2015/11/26/wallaby-for-visual-studio-code/" target="_blank" rel="external">Wallaby.js for Visual Studio Code</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓 TypeScript 也能 Alive]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="Visual Studio Code" scheme="http://oomusou.io/tags/Visual-Studio-Code/"/>
    
      <category term="Wallaby" scheme="http://oomusou.io/tags/Wallaby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 執行 Wallaby 單元測試?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-wallaby/"/>
    <id>http://oomusou.io/webstorm/webstorm-wallaby/</id>
    <published>2017-07-09T12:23:43.000Z</published>
    <updated>2017-07-10T02:54:21.000Z</updated>
    <content type="html"><![CDATA[<p>很羨慕 Visual Studio 有 Alive 可以即時跑單元測試嗎？只要安裝了 <a href="https://wallabyjs.com/" target="_blank" rel="external">Wallaby</a>，在 WebStorm 也可以如 Alive 一樣為 Angular 即時跑 TypeScript 與 Jasmine 單元測試。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Wallaby 1.0.92</p>
<h2 id="下載_Wallaby">下載 Wallaby</h2><hr>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby000.png" alt="wallaby000"></p>
<p>到 Wallaby.js 官網 <a href="https://wallabyjs.com" target="_blank" rel="external">https://wallabyjs.com</a>，選擇 WebStorm 版本下載。</p>
<h2 id="安裝_Wallaby">安裝 Wallaby</h2><p><img src="/images/webstorm/webstorm-wallaby/wallaby001.png" alt="wallaby001"></p>
<p><strong><em>WebStorm -&gt; Preferences -&gt; Plugins</em></strong></p>
<p>按 <code>Install plugin from disk…</code>。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby002.png" alt="wallaby002"></p>
<p>選擇剛剛由 Wallaby.js 官網下載的 <code>zip</code> 檔。</p>
<blockquote>
<p>若由 Safari 下載，<code>zip</code> 檔已經被解開，可選擇解開後的 <code>jar</code> 檔。</p>
</blockquote>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby003.png" alt="wallaby003"></p>
<ol>
<li>安裝成功後會出現 <code>Wallaby</code>。</li>
<li>按 <code>Restart WebStorm</code>  才能使用。</li>
</ol>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby004.png" alt="wallaby004"></p>
<p>WebStorm 重新啟動後，右下角會出現 <code>Wallaby License</code> 提示，表示已經安裝成功。</p>
<blockquote>
<p>Trial versions available for download are fully functional and should work for 30 days. Note that in the trial mode wallaby will sometimes prompt you to restart your editor to get another trial session. </p>
</blockquote>
<p>根據 Wallaby 官網說明，可試用 30 天，在試用過程中，偶爾會提示你重新啟動 WebStorm。</p>
<h2 id="設定_Angular_CLI">設定 Angular CLI</h2><hr>
<h3 id="新增_wallaby-js">新增 wallaby.js</h3><p><strong>wallaby.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wallabyWebpack = <span class="built_in">require</span>(<span class="string">'wallaby-webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compilerOptions = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./tsconfig.json'</span>).compilerOptions,</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./src/tsconfig.spec.json'</span>).compilerOptions);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">wallaby</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> webpackPostprocessor = wallabyWebpack(&#123;</span><br><span class="line">    entryPatterns: [</span><br><span class="line">      <span class="string">'src/wallabyTest.js'</span>,</span><br><span class="line">      <span class="string">'src/**/*spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      loaders: [</span><br><span class="line">        &#123;test: <span class="regexp">/\.css$/</span>, loader: <span class="string">'raw-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.html$/</span>, loader: <span class="string">'raw-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.ts$/</span>, loader: <span class="string">'@ngtools/webpack'</span>, include: <span class="regexp">/node_modules/</span>, query: &#123;tsConfigPath: <span class="string">'tsconfig.json'</span>&#125;&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.js$/</span>, loader: <span class="string">'angular2-template-loader'</span>, exclude: <span class="regexp">/node_modules/</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.json$/</span>, loader: <span class="string">'json-loader'</span>&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.styl$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'stylus-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.less$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'less-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.scss$|\.sass$/</span>, loaders: [<span class="string">'raw-loader'</span>, <span class="string">'sass-loader'</span>]&#125;,</span><br><span class="line">        &#123;test: <span class="regexp">/\.(jpg|png)$/</span>, loader: <span class="string">'url-loader?limit=128000'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">      extensions: [<span class="string">'.js'</span>, <span class="string">'.ts'</span>],</span><br><span class="line">      modules: [</span><br><span class="line">        path.join(wallaby.projectCacheDir, <span class="string">'src/app'</span>),</span><br><span class="line">        path.join(wallaby.projectCacheDir, <span class="string">'src'</span>)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    files: [</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.ts'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.d.ts'</span>, ignore: <span class="literal">true</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.css'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.less'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.scss'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.sass'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.styl'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.html'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*.json'</span>, load: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*spec.ts'</span>, ignore: <span class="literal">true</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    tests: [</span><br><span class="line">      &#123;pattern: <span class="string">'src/**/*spec.ts'</span>, load: <span class="literal">false</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    testFramework: <span class="string">'jasmine'</span>,</span><br><span class="line"></span><br><span class="line">    compilers: &#123;</span><br><span class="line">      <span class="string">'**/*.ts'</span>: wallaby.compilers.typeScript(compilerOptions)</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    middleware: <span class="function"><span class="keyword">function</span> (<span class="params">app, express</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">      app.use(<span class="string">'/favicon.ico'</span>, express.static(path.join(__dirname, <span class="string">'src/favicon.ico'</span>)));</span><br><span class="line">      app.use(<span class="string">'/assets'</span>, express.static(path.join(__dirname, <span class="string">'src/assets'</span>)));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    env: &#123;</span><br><span class="line">      kind: <span class="string">'electron'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    postprocessor: webpackPostprocessor,</span><br><span class="line"></span><br><span class="line">    setup: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">window</span>.__moduleBundler.loadTests();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在專案的根目錄下新增 <code>wallaby.js</code>。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby005.png" alt="wallaby005"></p>
<blockquote>
<p>注意 <code>wallaby.js</code> 為 JavaScript 檔，不是 TypeScript 檔。</p>
</blockquote>
<h3 id="新增_src/wallabyTest-ts">新增 src/wallabyTest.ts</h3><p><strong>src/wallabyTest.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./polyfills'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/long-stack-trace-zone'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/proxy.js'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/sync-test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/jasmine-patch'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/async-test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/fake-async-test'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserDynamicTestingModule,</span><br><span class="line">  platformBrowserDynamicTesting</span><br><span class="line">&#125; from <span class="string">'@angular/platform-browser-dynamic/testing'</span>;</span><br><span class="line"></span><br><span class="line">getTestBed().initTestEnvironment(</span><br><span class="line">  BrowserDynamicTestingModule,</span><br><span class="line">  platformBrowserDynamicTesting()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在 <code>src</code> 目錄下新增 <code>wallabyTest.ts</code>。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby006.png" alt="wallaby006"></p>
<blockquote>
<p>注意 <code>wallabyTest.ts</code> 為 TypeScript 檔，不是 JavaScript 檔。</p>
</blockquote>
<h3 id="設定_src/tsconfig-app-json">設定 src/tsconfig.app.json</h3><p><strong>src/tsconfig.app.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">extends</span>": <span class="value"><span class="string">"../tsconfig.json"</span></span>,</span><br><span class="line">  "<span class="attribute">compilerOptions</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">outDir</span>": <span class="value"><span class="string">"../out-tsc/app"</span></span>,</span><br><span class="line">    "<span class="attribute">module</span>": <span class="value"><span class="string">"es2015"</span></span>,</span><br><span class="line">    "<span class="attribute">baseUrl</span>": <span class="value"><span class="string">""</span></span>,</span><br><span class="line">    "<span class="attribute">types</span>": <span class="value">[]</span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">exclude</span>": <span class="value">[</span><br><span class="line">    <span class="string">"test.ts"</span>,</span><br><span class="line">    <span class="string">"**/*.spec.ts"</span>,</span><br><span class="line">    <span class="string">"wallabyTest.ts"</span></span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"wallabyTest.ts"</span></span><br></pre></td></tr></table></figure>
<p>新增 <code>&quot;wallabyTest.ts&quot;</code>。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby007.png" alt="wallaby007"></p>
<h3 id="安裝_Node-js_套件">安裝 Node.js 套件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject$ npm install wallaby-webpack angular2-template-loader electron --save-dev</span><br></pre></td></tr></table></figure>
<p>安裝 Wallaby 所需要的 Node.js 套件。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby008.png" alt="wallaby008"></p>
<h2 id="設定_WebStorm">設定 WebStorm</h2><p><img src="/images/webstorm/webstorm-wallaby/wallaby009.png" alt="wallaby009"></p>
<p><strong><em>Run -&gt; Edit Configurations…</em></strong></p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby010.png" alt="wallaby010"></p>
<ol>
<li>按左上角 <code>+</code>。</li>
<li>選擇 <code>Wallaby.js</code>。</li>
</ol>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby011.png" alt="wallaby011"></p>
<ol>
<li><strong>Name</strong> : 取名為 <code>Wallaby</code>。</li>
<li><strong>Configuration file</strong>：設定為剛剛在根目錄建立的 <code>wallaby.js</code>。</li>
</ol>
<h2 id="執行_Wallaby">執行 Wallaby</h2><p><img src="/images/webstorm/webstorm-wallaby/wallaby012.png" alt="wallaby012"></p>
<p>上方選擇 <code>Wallaby</code>，按下右邊的綠色三角形執行 Wallaby。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby013.png" alt="wallaby013"></p>
<p>通過測試的案例，左側會出現<code>綠燈</code>，下方也會顯示目前通過測試案例的個數。</p>
<p><img src="/images/webstorm/webstorm-wallaby/wallaby014.png" alt="wallaby014"></p>
<p><strong>不用</strong>按存檔就可以立即跑測試顯示<code>紅燈</code>或<code>綠燈</code>，且立刻顯示實際值與期望值的差異。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Wallaby 有各種版本，如 Visual Studio、Visual Studio Code，甚至於 Sublime Text 與 Atom 也有支援。</li>
<li>Wallaby 雖然是個付費軟體，但非常有其價值。</li>
<li>TDD 會讓開發變慢，主要是因為工具不夠方便，Wallaby 讓我們寫單元測試的同時，就即時知道<code>紅燈</code>與<code>綠燈</code>測試結果，將大幅提升 TDD 開發效率。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://wallabyjs.com" target="_blank" rel="external">Wallaby</a>, <a href="https://github.com/wallabyjs/ngCliWebpackSample#wallabyjs" target="_blank" rel="external">Angular.js 2 angular-cli (Webpack) generated project</a><br><a href="https://blog.kevinyang.net" target="_blank" rel="external">CK’s Notepad</a>, <a href="https://blog.kevinyang.net/2017/01/05/angular2-ssw-testing-angular2-note/" target="_blank" rel="external">[Angular] 學習筆記(1) - Techniques and practices for testing Angular 2</a><br><a href="https://www.youtube.com/watch?v=RjrIK__PepU&amp;feature=youtu.be" target="_blank" rel="external">Techniques and practices for testing Angular 2 | Identity Server 4 with Angular 2 ASP.NET core</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓 TypeScript 也能 Alive]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="Wallaby" scheme="http://oomusou.io/tags/Wallaby/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在執行階段對 Angular 除錯?]]></title>
    <link href="http://oomusou.io/angular/angular-runtime-debug/"/>
    <id>http://oomusou.io/angular/angular-runtime-debug/</id>
    <published>2017-07-05T12:23:43.000Z</published>
    <updated>2017-07-05T01:32:20.000Z</updated>
    <content type="html"><![CDATA[<p>由於 TypeScript 是編譯語言，很多人擔心該如何 debug Angular，尤其是 TypeScript 編譯沒錯，但在瀏覽器執行卻錯了，但因為 TypeScript 已經編譯成 JavaScript，我該怎麼知道錯在 TypeScript 哪一行呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3</p>
<h2 id="Runtime_Error">Runtime Error</h2><hr>
<p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  title = <span class="string">'app'</span>;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.title.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'app'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>title</code> 設為 <code>undefined</code> 後，再取得 <code>title.length</code> 當然會錯誤，不過 TypeScript 在編譯階段不會報錯。</p>
<p><img src="/images/angular/angular-runtime-debug/debug000.png" alt="debug000"></p>
<p>若 Angular 執行階段錯誤，在 Chrome 的 Developer Tools 的 Console 會出現錯誤訊息。</p>
<p>Chrome 明確顯示 <code>Cannot read property &#39;length&#39; of undefined</code>，因為 <code>title</code> 為 <code>undefined</code>。</p>
<p>重要的是，Chrome 明確告訴我們錯在 <code>app.component.ts</code>，是 TypeScript 而不是 JavaScript。</p>
<p><img src="/images/angular/angular-runtime-debug/debug001.png" alt="debug001"></p>
<p>點 <code>app.component.ts</code> 後，會進入 TypeScript 程式碼錯的那一行，因此不用擔心是編譯過的 JavaScript 而無從 debug。</p>
<blockquote>
<p>不是已經編譯成 JavaScript 了嗎？為什麼 Chrome 知道錯在 TypeScript 哪一行？</p>
</blockquote>
<p><img src="/images/angular/angular-runtime-debug/debug005.png" alt="debug005"></p>
<p>事實上在 <code>ng serve</code> 編譯時，還同時產生了各 <code>js</code> 對應的 <code>js.map</code>，Chrome 就是靠這些 <code>map</code> 檔得知錯誤的 JavaScript 對應到 TypeScript 哪一行。</p>
<blockquote>
<p>可是我不希望正式上線主機也包含這些 <code>map</code> 檔怎麼辦？</p>
</blockquote>
<p><img src="/images/angular/angular-runtime-debug/debug006.png" alt="debug006"></p>
<p>下 <code>ng build —-prod</code> ，則編譯後將不包含 <code>map</code> 檔，且 <code>js</code> size 也小很多，可安心放在正式上線主機上。</p>
<h2 id="關於_undefined">關於 undefined</h2><hr>
<p>關於 undefined 問題，其實 TypeScript 另有解法，只要啟動 StrictNullCheck，就可由 TypeScript 編譯器幫我們擋掉這個錯誤。</p>
<p><img src="/images/angular/angular-runtime-debug/debug002.png" alt="debug002"></p>
<p>在 <code>tsconfig.json</code> 加上  <code>strictNullChecks: true</code>，強迫 TypeScript 檢查 <code>null</code> 與 <code>undefined</code> 的型別檢查。</p>
<p><img src="/images/angular/angular-runtime-debug/debug003.png" alt="debug003"></p>
<p>Language service 會提出警告，不可將 <code>undefined</code> 指定給 <code>string</code> 型別。</p>
<p><img src="/images/angular/angular-runtime-debug/debug004.png" alt="debug004"></p>
<p>TypeScript 實際編譯也是會報錯。</p>
<blockquote>
<p>啟動 StrictNullCheck 後，TypeScript 會將 <code>null</code> 與 <code>undefined</code> 視為一種型別，因此不可將 <code>null</code> 與 <code>undefined</code> 指定給 <code>string</code> 型別。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>其實我一開始也很擔心 TypeScript 經過編譯後，會很難 debug，但所幸有 <code>map</code> 檔配套方案，讓 Chrome 能從 JavaScript 對應到 TypeScript，直接將錯誤顯示在 TypeScript 的正確行數。</li>
<li>實務上 Angular 的除錯，第一步是看 TypeScript 是否編譯錯誤，第二部是用 Chrome Developer Tools 看是否有執行上的錯誤，然後對應到相對應的 TypeScript 檔案。</li>
<li>Angular 為 Chrome 提供非常清楚的 TypeScript 錯誤訊息，不用擔心編譯過的 JavaScript 看不懂而無從 debug。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[不用擔心 TypeScript 編譯後會很難除錯]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 WebStorm 存檔時自動刪除 whitespace?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-whitespace/"/>
    <id>http://oomusou.io/webstorm/webstorm-whitespace/</id>
    <published>2017-07-04T12:23:43.000Z</published>
    <updated>2017-07-04T15:23:31.000Z</updated>
    <content type="html"><![CDATA[<p>Ng lint 預設會檢查是否有 trailing whitespace，尤其在 enter 換行時，WebStorm 為了排版漂亮，會自動新增 whitespace，這將導致 ng lint 的抱怨，希望在存檔時，自動刪除這些 whitespace。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><p>WebStorm 2017.1.4</p>
<h2 id="Symptons">Symptons</h2><p><img src="/images/webstorm/webstorm-whitespace/white000.png" alt="white000"></p>
<p>多按了幾個 enter，WebStorm 會塞 whitespace，ng lint 就開始抱怨了。</p>
<h2 id="Recipes">Recipes</h2><p><img src="/images/webstorm/webstorm-whitespace/white001.png" alt="white001"></p>
<p><strong><em>WebStorm -&gt; Preferences -&gt; Editor -&gt; General</em></strong></p>
<ol>
<li>將 <code>Allow placement of caret after end of line</code> 打勾。</li>
<li>將 <code>Strip trailing spaces on Save</code> 選 <code>All</code>。</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><ul>
<li>這樣存檔時，WebStorm 就會自動將所有 whitespace 刪除，ng lint 就不再抱怨了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[避免 ng lint 抱怨]]>
    
    </summary>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 WebStorm 的 Auto Import 符合 ng lint 格式?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-nglint/"/>
    <id>http://oomusou.io/webstorm/webstorm-nglint/</id>
    <published>2017-07-03T12:23:43.000Z</published>
    <updated>2017-07-02T08:20:11.000Z</updated>
    <content type="html"><![CDATA[<p>WebStorm 的 auto import 非常方便，不過預設格式不符合  ng lint 要求，且 reformat code 之後，整個預設的 Angular 格式也會重新排版，該如何設定成符合 ng lint 要求的格式呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>WebStorm 2017.3<br>Angular CLI 1.0.1<br>Angular 4.1.3</p>
<h2 id="Symptoms">Symptoms</h2><hr>
<p><img src="/images/webstorm/webstorm-nglint/import000.png" alt="import000"></p>
<p>當 import <code>BrowserAnimationModule</code> 時，WebStorm 會自動補上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserAnimationsModule&#125; <span class="keyword">from</span> <span class="string">"@angular/platform-browser/animations"</span>;</span><br></pre></td></tr></table></figure>
<p>但有兩個問題：</p>
<ol>
<li><code>{BrowserAnimationsModule}</code> 的 <code>{}</code> 與 <code>BrowserAnimationsModule</code> 之間沒有空白，與 Angular CLI 預設的風格不合，將來 reformat code 之後，會將原本的 <code>import</code> 變成前後沒有空白。</li>
<li><code>&quot;@angular/platform-browser/animations&quot;</code> 使用雙引號，這違反了 ng lint 的規則，將來必須一一修改。</li>
</ol>
<h2 id="Recipes">Recipes</h2><hr>
<p><img src="/images/webstorm/webstorm-nglint/import001.png" alt="import001"></p>
<p><strong><em>Preferences -&gt; Editor -&gt; Code Style -&gt; TypeScript -&gt; Spaces</em></strong></p>
<p>選擇 <code>ES6 import/export braces</code>。</p>
<p>如右圖所示，<code>Component</code> 前後會有空白。</p>
<p><img src="/images/webstorm/webstorm-nglint/import002.png" alt="import002"></p>
<p>選擇 <code>Punctuation</code>，設定 Use <code>single</code> quotes in new code。</p>
<p><img src="/images/webstorm/webstorm-nglint/import003.png" alt="import003"></p>
<p>如此 WebStorm 就能自動 import 符合 Angular 風格與 ng lint 標準的格式了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過設定，WebStorm 也能融入 Angular 風格，不用為了滿足 ng lint 而一一修復。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓 WebStorm 符合 ng lint 規範]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Angular 實作下拉選單?]]></title>
    <link href="http://oomusou.io/angular/angular-select/"/>
    <id>http://oomusou.io/angular/angular-select/</id>
    <published>2017-07-02T12:23:43.000Z</published>
    <updated>2017-07-02T07:31:20.000Z</updated>
    <content type="html"><![CDATA[<p><strong>下拉選單</strong>為常用的使用者介面，該如何優雅地將資料綁定在元件上，並且優雅地取得使用者的選擇資料呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3</p>
<h2 id="Introudction">Introudction</h2><hr>
<p><img src="/images/angular/angular-select/select000.png" alt="select000"></p>
<p>將實作出一下拉選單，其顯示資料來自於資料綁定，當使用者有不同的選擇，會將其值顯示在 select 下方。</p>
<p>將示範 3 種實作方式：</p>
<ul>
<li>使用 DOM event</li>
<li>使用 Template Reference Variable</li>
<li>使用 Two-Way Binding</li>
</ul>
<h2 id="使用_DOM_event_物件">使用 DOM event 物件</h2><hr>
<p><strong>src/app/app.component.html</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/cd6626875abb6066d515ba53840c532b52b6a651/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> (<span class="attribute">change</span>)=<span class="value">"onChange($event)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; selectedId &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>第 2 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>*ngFor</code> 這個 structure directive 重複顯示 <code>&lt;option&gt;</code>，其中 <code>clouds</code> 型別為 <code>Cloud[]</code>，每一筆資料 <code>cloud</code> 為 <code>Cloud</code> ViewModel，有 <code>name</code> 與 <code>id</code> 兩個欄位，稍後會看到 <code>Cloud</code> ViewModel 的定義。</p>
<p>第 1 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> (<span class="attribute">change</span>)=<span class="value">"onChange($event)"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>(change)</code> 為 event binding，當 change event 被觸發時，執行 <code>onChange()</code> event handler。</p>
<p><code>$event</code> 為 event object，若 event 為原生的 DOM event，則 <code>$event</code> 為 DOM event object，擁有 <code>target</code> 與 <code>target.value</code> 等 property。</p>
<p>將 <code>$event</code> 以參數傳進 <code>onChange()</code>。</p>
<blockquote>
<p>在原生 JavaScript 中，<code>event</code> 物件可直接使用，不需要前面加上 <code>$</code>，但在 Angular 的 HTML template 中，若要使用 event object，Angular 規定要從 <code>event</code> 改成 <code>$event</code>，Angular 在底層另有處理，暫時只能當語法背起來。</p>
</blockquote>
<p>第 5 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; selectedId &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>顯示 select 所選擇的 value，即 <code>cloud.id</code>。</p>
<p><strong>src/app/app.component.ts</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/cd6626875abb6066d515ba53840c532b52b6a651/src/app/app.component.ts" target="_blank" rel="external">app.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="number">0</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">1</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">2</span>, name: <span class="string">'Aliyun'</span>&#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  selectedId: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  onChange(event: Event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.selectedId = +(&lt;HTMLSelectElement&gt;event.target).value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clouds: Cloud[] = [</span><br><span class="line">  &#123;id: <span class="number">0</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">1</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">  &#123;id: <span class="number">2</span>, name: <span class="string">'Aliyun'</span>&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p><code>clouds</code> 為 select 欲作 data binding 的資料，實務上此資料會透過 API 取得，在此為了簡化起見，先直接 hardcode 一個陣列。</p>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectedId: <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>selectedCloudId</code> 為 <code>number</code> 型別，雖然也可以宣告為 <code>string</code>，但因為 <code>id</code> 在 <code>cloud</code> 宣告為 <code>number</code> 型別，所以 <code>selectedId</code> 也宣告為 <code>number</code> 型別較合適。</p>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onChange(event: Event) &#123;</span><br><span class="line">  <span class="keyword">this</span>.selectCloudId = +(&lt;HTMLSelectElement&gt;event.target).value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>onChange</code> 為 select change event 的 event handler，其中 <code>event</code> 為 HTML template 傳進來的 <code>$event</code>，型別為 <code>Event</code>。</p>
<p><code>event.target</code> 在 <code>lib.es6.d.ts</code> 定義的型別為 <code>EventTarget</code>，但我們知道其本質型別為 <code>HTMLSelectElement</code>，因此使用 type assertion  加上 <code>&lt;HTMLSelectElement&gt;</code>將 <code>event target</code> 轉型成 <code>HTMLSelectElement</code>，則 intellisense 就會有 <code>value</code> 可選，不過 <code>value</code> 的型別為 <code>string</code>，因此要再加上 <code>+</code> 將 <code>string</code> 轉成 <code>number</code>。</p>
<p><strong>src/app/cloud.ts</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/cd6626875abb6066d515ba53840c532b52b6a651/src/app/cloud.ts" target="_blank" rel="external">cloud.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Cloud </span>&#123;</span><br><span class="line">  id: <span class="built_in">number</span>,</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>Cloud</code> 的 ViewModel，<code>id</code> 為 <code>number</code>，<code>name</code> 為 <code>string</code>。</p>
<h2 id="使用_Template_Reference_Variable">使用 Template Reference Variable</h2><hr>
<p><strong>src/app/app.component.html</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/f835c3cf5881885df555486b19fc4c0a1be1c826/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> (<span class="attribute">change</span>)=<span class="value">"onChange(mySelect)"</span> #<span class="attribute">mySelect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; selectedId &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> (<span class="attribute">change</span>)=<span class="value">"onChange(mySelect)"</span> #<span class="attribute">mySelect</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>原本 <code>onChange()</code> 是傳進 <code>$event</code>，這裡改傳 <code>mySelect</code>。</p>
<p><code>#</code> 為 template reference variable，我們可以在 HTML template 內，對任意 HTML element 加上 <code>#</code> 與變數名稱，Angular 會自動幫我們對該 element 建立物件。</p>
<p><strong>src/app/app.component.ts</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/f835c3cf5881885df555486b19fc4c0a1be1c826/src/app/app.component.ts" target="_blank" rel="external">app.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cloud &#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="number">0</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">1</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">2</span>, name: <span class="string">'Aliyun'</span>&#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  selectedId: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  onChange(element: HTMLSelectElement) &#123;</span><br><span class="line">    <span class="keyword">this</span>.selectedId = +element.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onChange(element: HTMLSelectElement) &#123;</span><br><span class="line">  <span class="keyword">this</span>.selectedId = +element.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>onChange()</code> 改接收 template reference variable 後，因為我們確定 <code>onChange()</code> 為 select 的 event handler，所以傳進的 element 型別必為 <code>HTMLSelectElement</code>。</p>
<p>由於 <code>element.value</code> 型別為 <code>string</code>，必須加上 <code>+</code> 轉型為 <code>number</code>。</p>
<h2 id="使用_Two-Way_Binding">使用 Two-Way Binding</h2><hr>
<p><strong>src/app/app.module.ts</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/88e34459383692af9080b7b61c75dcc1b087d528/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; from <span class="string">"@angular/forms"</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>要使用 two-way binding，必須在 <code>AppModule</code> 手動 import <code>FormsModule</code>。</p>
<p><strong>src/app/app.component.html</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/88e34459383692af9080b7b61c75dcc1b087d528/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> [(<span class="attribute">ngModel</span>)]=<span class="value">"selectedId"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let cloud of clouds"</span> [<span class="attribute">value</span>]=<span class="value">"cloud.id"</span>&gt;</span>&#123;&#123; cloud.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; selectedId &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>[(ngModel)]</code> 直接 two-way binding 到 <code>selectedId</code>，其他都可以拿掉。</p>
<p><strong>src/app/app.component.ts</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/NG4Select/blob/88e34459383692af9080b7b61c75dcc1b087d528/src/app/app.component.ts" target="_blank" rel="external">app.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Cloud&#125; from <span class="string">'./cloud'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  clouds: Cloud[] = [</span><br><span class="line">    &#123;id: <span class="number">0</span>, name: <span class="string">'AWS'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">1</span>, name: <span class="string">'Azure'</span>&#125;,</span><br><span class="line">    &#123;id: <span class="number">2</span>, name: <span class="string">'Aliyun'</span>&#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  selectedId: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於使用了 two-way binding，所有的 event handler 也可以拿掉，當 select 選擇改變時，自動會改變 <code>selectedId</code>。</p>
<blockquote>
<p>實務上該使用哪種寫法？</p>
</blockquote>
<p>雖然表面上 two-way binding 的寫法最精簡，若以<strong>物件導向</strong>與<strong>強型別</strong>觀點，template reference variable 的寫法<strong>語意較佳</strong>：</p>
<ul>
<li>明確將<strong>物件</strong>傳入 event handler 當中。</li>
<li>Event handler 的參數可明確宣告物件<strong>型別</strong>加以檢查。</li>
<li>取得物件的值較直觀，不必搭配 type assertion。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>仍然可以在 HTML template 使用 DOM 的 event 物件，但必須加上<code>event</code> 前面加上 <code>$</code> 變成  <code>$event</code>。</li>
<li>Template reference variable 技巧在實務上常常使用，可隨時在 HTML template 中將 HTML element 宣告成變數傳入 event handler。</li>
<li>Two-way binding 實際上是個 syntax sugur，Angular 會展開實作 <code>(ngModelChange)</code> event handler。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG4Select" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[介紹 3 種實務上常用的方法]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Protractor 的 getText() 回傳型別到底是什麼?]]></title>
    <link href="http://oomusou.io/protractor/protractor-promise/"/>
    <id>http://oomusou.io/protractor/protractor-promise/</id>
    <published>2017-06-30T12:23:43.000Z</published>
    <updated>2017-06-29T16:28:58.000Z</updated>
    <content type="html"><![CDATA[<p>使用了 TypeScript 之後，對於型別就非常敏感，都會要求自己要將傳入參數的型別與回傳型別明確指定，但 Protractor 在 page object 常用的 <code>getText()</code>，到底回傳型別是什麼呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Protractor 5.1.2</p>
<h2 id="Symptoms">Symptoms</h2><hr>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4DemoPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.css(<span class="string">'app-root h1'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Angular CLI 專案預設的 Protractor 範例，其 page object 的 <code>nagivateTo()</code> 與 <code>getParagraphText()</code> 並沒有加上回傳型別，既然使用了 TypeScript，就希望能盡量加上型別，由編譯器替我們檢查與保護。</p>
<p><img src="/images/protractor/protractor-promise/promise000.png" alt="promise000"></p>
<p>有 <code>get()</code> 我們得知其回傳型別為 <code>wdpromise.Promise&lt;any&gt;</code>。</p>
<p><img src="/images/protractor/protractor-promise/promise001.png" alt="promise001"></p>
<p>但實際替回傳型別加上 <code>wdpromise.Promise&lt;any&gt;</code> 之後，language service 會抱怨找不到 <code>wdpromise</code> namespace。</p>
<p><img src="/images/protractor/protractor-promise/promise002.png" alt="promise002"></p>
<p><code>getText()</code> 則完全沒提供任何回傳型別資訊，則 <code>getParagraphText()</code> 該回傳什麼型別呢？</p>
<p><img src="/images/protractor/protractor-promise/promise005.png" alt="promise005"></p>
<p>實際執行 <code>ng e2e</code>，結果當然也是編譯失敗。</p>
<h2 id="Recipes">Recipes</h2><hr>
<p>由於 <code>getText()</code> 之後可以用 <code>then()</code>，在觀念上知道 <code>getText()</code> 回傳的是 <code>Promise</code>。</p>
<p><img src="/images/protractor/protractor-promise/promise004.png" alt="promise004"></p>
<p>實際加上回傳型別 <code>Promise&lt;string&gt;</code>，language service 抱怨 <code>promise.Promise&lt;string&gt;</code> 與 <code>Promise&lt;string&gt;</code> 不相容，試試看回傳 <code>promise.Promise&lt;string&gt;</code> 看看。</p>
<p><img src="/images/protractor/protractor-promise/promise006.png" alt="promise006"></p>
<p>改成回傳 <code>promise.Promise&lt;string&gt;</code> 之後，另外加上 <code>import { promise } from &#39;selenium-webdriver&#39;;</code> 之後，language service 就不再抱怨了。</p>
<blockquote>
<p>promise.Promise<string> 看起來很怪，不像我們常用的 TypeScript 寫法，事實上，小寫的 <code>promise</code> 為 namespace，而 <code>Promise&lt;string&gt;</code> 才是我們所熟悉的 <code>Promise</code>。</string></p>
</blockquote>
<p><img src="/images/protractor/protractor-promise/promise007.png" alt="promise007"></p>
<p>藉由剛剛的經驗，將 <code>wdpromise.Promise&lt;any&gt;</code> 改成 <code>promise.Promise&lt;any&gt;</code> 試試看，結果 language service 完全不再抱怨了。</p>
<p><img src="/images/protractor/protractor-promise/promise008.png" alt="promise008"></p>
<p>實際跑 <code>ng e2e</code>，TypeScript 編譯成功，也可以成功跑完測試。</p>
<blockquote>
<p>實務上真的要這樣寫回傳型別嗎？</p>
</blockquote>
<p><a href="https://github.com/angular/protractor/blob/master/exampleTypescript/angularPage.ts" target="_blank" rel="external">protractor/exampleTypescript/angularPage.ts</a></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Because this file references protractor, you'll need to have it as a project</span></span><br><span class="line"><span class="comment">// dependency to use 'protractor/globals'. Here is the full list of imports:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// import &#123;browser, element, by, By, $, $$, ExpectedConditions&#125;</span></span><br><span class="line"><span class="comment">//   from 'protractor/globals';</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> &#123;browser, element, by&#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AngularHomepage &#123;</span><br><span class="line">  nameInput = element(by.model(<span class="string">'yourName'</span>));</span><br><span class="line">  greeting = element(by.binding(<span class="string">'yourName'</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    browser.get(<span class="string">'http://www.angularjs.org'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setName(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.nameInput.sendKeys(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getGreeting returns a webdriver.promise.Promise.&lt;string&gt;. For simplicity</span></span><br><span class="line">  <span class="comment">// setting the return value to any</span></span><br><span class="line">  getGreeting(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.greeting.getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Protractor 官網實際示範了應該如何用 TypeScript 寫 page object。</p>
<p>21 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getGreeting returns a webdriver.promise.Promise.&lt;string&gt;. For simplicity</span></span><br><span class="line"><span class="comment">// setting the return value to any</span></span><br><span class="line">getGreeting(): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.greeting.getText();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getGreeting()</code> 用的正是 <code>getText()</code>，Protractor 官方也認為 <code>webdriver.promise.Promise.&lt;string&gt;</code> 實在太麻煩了，用 <code>any</code> 即可。</p>
<p><img src="/images/protractor/protractor-promise/promise009.png" alt="promise009"></p>
<p>若你跟我一樣有型別強迫症，回傳 <code>any</code> 即可。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>雖然 TypeScript 是強型別，但 <code>any</code> 也不是不能用，除非能說出理由，在這裡就是因為  <code>webdriver.promise.Promise.&lt;string&gt;</code> 實在太麻煩了，連 Protractor 官網也建議直接用 <code>any</code> 即可。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/angular/protractor" target="_blank" rel="external">Protractor</a>, <a href="https://github.com/angular/protractor/blob/master/exampleTypescript/angularPage.ts" target="_blank" rel="external">angularPage.ts</a></p>
]]></content>
    <summary type="html">
    <![CDATA[必要時也可以用 any]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 Protractor 跑 Headless Chrome?]]></title>
    <link href="http://oomusou.io/protractor/protractor-headless-chrome/"/>
    <id>http://oomusou.io/protractor/protractor-headless-chrome/</id>
    <published>2017-06-29T12:23:43.000Z</published>
    <updated>2017-06-28T06:58:37.000Z</updated>
    <content type="html"><![CDATA[<p>Angular CLI 的 Protractor 預設是跑 Chrome，但在 Chrome 59 之後提供了 Headless Chrome，讓我們以類似 PhantomJS 方式跑 E2E 測試。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Protractor 5.1.2</p>
<h2 id="修改_protractor-conf-js">修改 protractor.conf.js</h2><hr>
<p><strong>protractor.conf.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Protractor configuration file, see link for more information</span></span><br><span class="line"><span class="comment">// https://github.com/angular/protractor/blob/master/lib/config.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; SpecReporter &#125; = <span class="built_in">require</span>(<span class="string">'jasmine-spec-reporter'</span>);</span><br><span class="line"></span><br><span class="line">exports.config = &#123;</span><br><span class="line">  allScriptsTimeout: <span class="number">11000</span>,</span><br><span class="line">  specs: [</span><br><span class="line">    <span class="string">'./e2e/**/*.e2e-spec.ts'</span></span><br><span class="line">  ],</span><br><span class="line">  capabilities: &#123;</span><br><span class="line">    <span class="string">'browserName'</span>: <span class="string">'chrome'</span>,</span><br><span class="line">    chromeOptions: &#123;</span><br><span class="line">      args: [ <span class="string">"--headless"</span>, <span class="string">"--disable-gpu"</span>, <span class="string">"--window-size=1920, 1080"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  directConnect: <span class="literal">true</span>,</span><br><span class="line">  baseUrl: <span class="string">'http://localhost:4200/'</span>,</span><br><span class="line">  framework: <span class="string">'jasmine'</span>,</span><br><span class="line">  jasmineNodeOpts: &#123;</span><br><span class="line">    showColors: <span class="literal">true</span>,</span><br><span class="line">    defaultTimeoutInterval: <span class="number">30000</span>,</span><br><span class="line">    print: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onPrepare() &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'ts-node'</span>).register(&#123;</span><br><span class="line">      project: <span class="string">'e2e/tsconfig.e2e.json'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    jasmine.getEnv().addReporter(<span class="keyword">new</span> SpecReporter(&#123; spec: &#123; displayStacktrace: <span class="literal">true</span> &#125; &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>13 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chromeOptions: &#123;</span><br><span class="line">      args: [ <span class="string">"--headless"</span>, <span class="string">"--disable-gpu"</span>, <span class="string">"--window-size=1920, 1080"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增 <code>chromeOptions</code>。</p>
<ul>
<li><strong>—headless</strong> : 以 headless 模式跑 Chrome。</li>
<li><strong>—disable-gpu</strong> : <a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="external">官網</a> 沒做進一步解釋，但提到將來會拿掉此選項。</li>
<li><strong>—window-size</strong> : 決定 Chrome 視窗大小，對於 RWD 測試有幫助。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Headless Chrome 執行速度比 Chrome 快。</li>
<li>若要在 Jenkins 或 VSTS 跑 E2E 測試，則 Headless Chrome 是必須的。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://cvuorinen.net" target="_blank" rel="external">Carl Vuorinen</a>, <a href="http://cvuorinen.net/2017/05/running-angular-tests-in-headless-chrome/" target="_blank" rel="external">Running Angular tests in headless Chrome</a><br><a href="https://developers.google.com/web/resources/contributors#ericbidelman" target="_blank" rel="external">Eric Bidelman</a>, <a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="external">Getting Started with Headless Chrome</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Headless Chrome 取代 PhantomJS]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重構到設計模式：使用 Adapter Pattern]]></title>
    <link href="http://oomusou.io/dp/dp-adapter/"/>
    <id>http://oomusou.io/dp/dp-adapter/</id>
    <published>2017-06-28T12:23:43.000Z</published>
    <updated>2017-06-29T09:47:37.000Z</updated>
    <content type="html"><![CDATA[<p>Adapter pattern 是實務上常用的設計模式，本文將以實際案例，根據需求一步步重構，最後變成 adapter pattern。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.15</p>
<h2 id="定義">定義</h2><hr>
<blockquote>
<p>Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise of incompatible interfaces.</p>
<p>將一個 class 的接口變成使用端所期待的另外一種接口，從而使原本因接口不匹配而無法在一起工作的兩個 class 都能在一起工作。</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>當 service 原本支援某一 API ，卻被要求支援另一新 API，可開發 adapter 讓原 service 支援新 API。</p>
</blockquote>
<p><img src="/images/dp/dp-adapter/adapter000.svg" alt="adapter000"></p>
<p><img src="/images/dp/dp-adapter/adapter010.svg" alt="adapter010"></p>
<ul>
<li><strong>Client</strong> : 使用端根據 <code>Target</code> interface 使用 <code>Adapter</code> 物件。</li>
</ul>
<blockquote>
<p>Controller 根據 service 的 interface 去使用 adapter。</p>
</blockquote>
<ul>
<li><strong>Target</strong> : 根據使用端的 domain 需求定義出的 service 的 <code>Target</code> interface。</li>
</ul>
<blockquote>
<p>Service 根據 controller 的需求，定義出 service 的 interface。</p>
</blockquote>
<ul>
<li><strong>Adapter</strong> : 根據 <code>Target</code> interface 實作出 <code>Adapter</code>，再由 <code>Adapter</code> 去使用 <code>Adaptee</code>。</li>
</ul>
<blockquote>
<p>根據 service 的 interface 實作出 adapter，再由 adapter 去使用實際的第三方套件或 API。</p>
</blockquote>
<ul>
<li><strong>Adaptee</strong> : 被 <code>Adapter</code> 呼叫的 <code>Adaptee</code>。</li>
</ul>
<blockquote>
<p>實際的第三方套件或 API。</p>
</blockquote>
<h2 id="生活中的_Adapter">生活中的 Adapter</h2><hr>
<p>Adapter 在生活中到處可見。</p>
<h3 id="VGA_Adapter">VGA Adapter</h3><p><img src="/images/dp/dp-adapter/adapter001.jpg" alt="adapter001"></p>
<p>我的 Macbook Pro Retina 只有 Mini Display port，但投影機只有 VGA port，因此 Macbook 無法直接使用投影機，需要 VGA adapter 做轉接。</p>
<blockquote>
<p>我的 controller 只支援 Mini Display port interface，但第三方套件或 API 卻只提供 VGA interface，因此 controller 無法直接使用第三方套件或 API，因此需要 adapter 做轉接，才能使用第三方套件或 API。</p>
</blockquote>
<p>若以 Adapter pattern 思考</p>
<blockquote>
<p><code>Client</code> 就類似 Macbook，<code>Adaptee</code> 就類似投影機，這些都是不能修改的，我們只好以 MacBook 角度訂出 <code>Target</code> interface，然後實做 VGA Adapter 實作 <code>Target</code> interface，這樣 MacBook 就能使用投影機了。</p>
</blockquote>
<h2 id="真實案例">真實案例</h2><hr>
<h3 id="使用_AWS_S3">使用 AWS S3</h3><p>AWS 提供 S3 (Simple Storage Service) 服務，讓我們可以上傳檔案到雲端，並且下載。AWS 也提供了 <code>AWS SDK for PHP</code> 供 PHP 使用。</p>
<p>AWS 的 API 如下 (<code>AWSSDK</code>)</p>
<table>
<thead>
<tr>
<th>功能描述</th>
<th>API</th>
</tr>
</thead>
<tbody>
<tr>
<td>上傳檔案</td>
<td>putObject(＄container, ＄blob, ＄file)</td>
</tr>
<tr>
<td>下載連結</td>
<td>getObjectUrl(＄container, ＄blob)</td>
</tr>
<tr>
<td>刪除檔案</td>
<td>deleteObjet(＄container, ＄blob)</td>
</tr>
</tbody>
</table>
<p><img src="/images/dp/dp-adapter/adapter002.svg" alt="adapter002"></p>
<p><strong>下載檔案</strong><br><img src="/images/dp/dp-adapter/adapter011.svg" alt="adapter002"></p>
<p><strong>CloudStorageController</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">CloudStorageService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudStorageController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> CloudStorageService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cloudStorageService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * CloudStorageController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> CloudStorageService $cloudStorageService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(CloudStorageService <span class="variable">$cloudStorageService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudStorageService = <span class="variable">$cloudStorageService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下載檔案</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$this</span>-&gt;cloudStorageService-&gt;getFileUrl(<span class="string">'MyFolder'</span>, <span class="string">'MyRemoteFile'</span>);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudStorageService-&gt;uploadFile(<span class="string">'MyFolder'</span>, <span class="string">'MyRemoteFile'</span>, <span class="string">'MyLocalFile'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudStorageService-&gt;deleteFile(<span class="string">'MyFolder'</span>, <span class="string">'MyRemote'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> CloudStorageService */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$cloudStorageService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * CloudStorageController constructor.</span><br><span class="line"> * <span class="doctag">@param</span> CloudStorageService $cloudStorageService</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(CloudStorageService <span class="variable">$cloudStorageService</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;cloudStorageService = <span class="variable">$cloudStorageService</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CloudStorageController</code> 使用到了 <code>CloudStorageService</code>，在 constructor 使用依賴注入將 <code>CloudStorageService</code> 注入。</p>
<p>19 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 下載檔案</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$this</span>-&gt;cloudStorageService-&gt;getFileUrl(<span class="string">'MyFolder'</span>, <span class="string">'MyRemoteFile'</span>);</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>index()</code> 呼叫 <code>CloudStorageService</code> 的 <code>getFileUrl()</code> 回傳下載檔案的 url。</p>
<p>28 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;cloudStorageService-&gt;uploadFile(<span class="string">'MyFolder'</span>, <span class="string">'MyRemoteFile'</span>, <span class="string">'MyLocalFile'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>store()</code> 呼叫 <code>CloudStorageService</code>  的 <code>uploadFile()</code> 上傳檔案。</p>
<p>36 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除檔案</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;cloudStorageService-&gt;deleteFile(<span class="string">'MyFolder'</span>, <span class="string">'MyRemote'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>destroy()</code> 呼叫 <code>CloudStorageService</code> 的 <code>deleteFile()</code> 刪除檔案。</p>
<p><strong>CloudStorageService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">SDK</span>\<span class="title">AWSSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudStorageService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AWSSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$awsSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * CloudStorageService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK = <span class="keyword">new</span> AWSSDK();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     * <span class="doctag">@param</span> string $localFile</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>, string <span class="variable">$localFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK-&gt;putObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>, <span class="variable">$localFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下載檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileUrl</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;awsSDK-&gt;getObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK-&gt;deleteObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>實際的提供雲端檔案服務的 service。</p>
<p>第 10 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> AWSSDK */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$awsSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * CloudStorageService constructor.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;awsSDK = <span class="keyword">new</span> AWSSDK();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>CloudStorageService</code> 使用到了  <code>AWSSDK</code>。</p>
<blockquote>
<p>這裡可以使用依賴注入，不過依賴注入就得搭配 provider 機制，這裡故意使用 <code>new</code>，將來要搭配 Factory Pattern。</p>
</blockquote>
<p>18 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $folder</span><br><span class="line"> * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line"> * <span class="doctag">@param</span> string $localFile</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>, string <span class="variable">$localFile</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;awsSDK-&gt;putObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>, <span class="variable">$localFile</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫 <code>AWSSDK</code> 的 <code>putObject()</code> 上傳檔案。</p>
<p>29 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 下載檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $folder</span><br><span class="line"> * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileUrl</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;awsSDK-&gt;getObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫 <code>AWSSDK</code> 的 <code>getObject()</code> 下載檔案。</p>
<p>40 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $folder</span><br><span class="line"> * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;awsSDK-&gt;deleteObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫 <code>AWSSDK</code> 的 <code>deleteObject()</code> 刪除檔案。</p>
<p><strong>AWSSDK</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">SDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AWSSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'AWS S3 uploading file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span>: <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://www.aws.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'AWS S3 deleting file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@param</span> string $file</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">'AWS S3 uploading file'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>AWSSDK</code> 的 <code>putObject()</code>。</p>
<p>16 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳下載檔案 url</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span>: <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'http://www.aws.com'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>AWSSDK</code> 的 <code>getObject()</code>。</p>
<p>27 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">'AWS S3 deleting file'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>AWSSDK</code> 的 <code>deleteObject()</code>。</p>
<h3 id="使用_Azure_Blob_Storage">使用 Azure Blob Storage</h3><p>Microsof 的 Azure 雲端服務急起直追，且提供比 AWS 更優惠方案，公司高層為了降低成本，決定將檔案改放到 Azure 。</p>
<p>Azure 提供 Blob Storage 服務，功能與 S3 完全一樣，Microsoft 也提供了 <code>Azure SDK for PHP</code> 供 PHP 使用。</p>
<blockquote>
<p>公司另有但書，先不要將原本 AWS S3 的程式碼刪除，因為有可能 Azure 便宜但不好用，將來有可能會回來用 AWS S3，希望提供<strong>設定檔</strong>，能動態切換使用 AWS S3 或 Azure Blob。</p>
</blockquote>
<p>Azure 的 API 如下 (<code>AzureSDK</code>)</p>
<table>
<thead>
<tr>
<th>功能描述</th>
<th>API</th>
</tr>
</thead>
<tbody>
<tr>
<td>上傳檔案</td>
<td>createBlob(＄container, ＄blob, ＄file)</td>
</tr>
<tr>
<td>下載連結</td>
<td>getBlobUrl(＄container, ＄blob)</td>
</tr>
<tr>
<td>刪除檔案</td>
<td>deleteBlob(＄container, ＄blob)</td>
</tr>
</tbody>
</table>
<p>根據<strong>開放封閉原則</strong>，<code>AzureSDK</code> 屬於新的需求，我們可以新增 class 支援 <code>AzureSDK</code> (<strong><em>對擴展是開放的</em></strong>)，但不應該去修改原有<code>CloudStorageService</code> (<strong><em>對修改是封閉的</em></strong>)。</p>
<blockquote>
<p>我們不應該在 CloudStorageService 使用 <code>if else</code> 去判斷該使用 <code>AWSSDK</code> 或 <code>AzureSDK</code>，因為 <code>CloudStorageService</code> 應該封閉，應該新增 class，改用物件導向<strong>多型</strong>取代 <code>if else</code>。</p>
</blockquote>
<p>由於 <code>CloudStorageService</code> 原本已經使用 <code>AWSSDK</code>，為了讓 <code>CloudStorageService</code> 封閉不做修改，我們決定以既有的 <code>AWSSDK</code> 為基礎加以 <code>extract interface</code> 產生 <code>CloudSDK</code> interface 。</p>
<p><img src="/images/dp/dp-adapter/adapter003.svg" alt="adapter003"></p>
<p><strong>下載檔案</strong></p>
<p><img src="/images/dp/dp-adapter/adapter012.svg" alt="adapter012"></p>
<p><strong>CloudSDK</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CloudSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span>;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span>;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 PhpStorm，從 <code>AWSSDK</code> 抽出 <code>CloudSDK</code> interface。</p>
<p>為了讓 <code>CloudStorageService</code> 封閉不要修改，我們希望 <code>CloudStorageService</code> 使用的 SDK 都能遵守 <code>CloudSDK</code> interface，如此 <code>CloudStorageService</code> 就能完全不用修改。</p>
<p><strong>CloudStorageService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudStorageService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> CloudSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cloudSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * CloudStorageService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudSDK = CloudSDKFactory::create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     * <span class="doctag">@param</span> string $localFile</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>, string <span class="variable">$localFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudSDK-&gt;pubObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>, <span class="variable">$localFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下載檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileUrl</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;cloudSDK-&gt;getObjectUrl(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $folder</span><br><span class="line">     * <span class="doctag">@param</span> string $remoteFile</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteFile</span><span class="params">(string <span class="variable">$folder</span>, string <span class="variable">$remoteFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;cloudSDK-&gt;deleteObject(<span class="variable">$folder</span>, <span class="variable">$remoteFile</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> CloudSDK */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$cloudSDK</span>;</span><br></pre></td></tr></table></figure>
<p>透過重構的 <code>Rename</code>，將 <code>$awsSDK</code> 重構成 <code>$cloudSDK</code>，並將型別改成 <code>CloudSDK</code>。</p>
<p>8 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * CloudStorageService constructor.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;cloudSDK = CloudSDKFactory::create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>new AWSSDK</code> 改成 <code>CloudSDKFactory::create()</code>，改由<strong>工廠</strong>來建立物件。</p>
<blockquote>
<p><strong>開放封閉原則</strong>規定我們不要修改 <code>CloudStorageService</code>，但 constructor 的修改是可接受的，但 method 內則不應該修改。</p>
</blockquote>
<p>至於 <code>CloudStorageService</code> 的其他部分則不修改，以達成<strong>開放封閉原則</strong>的要求。</p>
<p><strong>AWSAdapter</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">SDK</span>\<span class="title">AWSSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AWSAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AWSSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$awsSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AWSAdapter constructor.</span><br><span class="line">     * <span class="doctag">@param</span> AWSSDK $awsSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AWSSDK <span class="variable">$awsSDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK = <span class="variable">$awsSDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK-&gt;putObject(<span class="variable">$container</span>, <span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;awsSDK-&gt;getObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;awsSDK-&gt;deleteObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AWSAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span></span><br></pre></td></tr></table></figure>
<p>因為 <code>CloudSDK</code> interface 已經確定，因此我們需要一個 adapter 將 <code>CloudSDK</code> interface 轉成各 SDK 所定義的 interface。</p>
<p>由於 <code>CloudSDK</code> 是從 <code>AWSSDK</code> 抽出來的，因此 interface 完全一樣，<code>AWSAdapter</code> 只是將相同的 method 導到 <code>AWSSDK</code> 而已。</p>
<blockquote>
<p>這裡因為 <code>CloudSDK</code> interface 與 <code>AWSSDK</code> 完全一樣，所以暫時看不到 <code>CloudSDK</code> interface 的威力，稍後才會展現。</p>
</blockquote>
<p><strong>AzureAdapter</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">SDK</span>\<span class="title">AzureSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$azureSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureAdapter constructor.</span><br><span class="line">     * <span class="doctag">@param</span> AzureSDK $azureSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AzureSDK <span class="variable">$azureSDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;azureSDK = <span class="variable">$azureSDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;azureSDK-&gt;createBlob(<span class="variable">$container</span>, <span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getObjectUrl(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;deleteObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span></span><br></pre></td></tr></table></figure>
<p><code>AzureAdapter</code> 也實現 <code>CloudSDK</code> interface。</p>
<p>第 7 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> AzureSDK */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$azureSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * AzureAdapter constructor.</span><br><span class="line"> * <span class="doctag">@param</span> AzureSDK $azureSDK</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AzureSDK <span class="variable">$azureSDK</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;azureSDK = <span class="variable">$azureSDK</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依賴注入進 <code>AzureSDK</code>。</p>
<p>19 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@param</span> string $file</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;azureSDK-&gt;createBlob(<span class="variable">$container</span>, <span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>putObject()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，轉而呼叫 <code>AzureSDK</code> 的 <code>createBlob()</code>。</p>
<p>30 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳下載檔案 url</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getObjectUrl(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getObjectUrl()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，轉而呼叫 <code>AzureSDK</code> 的 <code>getObjetUrl()</code>。</p>
<p>41 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;deleteObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>deleteObject()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，轉而呼叫 <code>AzureSDK</code>  的 <code>deleteObject()</code>。</p>
<blockquote>
<p>雖然 adapter 轉呼叫 <code>AzureSDK</code> 看似多餘，但由於實作了 <code>CloudSDK</code> interface，使得  <code>CloudStorageService</code> 不用修改就可以使用 <code>AzureSDK</code>，就類似 Macbook 不用改裝  VGA 介面，透過 adapter 就可以由 Mini Display 去使用 VGA 介面的投影機一樣，達成<strong>開放封閉原則</strong>的要求。</p>
</blockquote>
<p><strong>CloudSDKFactory</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudSDKFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span>: <span class="title">CloudSDK</span></span><br><span class="line">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CloudSDKFactory</code> 暫時只回傳 <code>CloudSDK</code> interface，至於要如何建立物件，我們最後再來實做。</p>
<p><strong>AzureSDK</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">SDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBlob</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Azure Blob uploading file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlobUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span>: <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://www.azure.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteBlob</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Azure Blob deleting file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>AzureSDK</code> 的 API。</p>
<blockquote>
<p>對 <code>CloudStorageService</code> 而言，儘管 <code>AWSSDK</code> 與 <code>AzureSDK</code> 的 API 都不一樣，但已經將兩者抽象化為 <code>CloudSDK</code>，對 service 而言都是一樣的 SDK，只要透過 <code>AWSAdapter</code> 與  <code>AzureAdapter</code> 作轉換即可。</p>
<p>就類似僅管現在投影機有 VGA 也有 HDMI，對於 Macbook 而言都是 Mini Display Port，只要提供 VGA adapter 或 HDMI adapter 即可。</p>
</blockquote>
<h3 id="使用阿里雲_OSS">使用阿里雲 OSS</h3><p>雖然 Azure 提供很便宜的價格，但公司又擔心<strong>川普</strong>上台後，放在 Azure 的資料會被中國的<strong>網路長城</strong>封鎖，導致中國無法存取 Azure 檔案，因此高層決定將同一份程式，分別放到阿里雲與 Azure，相同網址，若在中國就使用阿里雲，其他國家使用 Azure。</p>
<p>阿里雲提供 OSS (Open Storage Service) 服務，功能與 AWS S3 與 Azure Blob 完全一樣，阿里雲也提供了 <code>Aliyun SDK for PHP</code> 供 PHP 使用。</p>
<p>阿里雲的 API 如下 (<code>AliyunSDK</code>)</p>
<table>
<thead>
<tr>
<th>功能描述</th>
<th>API</th>
</tr>
</thead>
<tbody>
<tr>
<td>上傳檔案</td>
<td>setBucket(＄container); uploadFile(＄blob, ＄file)</td>
</tr>
<tr>
<td>下載連結</td>
<td>setBucket(＄container); getUrl(＄blob)</td>
</tr>
<tr>
<td>刪除檔案</td>
<td>deleteObjet(＄container, ＄blob)</td>
</tr>
</tbody>
</table>
<p>目前 Azure 與阿里雲必須並存，AWS 暫時不用，但不能刪除，根據<strong>開放封閉原則</strong>，<code>AliyunSDK</code> 屬於新的需求，我們可以新增 class 支援 <code>AliyunSDK</code> (<strong><em>對擴展是開放的</em></strong>)，但不應該去修改原有 <code>CloudStorageService</code> (<strong><em>對修改是封閉的</em></strong>)。</p>
<p><img src="/images/dp/dp-adapter/adapter004.svg" alt="adapter004"></p>
<p><strong>上傳檔案</strong></p>
<p><img src="/images/dp/dp-adapter/adapter013.svg" alt="adapter013"></p>
<p><strong>AliyunAdapter</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">SDK</span>\<span class="title">AliyunSDK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliyunAdapter</span> <span class="keyword">implements</span> <span class="title">CloudSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AliyunSDK*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$aliyunSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AliyunAdapter constructor.</span><br><span class="line">     * <span class="doctag">@param</span> AliyunSDK $aliyunSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AliyunSDK <span class="variable">$aliyunSDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK = <span class="variable">$aliyunSDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上傳檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@param</span> string $file</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK-&gt;setBucket(<span class="variable">$container</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK-&gt;uploadFile(<span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳下載檔案 url</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK-&gt;setBucket(<span class="variable">$container</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;aliyunSDK-&gt;getUrl(<span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除檔案</span><br><span class="line">     * <span class="doctag">@param</span> string $container</span><br><span class="line">     * <span class="doctag">@param</span> string $blob</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliyunSDK-&gt;deleteObject(<span class="variable">$container</span>, <span class="variable">$blob</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 上傳檔案</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@param</span> string $file</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pubObject</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>, string <span class="variable">$file</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliyunSDK-&gt;setBucket(<span class="variable">$container</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliyunSDK-&gt;uploadFile(<span class="variable">$blob</span>, <span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>putObject()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，因為 <code>AliyunSDK</code> 的 API 分兩步驟，需要先 <code>setBucket()</code>，然後再 <code>uploadFile()</code>。</p>
<p>31 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳下載檔案 url</span><br><span class="line"> * <span class="doctag">@param</span> string $container</span><br><span class="line"> * <span class="doctag">@param</span> string $blob</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObjectUrl</span><span class="params">(string <span class="variable">$container</span>, string <span class="variable">$blob</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliyunSDK-&gt;setBucket(<span class="variable">$container</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;aliyunSDK-&gt;getUrl(<span class="variable">$blob</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getObjectUrl()</code> 為 <code>CloudSDK</code> interface 所定義，所以一定要實作，因為 <code>AliyunSDK</code> 的 API 分兩步驟，需要先 <code>setBucket()</code>，然後再 <code>getUrl()</code>。</p>
<p><strong>CloudFactory</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudSDKFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立 adapter</span><br><span class="line">     * <span class="doctag">@return</span> CloudSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span>: <span class="title">CloudSDK</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$lut</span> = config(<span class="string">'app.CloudLUT'</span>);</span><br><span class="line">        <span class="variable">$cloudStorage</span> = config(<span class="string">'app.CloudStorage'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$className</span> = collect(<span class="variable">$lut</span>)</span><br><span class="line">            -&gt;get(<span class="variable">$cloudStorage</span>, AWSAdapter::class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$className</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>$lut</code> 為工廠的對照表，紀錄什麼 key 該對應哪個 adapter。</p>
<p><code>$cloudStorage</code> 為目前該使用什麼 SDK，key 為 AWS、Azure 還是 Aliyun。</p>
<p>使用 Collection 根據 key 去抓 value，決定該 new 什麼 adapter。</p>
<blockquote>
<p>平常 service 不應該使用 <code>static</code>，但工廠是可用 <code>static</code> 的。</p>
</blockquote>
<p><strong>config/app.php</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'CloudLUT'</span> =&gt; [</span><br><span class="line">    <span class="string">'AWS'</span>    =&gt; AWSAdapter::class,</span><br><span class="line">    <span class="string">'Azure'</span>  =&gt; AzureAdapter::class,</span><br><span class="line">    <span class="string">'Aliyun'</span> =&gt; AliyunAdapter::class,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="string">'CloudStorage'</span> =&gt; <span class="string">'Azure'</span>,</span><br></pre></td></tr></table></figure>
<p><code>app.php</code> 為<strong>設定檔</strong>。</p>
<p><code>CloudLUT</code> 為 key / value 對照表，決定要 new 什麼 adapter。</p>
<p><code>CloudStorage</code> 決定目前主機要使用什麼雲端服務，這個檔案可以不放在 git，由 DevOps 去維護。</p>
<h2 id="開放封閉原則">開放封閉原則</h2><blockquote>
<p>對於擴展是開放的，對於修改是封閉的。</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>若有新的需求，可以增加程式碼，而不應該修改既有的程式碼。</p>
</blockquote>
<p>開了 <code>CloudSDK</code> interface 之後，之後雖然新增了 <code>AliyunSDK</code> 需求，我們只需要：</p>
<ul>
<li>新增 <code>AliyunAdapter</code> class。</li>
<li>新增 <code>app.php</code> 設定檔的 <code>CloudLUT</code> 。</li>
</ul>
<p>其他原本的程式碼完全沒修改。</p>
<p>整個程式碼沒看到一行的 <code>if else</code> 去切換 SDK，全部用物件導向的<strong>多型</strong>就可達成。</p>
<p>Interface 之前的 controller 與 service <strong>保持封閉</strong>，interface 之後的 adapter <strong>保持開放</strong>，達成<strong>開放封閉原則</strong>的要求。</p>
<h2 id="實務上的_Adapter">實務上的 Adapter</h2><p>我們可以發現使用 Adapter pattern 後，由於訂出 <code>Target</code> interface，可以針對不同的 <code>Adaptee</code> 擴充。</p>
<p>但所有設計模式都面臨一個最基本的問題 ：<strong>由誰決定根據 interface 所建立的物件</strong>，也就是該由誰決定 <code>Adapter</code>。</p>
<p><img src="/images/dp/dp-adapter/adapter005.svg" alt="adapter005"></p>
<p>實務上 Adapter pattern 都會搭配一個 Simple Factory pattern，由 factory 決定要使用哪一個 adapter。</p>
<h2 id="Adapter_的變形">Adapter 的變形</h2><p><img src="/images/dp/dp-adapter/adapter006.svg" alt="adapter006"></p>
<p><img src="/images/dp/dp-adapter/adapter014.svg" alt="adapter014"></p>
<p>Adapter 不限於只能搭配單一 Adaptee，實務上可以搭配多個 Adaptee，只要 Target interface 保持穩定即可。</p>
<h2 id="Conclusion">Conclusion</h2><ul>
<li><strong>資料結構</strong>相對於 C 語言的<strong>指標</strong>，就相當於<strong>設計模式</strong>相對於 <strong>interface</strong>；想學怎麼活用<strong>指標</strong>，就要去學<strong>資料結構</strong>，想學怎麼活用 <strong>interface</strong>，就要去學<strong>設計模式</strong>。</li>
<li><strong>Strategy</strong> + <strong>Simple Factory (依賴注入)</strong> 或 <strong>Adapter + Simple Factory (依賴注入)</strong> 是實務上<strong>最常</strong>用到的物件導向，學會這兩招，幾乎學會了 60% 的物件導向。</li>
<li>若會善用物件導向，程式碼的 <code>if else</code> 數量會降到最低，<strong>循環複雜度</strong>也會降到最低，會將原來該用 <code>if else</code> 改用 <code>interface</code>，用<strong>很多小檔案</strong>取代<strong>很長的檔案</strong>。</li>
<li>設計模式都會有些變形，不用在乎每本書講的設計模式都不太一樣，設計模式<strong>只重其意，不重其招</strong>，重點是搞懂設計模式所要解決問題的本質，就可以自行加以變形，靈活運用。</li>
</ul>
<p><img src="/images/dp/dp-adapter/adapter007.png" alt="adapter007"></p>
<p><img src="/images/dp/dp-adapter/adapter008.png" alt="adapter008"></p>
<p><img src="/images/dp/dp-adapter/adapter009.png" alt="adapter009"></p>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52Adapter_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[以實際範例一步步重構成 Adapter Pattern]]>
    
    </summary>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
      <category term="OOP" scheme="http://oomusou.io/tags/OOP/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Protractor 使用 $ 與 $$?]]></title>
    <link href="http://oomusou.io/protractor/protractor-shortcut/"/>
    <id>http://oomusou.io/protractor/protractor-shortcut/</id>
    <published>2017-06-27T12:23:43.000Z</published>
    <updated>2017-06-27T12:27:59.000Z</updated>
    <content type="html"><![CDATA[<p>在 Protractor 官網的 <a href="http://www.protractortest.org/#/locators" target="_blank" rel="external">Using Locators</a>，看到了 <code>$</code> 與 <code>$$</code> 兩個 shortcut，但在 Angular 卻無法使用，本文筆記解決方案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Protractor 5.1.2</p>
<h2 id="$_Shortcut">$ Shortcut</h2><hr>
<p>根據 Protractor 官網的 <a href="http://www.protractortest.org/#/locators" target="_blank" rel="external">Using Locators</a>：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element(by.css(<span class="string">'my-css'</span>));</span><br></pre></td></tr></table></figure>
<p>可以簡寫為</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'my-css'</span>);</span><br></pre></td></tr></table></figure>
<p>而</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.all(by.css(<span class="string">'.selector'</span>));</span><br></pre></td></tr></table></figure>
<p>可以簡寫為</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$(<span class="string">'.selector'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="標準_Locator_寫法">標準 Locator 寫法</h2><hr>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4ProtractorPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.css(<span class="string">'app-root h1'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> element(by.css(<span class="string">'app-root h1'</span>)).getText();</span><br></pre></td></tr></table></figure>
<p>理論上可以改用 <code>$</code> 與 <code>$$</code> 寫法。</p>
<h2 id="使用_$">使用 $</h2><hr>
<p><img src="/images/protractor/protractor-shortcut/shortcut000.png" alt="shortcut000"></p>
<p>但改成 <code>$</code> 之後，language service 對 <code>$</code> 提出警告，實際編譯後也出現錯誤。</p>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;$, browser&#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4ProtractorPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="string">'app-root h1'</span>).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;$, browser&#125; from <span class="string">'protractor'</span>;</span><br></pre></td></tr></table></figure>
<p>將 <code>$</code> import 進來即可。</p>
<p><img src="/images/protractor/protractor-shortcut/shortcut001.png" alt="shortcut001"></p>
<h2 id="使用_$$">使用 $$</h2><hr>
<p><img src="/images/protractor/protractor-shortcut/shortcut002.png" alt="shortcut002"></p>
<p>但改成 <code>$$</code> 之後，language service 對 <code>$$</code> 提出警告，實際編譯後也出現錯誤。</p>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;$$, browser&#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4ProtractorPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> $$(<span class="string">'app-root h1'</span>).get(<span class="number">0</span>).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;$$, browser&#125; from <span class="string">'protractor'</span>;</span><br></pre></td></tr></table></figure>
<p>將 <code>$</code> import 進來即可。</p>
<p><img src="/images/protractor/protractor-shortcut/shortcut003.png" alt="shortcut003"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>$</code> 與 <code>$$</code> 寫法可以使 locator 寫法更為簡潔，實務上推薦使用，但記得要將 <code>$</code> 與 <code>$$</code> import 進來。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://www.protractortest.org/" target="_blank" rel="external">Protractor</a>,  <a href="http://www.protractortest.org/#/locators" target="_blank" rel="external">Using Locators</a><br><a href="http://www.protractortest.org/" target="_blank" rel="external">Protractor</a>,  <a href="https://github.com/angular/protractor/tree/5.1.2/exampleTypescript" target="_blank" rel="external">Protractor with TypeScript</a></p>
]]></content>
    <summary type="html">
    <![CDATA[在 Angular 也能使用 $ 與 $$]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解決 iTerm2 在 WebStorm 啟動緩慢的問題?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-iterm2-slow/"/>
    <id>http://oomusou.io/webstorm/webstorm-iterm2-slow/</id>
    <published>2017-06-26T12:23:43.000Z</published>
    <updated>2017-06-26T03:15:57.000Z</updated>
    <content type="html"><![CDATA[<p>iTerm2 幾乎成為 macOS 最多人使用的 terminal，WebStorm 內也可直接使用 iTerm2，不過最近卻發現 iTerm2 在 WebStorm 內啟動時間越來越久，幾乎超過 30 秒以上…。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS Sierra 10.12.5<br>WebStorm 2017.1.4<br>iTerm2 3.0.14</p>
<h2 id="Recipe">Recipe</h2><hr>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /<span class="keyword">private</span>/<span class="built_in">var</span>/<span class="keyword">log</span>/asl<span class="comment">/*.asl</span></span><br></pre></td></tr></table></figure>
<p>macOS 會將 log 存在此目錄下，過多的 log 將導致 iTerm2 在 WebStorm 下啟動緩慢，將此目錄的 <code>*.asl</code> 刪除後，iTerm2 在 WebStorm 的啟動就變快了。</p>
<blockquote>
<p>不要刪除該目錄下的所有檔案，只要刪除 <code>*.asl</code> 即可。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>一個簡單的步驟，就能恢復 iTerm2 在 WebStorm 的啟動速度。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[iTerm2 在 WebStorm 的啟動速度會越來越慢]]>
    
    </summary>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 HTTP GET 對 API 抓資料?]]></title>
    <link href="http://oomusou.io/angular/angular-http-get/"/>
    <id>http://oomusou.io/angular/angular-http-get/</id>
    <published>2017-06-24T12:23:43.000Z</published>
    <updated>2017-06-26T02:44:34.000Z</updated>
    <content type="html"><![CDATA[<p>Angular 為前端 framework，因此必須依賴後端 API 提供資料，最常見的就是透過 HTTP GET 抓 JSON，這個看似簡單的動作，在 Angular 並不是單一 method 可完成，必須透過 DI 與 RxJS ，才能順利抓到資料。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><p>Angular CLI 1.1.2<br>Angular 4.2.3</p>
<h2 id="HTTP_GET">HTTP GET</h2><p>為了聚焦在 Angular 的 HTTP GET，在此我們就不自建後端 API，而使用網路上現成的 API 做示範。</p>
<p><img src="/images/angular/angular-http-get/httpget000.png" alt="httpget000"></p>
<p><a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="external">JSONPlaceholder</a> 提供了現成的 API 服務，非常適合 Angular 練習使用。</p>
<p><img src="/images/angular/angular-http-get/httpget001.png" alt="httpget001"></p>
<p>我們將使用 <a href="https://jsonplaceholder.typicode.com/posts" target="_blank" rel="external">https://jsonplaceholder.typicode.com/posts</a> API 作為示範。</p>
<p><img src="/images/angular/angular-http-get/httpget002.png" alt="httpget002"></p>
<p>回傳為 JSON 物件陣列，每個物件有 <code>userId</code>，<code>id</code>，<code>title</code> 與 <code>body</code> 4 個欄位。</p>
<h2 id="Service_部分">Service 部分</h2><hr>
<h3 id="建立_Service">建立 Service</h3><p>Angular 除了引入 component 概念外，還提供了 service 概念：</p>
<ol>
<li>負責前端商業邏輯</li>
<li>負責前端顯示邏輯</li>
<li>負責與 API 溝通</li>
</ol>
<blockquote>
<p>Angular 另外一個重要觀念 : component，則相當於後端 MVC 的 controller，負責管理 HTML，CSS 與 service。</p>
</blockquote>
<p>由於我們要透過 HTTP GET 抓 <a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="external">JSONPlaceholder</a> API 資料，因此必須先建立 service。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng <span class="keyword">g</span> s <span class="keyword">post</span></span><br></pre></td></tr></table></figure>
<p>使用 Angular CLI 建立 <code>PostService</code>，Angular CLI 會自動幫我們在 class 名稱加上 <code>Service</code>，，因此在建立時只要提供 <code>post</code> 即可。</p>
<blockquote>
<p>完整應為 <code>ng generate service</code>，但實務可取第一個字母即可，即 <code>ng g s</code>。</p>
</blockquote>
<p><img src="/images/angular/angular-http-get/httpget003.png" alt="httpget003"></p>
<p>Angular CLI 會幫我們建立 2 個檔案：</p>
<ul>
<li><strong>post.service.ts</strong>：class 名稱自動會以大駝峰命名為 <code>PostService</code>。</li>
<li><strong>post.service.spec.ts</strong>：<code>PostService</code> 的單元測試檔。</li>
</ul>
<p>其中 <code>PostService</code> 還會自動加上 <code>@Injectable</code> decorator，表示此 class 可透過 provider 完成 DI。</p>
<blockquote>
<figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; WARNING Service <span class="keyword">is</span> generated but <span class="keyword">not</span> <span class="keyword">provided</span>, it must <span class="keyword">be</span> <span class="keyword">provided</span> to <span class="keyword">be</span> used</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Angular CLI 還會特別加上警告：<code>此 service 僅被建立而已，還必須透過 provider 才能使用</code>。</p>
<h3 id="Module_提供_Service">Module 提供 Service</h3><p>Angular CLI 僅幫我們建立了 service 而已，我們還必須由 module 的 provider 提供 service，才能完成 DI。</p>
<p><strong>src/app/app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;PostService&#125; from <span class="string">'./post.service'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [PostService],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p><code>AppModule</code> 為 Angular 預設的 module，每個 Angular 專案一定會有此 module。</p>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providers: [PostService],</span><br></pre></td></tr></table></figure>
<p>為了要讓 <code>AppModule</code> 的 provider 提供 <code>PostService</code>，須在 <code>[]</code> 陣列中加上 service 名稱：<code>PostService</code>，整個 service 才算建立完成，之前 Angular CLI 的 warning 就是在警告這件事情。</p>
<p><img src="/images/angular/angular-http-get/httpget004.png" alt="httpget004"></p>
<blockquote>
<p>若你覺得建立 service 後，還要另外修改 <code>AppModule</code> 很麻煩，也可以在使用 Angular CLI 建立 service 時，直接下 <code>ng g s PostService -m app</code>，<code>-m</code> 表示 <code>PostService</code> 要由 <code>AppModule</code> 提供，Angular CLI 會自動幫我們在 <code>AppModule</code> 的 <code>providers</code> 加上 <code>PostService</code>。</p>
</blockquote>
<h3 id="使用_Http_Class">使用 Http Class</h3><p>Angular 提供了 <code>Http</code> class，讓我們使用 <code>XMLHttpRequest</code> 向後端 API 要資料。</p>
<p><strong>src/app/post.service.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Post&#125; from <span class="string">'./post'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Http, Response&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PostService &#123;</span><br><span class="line">  <span class="keyword">private</span> getPostsURI = <span class="string">'https://jsonplaceholder.typicode.com/posts'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private http: Http) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">  getPosts(): Observable&lt;Post[]&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="keyword">this</span>.getPostsURI)</span><br><span class="line">      .map((response: Response) =&gt; response.json());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> getPostsURI = <span class="string">'https://jsonplaceholder.typicode.com/posts'</span>;</span><br></pre></td></tr></table></figure>
<p>將 API 網址寫在 class 的 private property。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private http: Http) </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<p>我們要透過 <code>Http</code> class 對後端 API 抓資料，因此要透過 constructor DI <code>Http</code> class。</p>
<blockquote>
<p>為什麼 <code>Http</code> class 可以 DI 呢？</p>
</blockquote>
<p><strong><a href="https://github.com/angular/angular/blob/master/packages/http/src/http.ts#L103" target="_blank" rel="external">angular/packages/http/src/http.ts</a></strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Http &#123;</span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>因為 <code>Http</code> class 本身也是 <code>@Injectable()</code>，所以可以透過 constructor DI <code>Http</code> class。</p>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getPosts(): Observable&lt;Post[]&gt;  &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增 <code>getPost()</code> method，負責將 HTTP GET 的資料回傳。</p>
<p>注意其回傳型別為 <code>Observable</code>，因為 Angular <code>Http class</code> 的 <code>get()</code>，已經整合了 RxJS，所以回傳為 <code>Observable</code>，因此 service 回傳也應該為 <code>Observable</code>，才能由 component 決定 <code>subscribe()</code>。</p>
<p>其中 <code>Observable</code> 的泛型為 <code>Post[]</code>，畢竟 API 回傳的資料，其實是 JSON 物件的陣列，每個物件有 <code>userId</code>，<code>id</code>，<code>title</code> 與 <code>body</code> 4 個欄位，可將此 4 個欄位視為 <code>Post</code> ViewModel，所以回傳的資料本質為 <code>Post[]</code>，會在稍後建立 <code>Post</code> ViewModel。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="keyword">this</span>.getPostsURI)</span><br></pre></td></tr></table></figure>
<p>既然已經在 constructor DI <code>Http</code> class，就可以使用 <code>this.http.get()</code> 對後端 API 抓資料。</p>
<p>值得注意的是，<code>get()</code> 的回傳值型別為 <code>Observable&lt;Response&gt;</code>，並不是我們想要回傳的 <code>Observable&lt;Post[]&gt;</code> ，因此仍需要進一步的轉換。</p>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.map((response: Response) =&gt; response.json());</span><br></pre></td></tr></table></figure>
<p>由於 <code>get()</code> 回傳的為 <code>Observable&lt;Response&gt;</code>，因此 RxJS 的 operator 都可以拿來用，其中最常用的就是 <code>map()</code>，我們可以利用 <code>map()</code> 將 <code>Observable&lt;Response&gt;</code> 轉成 <code>Observable&lt;Post[]&gt;</code>。</p>
<p>對 <code>map()</code> 傳入 arrow function，因為 <code>get()</code> 回傳為 <code>Observable&lt;Response&gt;</code>，因此 <code>map()</code> 會將 <code>Response</code> 物件傳進 arrow function 的第 1 個參數，我們就可透過 <code>response.json()</code> 回傳 <code>Post[]</code>。</p>
<blockquote>
<p>其中 <code>response: Response</code> 的 <code>Response</code>，目前 WebStorm 無法自動 import，必須手動加上 <code>import {Response} from &#39;@angular/http&#39;;</code>，正常來說，WebStorm 會對型別自動 import，不過在 arrow function 內的參數型別，目前 WebStorm 還無法自動 import，需手動 import。</p>
</blockquote>
<p><img src="/images/angular/angular-http-get/httpget006.png" alt="httpget006"></p>
<blockquote>
<p>實物上的商業邏輯，會需要更複雜的轉換與判斷，RxJS 提供了很豐富的 operator 可使用，詳細請參考 <a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="external">ReactiveX Operator</a>。</p>
</blockquote>
<h3 id="載入_HttpModule">載入 HttpModule</h3><p><strong>src/app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;PostService&#125; from <span class="string">'./post.service'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    HttpModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [PostService],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  HttpModule</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>由於 <code>Http</code> class 隸屬於 <code>HttpModule</code>，因此在 <code>app.module</code> 的 <code>imports</code> 必須手動加上 <code>HttpModule</code>。</p>
<blockquote>
<p>目前 WebStorm 只能自動 import class，但還無法自動 import module，必須手動處理。</p>
</blockquote>
<p><img src="/images/angular/angular-http-get/httpget005.png" alt="httpget005"></p>
<blockquote>
<p>為什麼我們 DI <code>Http</code> class 時，都不用自己用 provider 提供 <code>Http</code> class，但自己寫的 service 卻要 provider 提供呢？</p>
</blockquote>
<p><strong><a href="https://github.com/angular/angular/blob/master/packages/http/src/http_module.ts#L49" target="_blank" rel="external">angular/packages/http/src/http_module.ts</a></strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在 <code>HttpModule</code> 的 provider 中已經提供 <code>Http</code> class，因此我們不必自己手動提供，但<code>PostService</code> 因為是自己建立的，所以必須在 <code>AppModule</code> 手動提供。</p>
<h3 id="建立_ViewModel">建立 ViewModel</h3><p><strong>src/app/post.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Post </span>&#123;</span><br><span class="line">  userId: <span class="built_in">number</span>,</span><br><span class="line">  id: <span class="built_in">number</span>,</span><br><span class="line">  title: <span class="built_in">string</span>,</span><br><span class="line">  body: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>Post</code> ViewModel 提供 <code>userId</code>、<code>id</code>、<code>title</code> 與 <code>body</code> 4 個 property，因為要給外界使用，記得加上 <code>export</code>。</p>
<p>到目前為止，service 部分已經完成，接下來是 component 部分。</p>
<h2 id="Component_部分">Component 部分</h2><hr>
<p>Component 部分有兩種寫法，一種是使用 <code>async</code> pipe，一種是使用 <code>subscribe()</code> ，將分別討論。</p>
<h3 id="使用_Async_Pipe">使用 Async Pipe</h3><p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;PostService&#125; from <span class="string">'./post.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Post&#125; from <span class="string">'./post'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  posts: Observable&lt;Post[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private postService: PostService) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.posts = <span class="keyword">this</span>.postService.getPosts();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posts: Observable&lt;Post[]&gt;;</span><br></pre></td></tr></table></figure>
<p>將從 API 抓下來的資料設定為 <code>posts</code> property，因為 <code>PostService.getPosts()</code> 回傳為 <code>Observable&lt;Post[]&gt;</code> 型別，所以 <code>posts</code> 型別也為 <code>Observable&lt;Post[]&gt;</code>。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private postService: PostService) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由 constructor DI <code>PostService</code>，因為 <code>PostService</code> 為 <code>@Injectable</code>，且在 <code>AppModule</code> 的 providers 已經提供 <code>PostService</code>，因此可以順利 DI。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.posts = <span class="keyword">this</span>.postService.getPosts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若要在 <code>AppComponent</code> 一開始執行時就執行一段程式，可在 component 內實踐 <code>ngOnInit()</code> method，此為 <code>OnInit</code> interface 所定義。</p>
<p>將 <code>postService.getPosts()</code> 結果指定給 <code>this.posts</code>。</p>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let post of posts|async"</span>&gt;</span></span><br><span class="line">    Post ID: &#123;&#123; post.id &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    User ID: &#123;&#123; post.userId &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    Title: &#123;&#123; post.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    Body: &#123;&#123; post.body &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>將 API 全部回傳資料顯示。</p>
<p>第 2 行</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">li</span> *ngFor=<span class="string">"let post of posts|async"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>特別在 <code>posts</code> 之後加上 <code>async</code> pipe。</p>
<p>RxJS 的 Observable 有個特性，會在 <code>subscribe()</code> 後才真正執行向後端 API 抓資料，若在 HTML template 加上 <code>async</code> pipe，則會自動在顯示資料時加以 <code>subscribe()</code>，並在執行結束加以 <code>unsubscribe()</code>。</p>
<h3 id="使用_Subscribe()">使用 Subscribe()</h3><p><strong>src/app/app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;PostService&#125; from <span class="string">'./post.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Post&#125; from <span class="string">'./post'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  posts: Post[];</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private postService: PostService) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.postService.getPosts()</span><br><span class="line">      .subscribe(</span><br><span class="line">        (posts: Post[]) =&gt; <span class="keyword">this</span>.posts = posts,</span><br><span class="line">        (error: <span class="built_in">any</span>) =&gt; <span class="built_in">console</span>.log(error),</span><br><span class="line">        () =&gt; <span class="built_in">console</span>.log(<span class="string">'Get posts completed'</span>)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posts: Post[];</span><br></pre></td></tr></table></figure>
<p><code>posts</code> 的型別從 <code>Observable&lt;Post[]&gt;</code> 改成 <code>Post[]</code>。</p>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.postService.getPosts()</span><br><span class="line">    .subscribe(</span><br><span class="line">      (posts: Post[]) =&gt; <span class="keyword">this</span>.posts = posts,</span><br><span class="line">      (error: <span class="built_in">any</span>) =&gt; <span class="built_in">console</span>.log(error),</span><br><span class="line">      () =&gt; <span class="built_in">console</span>.log(<span class="string">'Get posts completed'</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <code>getPosts()</code> 回傳值為 RxJS 的 <code>Observable&lt;Post[]&gt;</code>，必須在 component 下了 <code>subscribe()</code>之後，才會真正的向後端 API 抓資料。</p>
<p><code>subscribe()</code> 有 3 個參數，可分別傳入 arrow function：</p>
<ul>
<li><strong>next</strong>：<code>subscribe()</code> 後接下來要做的事情，由於 <code>map()</code> 已經在 service 內完成，要做的只剩下將 <code>posts</code> 指定到 <code>this.posts</code>。</li>
<li><strong>error</strong>：抓 API 出錯該做的事情，相當於 <code>try catch finally</code> 的 <code>catch</code>。</li>
<li><strong>complete</strong>：抓 API 結束該做的事情，相當於 <code>try catch finally</code> 的 <code>finally</code>。</li>
</ul>
<p>其中 <code>next</code> 為必須，<code>error</code> 與 <code>complete</code> 可視需求省略。</p>
<blockquote>
<p>需要自己 <code>unsubscribe()</code> 嗎？</p>
</blockquote>
<p>RxJS 中，若 <code>Observable</code> 沒有 completed 的一天，就需要手動 <code>unsubscribe()</code>，但因為 <code>Http.get()</code> 執行完後就會 completed，所以就不需要 <code>unsubscribe()</code> 動作。</p>
<p><strong>src/app/app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let post of posts"</span>&gt;</span></span><br><span class="line">    Post ID: &#123;&#123; post.id &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    User ID: &#123;&#123; post.userId &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    Title: &#123;&#123; post.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    Body: &#123;&#123; post.body &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 2 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let post of posts"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>將 <code>async</code> 拿掉。</p>
<p><img src="/images/angular/angular-http-get/httpget007.png" alt="httpget007"></p>
<blockquote>
<p>實務上該使用 <code>async</code> pipe 或是 <code>subscribe()</code> 呢？</p>
</blockquote>
<p>就功能面而言，兩種寫法結果都正確，但就程式的可維護性而言，建議使用 <code>subscribe()</code>。</p>
<p>一般來說，HTML template 建議只用於 data binding，盡量不要寫程式碼，因為日後 debug 時，注意力都是放在 TypeScript 部分，比較不會注意 HTML template，所以若有程式碼藏在 HTML template，較不容易被發現。</p>
<p>此外，在 component 看到 <code>subscribe()</code>，也可很容易看出這是 RxJS 的 <code>Observable</code>，有助於日後維護。</p>
<h2 id="為什麼要使用_Service?">為什麼要使用 Service?</h2><p>或許你會認為，明明使用  <code>XMLHttpRequest</code> 向後端 API 抓資料是很單純的事情，為什麼 Angular 還要大費周章透過 service + DI，不是提供一個簡單的 method 就好了嗎？有幾個原因：</p>
<ul>
<li>將來若其他 component 要使用 API 時，將 service 直接 DI 進 compoent 即可。</li>
<li>將來若要對 API 的 service 做抽換，可直接透過 DI 換掉即可。</li>
<li>將來若要對 component 做單元測試，可輕易的 mock API service 即可。</li>
</ul>
<p>間單的說，將 API 部分獨立成 service，目的要使 component 與 API <strong>解耦合</strong>。</p>
<h2 id="Conclusion">Conclusion</h2><ul>
<li>簡單的 HTTP GET 需求，就可以讓我們學會 DI 與 RxJS。</li>
<li>實務上建議使用 <code>subscribe()</code>，程式的可維護性較高。</li>
<li>使用 service 存取 API，而不在 component 內存取 API，可讓 component 與 API 解耦合。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG4HttpGet" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="external">ReativeX Operator</a></p>
]]></content>
    <summary type="html">
    <![CDATA[包含 DI 與 RxJS 觀念]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="RxJS" scheme="http://oomusou.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 執行 Jasmine 單元測試?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-jasmine/"/>
    <id>http://oomusou.io/webstorm/webstorm-jasmine/</id>
    <published>2017-06-22T12:23:43.000Z</published>
    <updated>2017-07-10T06:04:02.000Z</updated>
    <content type="html"><![CDATA[<p>Angular CLI 已經將 Jasmine 整好，我們可以直接在 terminal  下 <code>ng test</code> 執行單元測試；WebStorm 亦整合了 Karma + Jasmine，讓我們可以在 IDE 內直接跑 Jasmine。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Jasmine 2.6.2<br>WebStorm 2017.1.4</p>
<h2 id="設定_Karma_執行環境">設定 Karma 執行環境</h2><hr>
<p>Jasmine 是 testing framework，Karma 是 testing runner，我們必須靠 Karma 才能執行 Jasmine 單元測試。</p>
<h3 id="新增_Karma_設定">新增 Karma 設定</h3><p><img src="/images/webstorm/webstorm-jasmine/jas000.png" alt="jas000"></p>
<p><strong><em>Run -&gt; Edit Configurations</em></strong></p>
<p><img src="/images/webstorm/webstorm-jasmine/jas001.png" alt="jas001"></p>
<p>按左上角 <code>+</code> 新增 <code>Karma</code> 設定。</p>
<p><img src="/images/webstorm/webstorm-jasmine/jas002.png" alt="jas002"></p>
<p>將 Name 取名為 <code>Jasmine</code>，Configuration file 選擇專案根目錄的 <code>karma.conf.js</code>，此為 Angular CLI 為 Angular 量身定做的 Karma 設定檔。</p>
<h3 id="執行_Jasmine">執行 Jasmine</h3><p><img src="/images/webstorm/webstorm-jasmine/jas003.png" alt="jas003"></p>
<p>上方選擇 <code>Jasmine</code>，按右側的<code>綠色三角形</code>執行測試。</p>
<p><img src="/images/webstorm/webstorm-jasmine/jas004.png" alt="jas004"></p>
<p>Karma 會自動啟動瀏覽器，並顯示 <code>Karma connected</code>。</p>
<p>這個瀏覽器不用關閉，一直開啟即可，之後重跑驗收測試，Karma 會自動使用。</p>
<p><img src="/images/webstorm/webstorm-jasmine/jas005.png" alt="jas005"></p>
<p>通過 Angular 的 <code>app/app.component.spec.ts</code> 的 3  個測試案例，並顯示 <code>綠燈</code>。</p>
<p>到目前為止，已經設定好 Karma 在 WebStorm 的執行環境。</p>
<h2 id="自動執行_Jasmine">自動執行 Jasmine</h2><hr>
<p><img src="/images/webstorm/webstorm-jasmine/jas006.png" alt="jas006"></p>
<p>若你希望寫完測試後，WebStorm 可自動存檔並執行 Jasmine 測試，可按下左側的 <code>Toggle auto-test</code>，日後只要修改測試，Jasmine 會自動執行。</p>
<blockquote>
<p>不需存檔，WebStorm 會自動存檔並執行 Jasmine 測試。</p>
</blockquote>
<h2 id="手動執行_Jasmine">手動執行 Jasmine</h2><hr>
<p><img src="/images/webstorm/webstorm-jasmine/jas007.png" alt="jas007"></p>
<p>實務上會有很多測試案例，但可能目前只想執行單一測試案例，可在 <code>it</code> 前加上 <code>f</code>，表示 <code>focus</code>，再按下上方或左側的 <code>綠色三角形</code> 執行測試，則 Karma 將只執行 <code>fit()</code> 的測試案例，其他測試案例將忽略不執行。</p>
<p><img src="/images/webstorm/webstorm-jasmine/jas008.png" alt="jas008"></p>
<p>實務上若某些測試案例暫時不想執行，可在 <code>if</code> 前加上 <code>x</code>，表示 <code>exclude</code>，再按下上方或左側的 <code>綠色三角形</code> 執行測試，則 Karma 將不執行 <code>xit()</code> 的測試案例，其他測試案例則繼續執行。</p>
<h2 id="快速建立測試">快速建立測試</h2><hr>
<p><img src="/images/webstorm/webstorm-jasmine/jas009.png" alt="jas009"></p>
<p>WebStorm 已經內建 Jasmine 樣板，按熱鍵可產生 <code>Jasmine Suite</code> 、<code>Jasmine Spec</code>、<code>Jasmine beforeEach</code> 與 <code>Jasmine afterEach</code>，讓我們更快速產生驗收測試，節省開發時間。</p>
<blockquote>
<p>Windows : Ctrl + N</p>
<p>macOS : ⌘ + N</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>是否要<strong>自動執行</strong>或<strong>手動執行</strong> Jasmine 因人而異，個人是比較喜歡用 <code>fit()</code> 與  <code>xit()</code>  控制要執行什麼測試，然後手動執行。</li>
<li>Angular CLI  雖然提供了 <code>ng test</code>，讓我們在 terminal 就能執行 Jasmine 單元測試，但在 WebStorm 內跑 Jasmine，我們可以更明確知道哪些測試案例是 <code>紅燈綠燈</code>，也可享受圖形化介面的方便。</li>
<li>目前唯一的遺憾是儘管設定了中斷點，在 Karma 下仍然無法停止，但 Protractor 下卻可以，有待 WebStorm 解決此 bug。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[不用透過 Angular CLI 也能執行 Jasmine]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Jasmine" scheme="http://oomusou.io/tags/Jasmine/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 執行 Protractor E2E 測試?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-protractor/"/>
    <id>http://oomusou.io/webstorm/webstorm-protractor/</id>
    <published>2017-06-21T12:23:43.000Z</published>
    <updated>2017-06-22T07:21:16.000Z</updated>
    <content type="html"><![CDATA[<p>Angular CLI 已經將 Protractor 整好，我們可以直接在 terminal  下 <code>ng e2e</code> 執行 E2E 測試；WebStorm 亦整合了 Protractor，讓我們可以在 IDE 內直接跑 Protractor。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.1.2<br>Angular 4.2.3<br>Protractor 5.1.2<br>Jasamine 2.6.2<br>WebStorm 2017.1.4</p>
<h2 id="設定_Protractor_執行環境">設定 Protractor 執行環境</h2><hr>
<h3 id="啟動_Angular_內建_Web_Server">啟動 Angular 內建 Web Server</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ng serve</span><br></pre></td></tr></table></figure>
<p>使用 <code>ng e2e</code> 跑 E2E testing 時，不用事先啟動 web server，因為 Angular CLI 會在測試前先啟動 web server，然後執行驗收測試，最後再關閉 web server，但若使用 WebStorm 跑 Protractor，則必須在背景先執行 <code>ng serve</code> 啟動 web server。</p>
<p><img src="/images/webstorm/webstorm-protractor/pro000.png" alt="pro000"></p>
<h3 id="新增_Protractor_設定">新增 Protractor 設定</h3><p><img src="/images/webstorm/webstorm-protractor/pro001.png" alt="pro001"></p>
<p><strong><em>Run -&gt; Edit Configurations</em></strong></p>
<p><img src="/images/webstorm/webstorm-protractor/pro002.png" alt="pro002"></p>
<p>按左上角 <code>+</code> 新增 <code>Protractor</code> 設定。</p>
<p><img src="/images/webstorm/webstorm-protractor/pro003.png" alt="pro003"></p>
<p>將 Name 取名為 <code>Protractor</code>，其他設定 WebStorm 會自動抓到，接受預設值即可。</p>
<h3 id="執行_Protractor">執行 Protractor</h3><p><img src="/images/webstorm/webstorm-protractor/pro005.png" alt="pro005"></p>
<p>上方選擇 <code>Protractor</code>，按右側的<code>綠色三角形</code>執行測試。</p>
<p><img src="/images/webstorm/webstorm-protractor/pro006.png" alt="pro006"></p>
<p>Protractor 會自動啟動瀏覽器在 <code>http://localhost:4200</code>，執行完測試後自動關閉瀏覽器。</p>
<p>到目前為止，已經設定好 Protractor 在 WebStorm 的執行環境。</p>
<h2 id="自動執行_Protractor">自動執行 Protractor</h2><hr>
<p><img src="/images/webstorm/webstorm-protractor/pro007.png" alt="pro007"></p>
<p>若你希望寫完測試後，WebStorm 可自動存檔並執行 Protractor 測試，可按下左側的 <code>Toggle auto-test</code>，日後只要修改測試，Protractor 會自動執行。</p>
<blockquote>
<p>不需存檔，WebStorm 會自動存檔並執行 Protractor 測試。</p>
</blockquote>
<h2 id="手動執行_Protractor">手動執行 Protractor</h2><hr>
<p><img src="/images/webstorm/webstorm-protractor/pro008.png" alt="pro008"></p>
<p>實務上會有很多測試案例，但可能目前只想執行單一測試案例，可在 <code>it</code> 前加上 <code>f</code>，表示 <code>focus</code>，再按下上方或左側的 <code>綠色三角形</code> 執行測試，則 Protractor 將只執行 <code>fit()</code> 的測試案例，其他測試案例將忽略不執行。</p>
<p><img src="/images/webstorm/webstorm-protractor/pro009.png" alt="pro009"></p>
<p>實務上若某些測試案例暫時不想執行，可在 <code>if</code> 前加上 <code>x</code>，表示 <code>exclude</code>，再按下上方或左側的 <code>綠色三角形</code> 執行測試，則 Protractor 將不執行 <code>xit()</code> 的測試案例，其他測試案例則繼續執行。</p>
<h2 id="快速建立測試">快速建立測試</h2><hr>
<p><img src="/images/webstorm/webstorm-protractor/pro010.png" alt="pro010"></p>
<p>WebStorm 已經內建 Jasmine 樣板，按熱鍵可產生 <code>Jasmine Suite</code> 、<code>Jasmine Spec</code>、<code>Jasmine beforeEach</code> 與 <code>Jasmine afterEach</code>，讓我們更快速產生驗收測試，節省開發時間。</p>
<blockquote>
<p>Windows : Ctrl + N</p>
<p>macOS : ⌘ + N</p>
</blockquote>
<h2 id="對測試下中斷點">對測試下中斷點</h2><hr>
<p><img src="/images/webstorm/webstorm-protractor/pro011.png" alt="pro011"></p>
<p>若要對測試程式下中斷點，也可以直接在程式碼左側加上 <code>紅色</code> 中斷點，按上方的 <code>綠色瓢蟲</code> 執行 debug 模式，則 WebStorm 會自動停在中斷點進行 debug。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>是否要<strong>自動執行</strong>或<strong>手動執行</strong> Protractor 因人而異，個人是比較喜歡用 <code>fit()</code> 與  <code>xit()</code>  控制要執行什麼測試，然後手動執行。</li>
<li>Angular CLI  雖然提供了 <code>ng e2e</code>，讓我們在 terminal 就能執行 Protractor E2E 測試，但在 WebStorm 內跑 Protractor，我們可以更明確知道哪些測試案例是 <code>紅燈綠燈</code>，還可以對測試下中斷點，直接 step into 做 debug。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[不用透過 Angular CLI 也能執行 Protractor]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何將 Git Bash 整合進 WebStorm？]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-git-bash/"/>
    <id>http://oomusou.io/webstorm/webstorm-git-bash/</id>
    <published>2017-06-19T12:23:43.000Z</published>
    <updated>2017-06-15T07:39:55.000Z</updated>
    <content type="html"><![CDATA[<p>WebStorm for Windows 的 terminal 預設是使用 Windows 內建的 Command Prompt，但可惜內建的 Command Prompt 不強，而 Git Bash 是 Git for Windows 所提供的 git 文字介面，讓我們可以直接對 git 下指令，並顯示當前的 branch，重點是能在 Windows 使用 Bash，且整合進 WebStorm 的 terminal。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>WebStorm 2017.1.4<br>Git for Windows 2.13.1</p>
<h2 id="下載_Git_Bash">下載 Git Bash</h2><hr>
<p>到 <a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git for Windows</a> 下載 Git Bash。</p>
<p><img src="/images/webstorm/webstorm-git-bash/bash000.png" alt="bash000"></p>
<h2 id="安裝_Git_Bash">安裝 Git Bash</h2><hr>
<p>基本下都 <code>下一步</code> 即可。</p>
<h2 id="設定_WebStorm">設定 WebStorm</h2><hr>
<p><img src="/images/webstorm/webstorm-git-bash/bash001.png" alt="bash001"></p>
<p><strong><em>File -&gt; Settings -&gt; Tools -&gt; Terminal</em></strong></p>
<ul>
<li><strong>Shell path</strong> : <code>&quot;C:\Program Files\Git\bin\sh.exe&quot; -login -i</code></li>
</ul>
<p>重新啟動 WebStorm。</p>
<h2 id="執行_Git_Bash">執行 Git Bash</h2><hr>
<p><img src="/images/webstorm/webstorm-git-bash/bash002.png" alt="bash002"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Git Bash 算是在 Windows 下最接近 Linux 血統的 terminal，實務上完全可以取代 Windows 內建的 Command Prompt。</li>
<li>WebStorm 的 terminal 也能順利跑 Git Bash。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li><a href="https://bobsguides.com/" target="_blank" rel="external">Bob’s Guide</a>, <a href="https://bobsguides.com/blog.html/2014/10/23/git-bash-inside-phpstorm/" target="_blank" rel="external">Git Bash Inside PhpStorm</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Git Bash 也能跑在 WebStorm 的 terminal]]>
    
    </summary>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Protractor 對 Laravel 進行驗收測試?]]></title>
    <link href="http://oomusou.io/protractor/protractor-laravel/"/>
    <id>http://oomusou.io/protractor/protractor-laravel/</id>
    <published>2017-06-19T12:23:43.000Z</published>
    <updated>2017-06-19T23:03:58.000Z</updated>
    <content type="html"><![CDATA[<p><strong>驗收測試</strong>是以使用者角度對網站做測試，屬於<strong>黑箱測試</strong>，既然是黑箱測試，原本使用 PHP/Laravel 所開發的網站，就不一定要使用 PHP/Laravel 後端技術來做驗收測試，也可以使用前端的技術來做；透過 Angular CLI，我們可使用 TypeScript + Protractor + Jasmine + Webpack 對 PHP/Laravel 做驗收測試。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.15<br>Laravel 5.4.27<br>Angular CLI 1.1.2<br>Angular 4.2.3<br>TypeScript 2.3.3<br>Protractor 5.1.2<br>Jasmine 2.6.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer <span class="operator"><span class="keyword">create</span>-<span class="keyword">project</span> laravel/laravel Laravel54 <span class="comment">--prefer-dist</span></span></span><br></pre></td></tr></table></figure>
<p>使用 Composer 建立 Laravel 專案。</p>
<h2 id="執行_Laravel">執行 Laravel</h2><hr>
<p><img src="/images/protractor/protractor-laravel/laravel000.png" alt="laravel000"></p>
<p>執行 <code>php artisan serve</code> 啟動內建的 PHP web server，預設執行在 <code>http://127.0.0.1:8000</code>。</p>
<p><img src="/images/protractor/protractor-laravel/laravel001.png" alt="laravel001"></p>
<p>在 <code>http://127.0.0.1:8000</code>，我們看到了首頁有斗大的 <code>Laravel</code>。</p>
<h2 id="安裝_Angular_CLI">安裝 Angular CLI</h2><hr>
<p>我們即將使用 Protractor 對 Laravel 做驗收測試，在 Angular CLI 中，已經將 TypeScript + Protractor + Jasmine + Webpack 都整合好了，因此我們要安裝 Angular CLI，由 Angular CLI 建立 Angular 專案後，再修改專案內的 <code>e2e</code> 目錄的測試程式，由 Protractor 對 Laravel 做驗收測試。</p>
<p><strong>安裝 Node.js</strong></p>
<p>(略)</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install -g <span class="property">@angular</span>/cli</span><br></pre></td></tr></table></figure>
<p>由 NPM 安裝 Angular CLI。</p>
<ul>
<li><strong>-g</strong>  : 表 global，將 Angular CLI 安裝在系統全域環境，整個 macOS 都能用。</li>
</ul>
<h2 id="建立_Angular_專案">建立 Angular 專案</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng <span class="keyword">new</span> NG4Protractor</span><br></pre></td></tr></table></figure>
<p>使用 Angular CLI 建立 Angular 專案。</p>
<h2 id="修改_Page_Object">修改 Page Object</h2><hr>
<p><strong>e2e/app.po.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browser, by, element &#125; from <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NG4ProtractorPage &#123;</span><br><span class="line">  navigateTo() &#123;</span><br><span class="line">    browser.waitForAngularEnabled(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> browser.get(<span class="string">'http://127.0.0.1:8000/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getParagraphText() &#123;</span><br><span class="line">    <span class="keyword">return</span> element(by.className(<span class="string">'title m-b-md'</span>)).getText();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>app.po.ts</code> 為 page object，目的讓我們的驗收測試不用直接面對容易變動的 HTML 與 CSS，若將來 HTML 與 CSS 有任何修改，只要統一的修改 <code>app.po.ts</code> 檔案即可，不用修改驗收測試。</p>
<p>第 4 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">navigateTo() &#123;</span><br><span class="line">  browser.waitForAngularEnabled(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> browser.get(<span class="string">'http://127.0.0.1:8000/'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Angular 的 Protractor，預設會判斷網頁是否由 Angular 開發，但目前我們要測的不是 Angular，而是 Laravel，因此必須加上 <code>browser.waitForAngularEnabled(false)</code>，避免測試失敗。</p>
<p>由於 Laravel 預設的網址為 <code>http://127.0.0.1:8000/</code>，因此在 <code>browser.get()</code> 加上網址。</p>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> getParagraphText() &#123;</span><br><span class="line">   <span class="keyword">return</span> element(by.className(<span class="string">'title m-b-md'</span>)).getText();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們想要測試的<strong>首頁是否有 Laravel</strong>。</p>
<p><img src="/images/protractor/protractor-laravel/laravel002.png" alt="laravel002"></p>
<p>根據 <code>welcome.blade.php</code>，我們發現 <code>Laravel</code> 的 <code>&lt;div&gt;</code> 的 CSS class 是 <code>title m-b-md</code>，因此使用 Protractor 的 <code>by.className(&#39;title m-b-md&#39;)</code> 抓到該 element，再由 <code>getText()</code> 抓到 <code>Laravel</code>。</p>
<h2 id="修改驗收測試">修改驗收測試</h2><hr>
<p><strong>e2e/app.e2e-spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NG4ProtractorPage &#125; from <span class="string">'./app.po'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'ng4-protractor App'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> page: NG4ProtractorPage;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    page = <span class="keyword">new</span> NG4ProtractorPage();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should display Laravel'</span>, () =&gt; &#123;</span><br><span class="line">    page.navigateTo();</span><br><span class="line">    expect(page.getParagraphText()).toEqual(<span class="string">'Laravel'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>app.e2e-spec.ts</code> 才是真正的驗收測試，如同使用 Jasmine 寫單元測試一樣。</p>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">  page = <span class="keyword">new</span> NG4ProtractorPage();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在每個驗收測試執行之前，先建立 page object 物件。</p>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should display Laravel'</span>, () =&gt; &#123;</span><br><span class="line">  page.navigateTo();</span><br><span class="line">  expect(page.getParagraphText()).toEqual(<span class="string">'Laravel'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>測試案例，想要測試是否在首頁看到 <code>Laravel</code> ，使用 page object 的 <code>getParagraphText()</code> 抓到值，再由 <code>expect().toEqual(&#39;Laravel&#39;)</code> 判斷是否為 <code>Laravel</code>。</p>
<h2 id="執行驗收測試">執行驗收測試</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ng e2e --serve=<span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>預設 <code>ng e2e</code> 會重新編譯整個 Angular，但目前我們並沒有寫 Angular，只是想藉由 Angular CLI 的 Protractor 環境測試 Laravel 而已，因此要加上 <code>—serve=false</code>，則 Angular CLI 將只會編譯 Protractor 部分的驗收測試而已，速度會快很多。 </p>
<p><img src="/images/protractor/protractor-laravel/laravel003.png" alt="laravel003"></p>
<p><code>綠燈</code> 通過 Protractor 驗收測試。</p>
<blockquote>
<p>若在公司的 proxy 內，Protractor 將無法正常執行，必須自行設定 NPM proxy。</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config -<span class="keyword">g</span> <span class="keyword">set</span> proxy http:<span class="comment">//xxx.xxx.xxx.xxx.xxx:80</span></span><br><span class="line">$ npm config -<span class="keyword">g</span> <span class="keyword">set</span> https-proxy http:<span class="comment">//xxx.xxx.xxx.xxx.xxx:80</span></span><br></pre></td></tr></table></figure>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Protractor 原本是 Google 為 Angular 量身定做的 E2E testing framework，專門用來測試 Angular 所開發的網站，但也能用來測試任何以後端為主的網站，不侷限於 Laravel。</li>
<li>藉由 Angular CLI 所建立的 Angular 專案，我們將不用再手動整理 TypeScript + Protractor + Jasmine + Webpack 環境，Angular CLI 已經幫我們搞定了。</li>
<li>若將來想將 MVC 專案重構成前後端分離的專案，可藉由此方式先將 MVC 的驗收測試先用 Protractor 寫好，然後重構 MVC 專案，達到商業邏輯與後端 framework 解耦合後，將來再將後端的商業邏輯移植到前後端分離的後端 framework，下一步再使用 Angular 接後端 API，最後再使用同一份 Protractor 驗收測試來測試 Angular，由於驗收測試是同一份，更能確保從 MVC 重構成前後端分離後，功能是否完全正常。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou" target="_blank" rel="external">GitHub</a> 上找到</p>
<ul>
<li><a href="https://github.com/oomusou/Laravel54" target="_blank" rel="external">Laravel</a></li>
<li><a href="https://github.com/oomusou/NG4Protractor" target="_blank" rel="external">Protractor</a></li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://coryrylan.com" target="_blank" rel="external">Cory Rylan</a>, <a href="https://coryrylan.com/blog/introduction-to-e2e-testing-with-the-angular-cli-and-protractor" target="_blank" rel="external">Introduction to E2E Testing with the Angular CLI and Protractor</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用前端技術對後端做驗收測試]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Protractor" scheme="http://oomusou.io/tags/Protractor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之 Module]]></title>
    <link href="http://oomusou.io/typescript/typescript-module/"/>
    <id>http://oomusou.io/typescript/typescript-module/</id>
    <published>2017-06-18T12:23:43.000Z</published>
    <updated>2017-06-13T16:15:26.000Z</updated>
    <content type="html"><![CDATA[<p>ES6 提出了 module 概念，讓我們將程式碼加以模組化，避免如 ES5 一樣常常寫出幾千行的程式碼，造成日後難以維護，TypeScript 也支援 ES6 的 module。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScrpit 2.3</p>
<h2 id="Introduction">Introduction</h2><hr>
<p>Module 有自己的 scope，不是 global scope，也就是說，在 module 內的變數、function、class 與 interface …，只有在同一個 module 內才看得到，除非特別加上 <code>export</code> 關鍵字，外界才能存取；同樣的，module 要使用其他 module 的變數、function、class 與 interface …，除非特別加上 <code>import</code> 關鍵字，才能存取外界。</p>
<blockquote>
<p>在 TypeScript，只要檔案中存在 <code>import</code> 或 <code>export</code> 關鍵字，都被視為 module。</p>
</blockquote>
<h2 id="Export">Export</h2><hr>
<h3 id="直接_Export">直接 Export</h3><p><strong>Validation.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> StringValidator </span>&#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>interface</code> 前面加上 <code>export</code>，則可直接 export 出去。</p>
<p><strong>ZipCodeValidator.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ZipCodeValidator <span class="keyword">implements</span> StringValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>const</code> 之前加上 <code>export</code>，則可直接 export 出去。</p>
<p>在 <code>class</code> 之前加上 <code>export</code> ，則可直接 export 出去。</p>
<blockquote>
<p>要直接 export，只要在 <code>const</code>、<code>function</code> 、<code>class</code> 與 <code>interface</code> 之前加上 <code>export</code> 關鍵字即可。</p>
</blockquote>
<h3 id="以別名_Export">以別名 Export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> ZipCodeValidator <span class="keyword">implements</span> StringValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator as mainValidator &#125;;</span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator &#125;;</span><br></pre></td></tr></table></figure>
<p>相當於</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ZipCodeValidator <span class="keyword">implements</span> StringValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator as mainValidator &#125;;</span><br></pre></td></tr></table></figure>
<p>將原本 <code>ZipCodeValidator</code> 以 <code>mainValidator</code> 名稱 export 出去。</p>
<blockquote>
<p>實務上有可能原本要 export 的名稱太長，或者不夠貼近 domain，因此不適合使用者，需要用更簡短、更精準的名稱時，可以搭配 <code>as</code>。</p>
</blockquote>
<h3 id="重新_Export">重新 Export</h3><p><strong>ParseIntBasedZipCodeValidator.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParseIntBasedZipCodeValidator &#123;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; <span class="built_in">parseInt</span>(s).toString() === s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export original validator but rename it</span></span><br><span class="line"><span class="keyword">export</span> &#123;ZipCodeValidator as RegExpBasedZipCodeValidator&#125; from <span class="string">"./ZipCodeValidator"</span>;</span><br></pre></td></tr></table></figure>
<p>使用 <code>export {} from</code> 可以從另外一個 module 間接的將另外一個 module 內的東西 export 出去。</p>
<p>可明確指定要 export 什麼東西。</p>
<p><strong>AllValidators.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * from <span class="string">"./StringValidator"</span>; <span class="comment">// exports interface 'StringValidator'</span></span><br><span class="line"><span class="keyword">export</span> * from <span class="string">"./LettersOnlyValidator"</span>; <span class="comment">// exports class 'LettersOnlyValidator'</span></span><br><span class="line"><span class="keyword">export</span> * from <span class="string">"./ZipCodeValidator"</span>;  <span class="comment">// exports class 'ZipCodeValidator'</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>export * from</code> 明確另外一個 module 的<strong>所有東西</strong> export 出去。</p>
<h2 id="Import">Import</h2><hr>
<h3 id="單一_Import">單一 Import</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ZipCodeValidator &#125; from <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> ZipCodeValidator();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import {} from</code> 可以從一個 module 單一 import 一個東西。</p>
<h3 id="以別名_Import">以別名 Import</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ZipCodeValidator as ZCV &#125; from <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> ZCV();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import { as } from</code> 可以從一個 module 單一 import 後，並同時取別名。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * as validator from <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> validator.ZipCodeValidator();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import * as from</code> 將一個 module 所有東西 import 成一個變數，並透過變數去存取所有 export 的東西。</p>
<h2 id="Default_Export">Default Export</h2><hr>
<p>一個 module 僅可以有一個 default export。</p>
<p><strong>ZipCodeValidator.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ZipCodeValidator &#123;</span><br><span class="line">    <span class="keyword">static</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line">    isAcceptable(s: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; ZipCodeValidator.numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>export</code> 之後加上 <code>default</code>。</p>
<p><strong>Test.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> validator from <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> validator();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import 名稱 from</code>，不需使用 <code>{}</code>，直接將 default export 成特定名稱。 </p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過 module，我們能將功能相近的變數、function、class 與 interface 放在同一個 module，讓程式碼更加模組化，避免一個檔案好幾千行而難以維護。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/modules.html" target="_blank" rel="external">Handbook : Modules</a></p>
]]></content>
    <summary type="html">
    <![CDATA[TypeScript 也支援 ES6 的 module]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之 Arrow Function]]></title>
    <link href="http://oomusou.io/typescript/typescript-arrow-function/"/>
    <id>http://oomusou.io/typescript/typescript-arrow-function/</id>
    <published>2017-06-17T12:23:43.000Z</published>
    <updated>2017-06-13T06:31:58.000Z</updated>
    <content type="html"><![CDATA[<p>Arrow function 是 ES6 最重要的發明，讓 FRP 能以更簡潔的方式呈現，TypeScript 當然可使用，在 Angular 也隨處可見，如 RxJS 就必須大量使用 arrow function，是學習 Angular 一定要會的。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.3</p>
<h2 id="以_=&gt;_取代_Anonymous_Function">以 =&gt; 取代 Anonymous Function</h2><hr>
<p>Arrow function 可以用來取代 anonymous function。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="function"><span class="keyword">function</span> (<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> `Hello $&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam Xiao</span></span><br></pre></td></tr></table></figure></p>
<p>後面是 anonymous function，但我們可發現，<code>function</code> 事實上是個虛字。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = (firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span>): <span class="built_in">string</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> `Hello $&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam Xiao</span></span><br></pre></td></tr></table></figure>
<p>將 <code>function</code> 省略，改以 <code>=&gt;</code> 取代。</p>
<p>但又發現 <code>return</code> 也是虛字。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = (firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span>): <span class="built_in">string</span> =&gt; `Hello $&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam Xiao</span></span><br></pre></td></tr></table></figure>
<p>因為只有單一 <code>return</code>，可將 <code>{return}</code> 一起省略。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = (firstName: <span class="built_in">string</span>): <span class="built_in">string</span> =&gt; `Hello $&#123;firstName&#125;`;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>假如我們只保留 <code>firstName</code> 1 個參數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = firstName =&gt; `Hello $&#123;firstName&#125;`;</span><br><span class="line"></span><br><span class="line">message = hello(<span class="string">'Sam'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>因為只有單一參數，連 <code>()</code> 都可省略。</p>
<h2 id="以_=&gt;_取代_Callback">以 =&gt; 取代 Callback</h2><hr>
<p>Arrow function 可以用來取代 callback。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> angular = [</span><br><span class="line">  <span class="string">'Kevin'</span>,</span><br><span class="line">  <span class="string">'Jeff'</span>,</span><br><span class="line">  <span class="string">'Jimmy'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = angular.map(<span class="function"><span class="keyword">function</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> person.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(length); <span class="comment">// [5, 4, 5]</span></span><br></pre></td></tr></table></figure>
<p>如常用的 <code>map()</code>，會需要我們傳入 callback，決定要回傳的新陣列。</p>
<p>但我們可發現，<code>function</code> 事實上是個虛字。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> angular = [</span><br><span class="line">  <span class="string">'Kevin'</span>,</span><br><span class="line">  <span class="string">'Jeff'</span>,</span><br><span class="line">  <span class="string">'Jimmy'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = angular.map((person) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> person.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(length); <span class="comment">// [5, 4, 5]</span></span><br></pre></td></tr></table></figure>
<p>可將 <code>function</code> 省略，改用 <code>=&gt;</code>。</p>
<p>但又發現 <code>return</code> 也是虛字。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> angular = [</span><br><span class="line">  <span class="string">'Kevin'</span>,</span><br><span class="line">  <span class="string">'Jeff'</span>,</span><br><span class="line">  <span class="string">'Jimmy'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = angular.map((person) =&gt; person.length);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(length); <span class="comment">// [5, 4, 5]</span></span><br></pre></td></tr></table></figure>
<p>因為只有單一 <code>return</code>，可將 <code>{return}</code> 一起省略。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> angular = [</span><br><span class="line">  <span class="string">'Kevin'</span>,</span><br><span class="line">  <span class="string">'Jeff'</span>,</span><br><span class="line">  <span class="string">'Jimmy'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = angular.map(person =&gt; person.length);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(length);</span><br></pre></td></tr></table></figure>
<p>因為只有單一參數，連 <code>()</code> 都可省略。</p>
<h2 id="語法規則">語法規則</h2><hr>
<h3 id="多參數">多參數</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(param1, param2, …, paramN) =&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>若有多行程式，須以 <code>{}</code> 包起來。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(param1, param2, …, paramN) =&gt; expression</span><br><span class="line">(param1, param2, …, paramN) =&gt; &#123; <span class="keyword">return</span> expression;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>若只有單一 <code>return</code>，可將 <code>{return }</code> 拿掉。</li>
</ul>
<h3 id="單一參數">單一參數</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(singleParam) =&gt; &#123; statements &#125;</span><br><span class="line">singleParam =&gt; &#123; statements &#125;</span><br><span class="line">singleParam =&gt; expression</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>若有多行程式，須以 <code>{}</code> 包起來。</li>
<li>若只有單一 <code>return</code>，可將 <code>{return }</code> 拿掉。</li>
<li>單一參數，可連 <code>()</code> 都拿掉。</li>
</ul>
<h3 id="無參數">無參數</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123; statements &#125;</span><br><span class="line">() =&gt; expression</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>若有多行程式，須以 <code>{}</code> 包起來。</li>
<li>若只有單一 <code>return</code>，可將 <code>{return }</code> 拿掉。</li>
<li>無參數必須保留 <code>()</code>。</li>
</ul>
<h3 id="回傳物件">回傳物件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">params =&gt; (&#123;foo:bar&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>function</code> 以 <code>=&gt;</code> 取代。</li>
<li>多參數/單一參數/無參數的規則依舊。</li>
<li>將回傳物件外面加上 <code>()</code></li>
</ul>
<blockquote>
<p>因為 <code>{}</code> 已經被物件使用，只好改用 <code>()</code>。</p>
</blockquote>
<h2 id="Anonymous_Function_與_this">Anonymous Function 與 this</h2><hr>
<p>在 ES5 時，anonymous function 搭配 this 時，總讓人很糾結。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo =&#123;</span><br><span class="line">  name: <span class="string">"Sam"</span>,</span><br><span class="line"></span><br><span class="line">  handleMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message, callback</span>)</span>&#123;</span><br><span class="line">    callback(message);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.receive(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>結果執行錯誤，<code>this.name</code> 為 undefined。</p>
<p>因為 anonymous function 的 this，並不是指向 <code>Foo</code>，所以存取不到 <code>this.name</code>。</p>
<p>在 ES5，我們會這用以下寫法：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo =&#123;</span><br><span class="line">  name: <span class="string">"Sam"</span>,</span><br><span class="line"></span><br><span class="line">  handleMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message, callback</span>)</span>&#123;</span><br><span class="line">    callback(message);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that.name);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.receive(); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">that = <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure>
<p>讓 <code>receive</code> scope 的 <code>that</code> 指向 <code>this</code>。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(that.name);</span><br></pre></td></tr></table></figure>
<p>改用 <code>that.name</code>，就可以正確顯示 <code>Hello Sam</code>。</p>
<blockquote>
<p>很多人搞不懂 this 是什麼，就乾脆都寫成 that = this。</p>
</blockquote>
<h2 id="Arrow_Function_與_this">Arrow Function 與 this</h2><hr>
<p>我們剛剛知道，在ES6 可以使用 arrow function 取代 anonymous function。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo =&#123;</span><br><span class="line">  name: <span class="string">"Sam"</span>,</span><br><span class="line"></span><br><span class="line">  handleMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message, callback</span>)</span>&#123;</span><br><span class="line">    callback(message);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.receive(); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>使用 arrow function 後，<code>this</code> 就能如預期的抓到 <code>this.name</code>，顯示 <code>Hello Sam</code>。</p>
<p>透過 <a href="https://www.typescriptlang.org/play/" target="_blank" rel="external">TypeScript Playground</a>，我們來看看到底有什麼黑魔法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo = &#123;</span><br><span class="line">    name: <span class="string">"Sam"</span>,</span><br><span class="line">    handleMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message, callback</span>) </span>&#123;</span><br><span class="line">        callback(message);</span><br><span class="line">    &#125;,</span><br><span class="line">    receive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.handleMessage(<span class="string">"Hello, "</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(_this.name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Foo.receive(); <span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure>
<p>原來編譯成 ES5 之後，TypeScript 自動幫我們加上 <code>_this = this</code>，因此我們可以抓到 <code>name</code>。</p>
<blockquote>
<p>雖然 anonymous function 與 arrow function 對 this 的觀點不同，但並沒有誰對誰錯，只是應用場合不同，當你比較需要類似 OOP 的方式，就使用 arrow function；若比較需要 FRP 的方式，就使用 anonymous function，當你手中不再只有錘子，所看的東西就不再只是釘子。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Arrow function 是 FRP 的重要推手，讓我們可以使用更精簡的方式使用 callback，將更多的虛字拿掉，只留下商業邏輯中最關鍵的部分。</li>
<li><code>this</code> 一直是 JavaScript 頗具爭議之處，arrow function 讓我們有另外一種方式使用 <code>this</code>，我們可以視需求決定該使用 arrow function 或 anonymous function。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/functions.html" target="_blank" rel="external">Handbook : Functions</a><br><a href="https://egghead.io" target="_blank" rel="external">Egghead.io</a>, <a href="https://egghead.io/lessons/ecmascript-6-arrow-function-in-es6" target="_blank" rel="external">Arrow Function =&gt; in ES6</a></p>
]]></content>
    <summary type="html">
    <![CDATA[探討 ES6 的招牌菜 Arrow Function]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之 Function]]></title>
    <link href="http://oomusou.io/typescript/typescript-function/"/>
    <id>http://oomusou.io/typescript/typescript-function/</id>
    <published>2017-06-17T11:23:43.000Z</published>
    <updated>2017-06-14T02:22:40.000Z</updated>
    <content type="html"><![CDATA[<p>TypeScript 的 function 可對參數做強型別檢查與 function type，此外 ES6 還多了 optional / default / rest parameter，當然 TypeScript 也可使用。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.3</p>
<h2 id="Parameter_with_Type">Parameter with Type</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// named function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// anonymous function</span></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>
<p>無論是 named function 或者是 anonymous function，都可以在參數與回傳值明確指定 type，讓編譯器幫我們做檢查，一但型別錯誤，編譯將會失敗。</p>
<h2 id="Function_Type">Function Type</h2><hr>
<p>除了參數加上型別外，我們還可以對整個 function 也加上型別，讓編譯器幫我們檢查 function 是否符合這個型別。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)=&gt;<span class="built_in">number</span> =</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>
<p><code>myAdd</code> 的型別為 <code>(x: number, y: number)=&gt;number</code>，關於 function type，主要分成兩部分：</p>
<ul>
<li>參數型別</li>
<li>回傳值型別</li>
</ul>
<p>因為宣告了 function type，在 <code>=</code> 之後的 anonymous function 就必須符合所規定的 function type，若 anonymous function 不符合 function type，編譯會錯誤。</p>
<p>不過在實務上，我們不會真的這樣寫，因為實在太冗長了，只會寫成：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>
<p>TypeScript 編譯器會自動幫我們轉成</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)=&gt;<span class="built_in">number</span> =</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>
<p>TypeScript 會自動幫我們將 <code>myAdd</code> 加上型別，若之後再指定其他 function 給 <code>myAdd</code>，只要不符合 function type 就會報錯。</p>
<blockquote>
<p>TypeScript 在觀念上有 function type，不過實務上不用特別去指定 function type，只要將 anonymous function 指定給變數，就會自動幫我們加上 function type。</p>
</blockquote>
<h2 id="Optional_Parameters">Optional Parameters</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// 編譯錯誤，少 1 個參數</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// 編譯錯誤，多 1 個參數</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// 編譯通過</span></span><br></pre></td></tr></table></figure>
<p>在 TypeScript 世界，既然宣告了參數，就代表傳入參數的個數與型別必須完全符合，過多或過少都不行。</p>
<p>但  JavaScript 世界，每個變數都是 optional，若參數個數不對，只是 <code>undefined</code> 而已，為了讓 TypeScript 有強型別檢查，又能相容於 JavaScript 習慣，可在參數後加上 <code>?</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName)</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// 編譯通過</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// 編譯錯誤，多一個</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// 編譯通過</span></span><br></pre></td></tr></table></figure>
<p>若使用 <code>?</code> optional parameter，記得將必要參數寫在最前面，後面才擺 optional parameter。</p>
<h2 id="Default_Parameter">Default Parameter</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function buildName(firstName: string, lastName = "Smith") &#123;</span><br><span class="line">    return firstName + " " + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let result1 = buildName("Bob");                  // Bob Smith</span><br><span class="line">let result2 = buildName("Bob", undefined);       // Bob Smite</span><br><span class="line">let result3 = buildName("Bob", "Adams", "Sr.");  // 編譯錯誤，多一個參數</span><br><span class="line">let result4 = buildName("Bob", "Adams");         // Bob Adams</span><br></pre></td></tr></table></figure>
<p>TypeScript 亦提供 default parameter，當傳入 <code>undefined</code> 時，則會以 default parameter 取代。</p>
<p>Default parameter 若放在必要參數後面，則相當於 optional parameter 一樣，只是差別在有預設值。</p>
<p>Default parameter 並不像 optional parameter 一樣，一定放在必要參數後面，若放在必要參數前面，則必須明確的指定 <code>undefined</code>，而不能省略。</p>
<h2 id="Rest_Parameter">Rest Parameter</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = buildName(<span class="string">"Kevin"</span>, <span class="string">"Jeff"</span>, <span class="string">"Jimmy"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(employeeName); <span class="comment">// Kevin Jeff Jimmy</span></span><br></pre></td></tr></table></figure>
<p>無論是 optional parameter，或是 default paramter，討論的都是一個參數對應一個值，但實務上可能遇到參數個數不確定，希望參數以陣列接收。</p>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...restOfName: <span class="built_in">string</span>[]</span><br></pre></td></tr></table></figure>
<p>以 <code>…</code> 宣告為 rest parameter，並明確宣告其型別為  string 陣列，則無論多少參數個數，最後都會塞進 <code>restOfName</code> 陣列。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Function 的參數加上型別檢查後，我們將可少撰寫很多檢查型別的程式碼，由 TypeScript 編譯器幫我們把關。</li>
<li>有了 optioanl / default / rest parameter，參數將更加靈活。</li>
</ul>
<h2 id="References">References</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/functions.html" target="_blank" rel="external">Handbook : Functions</a></p>
]]></content>
    <summary type="html">
    <![CDATA[TypeScript/ES6 對 function 支援的擴展]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript 之變數宣告與建立]]></title>
    <link href="http://oomusou.io/typescript/typescript-variable/"/>
    <id>http://oomusou.io/typescript/typescript-variable/</id>
    <published>2017-06-16T12:23:43.000Z</published>
    <updated>2017-06-15T07:34:22.000Z</updated>
    <content type="html"><![CDATA[<p>變數宣告部分，除了 <code>var</code> 以外，在 ES6 增加了 <code>let</code> 與 <code>const</code>，在變數建立部分，則增加了 destructuring 與 spread，當然 TypeScript 也完全支援。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.3</p>
<h2 id="var">var</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>var</code> 最經典的範例莫過於此，原本我們預期會輸出</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>結果輸出</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>這裡有兩個觀念：</p>
<ul>
<li><code>setTimeout()</code> 屬於非同步 function，JavaScript 的 event loop model 會在最後執行。</li>
<li><code>var</code> 看似在 <code>{}</code> 內，但沒有 scope 概念，因為其 hoisting 機制，會將 <code>var</code> 提升到程式最前面，相當於全域變數，因此 <code>console.log()</code> 印出 for loop 執行完的 <code>10</code>。</li>
</ul>
<h2 id="let">let</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>var</code> 改成 <code>let</code> 之後，結果就如預期了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> 對變數有 scope 概念，其生命週期只存在於 <code>{}</code> ，因此儘管非同步的 <code>setTimeout()</code> 最後執行，let 仍將 <code>i</code> 鎖住到最後，而不像 <code>var</code> 沒有 scope 概念，都是全域變數。</p>
<blockquote>
<p>實務上應該全面使用 let 取代 var，若你使用 var，language service 也會提出警告，要你改用 let。</p>
</blockquote>
<h2 id="const">const</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span>;</span><br></pre></td></tr></table></figure>
<p> 若此變數不會再被修改，則應宣告成 const。</p>
<blockquote>
<p>傳統我們都是確定此變數不能被修改，才會宣告成 const，但在 TypeScript 中是反過來，<strong>變數應該盡量宣告成 const，除非要修改才宣告成 let</strong>，事實上，若 language service 發現變數從來沒被修改過，會主動提出警告，要求你改成 const，這是希望大家盡量寫出 immutable 的 pure function，減少不必要的 side effect。</p>
</blockquote>
<h2 id="Destructuring">Destructuring</h2><hr>
<h3 id="Array_Destructing">Array Destructing</h3><p>ES6 允許我們直接將陣列加以解構成變數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> first = input[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> second = input[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// outputs 2</span></span><br></pre></td></tr></table></figure>
<p>在 ES5，我們必須使用 array index 方式，才能將值指定到變數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input;</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// outputs 2</span></span><br></pre></td></tr></table></figure>
<p>ES6 我們可以直接使用 <code>[]</code> 將陣列加以解構。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap variables</span></span><br><span class="line">[first, second] = [second, first];</span><br></pre></td></tr></table></figure>
<p>交換變數，只要一行就可以寫出來。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[first, second]: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(first); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(second); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure>
<p>若用在 function 的參數，可以接陣列解構成變數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// outputs [ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>
<p>配合 <code>…</code>，將剩餘的值結構成陣列。</p>
<p><code>first</code> 為單一變數，<code>rest</code> 為陣列。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br></pre></td></tr></table></figure>
<p><code>first</code> 為 <code>1</code>，其他值會忽略。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(fourth); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>只有 <code>2</code> 與 <code>4</code> 會解構，其他值會忽略。</p>
<h3 id="Object_Destructing">Object Destructing</h3><p>除了解構陣列外，ES6 還允許我們解構物件。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  a: <span class="string">"foo"</span>,</span><br><span class="line">  b: <span class="number">12</span>,</span><br><span class="line">  c: <span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure>
<p> <code>c</code> 因為沒有變數解構，會自動忽略。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  a: <span class="string">"foo"</span>,</span><br><span class="line">  b: <span class="number">12</span>,</span><br><span class="line">  c: <span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; a, ...passthrough &#125; = o;</span><br><span class="line"><span class="keyword">let</span> total = passthrough.b + passthrough.c.length</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<p>配合 <code>…</code>，將剩餘的值結構成物件。</p>
<p><code>a</code> 為單一變數，<code>passthrough</code> 為物件。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; a: <span class="built_in">string</span>, b: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;a, b&#125;: C</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// foo</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  a: <span class="string">"foo"</span>,</span><br><span class="line">  b: <span class="number">12</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">f(o);</span><br></pre></td></tr></table></figure>
<p>若用在 function 的參數，可以接物件解構成變數。</p>
<h2 id="Spread">Spread</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> bothPlus = [<span class="number">0</span>, ...first, ...second, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<p><code>…</code> 會將陣列加以展開。</p>
<p><code>bothPlus</code> 為 <code>[0, 1, 2, 3, 4, 5]</code> 。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaults = &#123; food: <span class="string">"spicy"</span>, price: <span class="string">"$$"</span>, ambiance: <span class="string">"noisy"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> search = &#123; ...defaults, food: <span class="string">"rich"</span> &#125;;</span><br></pre></td></tr></table></figure>
<p><code>…</code> 會將物件屬性加以展開。</p>
<p><code>search</code> 為 <code>{ food: &quot;rich&quot;, price: &quot;$$&quot;, ambiance: &quot;noisy&quot; }</code></p>
<blockquote>
<p>若屬性有重複，將後面蓋前面。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  p = <span class="number">12</span>;</span><br><span class="line">  m() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="keyword">let</span> clone = &#123; ...c &#125;;</span><br><span class="line">clone.p; <span class="comment">// ok</span></span><br><span class="line">clone.m(); <span class="comment">// error!</span></span><br></pre></td></tr></table></figure>
<p><code>…</code> 只能展開 property，不能展開 method。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上應該盡量使用 <code>const</code>，除非變數需要被修改才用 <code>let</code>。</li>
<li>盡量寫出 pure function 減少 side effect。</li>
<li>Destructuring 與 spread 非常好用，可以讓程式碼更精簡。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/variable-declarations.html" target="_blank" rel="external">Handbook : Variable Declaration</a></p>
]]></content>
    <summary type="html">
    <![CDATA[ES6 提供不少語法關於變數宣告與建立]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
</feed>
