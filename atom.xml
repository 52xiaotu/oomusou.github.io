<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2018-03-08T10:35:17.029Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何在 Ubuntu 安裝 VS Code ?]]></title>
    <link href="http://oomusou.io/vscode/ubuntu/"/>
    <id>http://oomusou.io/vscode/ubuntu/</id>
    <published>2018-03-11T12:23:43.000Z</published>
    <updated>2018-03-08T10:35:17.029Z</updated>
    <content type="html"><![CDATA[<p>由於 VS Code 本來就是跨平台，因此也可以在 Ubuntu 使用 VS Code。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Ubuntu 16.04<br>VS Code 1.21.0</p>
<h2 id="Download">Download</h2><hr>
<p><img src="/images/vscode/ubuntu/ubuntu000.png" alt="ubuntu000"></p>
<ol>
<li>到 <a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code</a> 官網，選擇 <code>deb</code> 格式下載。</li>
</ol>
<p><img src="/images/vscode/ubuntu/ubuntu001.png" alt="ubuntu001"></p>
<ol>
<li>選擇將檔案存下來到 <code>~/Downloads</code> 目錄</li>
</ol>
<h2 id="安裝_deb">安裝 deb</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd Downloads</span><br><span class="line">$ sudo dpkg -<span class="tag">i</span> code_1.<span class="number">21.0</span>-<span class="number">1520420608</span>_amd64<span class="class">.deb</span></span><br><span class="line">$ code</span><br></pre></td></tr></table></figure>
<p>使用 dpkg 安裝 <code>deb</code>。</p>
<ul>
<li><strong>-i</strong> : <code>i</code> stall，安裝 <code>deb</code></li>
</ul>
<p>使用 <code>code</code> 執行 VS Code。</p>
<p><img src="/images/vscode/ubuntu/ubuntu002.png" alt="ubuntu002"></p>
<ol>
<li>輸入 <code>cd Downloads</code> 將目前目錄切到 <code>Downloads</code>，因為 Firefox 將 <code>deb</code> 下載到 <code>~/Downloads</code> 目錄下</li>
<li>輸入 <code>sudo dpkg -i code_1.21.0-1520420608_amd64.deb</code> 安裝 <code>deb</code></li>
<li>輸入 <code>code</code> 執行 VS Code</li>
</ol>
<p><img src="/images/vscode/ubuntu/ubuntu003.png" alt="ubuntu003"></p>
<p>VS Code 成功執行在 Ubuntu。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>VS Code 在 Ubuntu 安裝稍微不一樣，需要使用 <code>dpkg</code> 安裝 <code>deb</code> 格式</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Ubuntu 也可以安裝 VS Code]]>
    
    </summary>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
      <category term="VS Code" scheme="http://oomusou.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 VS Code 建立 .NET Core 開發環境 ?]]></title>
    <link href="http://oomusou.io/vscode/netcore/"/>
    <id>http://oomusou.io/vscode/netcore/</id>
    <published>2018-03-10T12:23:43.000Z</published>
    <updated>2018-03-08T09:11:37.670Z</updated>
    <content type="html"><![CDATA[<p>VS Code 是 Microsoft 這幾年最成功的 open source project，也是最多人使用的 Angular 與 .NET Core 開發工具。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.4<br>VS Code 1.21.0</p>
<h2 id="Download">Download</h2><hr>
<p><img src="/images/vscode/netcore/setup000.png" alt="setup000"></p>
<p>到 <a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code</a> 官網，選擇你的平台下載。</p>
<blockquote>
<p>選擇 <code>Stable</code>，不要選擇 <code>Insiders</code> </p>
<p><code>Insiders</code> 是測試版，有可能會當機   </p>
</blockquote>
<h2 id="Extension">Extension</h2><hr>
<p><img src="/images/vscode/netcore/setup001.png" alt="setup001"></p>
<ol>
<li>按下左側 <code>Extension</code> icon</li>
<li>輸入 <code>.NET Core Extension Pack</code></li>
<li>選擇 Will 保哥所整理 .NET Core Extension Pack</li>
</ol>
<blockquote>
<p>由於 VS Code 為 open source project，當然可以自行選擇各種 extension 使用，此為保哥所整理的好用 extension，基本上安裝保哥的版本就已經足夠使用</p>
</blockquote>
<h2 id="Hello_World">Hello World</h2><hr>
<h3 id="建立專案">建立專案</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>new</strong> : 建立新專案</li>
<li><strong>console</strong> : 建立 console 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，表建立在 <code>MyConsole</code> 目錄下</li>
</ul>
<p><img src="/images/vscode/netcore/setup002.png" alt="setup002"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 將 console 類型專案建立在 <code>MyConsole</code> 目錄下</li>
<li>.NET Core SDK 開始建立專案所需的檔案</li>
<li>自動下載所需要的 NuGet package</li>
</ol>
<h3 id="VS_Code_開啟專案">VS Code 開啟專案</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接 <code>開啟目錄</code>名稱。</p>
<p><img src="/images/vscode/netcore/setup003.png" alt="setup003"></p>
<ol>
<li>輸入 <code>code MyConsole</code> 要求 VS Code 直接開啟 <code>MyConsole</code> 目錄</li>
</ol>
<p><img src="/images/vscode/netcore/setup004.png" alt="setup004"></p>
<ol>
<li>第一次使用 VS Code 開啟 .NET Core 專案，會要求建立 <code>.vscode</code> 設定檔目錄，按 <code>Yes</code> 繼續</li>
</ol>
<p><img src="/images/vscode/netcore/setup005.png" alt="setup005"></p>
<ol>
<li><code>.vscode</code> 被 VS Code 自動建立</li>
<li>點選 <code>Program.cs</code>，VS Code 已經能辨識出 C#，並支持語法變色與 Intellisense</li>
</ol>
<h3 id="編譯_-NET_Core">編譯 .NET Core</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>dotnet build</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>build</strong> : 編譯專案</li>
</ul>
<p><img src="/images/vscode/netcore/setup006.png" alt="setup006"></p>
<ol>
<li>按熱鍵 Ctrl + ` 開啟內建的 terminal，輸入 dotnet build 編譯目前專案</li>
<li>.NET Core SDK 將編譯成 <code>MyConsole.dll</code>，將路徑複製下來</li>
</ol>
<h3 id="執行_-NET_Core">執行 .NET Core</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="regexp">/Users/</span>oomusou<span class="regexp">/Code/</span>CSharp<span class="regexp">/MyConsole/</span>bin<span class="regexp">/Debug/</span>netcorea</span><br><span class="line">pp2.<span class="number">0</span><span class="regexp">/MyConsole.dll</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet</code> 執行 <code>dll</code>。</p>
<p><img src="/images/vscode/netcore/setup007.png" alt="setup007"></p>
<ol>
<li>輸入 <code>dotnet</code>，並將剛剛複製的 <code>dll</code> 路徑貼上</li>
<li>顯示<code>Hello World!</code></li>
</ol>
<p>目前已經可以成功在 VS Code 編譯 C# 並執行之。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>VS Code 是個輕量的 .NET Core 開發環境，配合 .NET Core SDK，你可以在 macOS 寫 C#</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 macOS 建立輕量級的 .NET Core 開發環境]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="VS Code" scheme="http://oomusou.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Angular 實現 State Pattern ?]]></title>
    <link href="http://oomusou.io/design-pattern/state/"/>
    <id>http://oomusou.io/design-pattern/state/</id>
    <published>2018-03-09T12:23:43.000Z</published>
    <updated>2018-03-08T02:23:22.038Z</updated>
    <content type="html"><![CDATA[<p>State Pattern 是 OOP 中著名的 Design Pattern，當 method 的行為會隨著 field 而改變時特別有效。在本文中，我們將以 Angular 與 TypeScript 實現。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Node.js 8.9.4<br>Angular CLI 1.7.2<br>TypeScript 2.5.3<br>Angular 5.2.7</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/design-pattern/state/state000.png" alt="state000"></p>
<ul>
<li>模擬 iPhone 的 <code>Home</code> 鍵動作</li>
<li><code>Home</code> 雖然只有一個按鍵，但在不同的情境下有不同的功能<ul>
<li>當在 <code>Locked</code> 下，可以 <code>Unlocked</code></li>
<li>當在 <code>Unlocked</code> 下，可以進入 <code>Home</code></li>
<li>當在 <code>App</code> 開啟下，可以回到 <code>Home</code></li>
<li>當在 <code>Desktop</code> 下，可以切換 <code>Home</code></li>
</ul>
</li>
</ul>
<h2 id="Task">Task</h2><hr>
<ul>
<li>因為 <code>Home</code> 有在不同情境下有不同的功能，勢必有很多 <code>if else</code> 判斷情境而切換功能</li>
<li>先用 <code>if else</code> 寫法完成，最後再重構成 State Pattern</li>
</ul>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>State Pattern</p>
<p>當 method 的行為會隨著 field 而改變時，將 <code>if</code> 改用 <code>state</code> 物件表示</p>
<p>將 <code>外部 nested if</code> 改由 <code>內部決定</code> 的 <code>物件串列</code> 表示，藉以消除 <code>if</code> </p>
</blockquote>
<p><img src="/images/design-pattern/state/state015.svg" alt="state015"></p>
<p>將 <code>if</code> 要處理的邏輯包在每個 state 內，但不包含 <code>if</code>。</p>
<p><img src="/images/design-pattern/state/state012.svg" alt="state012"></p>
<ul>
<li><strong>Client</strong> : <code>Context</code> 的 user，實務上可能是 component 或 controller</li>
<li><strong>Context</strong> : 根據 field 的不同，<code>request()</code> 會有不同功能，實務上可能是 service</li>
<li><strong>State</strong> : 定義 <code>ConcreteState</code> 的 interface，只有 <code>handle()</code> ，負責封裝 <code>if 要處理的邏輯</code></li>
<li><strong>ConcreteState</strong> : 將 <code>if 要處理的邏輯</code> 封裝成物件</li>
</ul>
<p>一個 <code>if</code> 要處理的邏輯放在一個 <code>ConcreteState</code> 物件內，並根據 state diagram 指定下一個 state。</p>
<p>由於 method 的行為會根據 field (state) 改變，因此稱為 <code>State</code>  Pattern。</p>
<p><strong>適用時機</strong></p>
<ul>
<li>深層 <code>nested if</code></li>
<li>在 design-time 就可決定 <code>if</code> 組合 (以 state diagram 描述)</li>
<li>當 method 的行為會隨著 field 而改變時</li>
</ul>
<p><strong>優點</strong></p>
<ul>
<li>每個 <code>if 要處理的邏輯</code> 使用一個 class，符合 <code>單一職責原則</code></li>
<li>將來若有新的 <code>if 要處理的邏輯</code>，不用修改 service，而是新增 <code>ConcreState</code>，符合 <code>開放封閉原則</code></li>
<li>Client 與 <code>if 判斷</code> 解耦合，兩者都僅相依於 interface，符合 <code>依賴反轉原則</code></li>
<li>可使用 state diagram 清楚描述狀態轉變</li>
</ul>
<p><strong>缺點</strong> </p>
<ul>
<li>若邏輯複雜，state class 可能會很多檔案，但還是比單一檔案 <code>nested if</code> 好維護</li>
</ul>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/design-pattern/state/state013.svg" alt="state013"></p>
<ul>
<li>只有在 <code>Unlock</code>、<code>App</code> 與 <code>Desktop</code> 才能使用 <code>Home</code> 鍵</li>
<li>只有在 <code>Home</code> 與 <code>Desktop</code> 才能切到 <code>App</code></li>
<li>只有 <code>Home</code> 才能切到 <code>Desktop</code></li>
</ul>
<p><img src="/images/design-pattern/state/state002.svg" alt="state002"></p>
<ul>
<li><code>AppComponent</code> 相當於 <code>Client</code></li>
<li><code>PhoneContext</code> 相當於 <code>Context</code>，<code>AppComponent</code> 負責注入 <code>PhoneContext</code>，無論怎麼重構，<code>PhoneContext</code> 都是穩定的，不會導致 <code>AppComponent</code> 修改</li>
<li><code>PhoneStateInterface</code> 相當於 <code>State</code> interface，訂出所有 state 標準</li>
<li><code>LockedState</code> 及其他 state 都是 <code>ConcreteState</code>，為實際 <code>if</code> 所處理的邏輯</li>
</ul>
<h2 id="Implmentation">Implmentation</h2><hr>
<p><strong>app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onHomeClick()"</span>&gt;</span>Home<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onOpenAppClick()"</span>&gt;</span>Open App<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onSwitchDesktopClick()"</span>&gt;</span>Switch Desktop<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; message &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>在 HTML 提供 <code>Home</code>、<code>Open App</code> 與 <code>Switch Desktop</code> 3 個 button，任何訊息將顯示在 <code>message</code>。</p>
<h3 id="If_Else">If Else</h3><p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  <span class="keyword">private</span> state = <span class="string">'Locked'</span>;</span><br><span class="line">  message = <span class="string">'The phone is locked'</span>;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Locked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Unlocked'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is unlocked'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Unlocked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span> || <span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'App'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is opening app'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Desktop'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is switching desktop'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">onHomeClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Locked'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Unlocked'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is unlocked'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Unlocked'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>Home</code> 鍵，由於 <code>Home</code> 在不同情境有不同功能，因此分成 <code>Locked</code>、<code>Unlocked</code>、<code>Home</code>、<code>App</code> 與 <code>Desktop</code> 5 個 state，使用 <code>if</code> 判斷當目前什麼 state 下，要做什麼事情，以及即將切到什麼 state。</p>
<p>31 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onOpenAppClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span> || <span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'App'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is opening app'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>開啟 App</code>，根據 state diagram，由於不可能在 <code>Locked</code>、<code>Unlocked</code> 與 <code>App</code> state 下開啟 app，將顯示 <code>The operation is not allowed</code>，並切到特別建立的 <code>Null</code> state。</p>
<p>也就是只有 <code>Home</code> 與 <code>Desktop</code> state 下才能開啟 app，因此特別使用 <code>if else</code> 做判斷。</p>
<p>41 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onSwitchDesktopClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Desktop'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is switching desktop'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>切換桌面</code>，根據 state diagram，只能在 <code>Home</code> state 下切換桌面，因此需要 <code>if else</code> 做判斷。</p>
<blockquote>
<p>以功能面來說，目前已經完全需求，只是程式碼含有眾多的 code smell，尚無法達成 production code 的標準，需要繼續重構。</p>
</blockquote>
<h3 id="Unit_Test">Unit Test</h3><p>在重構之前，必須要有測試保護，才能確保沒把原本的商業邏輯重構壞，因此我們先準備好 <code>AppComponent</code> 的 Unit Test，確保每個 <code>if else</code> 的 path 都有測到。</p>
<p><strong>app.component.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ComponentFixture, TestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DebugElement &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'AppComponent'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;AppComponent&gt;;</span><br><span class="line">  <span class="keyword">let</span> appComponent: AppComponent;</span><br><span class="line">  <span class="keyword">let</span> debugElement: DebugElement;</span><br><span class="line">  <span class="keyword">let</span> htmlElement: HTMLElement;</span><br><span class="line">  <span class="keyword">let</span> target: AppComponent;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">    appComponent = fixture.componentInstance;</span><br><span class="line">    debugElement = fixture.debugElement;</span><br><span class="line">    htmlElement = debugElement.nativeElement;</span><br><span class="line">    target = <span class="keyword">new</span> AppComponent();</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should create the app'</span>, () =&gt; &#123;</span><br><span class="line">    expect(appComponent).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`一開始應顯示 <span class="string">'The phone is locked'</span>`, () =&gt; &#123;</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is locked'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">1</span> 次按下 Home 應顯示 <span class="string">'The phone is unlocked'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is unlocked'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">2</span> 次按下 Home 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">3</span> 次按下 Home 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">2</span> 次按下 Home 與第一次按下 Open App 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onOpenAppClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is opening app'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當按下 Open App 再按下 Home 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onOpenAppClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">2</span> 次按下 Home 與第一次按下 Switch Desktop 應顯示 <span class="string">'The phone is switching desktop'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onSwitchDesktopClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is switching desktop'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當按下 Switch Desktop 再按下 Home 應顯示 <span class="string">'The phone is switching desktop'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onSwitchDesktopClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">1</span> 次按下 Home 再按下 Open App 應顯示 <span class="string">'The operation is not allowed'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onOpenAppClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The operation is not allowed'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">1</span> 次按下 Home 再按下 Switch Desktop 應顯示 <span class="string">'The operation is not allowed'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onSwitchDesktopClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The operation is not allowed'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由於本文重點不是在講 Unit Test，因此就不浪費篇幅解釋以上程式碼。</p>
<p><img src="/images/design-pattern/state/state001.png" alt="state001"></p>
<p>執行 Wallaby.js 單元測試，確保 <code>AppComponent</code> 所有的 <code>if else</code> 的 path 都有測到，也就是 coverage 是 <code>100%</code>，接下來的重構將以此 Unit Test 為標準，無論怎麼重構，都必須確保 11 個測試案例 <code>綠燈</code>。</p>
<blockquote>
<p>實務上若 TDD 有困難，其實可以先用 <code>if else</code> 寫一段 <code>比較髒</code> 的 production code，最少功能都符合需求，因為 <code>比較髒</code>，所以一定得重構，在重構之前補上 Unit Test，重點是 coverage 是 <code>100%</code>，然後不斷的重構維持 Unit Test 都是 <code>綠燈</code>，無論是先寫測試或是後寫測試，但要寫 Unit Test 與重構的目標都是一致的，只是先寫還是後寫而已。</p>
<p>若發現 <code>比較髒</code> 的 production code 已經無法寫出 Unit Test，就必須回頭修改 production code 寫法，那表示你的 production code 已經違反 SOLID 原則，導致 Unit Test 寫不出來。</p>
</blockquote>
<h3 id="Refactoring">Refactoring</h3><p>目前這段 code 至少含有以下 3 項 code smell : </p>
<ol>
<li>使用 <code>else</code> 造成 <code>nested if</code></li>
<li><code>state</code> 與 <code>message</code> 目前都以 <code>string</code> hardcode</li>
<li><code>onHomeClick()</code> 眾多 <code>if else</code> 嚴重違反 <code>單一職責原則</code> 與 <code>開放封閉原則</code></li>
</ol>
<p>我們將針對這 3 點加以重構。</p>
<h3 id="Guard_Clause">Guard Clause</h3><p>重構目標 : 使用 Guard Clause 取代 <code>else</code>。</p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  <span class="keyword">private</span> state = <span class="string">'Locked'</span>;</span><br><span class="line">  message = <span class="string">'The phone is locked'</span>;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Locked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Unlocked'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is unlocked'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Unlocked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span> || <span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'App'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is opening app'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Desktop'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is switching desktop'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>25 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line"><span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br></pre></td></tr></table></figure>
<p>以 <code>return</code> 取代 <code>else</code>，換來 <code>if</code> 全部壓平在第一層，避免寫出 <code>nested if</code>。</p>
<p>最後一行即為預設值。</p>
<p>其他皆以這種方式重構。</p>
<h3 id="Enum">Enum</h3><p>重構目標 : 使用 <code>enum</code> 取代 <code>string</code> hardcode。</p>
<p><strong>message.enum.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> MessageEnum &#123;</span><br><span class="line">  Locked   = <span class="string">'The phone is locked'</span>,</span><br><span class="line">  Unlocked = <span class="string">'The phone is unlocked'</span>,</span><br><span class="line">  Home     = <span class="string">'The phone is at home'</span>,</span><br><span class="line">  App      = <span class="string">'The phone is opening app'</span>,</span><br><span class="line">  Desktop  = <span class="string">'The phone is switching desktop'</span>,</span><br><span class="line">  Null     = <span class="string">'The operation is not allowed'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前 <code>state</code> 與 <code>message</code> 都使用 <code>string</code> hardcode，使用上雖然直覺簡單，但有兩個致命缺點 :</p>
<ol>
<li><code>message</code> 到處散佈，將來若 <code>message</code> 修改，要改的地方很多</li>
<li><code>state</code> 使用 <code>string</code>，不僅容易 typo，也無法受到 compiler 保護</li>
</ol>
<p>比較好的方式是 <code>state</code> 由 <code>string</code> 改由 <code>enum</code>，如此不會 typo，也受到 compiler 保護。</p>
<blockquote>
<p>一般語言由於 <code>enum</code> 傳統只能代表 <code>int</code>，因此還掉搭配其他 collection，如 ES6  的 <code>Map</code> 或 C# 的 <code>Dictionary</code> ，但 TypeScript 2.4 的 <code>enum</code> 可代表 <code>string</code>，因此可省掉 <code>Map</code> 或 <code>Dictionary</code>，直接使用 <code>enum</code> 搞定。</p>
</blockquote>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  message = MessageEnum.Locked;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Locked) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Unlocked;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Unlocked) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.App) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Desktop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Home || <span class="keyword">this</span>.message === MessageEnum.Desktop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.App;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = MessageEnum.Null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Home) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Desktop;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = MessageEnum.Null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = MessageEnum.Locked;</span><br></pre></td></tr></table></figure>
<p>將 <code>state</code> 拿掉，只留下 <code>message</code>。</p>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Locked) &#123;</span><br><span class="line">  <span class="keyword">this</span>.message = MessageEnum.Unlocked;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本判斷 <code>state</code>，直接判斷 <code>message</code> 即可。</p>
<p>其他以此類推。</p>
<h3 id="State_Pattern">State Pattern</h3><p>重構目標 : 使用 State Pattern 實現 <code>單一職責原則</code> 與 <code>開放封閉原則</code>。</p>
<p><strong>AppComponent</strong></p>
<p><img src="/images/design-pattern/state/state010.svg" alt="state010"></p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneContext &#125; from <span class="string">'./phone.context'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; from <span class="string">'./AppState'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DesktopState &#125; from <span class="string">'./DesktopState'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  message = MessageEnum.Locked;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private phoneContext: PhoneContext) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.request();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.setState(<span class="keyword">new</span> AppState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.setState(<span class="keyword">new</span> DesktopState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private phoneContext: PhoneContext) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 DI 依賴注入 <code>PhoneContext</code>。</p>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onHomeClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.request();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <code>onHomeClick()</code> 只剩下一行 <code>Context.request()</code>。</p>
<blockquote>
<p>我們可以發現 <code>onHomeClick()</code> 的 <code>if</code> 都不見了，也就是說，State Pattern 用多個檔案的 class 去換一個檔案的 <code>if</code> 。</p>
<ul>
<li>由於多個檔案，一個 class 代表一個 <code>if</code> ，符合 <code>單一職責原則</code></li>
<li>將來若有新的 state，只要根據 interface 新增 class，不用修改原來的 code，符合 <code>開放封閉原則</code></li>
</ul>
</blockquote>
<p>22 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onOpenAppClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.setState(<span class="keyword">new</span> AppState());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本需要在 client 判斷是否可以切換 state，現在只管新增 state 即可，不用再用 <code>if</code> 判斷。</p>
<p><strong>PhoneContext</strong></p>
<p><img src="/images/design-pattern/state/state003.svg" alt="state003"></p>
<p><strong>phone.context.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Inject, Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterfaceToken &#125; from <span class="string">'./interface.token'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PhoneContext &#123;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(@Inject(PhoneStateInterfaceToken) private state: PhoneStateInterface) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.state.handle();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">if</span> (!state.chkContext(<span class="keyword">this</span>.state)) &#123;</span><br><span class="line">      <span class="keyword">return</span> MessageEnum.Null;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">      <span class="keyword">return</span> state.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(@Inject(PhoneStateInterfaceToken) private state: PhoneStateInterface) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即將使用 State Pattern，使用 DI 依賴注入 <code>state</code>，注意其型別為 <code>PhoneStateInterface</code>。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request(): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="keyword">this</span>.state.handle();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.state.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>request()</code> 為原本 State Pattern 所設計的 method。</p>
<p>執行目前 <code>state</code> 的 <code>handle()</code>，此為目前 state 主要的商業邏輯所在。</p>
<p><code>handle()</code> 將回傳下一個 <code>state</code>。</p>
<p><code>state.getMessage()</code> 將回傳目前 <code>state</code> 要顯示的訊息。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">if</span> (!state.chkContext(<span class="keyword">this</span>.state)) &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Null;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>setState()</code> 並非 State Pattern 所設計的 method，目前因為 <code>Open App</code> 與 <code>Switch Desktop</code> 需要動態切換 state，因而衍生出動態設定 state 的需求。</p>
<p>由於不是每個 state 都能任意切換到其他 state，因此特別在每個 state 設計 <code>chkContext()</code>，判斷是否允許切換 state。</p>
<blockquote>
<p><code>Context.setState()</code> 與 <code>State.chkContext()</code> 並非原始 State Pattern 所設計，為了能動態切換 state，實務上經常會有此需求</p>
</blockquote>
<p><strong>PhoneStateInterface</strong></p>
<p><img src="/images/design-pattern/state/state004.svg" alt="state004"></p>
<p><strong>phone.state.interface.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> PhoneStateInterface </span>&#123;</span><br><span class="line">  handle(): PhoneStateInterface;  </span><br><span class="line">  getMessage(): MessageEnum;</span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 State Pattern 的 interface ：</p>
<ul>
<li><code>handle()</code> : 為 State Pattern 所設計的 method，專門放每個 <code>if</code> 的邏輯</li>
<li><code>getMessage()</code> : 回傳目前 state 的 message，非 State Pattern 所設計，為根據目前需求所設計的 method</li>
<li><code>chkContext()</code> : 檢查目前 state 是否可以允許切換到下一個 state，非 State Pattern 所設計，為根據目前需求所設計的 method</li>
</ul>
<p><strong>LockedState</strong></p>
<p><img src="/images/design-pattern/state/state005.svg" alt="state005"></p>
<p>接下來要將每個 state 的 <code>if</code> 搬進 class，實現 <code>單一職責原則</code> 與 <code>開放封閉原則</code>。</p>
<p><strong>locked.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UnlockedState &#125; from <span class="string">'./UnlockedState'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LockedState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UnlockedState();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Locked;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handle(): PhoneStateInterface &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> UnlockedState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將原本 <code>Locked</code> state 的 code 搬到 <code>handle()</code>，最後回傳下一個 state，其型別為 <code>PhoneStateInterface</code>。</p>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getMessage(): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">return</span> MessageEnum.Locked;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳目前 state 的 message，注意其型別為 <code>MessageEnum</code>，而不是 <code>string</code>。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>檢查目前 state 是否進進入 <code>Locked</code> state，因為毫無限制，傳回 <code>true</code> 即可。</p>
<p><strong>UnlockedState</strong></p>
<p><img src="/images/design-pattern/state/state006.svg" alt="state006"></p>
<p><strong>unlocked.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./HomeState'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UnlockedState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Unlocked;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage() === MessageEnum.Locked;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.getMessage() === MessageEnum.Locked;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 state diagram，只有當 <code>Locked</code> state 才能進入 <code>Unlocked</code> state。</p>
<p><strong>HomeState</strong></p>
<p><img src="/images/design-pattern/state/state007.svg" alt="state007"></p>
<p><strong>home.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomeState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>與 <code>LockedState</code> 類似，就不再贅述。</p>
<p><strong>AppState</strong></p>
<p><img src="/images/design-pattern/state/state008.svg" alt="state008"></p>
<p><strong>app.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./HomeState'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.App;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.getMessage() === MessageEnum.Home) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (state.getMessage() === MessageEnum.Desktop) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (state.getMessage() === MessageEnum.Home) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.getMessage() === MessageEnum.Desktop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 state diagram，只有 <code>Home</code> 與 <code>Desktop</code> state 才能進入 <code>App</code> state。</p>
<p><strong>DesktopState</strong></p>
<p><img src="/images/design-pattern/state/state009.svg" alt="state009"></p>
<p><strong>desktop.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./home.state'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DesktopState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Desktop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.getMessage() === MessageEnum.Home) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 state diagram，只有 <code>Home</code> state 才能進入 <code>Desktop</code> state。</p>
<h3 id="Refactoring-1">Refactoring</h3><p><strong>PhoneContext</strong></p>
<p><img src="/images/design-pattern/state/state003.svg" alt="state003"></p>
<p><strong>phone.context.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Inject, Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterfaceToken &#125; from <span class="string">'./interface.token'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PhoneContext &#123;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(@Inject(PhoneStateInterfaceToken) private state: PhoneStateInterface) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.state.handle();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">const</span> setCurrentState = (currentState) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = currentState;</span><br><span class="line">      <span class="keyword">return</span> currentState.getMessage();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !state.chkContext(<span class="keyword">this</span>.state) ? MessageEnum.Null :</span><br><span class="line">           setCurrentState(state);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">const</span> setCurrentState = (currentState) =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = currentState;</span><br><span class="line">    <span class="keyword">return</span> currentState.getMessage();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> !state.chkContext(<span class="keyword">this</span>.state) ? MessageEnum.Null :</span><br><span class="line">          setCurrentState(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將原本的 <code>if else</code> 重構成 <code>?:</code> 。</p>
<p>尤其原本 <code>else</code> 的部分抽成 function，讓可讀性更高。</p>
<p><strong>AppState</strong></p>
<p><img src="/images/design-pattern/state/state008.svg" alt="state008"></p>
<p><strong>app.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./home.state'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.App;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage() === MessageEnum.Home ? <span class="literal">true</span> :</span><br><span class="line">           state.getMessage() === MessageEnum.Desktop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.getMessage() === MessageEnum.Home ? <span class="literal">true</span> :</span><br><span class="line">         state.getMessage() === MessageEnum.Desktop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>if else</code> 重構成 <code>?:</code>。</p>
<p><strong>DesktopState</strong></p>
<p><img src="/images/design-pattern/state/state009.svg" alt="state009"></p>
<p><strong>destop.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./home.state'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DesktopState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Desktop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage() === MessageEnum.Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.getMessage() === MessageEnum.Home;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>if else</code> 重構成 <code>?:</code>。</p>
<p><img src="/images/design-pattern/state/state014.png" alt="state014"></p>
<p>經過一系列的重構成 State Pattern，一樣必須確認 Wallaby.js 單元測試的 11 個測試案例都是 <code>綠燈</code>。</p>
<h2 id="Summary">Summary</h2><hr>
<blockquote>
<p>Chain of Responsibility Pattern vs. State Pattern</p>
</blockquote>
<p><img src="/images/design-pattern/state/state016.svg" alt="state016"></p>
<p>以 class diagram 角度，Chain of Responsibility 與 State Pattern 完全一樣。</p>
<blockquote>
<p>學 Design Pattern 不能以 class diagram 的角度去思考，而要以他要解決什麼問題來思考</p>
</blockquote>
<h3 id="Similarity">Similarity</h3><ul>
<li>解決 <code>nested if</code> 難以維護</li>
<li>都是將 <code>if</code> 改用 object 表示</li>
</ul>
<h3 id="Difference">Difference</h3><ul>
<li>CoR 特別適用於一連串的 <code>判斷檢查</code>；State 特別適用於 method 功能隨 field 改變</li>
<li>CoR 內仍然會有 <code>if</code>；State 內無 <code>if</code></li>
<li>CoR 由 <code>外部</code> 決定下一個 handler；State 由 <code>內部</code> 決定下一個 state</li>
<li>State 會搭配 state diagam 描述 state 的切換</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>並不是所有的 <code>if</code> 都該使用 State Pattern，當 method 功能會隨 field 改變時特別適用，如複雜的 GUI，button 可能根據不同情境有不同功能</li>
<li>Chain of Responsibility 與 State Pattern，從 class diagram 角度，兩者完全一樣，但適用時機與語意是不同的，尤其 Chain of Responsibility 是由外部決定 <code>if</code> 順序，但 State Pattern 是由內部決定 <code>if</code> 順序</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52State" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 OOP 實現 Finite State Machine]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 macOS 與 Docker 共享目錄 ?]]></title>
    <link href="http://oomusou.io/docker/mount-host-dir/"/>
    <id>http://oomusou.io/docker/mount-host-dir/</id>
    <published>2018-03-08T12:23:43.000Z</published>
    <updated>2018-03-03T15:32:27.666Z</updated>
    <content type="html"><![CDATA[<p>當開發環境都 Docker 化，最常遇到的問題就是開發環境該如何與測試環境分離，如 IDE 裝在 macOS，如 WebStorm / Rider / VS Code，且 code 也放在 macOS，但實際 build code 或跑測試，卻是在 container 內，因此勢必要將 macOS 的目錄與 container 共享。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)</p>
<h2 id="參數_-v">參數 -v</h2><hr>
<p>由於每個人要分享的目錄都不一樣，所以不能將共享目錄寫在 <code>Dockerfile</code>，而必須在使用 <code>docker run</code> 建立 container 加上 <code>-v</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkinsCore -<span class="tag">p</span> <span class="number">8080</span>:<span class="number">8080</span> -<span class="tag">p</span> <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home -v /Users/oomusou/Code:/var/<span class="tag">code</span>   oomusou/jenkins-core</span><br></pre></td></tr></table></figure>
<p>以上為例</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">v /<span class="constant">Users</span>/oomusou/<span class="constant">Code</span><span class="symbol">:/var/code</span></span></span><br></pre></td></tr></table></figure>
<p>所有程式都放在 macOS 的 <code>/Users/oomusou/Code</code>，我們希望對應到 container 內的 <code>/var/code</code>，只要 <code>/Users/oomusou/Code</code> 有任何修改，在 container 內都看得到。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>一個很小的參數，但實務上卻非常有用</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓開發環境與測試環境分離]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何為 Slack 設定 Jenkins 通知 ?]]></title>
    <link href="http://oomusou.io/slack/jenkins/"/>
    <id>http://oomusou.io/slack/jenkins/</id>
    <published>2018-03-07T12:23:43.000Z</published>
    <updated>2018-03-03T15:13:19.299Z</updated>
    <content type="html"><![CDATA[<p>當 Jenkins 的 job 執行失敗時，我們希望在 Slack 的 channel 能收到通知，如此可避免所有訊息都透過 Email，只有真正與人相關的訊息才使用 Email，讓 Slack 成為持續整合的訊息中心。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>Jenkins 2.89.4<br>Slack 3.0.5</p>
<h2 id="設定_Slack">設定 Slack</h2><hr>
<h3 id="新增_Channel">新增 Channel</h3><p><img src="/images/jenkins/netcore-slack/slack013.png" alt="slack013"></p>
<ol>
<li>按下 <code>Channels</code> 右側的 <code>+</code> 新增 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack014.png" alt="slack014"></p>
<ol>
<li><strong>Privacy</strong> : 設定為 <code>Public</code> 或 <code>Private</code> channel</li>
<li><strong>Name</strong> : 設定 channel 名稱</li>
<li><strong>Purpose</strong> : channel 的功能描述，可以不輸入</li>
<li><strong>Send invites to</strong> : 設定 channel 成員，可以稍後再設定</li>
<li>按 <code>Create Channel</code> 開始建立 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack015.png" alt="slack015"></p>
<ol>
<li>按 <code>Got It!</code> 進入 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack016.png" alt="slack016"></p>
<ol>
<li>正式進入 channel，將來 Jenkins 訊息會傳進此 channel</li>
</ol>
<h3 id="新增_Notification">新增 Notification</h3><p><img src="/images/jenkins/netcore-slack/slack017.png" alt="slack017"></p>
<ol>
<li>選擇右上方的 <code>option</code></li>
<li>選擇 <code>Add an app</code></li>
</ol>
<h3 id="新增_Jenkins_App">新增 Jenkins App</h3><p><img src="/images/jenkins/netcore-slack/slack018.png" alt="slack018"></p>
<p>Slack 將開啟瀏覽器</p>
<ol>
<li>稍微往下捲輸入 <code>Jenkins</code></li>
<li>選擇 <code>Jenkins CI</code></li>
</ol>
<h3 id="新增_Configuration">新增 Configuration</h3><p><img src="/images/jenkins/netcore-slack/slack019.png" alt="slack019"></p>
<ol>
<li>按 <code>Add Configuration</code> 加入 Jenkins CI</li>
</ol>
<h3 id="新增_Integration">新增 Integration</h3><p><img src="/images/jenkins/netcore-slack/slack020.png" alt="slack020"></p>
<ol>
<li>按 <code>Add Bitbucket Integration</code> 正式加入整合 Jenkins</li>
</ol>
<h3 id="Slack_設定完成">Slack 設定完成</h3><p><img src="/images/jenkins/netcore-slack/slack021.png" alt="slack021"></p>
<ol>
<li>介紹 Jenkins 設定流程</li>
</ol>
<blockquote>
<p>Slack 部分已經設定完成，接下來是 Jenkins 的設定</p>
<p>Slack 網頁先不要關閉，稍後會用到</p>
</blockquote>
<h2 id="設定_Jenkins">設定 Jenkins</h2><hr>
<h3 id="Manage_Jenkins">Manage Jenkins</h3><p><img src="/images/jenkins/netcore-slack/slack022.png" alt="slack022"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Manage Plugins</code></li>
</ol>
<h3 id="安裝_Slack_Plugin">安裝 Slack Plugin</h3><p><img src="/images/jenkins/netcore-slack/slack023.png" alt="slack023"></p>
<ol>
<li>選擇 <code>Avaliable</code> tab</li>
<li>選擇 <code>Slack Notification Plugin</code></li>
<li>按 <code>Download now and Install after restart</code></li>
</ol>
<h3 id="新增_Webhook">新增 Webhook</h3><p><img src="/images/jenkins/netcore-slack/slack024.png" alt="slack024"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Configure System</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack025.png" alt="slack025"></p>
<p>在 <code>Global Slack Notifier Settings</code> 下設定</p>
<ol>
<li><strong>Base URL</strong> : 貼一段 Slack 所提供的 URL</li>
<li><strong>Integration Token</strong> : 貼一段 Slack 所提供的 token</li>
</ol>
<blockquote>
<p>Q : 要貼什麼 Base URL 與 token 呢 ?</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack026.png" alt="slack026"></p>
<p>回到 Slack 最後的網頁往下捲到 <code>Step 3</code></p>
<ol>
<li>將 <code>Base URL</code> 與 <code>Integration Token</code> 複製貼上</li>
</ol>
<p>最後按 <code>Save</code> 存檔。</p>
<h3 id="設定_Job">設定 Job</h3><p><img src="/images/jenkins/netcore-slack/slack027.png" alt="slack027"></p>
<ol>
<li>選擇要發 Slack 通知的 job</li>
<li>按 <code>Configure</code> 設定</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack028.png" alt="slack028"></p>
<p>在 Jenkins 執行完 <code>build</code> 動作後，無論成功或失敗，將結果通知 Slack</p>
<ol>
<li>選擇 <code>Post-build Actions</code></li>
<li>選擇 <code>Add post-build action</code></li>
<li>選擇 <code>Slack Notification</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack029.png" alt="slack029"></p>
<p>選擇希望 Jenkins 通知 Slack 的動作 :</p>
<ol>
<li>選擇 <code>Notify Failure</code>、 <code>Notify Success</code> 與 <code>Notify Unstable</code></li>
</ol>
<blockquote>
<p>建議不用選擇太多 action，<code>success</code> 確認 Jenkins 還活著，<code>Failure</code> 與 <code>Unstable</code> 確認 CI 失敗即可</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack030.png" alt="slack030"></p>
<p>新增一個 Git commit，就可發現 Slack 收到 Jenkins 測試成功 <code>綠燈</code> 的訊息。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Slack 提供了一個不錯的 CI 訊息平台，讓訊息從 Email 解放</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓 Slack 成為 CI 的訊息中心]]>
    
    </summary>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
      <category term="Slack" scheme="http://oomusou.io/tags/Slack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Jenkins 對 .NET Core 實現個人的持續整合 ?]]></title>
    <link href="http://oomusou.io/jenkins/netcore-slack/"/>
    <id>http://oomusou.io/jenkins/netcore-slack/</id>
    <published>2018-03-06T12:23:43.000Z</published>
    <updated>2018-03-03T14:40:49.883Z</updated>
    <content type="html"><![CDATA[<p>在使用 TDD 開發時，儘管單元測試執行速度較快，但可能僅執行一部分的單元測試而已；而整合測試與驗收測試更慢，實務上不可能真的花時間去等待測試結果，而是希望在背景不斷地執行，在本機配合 Docker 執行 Jenkins 後，只要每次有新的 commit，就會自動執行所有測試，並將測試結果傳送到 Slack。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>.NET Core 2.1.4<br>Jenkins 2.89.4<br>Slack 3.0.5<br>Rider 2017.3.1</p>
<h2 id="User_Story">User Story</h2><hr>
<p>我們希望每次 <code>git push</code> 到 Git 後，Jenkins 就會自動跑 Unit Test，若失敗則會通知 Slack。</p>
<h2 id="Task">Task</h2><hr>
<ul>
<li>Git 直接使用本機的 git repository</li>
<li>Jenkins 使用本機的 Docker</li>
<li>Slack 可裝在本機或行動裝置</li>
</ul>
<h2 id="建立_-NET_Core_專案">建立 .NET Core 專案</h2><hr>
<p><strong>NumberService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">NumberLib</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NumberService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">isEven</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">value</span></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>isEven()</code> 若為偶數傳回 <code>true</code> ，奇數傳回 <code>false</code>。</p>
<p><img src="/images/jenkins/netcore-slack/slack000.png" alt="slack000"></p>
<p><strong>NuberServiceTest.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NumberLib;</span><br><span class="line"><span class="keyword">using</span> Xunit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NumberLibTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NumberServiceTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> NumberService _numberService = <span class="keyword">new</span> NumberService();</span><br><span class="line">        </span><br><span class="line">        [Fact]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShouldReturnTrueGivenEvenValue</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = _numberService.isEven(<span class="number">2</span>);</span><br><span class="line">            Assert.True(result, <span class="string">"2 should return true"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [Fact]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShouldReturnFalseGivenOddValue</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = _numberService.isEven(<span class="number">1</span>);</span><br><span class="line">            Assert.False(result, <span class="string">"1 should return false"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提供兩個測試案例，分別測試傳回 <code>true</code> 與 <code>false</code>。</p>
<p><img src="/images/jenkins/netcore-slack/slack001.png" alt="slack001"></p>
<h2 id="執行_Unit_Test">執行 Unit Test</h2><hr>
<p><img src="/images/jenkins/netcore-slack/slack002.png" alt="slack002"></p>
<p>直接在 Rider 執行單元測試，確認結果正確。</p>
<h2 id="建立_Git_Repository">建立 Git Repository</h2><hr>
<p>要實現持續整合，Git 是其中的關鍵，唯有透過版控，才能在每個版本的變動觸發 Jenkins 自動執行測試。</p>
<p><img src="/images/jenkins/netcore-slack/slack003.png" alt="slack003"></p>
<p>直接在 Rider 建立 Git repository。</p>
<h2 id="設定_Jenkins">設定 Jenkins</h2><hr>
<p><strong>建立與執行 Jenkins Container</strong></p>
<p>若要 macOS 執行 Jenkins，最簡單的方法是透過 Docker，但只使用官方的 Jenkins image 是不夠的，因為我們必須在 Jenkins 的 Linux 環境跑單元測試，也就是說 Linux 必須要有 .NET Core SDK 環境。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於建立 image 建立，詳細請參考 <a href="/docker/jenkins-core/">如何建立含有 .NET Core SDK 的 Jenkins Docker Image ?</a></span></span></span></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkinsCore -<span class="tag">p</span> <span class="number">8080</span>:<span class="number">8080</span> -<span class="tag">p</span> <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home -v /Users/oomusou/Code:/var/<span class="tag">code</span>   oomusou/jenkins-core</span><br></pre></td></tr></table></figure>
<p>在建立 container 時，較特別的為</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">v /<span class="constant">Users</span>/oomusou/<span class="constant">Code</span><span class="symbol">:/var/code</span></span></span><br></pre></td></tr></table></figure>
<p><code>-v</code> 是設定 host os 的目錄，相當於 container 內對應的目錄。</p>
<p>如此就能使用 macOS 的開發工具，如 Rider 在 <code>/Users/oomusou/Code</code>，但 Jenkins 跑單元測試時是在 Linux 的 <code>/var/code</code> 目錄下。</p>
<p><strong>Manage Jenkins</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack004.png" alt="slack004"></p>
<ol>
<li>左側選 <code>Manage Jenkins</code></li>
<li>右側選 <code>Configure Global Security</code></li>
</ol>
<p><strong>Configure Global Security</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack005.png" alt="slack005"></p>
<ol>
<li>不勾選 <code>Enable security</code></li>
<li>不勾選 <code>CSRF Protection</code></li>
</ol>
<blockquote>
<p>因為 Jenkins 只是跑在本機，所以使用較寬鬆的 security 設定</p>
</blockquote>
<p><strong>建立 Jenkins Job</strong></p>
<p>每一個自動化，在 Jenkins 稱為 Job。</p>
<p><img src="/images/jenkins/netcore-slack/slack006.png" alt="slack006"></p>
<ol>
<li>若是第一次使用 Jenkins，可使用首頁的 <code>create new jobs</code> 建立新 job</li>
<li>若已經有其他 job，可使用左上角的 <code>New Item</code> 建立新 job</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack007.png" alt="slack007"></p>
<ol>
<li>輸入 Job 名稱</li>
<li>選擇 <code>Freestyle project</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack008.png" alt="slack008"></p>
<ol>
<li>選擇 <code>Build</code></li>
<li>選擇 <code>Add build step</code></li>
<li>選擇 <code>Execute shell</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack009.png" alt="slack009"></p>
<p>切換到 <code>/var/code</code> 的單元測試目錄下，使用 <code>dotnet test</code> 執行單元測試。</p>
<blockquote>
<p>目前是在 Linux 下跑單元測試，也可彌補之前只在 macOS 跑單元測試，但 production 是 Linux 的缺憾</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack010.png" alt="slack010"></p>
<ol>
<li>選擇 <code>Build Now</code>，第一次執行 job</li>
<li>Jenkins 執行單元測試，得到 <code>藍燈</code></li>
</ol>
<h2 id="設定_Git">設定 Git</h2><hr>
<p>目前為止，Jenkins Job 已經設定好，但必須手動使用 <code>Build Now</code> 執行 Job，我們希望的是每次 Git commit，就會自動執行 Jenkins job，不用我們操心。</p>
<p><strong>新增 post-commit</strong><br><strong>post-commit</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line">curl http://localhost:<span class="number">8080</span>/job/NumberSeriveUnitTest/build</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"post commit trigger"</span></span><br></pre></td></tr></table></figure>
<p>到專案的 <code>.git/hooks</code>目錄下，新增 <code>post-commit</code>，讓每次 Git commit 時執行 Jenkins job。</p>
<p>Jenkins 的網址規則為 <code>/job/[Job名稱]/build</code>。</p>
<p>最後記得使用 <code>chmod +x post-commit</code> 讓 <code>post-commit</code> 有執行權限。</p>
<p><strong>建立新 Commit</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack011.png" alt="slack011"></p>
<ol>
<li>將 <code>false</code> 改成 <code>true</code></li>
<li>新增 commit</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack012.png" alt="slack012"></p>
<p>Jenkins 自動執行單元測試，得到 <code>紅燈</code>。</p>
<blockquote>
<p>這個 <code>紅燈</code> 是我們預期的，因為由 <code>false</code> 改成 <code>true</code>，單元測試一定會失敗</p>
</blockquote>
<h2 id="設定_Slack">設定 Slack</h2><hr>
<p>目前為止，每次 Git commit 都會自動執行 Jenkins 單元測試，唯每次都必須回到 Jenkins 才知道單元測試是否成功，若能將結果推送到 Slack，我們就能把 Slack 當成持續整合的訊息平台。</p>
<p><strong>新增 Channel</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack013.png" alt="slack013"></p>
<ol>
<li>按下 <code>Channels</code> 右側的 <code>+</code> 新增 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack014.png" alt="slack014"></p>
<ol>
<li><strong>Privacy</strong> : 設定為 <code>Public</code> 或 <code>Private</code> channel</li>
<li><strong>Name</strong> : 設定 channel 名稱</li>
<li><strong>Purpose</strong> : channel 的功能描述，可以不輸入</li>
<li><strong>Send invites to</strong> : 設定 channel 成員，可以稍後再設定</li>
<li>按 <code>Create Channel</code> 開始建立 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack015.png" alt="slack015"></p>
<ol>
<li>按 <code>Got It!</code> 進入 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack016.png" alt="slack016"></p>
<ol>
<li>正式進入 channel，將來 Jenkins 訊息會傳進此 channel</li>
</ol>
<p><strong>新增 Notification</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack017.png" alt="slack017"></p>
<ol>
<li>選擇右上方的 <code>option</code></li>
<li>選擇 <code>Add an app</code></li>
</ol>
<p><strong>新增 Jenkins App</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack018.png" alt="slack018"></p>
<p>Slack 將開啟瀏覽器</p>
<ol>
<li>稍微往下捲輸入 <code>Jenkins</code></li>
<li>選擇 <code>Jenkins CI</code></li>
</ol>
<p><strong>新增 Configuration</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack019.png" alt="slack019"></p>
<ol>
<li>按 <code>Add Configuration</code> 加入 Jenkins CI</li>
</ol>
<p><strong>新增 Integration</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack020.png" alt="slack020"></p>
<ol>
<li>按 <code>Add Bitbucket Integration</code> 正式加入整合 Jenkins</li>
</ol>
<p><strong>Slack 設定完成</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack021.png" alt="slack021"></p>
<ol>
<li>介紹 Jenkins 設定流程</li>
</ol>
<blockquote>
<p>Slack 部分已經設定完成，接下來是 Jenkins 的設定</p>
<p>Slack 網頁先不要關閉，稍後會用到</p>
</blockquote>
<h2 id="設定_Jenkins-1">設定 Jenkins</h2><hr>
<p><strong>Manage Jenkins</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack022.png" alt="slack022"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Manage Plugins</code></li>
</ol>
<p><strong>安裝 Slack Plugin</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack023.png" alt="slack023"></p>
<ol>
<li>選擇 <code>Avaliable</code> tab</li>
<li>選擇 <code>Slack Notification Plugin</code></li>
<li>按 <code>Download now and Install after restart</code></li>
</ol>
<p><strong>新增 Webhook</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack024.png" alt="slack024"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Configure System</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack025.png" alt="slack025"></p>
<p>在 <code>Global Slack Notifier Settings</code> 下設定</p>
<ol>
<li><strong>Base URL</strong> : 貼一段 Slack 所提供的 URL</li>
<li><strong>Integration Token</strong> : 貼一段 Slack 所提供的 token</li>
</ol>
<blockquote>
<p>Q : 要貼什麼 Base URL 與 token 呢 ?</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack026.png" alt="slack026"></p>
<p>回到 Slack 最後的網頁往下捲到 <code>Step 3</code></p>
<ol>
<li>將 <code>Base URL</code> 與 <code>Integration Token</code> 複製貼上</li>
</ol>
<p>最後按 <code>Save</code> 存檔。</p>
<p><strong>設定 Job</strong></p>
<p><img src="/images/jenkins/netcore-slack/slack027.png" alt="slack027"></p>
<ol>
<li>選擇要發 Slack 通知的 job</li>
<li>按 <code>Configure</code> 設定</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack028.png" alt="slack028"></p>
<p>在 Jenkins 執行完 <code>build</code> 動作後，無論成功或失敗，將結果通知 Slack</p>
<ol>
<li>選擇 <code>Post-build Actions</code></li>
<li>選擇 <code>Add post-build action</code></li>
<li>選擇 <code>Slack Notification</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack029.png" alt="slack029"></p>
<p>選擇希望 Jenkins 通知 Slack 的動作 :</p>
<ol>
<li>選擇 <code>Notify Failure</code>、 <code>Notify Success</code> 與 <code>Notify Unstable</code></li>
</ol>
<blockquote>
<p>建議不用選擇太多 action，<code>success</code> 確認 Jenkins 還活著，<code>Failure</code> 與 <code>Unstable</code> 確認 CI 失敗即可</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack030.png" alt="slack030"></p>
<p>新增一個 Git commit，就可發現 Slack 收到 Jenkins 測試成功 <code>綠燈</code> 的訊息。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上若 Git repository 放在 GitHub 或 Bitbucket，則可將 Jenkins 放到雲端主機的 VM 上，大致上的流程與設定與本文類似</li>
<li>本文雖然只針對單元測試示範，但也適用於整合測試與驗收測試</li>
<li>將較耗時的整合測試與驗收測試交給 Jenkins 處理，在開發時只要針對單元測試即可，若 Slack 出現紅燈，再回來關注整合測試與驗收測試失敗的部分</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Jenkins 也可與 .NET Core 搭配實現持續整合]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
      <category term="Slack" scheme="http://oomusou.io/tags/Slack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立含有 .NET Core SDK 的 Jenkins Docker Image ?]]></title>
    <link href="http://oomusou.io/docker/jenkins-core/"/>
    <id>http://oomusou.io/docker/jenkins-core/</id>
    <published>2018-03-05T12:23:43.000Z</published>
    <updated>2018-03-03T02:03:07.328Z</updated>
    <content type="html"><![CDATA[<p>雖然 .NET Core SDK 與 Jenkins 都各自提供官方 Docker image，但實務上使用 Jenkins 做持續整合時，我們會從 Jenkins 將 Git repository clone 下來，然後跑 <code>dotnet test</code> 執行單元測試，但 <code>dotnet test</code> 需要 .NET Core SDK 環境才能執行，因此我們必須建立自己的 Dockerfile，產生包含 .NET Core SDK 的 Docker image。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.12.0-ce-mac55 (23011)<br>Jenkins 2.89.4<br>.NET Core SDK 2.1.4</p>
<h2 id="Dockerfile">Dockerfile</h2><hr>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> jenkins/jenkins:lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># Switch to root to install .NET Core SDK</span></span><br><span class="line"><span class="built_in">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show distro information!</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">uname <span class="operator">-a</span> &amp;&amp; cat /etc/*release</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Based on instructiions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span></span><br><span class="line"><span class="comment"># Install dependency for .NET Core 2</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y curl libunwind8 gettext apt-transport-https</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Based on instructions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span></span><br><span class="line"><span class="comment"># Install microsoft.qpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install the .NET Core framework</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">4</span></span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Switch back to the jenkins user.</span></span><br><span class="line"><span class="built_in">USER</span> jenkins</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>
<p>以 <code>jenkins/jenkins:lts</code> 作為 image 的基底。</p>
<p>第 3 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Switch to root to install .NET Core SDK</span></span><br><span class="line"><span class="built_in">USER</span> root</span><br></pre></td></tr></table></figure>
<p>因為即將使用 <code>apt-get</code> 安裝 package，所以直接切換到 <code>root</code> 帳號執行以下動作。</p>
<p>第 6 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show distro information!</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">uname <span class="operator">-a</span> &amp;&amp; cat /etc/*release</span></span><br></pre></td></tr></table></figure>
<p>顯示目前 image 的版本資訊。</p>
<blockquote>
<p>此段並非安裝 .NET Core SDK 所必須，但因為 Linux 的 ditribution 眾多，每個 <code>Dockerfile</code> 的寫法也會有所差異，因此這行可以幫助 <code>Dockerfile</code> 撰寫，尤其  <code>jenkins/jenkins:lts</code> 是用 Debian 9 所建立，因此 dependency 又與 Ubuntu 16.04 LTS  不太一樣</p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Based on instructiions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span></span><br><span class="line"><span class="comment"># Install dependency for .NET Core 2</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y curl libunwind8 gettext apt-transport-https</span></span><br></pre></td></tr></table></figure>
<p>由於 Jenkins image 是根據 Debian 9 所建立，根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Debian 9</a>，若要在 Debian 9 安裝 .NET Core，還必須安裝以下額外 package :</p>
<ul>
<li>curl</li>
<li>libunwind8</li>
<li>gettext</li>
<li>apt-transport-https</li>
</ul>
<p>14 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Based on instructions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span></span><br><span class="line"><span class="comment"># Install microsoft.qpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Debian 9</a> 所描述，要安裝 .NET Core SDK 前，必須先將 <code>microsoft.gpg</code> 裝好。</p>
<p>20 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the .NET Core framework</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">4</span></span></span><br></pre></td></tr></table></figure>
<p>所有的 dependency 與  <code>microsoft.gpg</code> 都裝好後，就可以正式安裝 .NET Core SDK 了。</p>
<p>24 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Switch back to the jenkins user.</span></span><br><span class="line"><span class="built_in">USER</span> jenkins</span><br></pre></td></tr></table></figure>
<p>由於剛剛是以 <code>root</code> 帳號安裝 .NET Core SDK，最後切回預設的 <code>jenkins</code> 帳號。</p>
<h2 id="建立_Image">建立 Image</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/JenkinsCore $ docker <span class="keyword">build </span>-t oomusou/jenkins-core .</span><br></pre></td></tr></table></figure>
<p>進入 <code>Dockerfile</code> 所在的目錄，使用 <code>docker build</code> 建立自己的 image。</p>
<ul>
<li><strong>-t</strong> : Docker image 的名稱</li>
<li><strong>.</strong> : 將目前目錄的 <code>Dockerfile</code> 建立成 image</li>
</ul>
<p><img src="/images/docker/jenkins-core/jenkins000.png" alt="jenkins000"></p>
<ol>
<li>輸入 <code>docker build -t oomusou/jenkins-core .</code> 將 <code>Dockerfile</code> 建立成 <code>oomusou/jenkins-core</code></li>
<li><code>uname -a &amp;&amp; cat /etc/*release</code> 顯示出為 <code>Debian</code> ，證明 Jenkins image 是由 Debian 建立</li>
</ol>
<h2 id="建立並執行_Container">建立並執行 Container</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkinsCore -p <span class="number">8080</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home oomusou/jenkins-core</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container 並執行之。</p>
<ul>
<li><strong>—name</strong> : 替 container 取一個人能夠識別的名字 <code>MyJenkinsCore</code> (若省略，Docker 將隨機命名，將來不易維護)</li>
<li><strong>-p</strong> : Docker 外部與 Jenkins 內部所對應的 port，其中左邊為外部 Docker 的 port，右邊為 Jenkins 內部的 port</li>
<li><strong>-v</strong> : 建立 <code>JENKINS_HOME</code> 環境變數，其目錄在 <code>/var/jenkins_home</code>，為 Jenkins 的工作目錄</li>
</ul>
<p><img src="/images/docker/jenkins-core/jenkins001.png" alt="jenkins001"></p>
<ol>
<li>輸入 <code>docker run …</code> 建立並執行 container</li>
</ol>
<h2 id="測試_-NET_Core_SDK">測試 .NET Core SDK</h2><p>–<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker exec -it <span class="constant">MyJenkinsCore </span>bash</span><br><span class="line">root<span class="variable">@xxx</span><span class="symbol">:/</span><span class="comment"># dotnet --version</span></span><br></pre></td></tr></table></figure></p>
<p>使用 <code>docker exec</code> 對已經執行中的 container 下指令。</p>
<ul>
<li><code>-i</code> :  <code>i</code>nteractive，可對 terminal 輸入資料</li>
<li><code>-t</code> : <code>t</code>erminal，可對 terminal 顯示資料</li>
<li><code>MyUbuntuCore</code> : Container 名稱</li>
<li><code>bash</code> : 對 container 下的指令</li>
</ul>
<p><img src="/images/docker/jenkins-core/jenkins002.png" alt="jenkins002"></p>
<ol>
<li>輸入 <code>docker exec -it</code> 進入 container 的 terminal</li>
<li>輸入 <code>dotnet —version</code> 確認 .NET Core SDK 已經安裝成功</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 Jenkins 是依照 Debian 9 所建立，因此所需要的 dependency 與 Ubuntu 稍有不同</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Debian 9</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Jenkins 包含 .NET Core 才能進行單元測試]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Ubuntu 安裝 .NET Core ?]]></title>
    <link href="http://oomusou.io/netcore/linux-install/"/>
    <id>http://oomusou.io/netcore/linux-install/</id>
    <published>2018-03-04T12:23:43.000Z</published>
    <updated>2018-03-02T14:22:16.987Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 為 Microsoft 的跨平台解決方案，只要裝上 .NET Core SDK，就可在 Linux 執行與開發 .NET Core App，本文以 Ubuntu 為例。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Parallel Desktop 13 for Mac 13.3.0 (43321)<br>Ubuntu 16.04<br>.NET Core SDK 2.1.4</p>
<h2 id="安裝_Dependency">安裝 Dependency</h2><hr>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">$ sudo apt-<span class="built_in">get</span> install curl</span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a>，若要在 Linux 安裝 .NET Core，在 Ubuntu 還必須安裝以下額外 package :</p>
<ul>
<li>libunwind8</li>
<li>liblttng-ust0</li>
<li>libcurl3</li>
<li>libssl1.0.0</li>
<li>libuuid1</li>
<li>libkrb5-3</li>
<li>zlib1g</li>
<li>libicu52 (for 14.X)</li>
<li>libicu55 (for 16.X)</li>
<li>libicu57 (for 17.X)</li>
</ul>
<p>這些 package 在 Ubuntu 其實都已經內建，所以不用特別安裝。</p>
<p>其中 <code>curl</code> 在並不算 .NET Core SDK 所需要的 package，但接下來要用 <code>curl</code> 安裝 <code>microsoft.qpg</code>，所以也需要特別安裝。 </p>
<p><img src="/images/netcore/linux-install/linux000.png" alt="linux000"></p>
<ol>
<li>輸入 <code>sudo apt-get update</code> 更新本機套件清單</li>
<li>輸入  <code>sudo apt-get install curl</code> 安裝 <code>curl</code></li>
</ol>
<h2 id="安裝_microsoft-qpg">安裝 microsoft.qpg</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl https:<span class="comment">//packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span></span><br><span class="line">$ sudo mv microsoft<span class="class">.gpg</span> /etc/apt/trusted<span class="class">.gpg</span><span class="class">.d</span>/microsoft<span class="class">.gpg</span></span><br><span class="line">$ sudo sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>curl</code> 下載 <code>microsoft.qpg</code> 並安裝之。</p>
<p>加入 Microsoft 套件庫位置。</p>
<p><img src="/images/netcore/linux-install/linux001.png" alt="linux001"></p>
<ol>
<li>輸入 <code>curl …</code> 下載 <code>microsoft.qpg</code> 到本機</li>
<li>將 <code>microsoft.qpg</code> 移到適當目錄</li>
<li>加入 Microsoft 套件庫位置</li>
</ol>
<h2 id="安裝_-NET_Core_SDK">安裝 .NET Core SDK</h2><hr>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get <span class="operator"><span class="keyword">install</span> apt-transport-https</span><br><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> -y <span class="keyword">dotnet</span>-sdk-<span class="number">2.1</span><span class="number">.4</span></span></span><br></pre></td></tr></table></figure>
<p>安裝 <code>apt-transport-https</code> 套件。</p>
<p>由於剛剛新加入了 Microsoft 自己的套件庫，所以需要在執行 <code>apt-get update</code> 更新一次。</p>
<p>正式安裝 .NET Core SDK 2.1.4。</p>
<p><img src="/images/netcore/linux-install/linux002.png" alt="linux002"></p>
<ol>
<li>輸入 <code>sudo apt-get install apt-transport-https</code> 安裝 <code>apt-transport-https</code> 套件</li>
<li>輸入 <code>sudo apt-get update</code> 更新本機套件清單</li>
<li>輸入 <code>sudo apt-get install -y dotnet-sdk-2.1.4</code> 安裝 .NET Core SDK </li>
</ol>
<h2 id="測試_-NET_Core_SDK">測試 .NET Core SDK</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">dotnet</span> <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<p>輸入 <code>dotnet —version</code> 確認 .NET Core SDK 已經安裝成功</p>
<p><img src="/images/netcore/linux-install/linux003.png" alt="linux003"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Linux 有分不同 distribution，在不同 distribution 安裝 .NET Core 的方法大同小異，詳細請參考 .NET Core 官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 16.04</a> ，自行選擇不同的 distribution</li>
<li>在 Linux 上也可以選擇自行下載 <code>tar.gz</code> 方式安裝，詳情請參考 <a href="https://www.microsoft.com/net/download/thank-you/dotnet-sdk-2.1.4-linux-x64-binaries" target="_blank" rel="external">.NET Core 2.1.4 SDK (Binaries for Linux x64)</a></li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a><br><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 16.04</a><br><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://www.microsoft.com/net/download/thank-you/dotnet-sdk-2.1.4-linux-x64-binaries" target="_blank" rel="external">.NET Core 2.1.4 SDK (Binaries for Linux x64)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[自行在 Linux 安裝 .NET Core]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立含有 .NET Core SDK 的 Docker Image ?]]></title>
    <link href="http://oomusou.io/docker/ubuntu-core/"/>
    <id>http://oomusou.io/docker/ubuntu-core/</id>
    <published>2018-03-03T12:23:43.000Z</published>
    <updated>2018-03-03T01:50:26.665Z</updated>
    <content type="html"><![CDATA[<p>雖然 Microsoft 官方提供 .NET Core 的 Docker image，但實務上建置環境時，可能先使用其他 server 的 image，然後再加裝 .NET Core SDK 環境，如此就需要自行建立 <code>Dockerfile</code>，並建立自己的 image。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.12.0-ce-mac55 (23011)<br>Ubuntu 16.04.3 LTS<br>.NET Core SDK 2.1.4</p>
<h2 id="Dockerfile">Dockerfile</h2><hr>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># Switch to root to install .NET Core SDK</span></span><br><span class="line"><span class="built_in">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show distro information!</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">uname <span class="operator">-a</span> &amp;&amp; cat /etc/*release</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Based on instructiions at https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x</span></span><br><span class="line"><span class="comment"># Install dependency for .NET Core 2</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y libunwind8 liblttng-ust0 libcurl3 libssl1.<span class="number">0.0</span> libuuid1 libkrb5-<span class="number">3</span> zlib1g libicu55 curl</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Based on instructions at https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current</span></span><br><span class="line"><span class="comment"># Install microsoft.qpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install the .Net Core framework</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get install apt-transport-https</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">4</span></span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> ubuntu</span><br></pre></td></tr></table></figure>
<p>以 <code>ubuntu</code> 這個 image 為基底建立 image。</p>
<blockquote>
<p>Q : 為什麼不用 <code>ubuntu:lts</code> 呢 ?</p>
<p>預設 <code>ubuntu</code> 即 <code>ubuntu:latest</code>，而 <code>ubuntu:latest</code> 指的就是 latest lts，所以已經是 LTS 版本</p>
</blockquote>
<p>第 3 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Switch to root to install .NET Core SDK</span></span><br><span class="line"><span class="built_in">USER</span> root</span><br></pre></td></tr></table></figure>
<p>因為即將使用 <code>apt-get</code> 安裝 package，所以直接切換到 <code>root</code> 帳號執行以下動作。</p>
<p>第 6 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show distro information!</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">uname <span class="operator">-a</span> &amp;&amp; cat /etc/*release</span></span><br></pre></td></tr></table></figure>
<p>顯示目前 image 的版本資訊。</p>
<blockquote>
<p>此段並非安裝 .NET Core SDK 所必須，但因為 Linux 的 ditribution 眾多，每個 <code>Dockerfile</code> 的寫法也會有所差異，因此這行可以幫助 <code>Dockerfile</code> 撰寫</p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Based on instructiions at https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x</span></span><br><span class="line"><span class="comment"># Install depency for .NET Core 2</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y libunwind8 liblttng-ust0 libcurl3 libssl1.<span class="number">0.0</span> libuuid1 libkrb5-<span class="number">3</span> zlib1g libicu55 curl</span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a>，若要在 Linux 安裝 .NET Core，在 Ubuntu 還必須安裝以下額外 package :</p>
<ul>
<li>libunwind8</li>
<li>liblttng-ust0</li>
<li>libcurl3</li>
<li>libssl1.0.0</li>
<li>libuuid1</li>
<li>libkrb5-3</li>
<li>zlib1g</li>
<li>libicu52 (for 14.X)</li>
<li>libicu55 (for 16.X)</li>
<li>libicu57 (for 17.X)</li>
</ul>
<p>其中 <code>curl</code> 在並不算 .NET Core SDK 所需要的 package，但接下來要用 <code>curl</code> 安裝 <code>microsoft.qpg</code>，所以也需要特別安裝。 </p>
<p>14 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Based on instructions at https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current</span></span><br><span class="line"><span class="comment"># Install microsoft.qpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 16.04</a> 所描述，要安裝 .NET Core SDK 前，必須先將 <code>microsoft.gpg</code> 裝好。</p>
<p>20 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the .Net Core framework</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get install apt-transport-https</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">4</span></span></span><br></pre></td></tr></table></figure>
<p>所有的 dependency 與  <code>microsoft.gpg</code> 都裝好後，就可以正式安裝 .NET Core SDK 了。</p>
<h2 id="建立_Image">建立 Image</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/UbuntuCore $ docker <span class="keyword">build </span>-t oomusou/ubuntu-core .</span><br></pre></td></tr></table></figure>
<p>進入 <code>Dockerfile</code> 所在的目錄，使用 <code>docker build</code> 建立自己的 image。</p>
<ul>
<li><strong>-t</strong> : Docker image 的名稱</li>
<li><strong>.</strong> : 將目前目錄的 <code>Dockerfile</code> 建立成 image</li>
</ul>
<p><img src="/images/docker/ubuntu-core/ubuntu002.png" alt="ubuntu002"></p>
<ol>
<li>輸入 <code>docker build -t oomusou/ubuntu-core .</code> 將 <code>Dockerfile</code> 建立成 <code>oomusou/ubuntu-core</code></li>
<li><code>uname -a &amp;&amp; cat /etc/*release</code> 顯示出 Linux 資訊</li>
</ol>
<h2 id="建立並執行_Container">建立並執行 Container</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="command">run</span> <span class="comment">--name MyUbuntuCore -dt oomusou/ubuntu-core</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container 並執行之。</p>
<ul>
<li><code>--name</code> : 替 container 取一個人能夠識別的名字 ( 若省略，Docker 將隨機命名 )</li>
<li><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process</li>
<li><code>-t</code> : <code>t</code>erminal，預設執行 <code>/bin/bash</code> process，為了讓 container 啟動後不會立即停止</li>
<li><code>oomusou/ubuntu-core</code> : 剛剛自己建立的 image</li>
</ul>
<p><img src="/images/docker/ubuntu-core/ubuntu000.png" alt="ubuntu000"></p>
<h2 id="測試_-NET_Core_SDK">測試 .NET Core SDK</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker exec -it <span class="constant">MyUbuntuCore </span>bash</span><br><span class="line">root<span class="variable">@xxx</span><span class="symbol">:/</span><span class="comment"># dotnet --version</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker exec</code> 對已經執行中的 container 下指令。</p>
<ul>
<li><code>-i</code> :  <code>i</code>nteractive，可對 terminal 輸入資料</li>
<li><code>-t</code> : <code>t</code>erminal，可對 terminal 顯示資料</li>
<li><code>MyUbuntuCore</code> : Container 名稱</li>
<li><code>bash</code> : 對 container 下的指令</li>
</ul>
<p><img src="/images/docker/ubuntu-core/ubuntu001.png" alt="ubuntu001"></p>
<ol>
<li>輸入 <code>docker exec -it</code> 進入 container 的 terminal</li>
<li>輸入 <code>dotnet —version</code> 確認 .NET Core SDK 已經安裝成功</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>如使用 Jenkins 對 .NET Core 進行持續整合，實務上會把專案 <code>git clone</code> 到 Jenkins 端執行單元測試，此時執行 <code>dotnet test</code> 就必須有 .NET Core SDK 環境，但我們不會使用 .NET Core 的 Docker image，而會使用 Jenkins 所提供的 image，此時就必須自己寫 <code>Dockerfile</code>，並將 .NET Core SDK 環境安裝在 Jenkins 上。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a><br><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://www.microsoft.com/net/download/linux-package-manager/ubuntu16-04/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 16.04</a></p>
]]></content>
    <summary type="html">
    <![CDATA[由 Dockerfile 安裝 .NET Core SDK]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何為 Slack 設定 Bitbucket 通知 ?]]></title>
    <link href="http://oomusou.io/slack/bibucket/"/>
    <id>http://oomusou.io/slack/bibucket/</id>
    <published>2018-03-02T12:23:43.000Z</published>
    <updated>2018-03-03T14:55:00.923Z</updated>
    <content type="html"><![CDATA[<p>當對 Bitbucket 有任何動作時，我們希望在 Slack 的 channel 能收到通知，如此可避免所有訊息都透過 Email，只有真正與人相關的訊息才使用 Email，讓 Slack 成為持續整合的訊息中心。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Slack 3.0.5</p>
<h2 id="設定_Slack">設定 Slack</h2><hr>
<h3 id="新增_Channel">新增 Channel</h3><p><img src="/images/slack/bitbucket/bitbucket000.png" alt="bitbucket000"></p>
<ol>
<li>按下 <code>Channels</code> 右側的 <code>+</code> 新增 channel</li>
</ol>
<p><img src="/images/slack/bitbucket/bitbucket001.png" alt="bitbucket001"></p>
<ol>
<li><strong>Privacy</strong> : 設定為 <code>Public</code> 或 <code>Private</code> channel</li>
<li><strong>Name</strong> : 設定 channel 名稱</li>
<li><strong>Purpose</strong> : channel 的功能描述，可以不輸入</li>
<li><strong>Send invites to</strong> : 設定 channel 成員，可以稍後再設定</li>
<li>按 <code>Create Channel</code> 開始建立 channel</li>
</ol>
<h3 id="設定_Notification">設定 Notification</h3><p><img src="/images/slack/bitbucket/bitbucket002.png" alt="bitbucket002"></p>
<ol>
<li>選擇欲設定的 channel</li>
<li>選擇右上方的 <code>option</code></li>
<li>選擇 <code>Add an app</code></li>
</ol>
<h3 id="加入_Bitbucket_App">加入 Bitbucket App</h3><p><img src="/images/slack/bitbucket/bitbucket003.png" alt="bitbucket003"></p>
<p>Slack 將開啟瀏覽器</p>
<ol>
<li>稍微往下捲輸入 <code>Bitbucket</code></li>
<li>選擇 <code>Bitbucket</code></li>
</ol>
<h3 id="新增_Configuration">新增 Configuration</h3><p><img src="/images/slack/bitbucket/bitbucket004.png" alt="bitbucket004"></p>
<ol>
<li>按 <code>Add Configuration</code> 加入 Bitbucket</li>
</ol>
<h3 id="新增_Integration">新增 Integration</h3><p><img src="/images/slack/bitbucket/bitbucket005.png" alt="bitbucket005"></p>
<ol>
<li>按 <code>Add Bitbucket Integration</code> 正式加入整合 Bitbucket</li>
</ol>
<h3 id="Slack_設定完成">Slack 設定完成</h3><p><img src="/images/slack/bitbucket/bitbucket006.png" alt="bitbucket006"></p>
<ol>
<li>介紹 Bitbucket 設定流程</li>
</ol>
<blockquote>
<p>Slack 部分已經設定完成，接下來是 Bitbucket 的設定</p>
<p>Slack 網頁先不要關閉，稍後會用到</p>
</blockquote>
<h2 id="設定_Bitbucket">設定 Bitbucket</h2><hr>
<h3 id="新增_Webhooks">新增 Webhooks</h3><p><img src="/images/slack/bitbucket/bitbucket007.png" alt="bitbucket007"></p>
<ol>
<li>到 Bitbucket 選擇你要設定的 repository</li>
<li>選擇 <code>Settings</code></li>
<li>選擇 <code>Webhooks</code></li>
<li>按下 <code>Add webhook</code></li>
</ol>
<p><img src="/images/slack/bitbucket/bitbucket008.png" alt="bitbucket008"></p>
<ol>
<li><strong>Title</strong> : 依需求設定</li>
<li><strong>URL</strong> : 貼一段 Slack 所提供的 URL，至於要貼什麼呢 ? 稍後會介紹</li>
<li><strong>Triggers</strong> : 設定什麼 Bitbucket 動作要通知 Slack，預設是 <code>Push</code>，但也可以設定的更細</li>
<li>按 <code>Save</code> 儲存設定</li>
</ol>
<p><img src="/images/slack/bitbucket/bitbucket009.png" alt="bitbucket009"></p>
<blockquote>
<p>Q : <strong>URL</strong> 要設定什麼呢 ?</p>
</blockquote>
<ol>
<li>回到 Slack 最後的網頁往下捲到 <code>Step 2</code></li>
<li>將 <code>http:/hooks.slack.com……</code> 的 URL 複製下來，貼到 Bitbucket 的 <code>URL</code> 欄位</li>
</ol>
<p><img src="/images/slack/bitbucket/bitbucket010.png" alt="bitbucket010"></p>
<ol>
<li>儲存後會看到剛剛新增的 webhook 已經出現</li>
</ol>
<h2 id="Slack">Slack</h2><hr>
<p><img src="/images/slack/bitbucket/bitbucket011.png" alt="bitbucket011"></p>
<p>回到 Slack，當任何 <code>push</code> 到 GitBucket 時，channel 都會收到通知。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Slack 提供了一個不錯的 CI 訊息平台，讓訊息從 Email 解放</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓 Slack 成為 CI 的訊息中心]]>
    
    </summary>
    
      <category term="Bitbucket" scheme="http://oomusou.io/tags/Bitbucket/"/>
    
      <category term="Slack" scheme="http://oomusou.io/tags/Slack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[F# 的特色與歷史簡介]]></title>
    <link href="http://oomusou.io/fsharp/intro/"/>
    <id>http://oomusou.io/fsharp/intro/</id>
    <published>2018-03-01T12:23:43.000Z</published>
    <updated>2018-02-27T08:38:00.341Z</updated>
    <content type="html"><![CDATA[<p>F# 並不是一個新語言，早在 2005 年就已經發行 1.0，隨著 .NET Core 的跨平台，也將 F# 帶進了 .NET Core，既然在 .NET Core 我們已經有了 C#，為什麼要關注 F# 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core 2.1.4<br>F# 4.1</p>
<h2 id="FSharp_的歷史">FSharp 的歷史</h2><hr>
<p>F# 並不像 C-style 語言，反而比較像 Python，事實上 F# 是從 ML、OCaml、Python、Haskell、Scala、Erlang … 等語言獲得靈感，除了 Python  大家較為熟悉外，剩下的都是 Functional Programming Language，由此可見 F# 的 F 就是 <code>F</code>untional，所以 F# 號稱是 function first language，也就是 F# 雖然也支援 OOP，但 FP 是其主要特色。</p>
<p>個人大概在 2010 年曾經接觸過 F#，當初的感覺 F# 是個 <code>外星語言</code>，很難體會 F# 的優點在哪裡，學沒多久就放棄了，但經過這幾年 Laravel Collection、JavaScript 、Linq 、Rx.js 與 AWS Lambda 的轟炸，越來越覺得 FP 的可愛，OOP 也能藉由 FP 手法，產生出現更優雅的實作方式。</p>
<p>這幾年一直想尋找一個 FP 語言來練習，期間摸過 Elixir 、Scala、Clojure，但成效一直有限，一直到最近複習 F#，才發現 F# 是一個很簡單的 FP 語言，以前看不懂的地方，瞬間都看懂了，只是當年還無法欣賞 F#。</p>
<h2 id="Functional_Programming_定義">Functional Programming 定義</h2><hr>
<p>一個語言要能實現 FP，必須有 4 個條件：</p>
<ul>
<li>能將 function 指定為變數</li>
<li>能將 function 存到 collection 內</li>
<li>能將 function 以參數型式傳入 function</li>
<li>能在 function 回傳 function</li>
</ul>
<p>簡單來說，function 要能如一般變數與 object 一樣使用。</p>
<p><code>能將 function 以參數型式傳入 function</code> 導致了 Higher Order Function 的觀念出現，如 Rx.js 一堆 operator，就是 Higher Order Function。</p>
<p><code>能在 function 回傳 function</code> 則導致了 Pipeline、Compose 與 Currying 的觀念出現。</p>
<p>一般 OOP 語言都會某種程度的支援 FP，如 Higher Order Function 在 C#、JavaScript、PHP … 都可以實現。</p>
<p>但 Pipeline、Compose 與 Currying 在一般 OOP 語言則沒有，或者要另外安裝其他 package 才能實現，但這些觀念在 F# 都是原生支援。</p>
<h2 id="User_Story">User Story</h2><hr>
<p>我們想將陣列 <code>1, 2, 3, 4, 5</code> 的資料中，將所 <code>奇數</code> 平方再加 <code>1</code>。</p>
<h2 id="Task">Task</h2><hr>
<p>根據 JavaScript、Linq 、Rx.js 的經驗，我們不再使用迴圈，而會使用 Higher Order Function 來解決問題。</p>
<h2 id="Higher_Order_Function">Higher Order Function</h2><hr>
<p><strong>Program.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> numbers = [<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isOdd x = x % <span class="number">2</span> &lt;&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> square x = x * x</span><br><span class="line">    <span class="keyword">let</span> addOne x = x + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> func values =</span><br><span class="line">        <span class="keyword">let</span> odds = List.filter isOdd values</span><br><span class="line">        <span class="keyword">let</span> squares = List.map square odds</span><br><span class="line">        <span class="keyword">let</span> result = List.map addOne squares</span><br><span class="line">        result</span><br><span class="line">        </span><br><span class="line">    printfn <span class="string">"%A"</span> (func numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> odds = List.<span class="built_in">filter</span> isOdd <span class="built_in">values</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>List.filter</code> 先找出所有 <code>奇數</code> 。</p>
<ul>
<li><code>isOdd</code> : 傳入 <code>判斷奇數</code> 的 function</li>
<li><code>values</code> : 傳入欲處理資料</li>
<li><code>odds</code> : 回傳所有 <code>奇數</code> </li>
</ul>
<p>第 7 行</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let isOdd x = x % <span class="number">2</span> &lt;&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>定義 <code>isOdd</code>，當 <code>% 2</code> 餘數不為 <code>0</code> 時為 <code>奇數</code> 。</p>
<blockquote>
<p>在 F#，因為已經將 function 視為一般變數，所以無論是 value 或 function，都統一使用 <code>let</code></p>
</blockquote>
<p>13 行</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squares = <span class="built_in">List</span><span class="built_in">.</span><span class="built_in">map</span> square odds</span><br></pre></td></tr></table></figure>
<p>既然已經找出所有 <code>奇數</code>，接下來就是使用 <code>List.map</code> 計算 <code>平方</code>。</p>
<ul>
<li><code>square</code> : 傳入 <code>計算平方</code> 的 function</li>
<li><code>odds</code> : 傳入所有<code>奇數</code></li>
<li><code>squares</code> : 回傳所有 <code>平方</code></li>
</ul>
<p>第 8 行</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">square</span> x = x <span class="built_in">*</span> x</span><br></pre></td></tr></table></figure>
<p>定義 <code>square</code>，計算平方。</p>
<p>14 行</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="literal">result</span> = <span class="type">List</span>.map addOne squares</span><br></pre></td></tr></table></figure>
<p>既然已經計算出所有 <code>奇數的平方</code>，接下來就是使用 <code>List.map</code> 計算 <code>+1</code>。</p>
<ul>
<li><code>square</code> : 傳入 <code>計算+1</code> 的 function</li>
<li><code>odds</code> : 傳入所有<code>奇數的平方</code></li>
<li><code>squares</code> : 回傳所有 <code>平方+1</code></li>
</ul>
<p>第 9 行</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">let</span> <span class="keyword">addOne </span>x = x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>定義 <code>addOne</code>，計算 <code>+1</code>。</p>
<p>15 行</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">result</span></span><br></pre></td></tr></table></figure>
<p>要回傳的變數， F# 不用寫 <code>return</code>。</p>
<blockquote>
<p>相對於 C-style 語言，我們發現 F# 有幾個特色</p>
<ol>
<li>沒有 <code>{}</code>，完全用縮排表示，類似 Python</li>
<li>Function 傳入參數不需 <code>()</code>，只需空白隔開即可</li>
<li>變數與 function 統一使用 <code>let</code></li>
<li>回傳值不需要 <code>return</code></li>
</ol>
<p>這些只是語法的差異，只要習慣即可，不過平心而論，C-style 語言寫久，會發現 code 都一堆 <code>()</code> <code>{}</code> 與 <code>return</code> 都是贅字，F# 這種 coding style 乾淨很多</p>
</blockquote>
<h2 id="Pipeline_與_Currying">Pipeline 與 Currying</h2><hr>
<p>由於 <code>List.filter</code>、<code>List.map</code> 與 <code>List.map</code> 是依序處理，因此我們要不斷定義中繼變數 : <code>odds</code> 與 <code>squares</code> 傳入，事實上這些也是多餘的，若能省略則更好，這就是 Pipeline。</p>
<p><strong>Program.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> numbers = [<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isOdd x = x % <span class="number">2</span> &lt;&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> square x = x * x</span><br><span class="line">    <span class="keyword">let</span> addOne x = x + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> func values =</span><br><span class="line">        values </span><br><span class="line">        |&gt; List.filter isOdd</span><br><span class="line">        |&gt; List.map square</span><br><span class="line">        |&gt; List.map addOne</span><br><span class="line">        </span><br><span class="line">    printfn <span class="string">"%A"</span> (func numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">values </span><br><span class="line">|&gt; <span class="built_in">List</span><span class="built_in">.</span>filter isOdd</span><br><span class="line">|&gt; <span class="built_in">List</span><span class="built_in">.</span><span class="built_in">map</span> square</span><br><span class="line">|&gt; <span class="built_in">List</span><span class="built_in">.</span><span class="built_in">map</span> addOne</span><br></pre></td></tr></table></figure>
<p><code>|&gt;</code> 為 F# 的 Pipeline 符號，表示將 function 的 output 作為下一個 function 的 input。</p>
<p>因此我們可以透過 <code>|&gt;</code> 表示先執行 <code>List.flter</code>，然後再將結果傳入 <code>List.map</code>，最後再將結果傳入 <code>List.map</code>，這樣可以很清楚的表示流程，語意比 imperative 寫法更清楚。</p>
<blockquote>
<p> Q : 可以明明 <code>List.map</code> 與 <code>List.filter</code> 是 2 個參數，第 1 個參數是 function，第 2 個參數是 value，但為什麼 value 都不用傳呢 ?</p>
</blockquote>
<p>當 function 參數沒有傳完全時，F# 將回傳一個新的 function，新的 function 只要傳入剩下的參數即可，這稱為 Currying。</p>
<p>當 <code>List.filter isOdd</code> 只傳入 1 個參數時，由於參數沒有傳完整，將回傳一個新的  function，然後 <code>|&gt;</code> 再將 <code>values</code> 傳入新的 function，如此 <code>List.filter</code> 才算完整，才能回傳 <code>所有奇數</code>，最後再將 <code>所有奇數</code>透過 <code>|&gt;</code> 傳給下一個 <code>List.map</code>，剩下以此類推。</p>
<h2 id="Compose">Compose</h2><hr>
<p>Pipeline 雖然已經夠清楚，但 pipeline 基本上仍然是回傳 value，若我們能將所有 function 先組合好，最後統一透過一個 function 執行，那就更好了，這就是 Compose。</p>
<p><strong>Program.fs</strong><br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> numbers = [<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isOdd x = x % <span class="number">2</span> &lt;&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> square x = x * x</span><br><span class="line">    <span class="keyword">let</span> addOne x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> sqaureAddOne = square &gt;&gt; addOne</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> func = List.filter isOdd &gt;&gt; List.map sqaureAddOne</span><br><span class="line">    </span><br><span class="line">    printfn <span class="string">"%A"</span> (func numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>12 行</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="built_in">List</span><span class="built_in">.</span>filter isOdd &gt;&gt; <span class="built_in">List</span><span class="built_in">.</span><span class="built_in">map</span> sqaureAddOne</span><br></pre></td></tr></table></figure>
<p><code>&gt;&gt;</code> 為 F# 的 compose 符號，專門負責組合 function。</p>
<p>因為連續兩個 <code>List.map</code>，因此我們先將 square 與 addOne 組合成新的 <code>sqaureAddOne</code> function，再交給 <code>List.map</code> 執行。</p>
<p>由於是先執行 <code>List.fiter</code> ，再執行 <code>List.map</code>，因此使用 <code>List.filter &gt;&gt; List.map</code>。</p>
<p><code>&gt;&gt;</code> 不只代表 compose，也代表執行方向，所以也有 <code>&lt;&lt;</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文簡單的展示 F# 最關鍵的 Pipeline、Currying 與 Compose，這些都是 OOP 語言很難見到的強悍功能，透過 F# 的簡單實作，讓我們在練習 FP 時更加方便</li>
<li><p>F# 並不是要取代 C#，事實上在 .NET Core，C# 仍是必學的語言，只是透過學習 F#，能訓練自己 FP 的思維，進而用在 C# 與 TypeScript 上</p>
</li>
<li><p>若語言間的 paradigm 相同，只是 syntax 不同，則沒有學習新語言的必要；但若透過更好的 syntax，讓你學到不同的 paradigm，這就有意義了，這就是學習 F# 的原因</p>
</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/MyFirstFSharp" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/" target="_blank" rel="external">F#</a>, <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tour" target="_blank" rel="external">Tour of F#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[千年傳統，全新感受]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 Jenkins ?]]></title>
    <link href="http://oomusou.io/docker/jenkins/"/>
    <id>http://oomusou.io/docker/jenkins/</id>
    <published>2018-02-28T12:23:43.000Z</published>
    <updated>2018-02-26T10:25:35.310Z</updated>
    <content type="html"><![CDATA[<p>若要在 macOS 執行 Jenkins，由於 Jenkins 是由 Java 開發，當然可以直接在 macOS 安裝原生的 Jenkins，若是測試與學習的角度，更好的選擇就是安裝 Docker 版的 Jenkins，若要移除 Jenkins，直接刪除 Docker 的 container 與 image 即可，不會污染到 macOS 環境。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>Jenkins 2.89.4</p>
<h2 id="下載_Jenkins_Image">下載 Jenkins Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker pull jenkins/<span class="symbol">jenkins:</span>lts</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker pull</code> 下載 image 到本機。</p>
<blockquote>
<p>lts : 表示 Long time support 版本，通常較為穩定</p>
</blockquote>
<p><img src="/images/docker/jenkins/docker000.png" alt="docker000"></p>
<h2 id="建立_Container">建立 Container</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkins -p <span class="number">8080</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container 並執行之。</p>
<ul>
<li><strong>—name</strong> : 替 container 取一個人能夠識別的名字 <code>MyJenkins</code> (若省略，Docker 將隨機命名，將來不易維護)</li>
<li><strong>-p</strong> : Docker 外部與 Jenkins 內部所對應的 port，其中左邊為外部 Docker 的 port，右邊為 Jenkins 內部的 port</li>
<li><strong>-v</strong> : 建立 <code>JENKINS_HOME</code> 環境變數，其目錄在 <code>/var/jenkins_home</code>，為 Jenkins 的工作目錄</li>
</ul>
<p><img src="/images/docker/jenkins/docker001.png" alt="docker001"></p>
<ol>
<li><code>docker run</code> 除了建立 container 外，還會順便執行 container。</li>
</ol>
<h2 id="Unlock_Jenkins">Unlock Jenkins</h2><hr>
<p><img src="/images/docker/jenkins/docker002.png" alt="docker002"></p>
<p>Jenkins 一旦啟動後，就必須在 browser 設定 Jenkins，安裝 plugin。</p>
<p>一開始會要求輸入 Administrator password，並提示預設密碼已經寫在 <code>/var/jenkins_home/secrets/initialAdminPassword</code>。</p>
<p>由於我們現在是使用 Docker，因此該目錄是在 container 內，而不是在 host，因此要進入 container 內讀出 <code>initialAdminPassword</code> 。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>exec -it <span class="constant">MyJenkins </span>bash</span><br><span class="line">jenkins<span class="variable">@54ceef740712</span><span class="symbol">:/</span><span class="variable">$ </span>cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
<p>先進入 Jenkins 的 terminal，再將密碼 <code>cat</code> 出來。</p>
<p><img src="/images/docker/jenkins/docker009.png" alt="docker009"></p>
<ol>
<li>輸入 <code>exec it MyJenkins bash</code> 進入 Jenkins terminal</li>
<li>輸入 <code>cat /var/jenkins_home/secrets/initialAdminPassword</code> 顯示密碼</li>
</ol>
<h2 id="Customize_Jenkins">Customize Jenkins</h2><hr>
<p><img src="/images/docker/jenkins/docker010.png" alt="docker010"></p>
<p>選擇 <code>Install suggested plugins</code> 安裝預設 plugin。</p>
<h2 id="Getting_Started">Getting Started</h2><hr>
<p><img src="/images/docker/jenkins/docker011.png" alt="docker011"></p>
<p>需要一些時間安裝 plugin。</p>
<h2 id="Create_Admin_User">Create Admin User</h2><hr>
<p><img src="/images/docker/jenkins/docker012.png" alt="docker012"></p>
<p>建立管理者密碼，按 <code>Save and Finish</code> 繼續。</p>
<h2 id="Start_Using_Jenkins">Start Using Jenkins</h2><hr>
<p><img src="/images/docker/jenkins/docker013.png" alt="docker013"></p>
<p>按 <code>Start using Jenkins</code> 結束 <code>Jenkins</code> 設定。</p>
<h2 id="Welcome_to_Jenkins">Welcome to Jenkins</h2><hr>
<p><img src="/images/docker/jenkins/docker014.png" alt="docker014"></p>
<p>熟悉的 Jenkins 設定介面已經呈現，Jenkins 到此算安裝完成。</p>
<h2 id="將_Container_儲存成_Image">將 Container 儲存成 Image</h2><hr>
<p>目前為止 Jenkins 已經設定好，也安裝了預設 plugin，所以在 container 內的 <code>/var/jenkins_home</code> 已經有不少資料，我們將以目前 container 儲存成 image，將來若 Jenkins container 被我們玩壞了，可以直接再以此 image 建立全新 container，或者將新的 image 匯出成 <code>tar</code>，可將此 <code>tar</code> 加以備份，或者將 <code>tar</code> 檔交給其他人匯入成 image。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker commit <span class="constant">MyJenkins </span>oomusou/jenkins</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker commit</code> 將 container 儲存成自己的 image。</p>
<p><img src="/images/docker/jenkins/docker015.png" alt="docker015"></p>
<ol>
<li>輸入 <code>docker commit MyJenkins oomusou/jenkins</code> 將 <code>MyJenkins</code> container 儲存成 <code>oomusou/jenkins</code> image</li>
<li>輸入 <code>docker images</code> 可以看到 <code>oomusou/jenkins</code> 已經新增</li>
</ol>
<h2 id="將_Image_匯出成_Tar">將 Image 匯出成 Tar</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker save -o MyJenkins<span class="class">.tar</span> oomusou/jenkins</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker save</code> 將 image 匯出成 <code>tar</code> 檔。</p>
<ul>
<li><strong>-o</strong> : 指定匯出 <code>tar</code>檔的檔名</li>
</ul>
<p><img src="/images/docker/jenkins/docker016.png" alt="docker016"></p>
<ol>
<li>輸入 <code>docker save -o MyJenkins.tar oomusou/jenkins</code> 將 <code>oomusou/jenkins</code> image 匯出成 <code>MyJenkins.tar</code></li>
<li>硬碟已經產生 <code>MyJenkins.tar</code></li>
</ol>
<h2 id="從_Tar_匯入成_Image">從 Tar 匯入成 Image</h2><hr>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="operator"><span class="keyword">load</span> -<span class="keyword">i</span> MyJenkins.tar</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker load</code> 將 <code>tar</code> 檔匯入成 image。</p>
<ul>
<li><strong>-i</strong> : 指定匯入 <code>tar</code>檔的檔名</li>
</ul>
<p><img src="/images/docker/jenkins/docker017.png" alt="docker017"></p>
<ol>
<li>輸入 <code>docker load -i MyJenkins.tar</code> 將 <code>MyJenkins.tar</code> 匯入成 <code>oomusou/jenkins</code> image</li>
</ol>
<h2 id="建立新的_Container">建立新的 Container</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkins -p <span class="number">8080</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home oomusou/jenkins</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container 並執行之。</p>
<p><img src="/images/docker/jenkins/docker018.png" alt="docker018"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>若使用 Jenkins Docker，則整個過程分成 Docker 操作與 Jenkins 設定部分</li>
<li>可將最後設定好的 Jenkins 儲存成 image 與 <code>tar</code>，可將 <code>tar</code> 加以備份或傳給其他人</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[直接以 Docker 使用 Jenkins]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何設定 .NET Core 專案的 .gitignore ?]]></title>
    <link href="http://oomusou.io/netcore/gitignore/"/>
    <id>http://oomusou.io/netcore/gitignore/</id>
    <published>2018-02-27T12:23:43.000Z</published>
    <updated>2018-02-28T03:07:07.267Z</updated>
    <content type="html"><![CDATA[<p>使用 .NET Core SDK 建立專案後，若要使用 Git 版控，就會發現 .NET Core SDK 不像 Angular CLI 一樣，預設已將提供 <code>.gitignore</code> ，必須自己在 commit 之前先提供。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core 2.1.4<br>wget 1.19.4</p>
<h2 id="-gitignore">.gitignore</h2><hr>
<p><strong>.gitignore</strong></p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span>.swp</span><br><span class="line"><span class="keyword">*</span>.<span class="keyword">*</span>~</span><br><span class="line">project.lock.json</span><br><span class="line">.DS_Store</span><br><span class="line"><span class="keyword">*</span>.pyc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual Studio Code</span></span><br><span class="line">.vscode</span><br><span class="line"></span><br><span class="line"><span class="comment"># User-specific files</span></span><br><span class="line"><span class="keyword">*</span>.suo</span><br><span class="line"><span class="keyword">*</span>.user</span><br><span class="line"><span class="keyword">*</span>.userosscache</span><br><span class="line"><span class="keyword">*</span>.sln.docstates</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build results</span></span><br><span class="line">[Dd]ebug/</span><br><span class="line">[Dd]ebugPublic/</span><br><span class="line">[Rr]elease/</span><br><span class="line">[Rr]eleases/</span><br><span class="line">x64/</span><br><span class="line">x86/</span><br><span class="line">build/</span><br><span class="line">bld/</span><br><span class="line">[Bb]in/</span><br><span class="line">[Oo]bj/</span><br><span class="line">msbuild.log</span><br><span class="line">msbuild.err</span><br><span class="line">msbuild.wrn</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual Studio 2015</span></span><br><span class="line">.vs/</span><br></pre></td></tr></table></figure>
<p>所幸 .NET Core team 的 GitHub 已經提供了 <a href="https://github.com/dotnet/core/blob/master/.gitignore" target="_blank" rel="external">.gitignore</a>，我們可直接拿來用。</p>
<h2 id="手動建立_-gitignore">手動建立 .gitignore</h2><hr>
<h3 id="新增_-gitignore">新增 .gitignore</h3><p><img src="/images/netcore/gitignore/ignore000.png" alt="ignore000"></p>
<ol>
<li>在專案根目錄下新增 <code>.gitignore</code>，將 .NET Core team 所提供的 <code>.gitignore</code> 貼上</li>
</ol>
<h2 id="自動下載_-gitignore">自動下載 .gitignore</h2><hr>
<h3 id="安裝_wget">安裝 wget</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update</span><br><span class="line">$ <span class="keyword">brew </span>install wget</span><br></pre></td></tr></table></figure>
<p>將使用 <code>wget</code> 自動從 GitHub 下載 <code>.gitignore</code> 到專案根目錄下</p>
<p><img src="/images/netcore/gitignore/ignore001.png" alt="ignore001"></p>
<ol>
<li>輸入 <code>wget install wget</code> 安裝 <code>wget</code></li>
</ol>
<h3 id="建立_gitignore-sh">建立 gitignore.sh</h3><p><strong>gitignore</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">wget https://github.com/dotnet/core/blob/master/.gitignore</span><br></pre></td></tr></table></figure>
<p>在 <code>/usr/local/bin</code> 下建立 <code>gitignore</code>，使用 <code>wget</code> 下載 <code>.gitignore</code>。</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="keyword">local</span>/bin $ <span class="keyword">chmod</span> +<span class="keyword">x</span> gitignore</span><br></pre></td></tr></table></figure>
<p>將 <code>gitignore</code> 建立可執行權限。</p>
<p><img src="/images/netcore/gitignore/ignore002.png" alt="ignore002"></p>
<h3 id="執行_gitignore-sh">執行 gitignore.sh</h3><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="class">MyProject</span> <span class="char">$ </span>gitignore</span><br></pre></td></tr></table></figure>
<p>在專案目錄下直接執行 <code>gitignore</code>，將自動從 GitHub 下載 <code>.gitignore</code>。</p>
<p><img src="/images/netcore/gitignore/ignore003.png" alt="ignore003"></p>
<ol>
<li>在 <code>MyWebAPI</code> 專案目錄下執行 <code>gitignore</code>，將自動從 GitHub 下載  <code>.gitignore</code></li>
<li>下載完畢後，會出現 <code>.gitignore</code> 檔案</li>
</ol>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/gitignore" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>雖然 .NET Core SDK 沒有提供 <code>.gitignore</code>，但只要自己寫一個 Bash 就可以解決</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[自己手動加入 .gitignore]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何將 .NET Core 打包成 Docker Image ?]]></title>
    <link href="http://oomusou.io/netcore/build-docker/"/>
    <id>http://oomusou.io/netcore/build-docker/</id>
    <published>2018-02-26T12:23:43.000Z</published>
    <updated>2018-02-26T03:10:22.056Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 除了可以在 Windows、macOS 與 Linux 執行外，更可以直接打包成 Docker image 發布。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>.NET Core 2.1.4</p>
<h2 id="建立_Console_App">建立 Console App</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 .NET Core SDK 建立 console app。</p>
<ul>
<li><strong>new</strong> : 建立 project</li>
<li><strong>console</strong> : 建立 console 類型 project</li>
<li><strong>-o</strong> : 以 <code>MyConsole</code> 為專案名稱並建立目錄</li>
</ul>
<p><img src="/images/netcore/build-docker/docker000.png" alt="docker000"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 建立 <code>MyConsole</code> 專案，其專案類型為 <code>console app</code></li>
</ol>
<h2 id="建立_Dockerfile">建立 Dockerfile</h2><hr>
<p>由於我們想要建立自己的 Docker image，因此要建立自己的 <code>Dockerfile</code>，Docker 才能依照此 <code>Dockerfile</code> 建立自己的 image。</p>
<p><strong>Dockerfile</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet</span><br><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># copy csproj and restore as distinct layers</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">*.csproj ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet restore</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># copy and build everything else</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">. ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet publish -c Release -o out</span><br><span class="line"></span><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"dotnet"</span>, <span class="string">"out/MyConsole.dll"</span>]</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet</span><br></pre></td></tr></table></figure>
<p><code>FROM</code> 為 Dockerfile 指令，表示以哪一個 image 為基礎建立自己的 image。</p>
<p>其中 <code>microsoft/dotnet</code> 是專為 console app 所設計的 image。</p>
<p>以上表示將以 <code>microsoft/dotnet</code> image 為基礎建立自己的 console app image。</p>
<p>第 2 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span></span><br></pre></td></tr></table></figure>
<p><code>WORKDIR</code> 為 Dockerfile 指令，表示其他 Dockerfile 指令 (如 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>COPY</code> 與 <code>ADD</code> …等) 的工作目錄。</p>
<p>以上表示 <code>WORKDIR</code> 為 <code>/app</code>，若 <code>/app</code>  目錄不存在會自動建立。</p>
<p>第 5 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COPY</span> <span class="bash">*.csproj ./</span></span><br></pre></td></tr></table></figure>
<p><code>COPY</code> 為 Dockerfile 指令，表示將 host 的檔案或目錄，複製到 container 的目錄。</p>
<p>第 1 個參數為 host 檔案或目錄，第 2 個參數為 container 目錄。</p>
<p>以上表示將目前目錄下的 project 檔複製到 container 目錄下。</p>
<p>第 6 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">dotnet restore</span></span><br></pre></td></tr></table></figure>
<p><code>RUN</code> 為 Dockerfile 指令，表示將在 container 內執行指令。</p>
<p>以上表示將根據 <code>*.csproj</code> 將所有 NuGet package 加以 restore，並寫入新的 image。</p>
<p>第 9 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COPY</span> <span class="bash">. ./</span></span><br></pre></td></tr></table></figure>
<p><code>COPY</code> 為 Dockerfile 指令，表示將 host 的檔案或目錄，複製到 container 的目錄。</p>
<p>以上表示將目前目錄下所有檔案複製到 container 目錄下。</p>
<p>第 10 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">dotnet publish -c Release -o out</span></span><br></pre></td></tr></table></figure>
<p><code>RUN</code> 為 Dockerfile 指令，表示將在 container 內執行指令。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，若省略將使用 <code>Debug</code> 模式編譯，若要在 production 使用，要使用 <code>Release</code> 模式編譯</li>
<li><strong>-o</strong> : 將 publish 結果寫在專案的 <code>out</code> 目錄</li>
</ul>
<p>以上表示將執行  <code>dotnet publish</code> 指令，使用 <code>Release</code> 模式編譯，並將 publish 結果寫在專案的 <code>out</code> 目錄下。</p>
<p>11 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"dotnet"</span>, <span class="string">"out/MyConsole.dll"</span>]</span></span><br></pre></td></tr></table></figure>
<p><code>ENTRYPOINT</code> 為 Dockerfile 指令，表示 container 一啟動時，該執行什麼指令。</p>
<p>以上表示當 container 一啟動時，將執行 <code>dotnet out/MyConsole.dll</code>。</p>
<p><img src="/images/netcore/build-docker/docker002.png" alt="docker002"></p>
<ol>
<li>在專案根目錄下建立 <code>Dockerfile</code></li>
</ol>
<h2 id="建立_Image">建立 Image</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ docker build -t <span class="keyword">my</span>/image .</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker build</code> 由 <code>Dockerfile</code> 建立 image。</p>
<ul>
<li><strong>-t</strong> : <code>t</code>ag，image 的名稱</li>
</ul>
<p>以上表示將目前目錄的 <code>Dockerfile</code> 建立成 image。</p>
<p><img src="/images/netcore/build-docker/docker001.png" alt="docker001"></p>
<ol>
<li>輸入 <code>docker build -t my/image .</code> 將整個專案建立成 <code>my-image</code>。</li>
</ol>
<h2 id="執行_Container">執行 Container</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ docker <span class="command">run</span> <span class="comment">--rm my/image</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 建立 container 並執行之。</p>
<ul>
<li><strong>–rm</strong> : 執行完後立即刪除 container</li>
</ul>
<p>以上表示將 <code>my/image</code> 建立成 container 後，立即執行，執行完立即刪除 container，但 image 仍然保留。</p>
<p><img src="/images/netcore/build-docker/docker003.png" alt="docker003"></p>
<ol>
<li>輸入 <code>docker run --rm my/image</code> 執行 container，將顯示 <code>Hello World</code></li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>將 .NET Core console app 打包成 Docker image 後，就可以跨平台執行此 image</li>
<li>此範例雖然是 console app，事實上將 ASP.NET Core 打包成 Docker image 也是類似以上流程</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/MyConsole" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/" target="_blank" rel="external">.NET Core</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core" target="_blank" rel="external">Learn Docker Basics with .NET Core</a></p>
]]></content>
    <summary type="html">
    <![CDATA[直接以指令將 .NET Core 打包成 Docker]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 .NET Core ?]]></title>
    <link href="http://oomusou.io/docker/netcore/"/>
    <id>http://oomusou.io/docker/netcore/</id>
    <published>2018-02-25T12:23:43.000Z</published>
    <updated>2018-02-25T13:15:01.497Z</updated>
    <content type="html"><![CDATA[<p>除了在 Windows、Mac、Linux 安裝原生的 .NET Core 外，也可以使用 Docker 的方式安裝 .NET Core。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>.NET Core 2.1.4</p>
<h2 id="下載_-NET_Core_Image">下載 .NET Core Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker pull microsoft/dotnet</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker pull</code> 下載最新版 .NET Core image 到本機。</p>
<p><img src="/images/docker/netcore101/netcore000.png" alt="netcore000"></p>
<ol>
<li>輸入 <code>docker pull microsoft/dotnet</code> 下載 .NET Core image，其中 <code>microsoft/dotnet</code> 是 Microsoft 所維護的 image，適合 console app 使用</li>
<li>下載最新版 image 成功</li>
</ol>
<h2 id="建立_Container">建立 Container</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="command">run</span> <span class="comment">--name MyNetCore -dt microsoft/dotnet</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 .NET Core image 建立 container 並執行之。</p>
<ul>
<li><strong>—name</strong> : 替 container 取一個人能夠識別的名字 <code>MyNetCore</code> (若省略，Docker 將隨機命名，將來不易維護)</li>
<li><strong>-d</strong> : <code>d</code> etach，建立 container 後，就脫離目前 process</li>
<li><strong>-t</strong> : <code>t</code> terminal，預設執行 <code>/bin/bash</code> process，為了讓 container 啟動後不會立即停止</li>
<li><strong>microsoft/dotnet</strong> : 為 .NET Core 官方 image</li>
</ul>
<p><img src="/images/docker/netcore101/netcore001.png" alt="netcore001"></p>
<ol>
<li>輸入 <code>docker run</code> 建立 container 外，還會順便直執行 container</li>
</ol>
<h2 id="啟動_Container">啟動 Container</h2><hr>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">start</span> MyNetCore</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker start</code> 啟動 .NET Core container</p>
<blockquote>
<p>既然 container 已經建立在硬碟，將來要在執行 container 就不必透過 <code>docker run</code>，直接執行 <code>docker start</code> 啟動 .NET Core container 即可</p>
</blockquote>
<p><img src="/images/docker/netcore101/netcore002.png" alt="netcore002"></p>
<ol>
<li>輸入 <code>docker stop MyNetCore</code> 啟動 <code>MyNetCore</code> container</li>
</ol>
<h2 id="進入_-NET_Core_的_Terminal">進入 .NET Core 的 Terminal</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyNetCore bash</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker exec -it</code> 對 .NET Core 下指令。</p>
<blockquote>
<p>要對 container 內部的 Linux 下指令，必須先將 Bash 包起來</p>
</blockquote>
<ul>
<li><strong>exec</strong> : 執行 Container 內的的 Linux 指令</li>
<li><strong>-i</strong> : <code>i</code> teractive，可對 terminal 輸入資料</li>
<li><strong>-t</strong> : <code>t</code> terminal，可對 terminal 顯示資料</li>
<li><strong>MyNetCore</strong> : container 名稱</li>
<li><code>bash</code> : 對 container 下的指令</li>
</ul>
<p><img src="/images/docker/netcore101/netcore003.png" alt="netcore003"></p>
<ol>
<li>輸入 <code>docker exec -it MyNetCore bash</code> 執行 <code>MyNetCore</code> container 的 Bash</li>
<li>輸入 <code>dotnet —version</code>，顯示 container 內已經安裝 .NET Core SDK </li>
<li>輸入 <code>exit</code> 離開 container 的 terminal</li>
</ol>
<h2 id="停止_Container">停止 Container</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker stop <span class="constant">MyNetCore</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker stop</code> 停止 .NET Core container。</p>
<p><img src="/images/docker/netcore101/netcore004.png" alt="netcore004"></p>
<ol>
<li>輸入 <code>docker stop MyNetCore</code> 停止 <code>MyNetCore</code> container</li>
</ol>
<h2 id="刪除_Container">刪除 Container</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker rm <span class="constant">MyNetCore</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker rm</code> 刪除未執行的 .NET Core container。</p>
<blockquote>
<p>Container 儘管不執行，但仍存在於硬碟中，若想徹底移除 .NET Core，必須先刪除 .NET Core container，然後再刪除 .NET Core image</p>
</blockquote>
<p><img src="/images/docker/netcore101/netcore005.png" alt="netcore005"></p>
<ol>
<li>輸入 <code>docker rm MyNetCore</code> 刪除 <code>MyNetCore</code> container</li>
</ol>
<h2 id="刪除_Image">刪除 Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker rmi microsoft/dotnet</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker rmi</code> 刪除 .NET Core image。</p>
<blockquote>
<p>只要刪除 container 與 image，就可以徹底移除 app，這也是 Docker 受歡迎的原因，不再因為安裝任何 app 而污染 host 環境</p>
</blockquote>
<p><img src="/images/docker/netcore101/netcore006.png" alt="netcore006"></p>
<ol>
<li>輸入 <code>docker rmi microsoft/dotnet</code> 刪除 .NET Core image</li>
</ol>
<h2 id="Summary">Summary</h2><hr>
<p><img src="/images/docker/netcore101/netcore007.svg" alt="netcore007"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文為 Docker 最基本操作，都是使用 Docker 一定要會的基本指令</li>
<li>若有 .NET Core app 包成 Docker image，也是使用類似的方式安裝執行之</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[不用污染 host 環境，直接使用 Docker]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何設定 F# 開發環境 ?]]></title>
    <link href="http://oomusou.io/fsharp/setup/"/>
    <id>http://oomusou.io/fsharp/setup/</id>
    <published>2018-02-24T12:23:43.000Z</published>
    <updated>2018-02-26T06:51:52.785Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 可以跑在 macOS，只要安裝 .NET Core SDK，搭配使用 VS Code 或 Rider，就可以練習 F# 了。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core 2.1.4<br>F# 4.1</p>
<h2 id="安裝_-NET_Core_SDK">安裝 .NET Core SDK</h2><hr>
<p>在 macOS 安裝 .NET Core SDK 很簡單，有幾種方式 :</p>
<ul>
<li>到 .NET Core 官網下載 pkg，請參考 <a href="http://oomusou.io/netcore/mac-install/">如何在 macOS 安裝 .NET Core ?</a></li>
<li>使用 Homebrew 安裝，請參考 <a href="http://oomusou.io/netcore/mac-homebrew/">如何使用 Homebrew 安裝 .NET Core ?</a></li>
</ul>
<h2 id="VS_Code">VS Code</h2><h3 id="安裝_Mono">安裝 Mono</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update</span><br><span class="line">$ <span class="keyword">brew </span>install mono</span><br></pre></td></tr></table></figure>
<p>因為在 VS Code 即將使用 <code>Ionide-fsharp</code> extension，而 <code>Ionide-fsharp</code> 使用 mono 開發，所以必須先安裝 <code>mono</code>。</p>
<p><img src="/images/fsharp/setup/setup000.png" alt="setup000"></p>
<ol>
<li>輸入 <code>brew update</code> 更新 formulae</li>
<li>輸入 <code>brew install mono</code> 安裝 <code>mono</code></li>
</ol>
<p><strong>設定 Mono Path</strong></p>
<p><img src="/images/fsharp/setup/setup011.png" alt="setup011"></p>
<p>由於 Homebrew 是將 <code>mono</code> 安裝在 <code>/usr/local/opt/mono</code> 下，為了要讓 VS Code 與 <code>Ionide-fsharp</code> 找得到 <code>mono</code>，必須在 <code>PATH</code> 設定好。</p>
<h3 id="安裝_Ionide-fsharp">安裝 Ionide-fsharp</h3><p><img src="/images/fsharp/setup/setup001.png" alt="setup001"></p>
<ol>
<li>輸入 <code>ionide</code></li>
<li>選擇 <code>Ionide-fsharp</code> extension</li>
</ol>
<h3 id="建立_FSharp_專案">建立 FSharp 專案</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole -lang F<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>使用 .NET Core SDK 的 <code>dotnet new</code> 建立專案</p>
<ul>
<li><strong>console</strong> :  建立 Console app</li>
<li><strong>-o</strong> : 將專案建立在 <code>MyConsole</code> 目錄</li>
<li><strong>-lang</strong> : 使用 F#，若省略將使用 C#</li>
</ul>
<p><img src="/images/fsharp/setup/setup002.png" alt="setup002"></p>
<p>.NET Core SDK 將為我們建立 console 類型的專案，並自動 restore NuGet package。</p>
<h3 id="使用_VS_Code_開啟專案">使用 VS Code 開啟專案</h3><p><img src="/images/fsharp/setup/setup003.png" alt="setup003"></p>
<p>使用 VS Code 開啟 <code>Program.fs</code>，我們已經看到經典的 <code>Hello World</code> F# 版了。</p>
<h3 id="編譯_FSharp">編譯 FSharp</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>dotnet build</span><br></pre></td></tr></table></figure>
<p>使用 .NET Core SDK 的 <code>dotnet build</code> 編譯專案</p>
<p><img src="/images/fsharp/setup/setup004.png" alt="setup004"></p>
<ol>
<li>輸入 <code>dotnet build</code> 編譯</li>
<li>編譯結果的 <code>Console.dll</code> 將放在 <code>/bin/Debug/netcoreapp2.0</code> 目錄下</li>
</ol>
<h3 id="執行_FSharp">執行 FSharp</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>dotnet <span class="constant">MyConsole.</span>dll</span><br></pre></td></tr></table></figure>
<p>使用 .NET Core SDK 的 <code>dotne</code> 執行 dll。</p>
<p><img src="/images/fsharp/setup/setup005.png" alt="setup005"></p>
<ol>
<li>輸入 <code>dotnet</code>，並將 <code>MyConsole.dll</code> 的完整路徑複製貼上</li>
</ol>
<h2 id="Rider">Rider</h2><hr>
<p>使用 Rider 開發 F# 更簡單，只要安裝好 .NET Core SDK 與 Rider 後就沒事了。</p>
<h3 id="建立_FSharp_專案-1">建立 FSharp 專案</h3><p><img src="/images/fsharp/setup/setup006.png" alt="setup006"></p>
<ol>
<li>選擇 <code>Console Application</code></li>
<li><strong>Language</strong> : 選擇 F#</li>
<li>按 <code>Create</code> 建立 F# 專案</li>
</ol>
<h3 id="使用_Rider_開啟專案">使用 Rider 開啟專案</h3><p><img src="/images/fsharp/setup/setup007.png" alt="setup007"></p>
<p>使用 Rider 開啟 <code>Program.fs</code>，我們已經看到經典的 <code>Hello World</code> F# 版了。</p>
<h3 id="編譯執行_FSharp">編譯執行 FSharp</h3><p><img src="/images/fsharp/setup/setup008.png" alt="setup008"></p>
<p>按 toolbar 的 <code>綠色三角形</code>，或者熱鍵 <code>Ctrl + R</code> 編譯專案。</p>
<p><img src="/images/fsharp/setup/setup009.png" alt="setup009"></p>
<p>第一次會顯示設定視窗，接受預設值即可，按 <code>Run</code> 開始編譯執行。</p>
<p><img src="/images/fsharp/setup/setup010.png" alt="setup010"></p>
<p>執行結果顯示在下方視窗。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>無論是 VS Code 或 Rider，都可以很簡單地在 macOS 設定 F# 開發環境</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 macOS 也能輕易的開發 F#]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
      <category term="Rider" scheme="http://oomusou.io/tags/Rider/"/>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Angular 實現 Chain Of Responsibility Pattern ?]]></title>
    <link href="http://oomusou.io/design-pattern/cor/"/>
    <id>http://oomusou.io/design-pattern/cor/</id>
    <published>2018-02-21T12:23:43.000Z</published>
    <updated>2018-03-07T14:31:09.036Z</updated>
    <content type="html"><![CDATA[<p>Chain of Responsibility 是 OOP 中著名的 Design Pattern，在特殊場合使用特別有效。在本文中，我們將以 Angular 與 TypeScript 實現。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Node.js 8.9.4<br>Angular CLI 1.7.0<br>Angular 5.2.5<br>Wallaby.js 3.9.4</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/design-pattern/cor/cor000.png" alt="cor000"></p>
<ul>
<li>檢查 <code>產品編號</code></li>
<li>必須為 <code>整數</code>，<code>2</code> 的倍數與 <code>3</code> 的倍數才能傳回 <code>true</code>，否則均傳回 <code>false</code></li>
</ul>
<h2 id="Task">Task</h2><hr>
<p>先使用一般的寫法完成，最後再重構成 Chain of Responsbility。</p>
<h2 id="Definition">Definition</h2><blockquote>
<p>Chain of Responsibility Pattern</p>
<p>當多個物件都必須依序處理訊息，訂定統一個 interface，避免 client 與物件直接耦合<br>將 <code>外部 nested if</code> 改由 <code>外部決定</code> 的 <code>物件串列</code> 表示</p>
</blockquote>
<p><img src="/images/design-pattern/cor/cor007.svg" alt="cor007"></p>
<p><img src="/images/design-pattern/cor/cor006.svg" alt="cor006"></p>
<ul>
<li><strong>Client</strong> : <code>ConcreteHandler</code> 的 user，實務上可能是 component 或 service</li>
<li><strong>HandlerInterface</strong> : 定義 <code>ConcreteHandler</code> 的 interface</li>
<li><strong>AbstractHandler</strong> : 實作各 <code>ConcreteHandler</code> 共用的部分</li>
<li><strong>ConcreteHandler</strong> : 將 <code>if</code> 封裝成物件</li>
</ul>
<p>一個 <code>if</code> 放在一個 <code>ConcreteHandler</code> 物件內，當一個 <code>if</code> 判斷完後，就換下一個 <code>ConcreteHandler</code> 物件。</p>
<p>由於物件是串起來的，因此稱為 <code>Chain</code> of Responsibility。</p>
<p><strong>適用時機</strong></p>
<ul>
<li>深層 <code>nested if</code></li>
<li>須在 run-time 決定 <code>if</code> 組合</li>
<li><code>if</code> 層數不確定，由 run-time 決定</li>
</ul>
<p><strong>優點</strong></p>
<ul>
<li>每個 <code>if 判斷</code> 使用一個 class，符合 <code>單一職責原則</code></li>
<li>將來若有新的 <code>if 判斷</code>，不用修改 service，而是新增 <code>ConcreteHandler</code>，符合 <code>開放封閉原則</code></li>
<li>Client 與 <code>if 判斷</code> 解耦合，兩者都僅相依於 interface，符合 <code>依賴反轉原則</code></li>
<li><code>if</code> 邏輯物件化後，可在 run-time 自由組合與加入 <code>if</code> 物件 (組合 <code>ConcreteHandler</code>)</li>
</ul>
<p><strong>缺點</strong></p>
<ul>
<li>Chain 太長時會有效能問題</li>
</ul>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/design-pattern/cor/cor001.svg" alt="cor001"></p>
<ul>
<li><code>AppComponent</code> 相當於 <code>Client</code></li>
<li><code>ProductNoChecker</code> 相當於 service，<code>AppComponent</code> 負責注入 <code>ProductNoChecker</code>，無論怎麼重構，<code>ProductNoChecker</code> 都是穩定的，不會導致 <code>AppComponent</code> 修改</li>
<li><code>CheckerInterface</code> 相當於 <code>HandlerInterface</code>，訂出所有 checker 的標準</li>
<li><code>AbstractChecker</code> 相當於 <code>AbstractHandler</code>，<code>nextChecker()</code> 相當於 <code>next()</code>，負責處理下一個 checker 部分</li>
<li><code>IntegerChecker</code> 相當於 <code>ConcreteHandler</code>，為實際 <code>if 判斷</code> 邏輯。</li>
</ul>
<h2 id="Implemetation">Implemetation</h2><hr>
<p><strong>app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> #<span class="attribute">productNo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onCheckProductNoClick()"</span>&gt;</span>Check ProductNo<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; result &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>若要在 JavaScript 存取 HTML，傳統會使用 <code>id</code> 或 CSS selector，在 Angular 提出新的方法，我們可以為 HTML 加上 <code>#</code> 開頭的 Template Reference Variable。</p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ElementRef, ViewChild &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ProductNoChecker &#125; from <span class="string">'./checkers/product-no.checker'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  result: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  @ViewChild(<span class="string">'productNo'</span>)</span><br><span class="line">  <span class="keyword">private</span> productNoElement: ElementRef;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private productNoChecker: ProductNoChecker) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onCheckProductNoClick() &#123;</span><br><span class="line">    <span class="keyword">const</span> productNo = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.productNoElement.nativeElement.value, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">this</span>.result = <span class="keyword">this</span>.productNoChecker.check(productNo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ViewChild(<span class="string">'productNo'</span>)</span><br><span class="line"><span class="keyword">private</span> productNoElement: ElementRef;</span><br></pre></td></tr></table></figure>
<p>使用 <code>@ViewChild()</code> 取得 DOM element 的物件實體，參數以字串傳入 Template Reference Variable 的字串名稱。</p>
<p>注意其型別為 <code>ElementRef</code>。</p>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private productNoChecker: ProductNoChecker) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>ProductNoChecker</code> 透過 DI 注入進 <code>AppComponent</code>。</p>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onCheckProductNoClick() &#123;</span><br><span class="line">    <span class="keyword">const</span> productNo = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.productNoElement.nativeElement.value, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">this</span>.result = <span class="keyword">this</span>.productNoChecker.check(productNo);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>當按下 <code>&lt;button&gt;</code> 時，執行 <code>onCheckProductNoClick()</code>。</p>
<p>藉由 <code>@ViewChild()</code> 所宣告的變數，取得 DOM element 的值，因為為 string，再由 <code>parseInt()</code> 轉成 <code>integer</code>。</p>
<p>最後呼叫 <code>ProductNoChecker.check()</code>，判斷所輸入的 <code>ProductNo</code> 是否符合商業邏輯。</p>
<p><strong>app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ProductNoChecker&#125; from <span class="string">'./checkers/product-no.checker'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    ProductNoChecker</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  ProductNoChecker</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>在 <code>providers</code> 設定 <code>ProductNoChecker</code>，讓 DI 得以注入。</p>
<h3 id="If_Else">If Else</h3><p><strong>product-no.checker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductNoChecker &#123;</span><br><span class="line">  check(productNo: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>.isInteger(productNo)) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((productNo % <span class="number">2</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((productNo % <span class="number">3</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">          result = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於必須通過三層檢查，初學者很容易寫出三層的 <code>nested if</code>，這種寫法可讀性差也不好維護。</p>
<p>我們將繼續重構。</p>
<h3 id="Unit_Test">Unit Test</h3><p>在重構之前，必須要有測試保護，才能確保沒把原本的商業邏輯重構壞，因此我們先準備好 <code>ProductNoChecker</code> 的 Unit Test，確保每個 <code>if else</code> 的 path 都有測到。</p>
<p><strong>product-no.checker.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ProductNoChecker &#125; from <span class="string">'./product-no.checker'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'ProductNoService'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> productNoChecker: ProductNoChecker;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      providers: [ProductNoChecker]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    productNoChecker = TestBed.get(ProductNoChecker);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should be created'</span>, () =&gt; &#123;</span><br><span class="line">    expect(productNoChecker).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'當ProductNo為整數，且為2與3的倍數，應回傳 true'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> productNo = <span class="number">6</span>;</span><br><span class="line">    expect(productNoChecker.check(productNo)).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'當ProductNo為整數，為2的倍數但不是3的倍數，應回傳 false'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> productNo = <span class="number">2</span>;</span><br><span class="line">    expect(productNoChecker.check(productNo)).toBeFalsy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'當ProductNo為整數，但不是2的倍數，應回傳 false'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> productNo = <span class="number">1</span>;</span><br><span class="line">    expect(productNoChecker.check(productNo)).toBeFalsy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'當ProductNo不是整數，應回傳 false'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> productNo = <span class="built_in">parseInt</span>(<span class="string">'t1'</span>, <span class="number">10</span>);</span><br><span class="line">    expect(productNoChecker.check(productNo)).toBeFalsy();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由於本文重點不是在講 Unit Test，因此就不浪費篇幅解釋以上程式碼。</p>
<h3 id="Default_Value">Default Value</h3><p><strong>product-no.checker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductNoChecker &#123;</span><br><span class="line">  check(productNo: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>.isInteger(productNo)) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((productNo % <span class="number">2</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((productNo % <span class="number">3</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">          result = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於整個 <code>nested if</code> 只有 三個 <code>if</code> 都成立時才是 <code>true</code>，其他都是 <code>false</code>，因此可以將 <code>result</code> 的預設值設定為 <code>false</code>，則所有的 else 都可拿掉。</p>
<p>但仍有三層 <code>nested if</code>，還是不夠好，我們將繼續重構。</p>
<h3 id="Guard_Clause">Guard Clause</h3><p><strong>product-no.checker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductNoChecker &#123;</span><br><span class="line">  check(productNo: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(productNo)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (productNo % <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (productNo % <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Guard Clause</p>
<p>將 return false 的邏輯先處理，最後再來處理 return true，所有的 nested if 將攤平成只有一層</p>
</blockquote>
<p>先處理掉 <code>return false</code> 之後，剩下的事實上就是 <code>else</code>，因此就不需要 nested if 了。</p>
<blockquote>
<p>實務上推薦使用 Guard Clause，變免使用 nested if 與 else</p>
</blockquote>
<p><code>Nested if</code> 經過 Guard Clause 重構後，已經相當清爽了，但仍然還沒進入 OOP 層次，我們將繼續重構。</p>
<h3 id="Chain_of_Responsibility">Chain of Responsibility</h3><p><strong>CheckerInterface</strong></p>
<p><img src="/images/design-pattern/cor/cor002.svg" alt="cor002"></p>
<p><strong>checker.interface.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> CheckerInterface </span>&#123;</span><br><span class="line">  setNextChecker(checker: CheckerInterface): CheckerInterface;</span><br><span class="line">  check(source: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們即將為每個 <code>if</code> 建立一個 class，先定義其 interface。</p>
<ul>
<li><code>setNextChecker()</code> : 由於每個 class 都是一個 <code>if</code> ，因此我們必須設定下一個 <code>if</code> 是哪一個 class 該檢查</li>
<li><code>check()</code> : 每個 class 寫 <code>if</code> 的地方</li>
</ul>
<p><strong>ProductNoChecker</strong></p>
<p><strong><img src="/images/design-pattern/cor/cor003.svg" alt="cor003">product-no.checker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IntegerChecker &#125; from <span class="string">'./integer.checker'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CheckerInterface &#125; from <span class="string">'./checker.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DoubleChecker &#125; from <span class="string">'./double.checker'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TripleChecker &#125; from <span class="string">'./triple.checker'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductNoChecker &#123;</span><br><span class="line">  check(productNo: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> checker: CheckerInterface = <span class="keyword">new</span> IntegerChecker();</span><br><span class="line"></span><br><span class="line">    checker</span><br><span class="line">      .setNextChecker(<span class="keyword">new</span> DoubleChecker())</span><br><span class="line">      .setNextChecker(<span class="keyword">new</span> TripleChecker());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> checker.check(productNo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於我們是重構，且 <code>AppComponent</code> 所相依的是 <code>ProductNoChecker.check()</code>，因此 <code>check()</code> 的 signature 不應該修改。</p>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">check(productNo: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> checker: CheckerInterface = <span class="keyword">new</span> IntegerChecker();</span><br><span class="line"></span><br><span class="line">  checker</span><br><span class="line">    .setNextChecker(<span class="keyword">new</span> DoubleChecker())</span><br><span class="line">    .setNextChecker(<span class="keyword">new</span> TripleChecker());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> checker.check(productNo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於 Chain of Responsibility 是一個 object 一個 object 依序檢查，因此只要先 new 第一個 <code>IntegerChecker</code> 即可，注意其型別為 <code>CheckerInterface</code>，這才符合 <code>依賴反轉原則</code>。</p>
<p>接下來必須使用 <code>setNextChecker()</code> 依序設定下一個 checker，這也是我們可以在 runtime 自由組合 <code>if 判斷</code> 的地方。</p>
<p>最後執行 <code>IntegerChecker.check()</code> 開始檢查 <code>ProductNo</code>。</p>
<blockquote>
<p>若是直接使用 <code>if</code>，則 <code>if</code> 將在 compile-time 就被決定無法更改，但使用 Chain of Responsibility 可以讓我們在 run-time 自行 <code>new</code> 決定是否使用這個 <code>if</code></p>
</blockquote>
<p><strong>AbstractChecker</strong></p>
<p><img src="/images/design-pattern/cor/cor004.svg" alt="cor004"></p>
<p><strong>abstract.checker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CheckerInterface &#125; from <span class="string">'./checker.interface'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> abstract <span class="keyword">class</span> AbstractChecker <span class="keyword">implements</span> CheckerInterface &#123;</span><br><span class="line">  <span class="keyword">protected</span> nextChecker: CheckerInterface;</span><br><span class="line"></span><br><span class="line">  setNextChecker(checker: CheckerInterface): CheckerInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.nextChecker = checker;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  abstract check(source: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>雖然 <code>CheckerInterface</code> 為每個 checker 都須具備的 interface，但其中的 <code>setNextChecker()</code> 顯然並不需要每個 checker 自己實踐，可將共用的部分交由 <code>AbstractChecker</code> 處理。</p>
<p>第 4 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> nextChecker: CheckerInterface;</span><br></pre></td></tr></table></figure>
<p>每個 checker 都必須紀錄下一個 checker 為何，因此特別宣告 <code>nextChecker</code> field。</p>
<p>由於將來繼承 <code>AbstractChecker</code> 的 class 都要使用，因此為 <code>protected</code> 。</p>
<p>注意其型別為 <code>CheckerInterface</code>。</p>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setNextChecker(checker: CheckerInterface): CheckerInterface &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.nextChecker = checker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本寫法為</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setNextChecker(checker: CheckerInterface): CheckerInterface &#123;</span><br><span class="line">  <span class="keyword">this</span>.nextChecker = checker;</span><br><span class="line">  <span class="keyword">return</span> checker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但可以將兩行併成一行完成。</p>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abstract check(source: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br></pre></td></tr></table></figure>
<p><code>check()</code> 需要由各 class 的自行完成，因此 <code>AbstractChecker</code> 不實作，只設定成 <code>abstract</code> 交由所繼承的 class 完成。</p>
<p><strong>IntegerChecker</strong></p>
<p><img src="/images/design-pattern/cor/cor005.svg" alt="cor005"></p>
<p><strong>integer.checker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AbstractChecker &#125; from <span class="string">'./abstract.checker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IntegerChecker extends AbstractChecker &#123;</span><br><span class="line">  check(source: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(source)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.nextChecker) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.nextChecker.check(source);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一樣使用 Guard Clause 的方式做判斷。</p>
<p>第 3 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IntegerChecker extends AbstractChecker</span><br></pre></td></tr></table></figure>
<p><code>IntegerChecker</code> 也必須遵守 <code>CheckInterface</code>，因為 <code>AbstractChecker</code> 已經實現 <code>CheckerInterface</code>，所以 <code>IntegerChecker</code> 只要繼承 <code>AbstractChecker</code> 即可。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(source)) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若不是 <code>integer</code>，則 return <code>false</code>。</p>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.nextChecker) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若沒有 <code>nextChecker</code> ，則表示為最後一個 checker，return <code>true</code>。</p>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.nextChecker.check(source);</span><br></pre></td></tr></table></figure>
<p>若有 <code>nextChecker</code>，則執行下一個 cheker 繼續檢查。</p>
<p><code>DoubleChecker</code> 與 <code>TripleChecker</code> 的寫法類似，就不再贅述。</p>
<blockquote>
<p>目前為止，我們已經在 Angular 實現了經典的 Chain of Resposibility Pattern，但還可以對此 pattern 做小幅重構。</p>
</blockquote>
<h3 id="Refactoring">Refactoring</h3><p><strong>IntegerChecker</strong></p>
<p><img src="/images/design-pattern/cor/cor005.svg" alt="cor005"></p>
<p><strong>integer.checker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AbstractChecker &#125; from <span class="string">'./abstract.checker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IntegerChecker extends AbstractChecker &#123;</span><br><span class="line">  check(source: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">Number</span>.isInteger(source) ? <span class="literal">false</span> :</span><br><span class="line">           !<span class="keyword">this</span>.nextChecker ? <span class="literal">true</span> :</span><br><span class="line">           <span class="keyword">this</span>.nextChecker.check(source);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 Guard Clause 寫法雖然已經非常精簡，但若使用 <code>?:</code>，則可寫出更精簡，且可讀性更高的寫法。</p>
<p><code>DoubleChecker</code> 與 <code>TripleChecker</code> 的寫法類似，就不再贅述。</p>
<h3 id="Functional_Way">Functional Way</h3><p>Chain of Responsibility 雖然是 OOP 的 Design Pattern，但亦可使用 FP 實踐。</p>
<p><strong>checker.interface.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> CheckerInterface </span>&#123;</span><br><span class="line">  (source: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前 <code>CheckerInterface</code> 雖然定義了 <code>setNextChecker()</code> 與 <code>check()</code> 兩個 method，但平心而論，只有 <code>check()</code> 才是真的 <code>if</code> 所要用的 method，<code>setNextChecker()</code> 算是 pattern 本身所使用的 method。</p>
<p>也就是說若我們能將 class interface 退化成 function interface，只描述 <code>check()</code> 的 signature，則 Chain of Responsibility 不一定得用 class 才能實踐，只要 function 即可。</p>
<p> TypeScript 的 interface 可以只描述 function 規格 :</p>
<ul>
<li>Input 以 <code>()</code> 表示</li>
<li>沒有 function name</li>
<li>Return 寫在 <code>:</code> 之後</li>
</ul>
<blockquote>
<p>TypeScript 的 interface 不再只是描述 class 的規格，也可以描述 function 的規格</p>
</blockquote>
<p><strong>integer.checker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">checkInteger</span>(<span class="params">source: <span class="built_in">number</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>.isInteger(source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>integer.checker.ts</code> 不用再使用 class，使用 function 即可，當然要符合 <code>checker.interface.ts</code> 的規格。</p>
<blockquote>
<p>我們可發現 FP 版本的 <code>checkInteger()</code> 甚至不用判斷 <code>nextChecker()</code>，專心的判斷 <code>isInteger()</code> 即可，比 OOP 版更加符合 <code>單一職責原則</code></p>
</blockquote>
<p><strong>product-no.checker.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CheckerInterface &#125; from <span class="string">'./checker.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; integerCheck &#125; from <span class="string">'./integer.checker'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; doubleCheck &#125; from <span class="string">'./double.checker'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tripleCheck &#125; from <span class="string">'./triple.checker'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductNoChecker &#123;</span><br><span class="line">  <span class="keyword">private</span> checkers: CheckerInterface[];</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.checkers = [</span><br><span class="line">      checkInteger,</span><br><span class="line">      checkDouble,</span><br><span class="line">      checkTriple</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  check(productNo: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.checkers.every(checker =&gt; checker(productNo));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkers: CheckerInterface[];</span><br></pre></td></tr></table></figure>
<p>存放所有 checker function 的陣列，別忘了之前已經定義了 <code>CheckerInterface</code> 的 function interface，在此更可描述 <code>checkers</code> 陣列所放的全部都是 <code>CheckerInterface</code> 的 function，除此之外，TypeScript 編譯器也會加以檢查，若function 不符合 <code>CheckerInterface</code> 規格，將編譯錯誤。</p>
<blockquote>
<p>儘管使用了 FP，一樣要使用 interface，才能受到編譯器的保護</p>
</blockquote>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.checkers = [</span><br><span class="line">    checkInteger,</span><br><span class="line">    checkDouble,</span><br><span class="line">    checkTriple</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>checkers</code> 陣列該含有哪些 checker function，類似 OOP 版的 <code>setNextChecker()</code>。</p>
<blockquote>
<p>若這些 checker function 需經常變動，還可以將 <code>checkers</code> 放在 config 檔，且 checker function 還受到 TypeScript 編譯器保護，符合 <code>開放封閉原則</code></p>
</blockquote>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">check(productNo: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.checkers.every(checker =&gt; checker(productNo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>every()</code> 為 JavaScript 提供的 array method，將會執行 array 內所有的 function，若其中任何一個 function 回傳 <code>false</code>，則回傳 <code>false</code>，必須全部 function 回傳 <code>true</code> 時，才會回傳 <code>true</code>，與 OOP 版的 Chain of Responsibility 有異曲同工之妙。</p>
<blockquote>
<p>OOP  版當然也可以使用陣列內放 <code>ConcreteHandler</code> 方式，不過由於沒有 FP 版精妙，因此不特別說明</p>
</blockquote>
<h3 id="Refactoring-1">Refactoring</h3><p>原本 OOP 版是只要回傳 <code>false</code>，就不會執行下一個 object；但 <code>Array.every()</code> 卻要求我們執行所有的 function，所以效能較差。</p>
<p>JavaScript 原生提供了 <code>Array.some()</code>，只要回傳 <code>true</code>，就不會執行下一個 function，跟我們的需求很類似，但又不完全一樣，因此只好自己打造 <code>Array.any()</code>。</p>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">check(productNo: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.any = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="keyword">this</span>.some(item =&gt; !fn(item));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.checkers.any(checker =&gt; checker(productNo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於 <code>Array.some()</code> 是判斷 <code>true</code>，所以須將 <code>fn(item)</code> 加上 <code>!</code> 反向迎合 <code>some()</code>，但最後 <code>this.som()</code> 還必須再加上 <code>!</code> 還原真實狀況。</p>
<p>使用 prototype 打造了自己的 <code>any()</code> 之後，就不用擔心 <code>every()</code> 影響效能了。</p>
<h2 id="Summary">Summary</h2><hr>
<ul>
<li>FP 版的 <code>checkers</code> 陣列甚至可以改寫在 config 檔案，彈性比 OOP 更大</li>
<li>FP 也要使用 interface，這樣編譯器才能幫你做檢查</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>並不是所有的 <code>if</code> 判斷都該使用 Chain of Responsibility，當特別深層的 <code>nested if</code>，或需要 runtime 自由組合 <code>if 判斷</code> ，或 <code>if</code> 層數不確定時，就適合使用</li>
<li>FP 的出現，讓 Design Pattern 的實踐方式，不再只有 OOP 一途，可視實際需求決定該使用 OOP 或 FP</li>
<li>無論是 OOP 或 FP，最終都是符合 SOLID 的 <code>開放封閉原則</code> 與 <code>依賴反轉原則</code>，通常 FP 的實踐都會比 OOP 更精簡</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52CoR" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[專門應付特殊場的 if else]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 TypeScript 之 Interface]]></title>
    <link href="http://oomusou.io/typescript/interface/"/>
    <id>http://oomusou.io/typescript/interface/</id>
    <published>2018-02-19T12:23:43.000Z</published>
    <updated>2018-02-20T01:33:57.856Z</updated>
    <content type="html"><![CDATA[<p>TypeScript 與 ECMAScript 最大的差別就是 interface，一些 TypeScript 先進的功能，陸續被 ECMAScript 所接受，但由於 ECMAScript 偏向動態弱型別觀念，將來採用 interface 的機會渺茫，interface 也成為 TypeScript 與 ECMAScript 最大的分水嶺。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.5</p>
<h2 id="TypeScript_Interface">TypeScript Interface</h2><hr>
<p>有別於一般強型別語言的 interface，TypeScript 一共提供 6 種 interface</p>
<ul>
<li>Object interface</li>
<li>Index interface</li>
<li>Class interface</li>
<li>Constructor interface</li>
<li>Function interface</li>
<li>Hybrid interface</li>
</ul>
<h2 id="Object_Interface">Object Interface</h2><hr>
<blockquote>
<p>定義 object 的 public property</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure>
<p><code>printLabel()</code> 期望傳入的 paremeter 為 <code>{ label: string }</code> 型別的 object，只有一個 <code>label</code> property。</p>
<p>但實際上傳入的 <code>myObj</code>，除了有 <code>label</code> property 外，還多了 <code>size</code> property，但也通過了 TypeScript 的編譯檢查。</p>
<p>也就是說，TypeScript 採用的是 duck typing 策略 :</p>
<blockquote>
<p>只要傳入的 argument 有 parameter 要求的 property 即可，因此 argument 可以傳入比 parameter 要求更多的 property 的物件。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> LabelledValue </span>&#123;</span><br><span class="line">    label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure>
<p><code>printLabel()</code> 的 parameter 型別，除了直接寫在 function 的參數列外，若這個型別檢查會被重複使用，則建議抽成 <code>LabelledValue</code> interface。</p>
<p>目前還沒看到有任何重構工具可以將 parameter 的型別抽成 interface，只能手動作。</p>
<blockquote>
<p>Q : 什麼是 Duck Typing 與 Strong Typing ?</p>
</blockquote>
<p><strong>Duck Typing</strong></p>
<blockquote>
<p>當看到一隻鳥走起來像鴨子、游泳起來像鴨子、叫起來也像鴨子，那麼這隻鳥就可以被稱為鴨子。 </p>
</blockquote>
<p>白話 : 物件只要有該型別相同的 property 與 method，就算是該 class 型別。</p>
<p>用於動態弱型別 script。</p>
<p>執行階段檢查型別是否正確。</p>
<p>JavaScript 、Ruby 屬於 Duck Typing。</p>
<p><strong>Strong Typing</strong></p>
<blockquote>
<p>由母鴨生產的鴨子，才算是鴨子。</p>
</blockquote>
<p>白話 : 物件必須透過 class 的 <code>new</code> 建立，物件才算是該 class 型別。</p>
<p>用於強型別編譯語言。</p>
<p>編譯階段檢查型別是否正確。</p>
<p>C++、Java、C# 屬於 Strong Typing。</p>
<blockquote>
<p>Q : TypeScript 算 strong typing 還是 duck typing ?</p>
</blockquote>
<p>TypeScript 因為要相容 JavaScript，且最後也是編譯成 JavaScript，所以 TypeScript 本質是 duck typing，卻在編譯階段檢查型別是否正確，算是融合 strong typing 與 duck typing。</p>
<p>Duck typing 的靈活 </p>
<ul>
<li>不須 <code>new</code> 則可使用</li>
</ul>
<p>Strong typing 的嚴謹 </p>
<ul>
<li>interface 描述規格比較好維護</li>
<li>IDE 的 intellisense</li>
<li>編譯階段檢查</li>
</ul>
<blockquote>
<p>目前程式語言的強型別與弱型別已經漸漸模糊，如 C# 也開始吸取弱型別語言的優點 : <code>var</code>、<code>dynamic</code>，PHP 也開始學習強型別語言的精華 : type hint 與 interface。</p>
</blockquote>
<p><strong>Optional Property</strong></p>
<p>實務上有些 property 有預設值，因此在傳入 function 時可以不用提供。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> SquareConfig </span>&#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123;color: <span class="built_in">string</span>; area: <span class="built_in">number</span>&#125; &#123;</span><br><span class="line">    <span class="keyword">let</span> newSquare = &#123;color: <span class="string">"white"</span>, area: <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">        newSquare.color = config.color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">        newSquare.area = config.width * config.width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mySquare1 = createSquare(&#123;color:<span class="string">'black'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(mySquare1.area); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mySquare2 = createSquare(&#123;color:<span class="string">'black'</span>, width:<span class="number">20</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(mySquare2.area); <span class="comment">// 400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mySquare3 = createSquare(&#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(mySquare3.area); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> SquareConfig </span>&#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>color</code> 與 <code>width</code> 為 <code>SquareConfig</code> 的 property，但因為加上 <code>?</code>，因此也可省略。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySquare1 = createSquare(&#123;color:<span class="string">'black'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(mySquare1.area); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>
<p>因此可以直提供一個 <code>color</code>  property 即可。</p>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySquare2 = createSquare(&#123;color:<span class="string">'black'</span>, width:<span class="number">20</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(mySquare2.area); <span class="comment">// 400</span></span><br></pre></td></tr></table></figure>
<p>提供完整的兩個 <code>color</code> 與 <code>width</code> property 的 object 當然沒問題。</p>
<p>23 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySquare3 = createSquare(&#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(mySquare3.area); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>
<p>提供一個 empty object，完全沒有 property 亦可。</p>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123;color: <span class="built_in">string</span>; area: <span class="built_in">number</span>&#125; &#123;</span><br><span class="line">    <span class="keyword">let</span> newSquare = &#123;color: <span class="string">"white"</span>, area: <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">        newSquare.color = config.color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">        newSquare.area = config.width * config.width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也因為 property 為 optional，所以必須檢查是否有 property，並提供預設值。</p>
<p><strong>Excess Property Checkes</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> LabelledValue </span>&#123;</span><br><span class="line">    label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLabel(&#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>在之前我們知道 TypeScript 對於 object 使用 duck typing 檢查型別，但對於 object literal，TypeScript 則採用 strong typing 方式。</p>
<blockquote>
<p>Object Literal</p>
<p>直接使用 <code>{}</code> 方式建立物件</p>
</blockquote>
<p><code>labelledObj</code> 型別只有 <code>label</code> property，傳入 <code>{size: 10, label: &quot;Size 10 Object&quot;}</code> 多了 <code>size</code> property，TypeScript 編譯時將產生以下錯誤 :</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error TS23</span><br><span class="line"><span class="number">45</span>: Argument <span class="keyword">of</span> <span class="keyword">type</span> <span class="string">'&#123;size: number; label: string; &#125;'</span> is <span class="keyword">not</span> assign</span><br><span class="line">able <span class="keyword">to</span> parameter <span class="keyword">of</span> <span class="keyword">type</span> <span class="string">'LabelledValue'</span>.</span><br><span class="line"><span class="keyword">Object</span> literal may only specify known properties, <span class="keyword">and</span> <span class="string">'size'</span> does <span class="keyword">not</span> exist <span class="keyword">in</span> <span class="keyword">type</span> <span class="string">'LabelledValue'</span></span><br></pre></td></tr></table></figure>
<p>若以 duck typing 角度而言，<code>label</code> property  可視為多餘的 property，無傷大雅，但實務上，多出來的 property 很可能是 typo，如 API 已經規定了 JSON 物件 spec，你只會傳遞 spec 定好 property 的 JSON 物件，而不會多傳其他 property，多出來的 property 大概都是 typo。</p>
<blockquote>
<p>TypeScript takes the stance that there’s probably a bug in this code. Object literals get special treatment and undergo <em>excess property checking</em> when assigning them to other variables, or passing them as arguments. If an object literal has any properties that the “target type” doesn’t have, you’ll get an error.</p>
</blockquote>
<p>根據 TypeScript 官網文件，對於 Excess Property Checkes 做了以下的解釋 : </p>
<p>TypeScript 對於這類程式碼，採取可能有 bug 的態度。當 object literal 指定給其他變數，或者以 argument 方式傳入 function，將採取 excess property check 方式檢查型別，如果 object literal 有 target type 所沒有的 property，將編譯錯誤。</p>
<blockquote>
<p>Q : 若真的要傳入比 interface 還多 property 的 object，我該怎麼做 ?</p>
</blockquote>
<ol>
<li>使用 Object 傳入</li>
<li>使用 Type Assertion</li>
<li>使用 String Index Signature</li>
</ol>
<p><strong>使用 Object 傳入</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> LabelledValue </span>&#123;</span><br><span class="line">    label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure>
<p>由於 excess property checks 只針對 object literal，因此改傳 object。</p>
<p>先將 object literal 指定給 <code>myObj</code>，再將 <code>myObj</code> 傳入 <code>printLabel</code>。</p>
<p><strong>使用 Type Assertion</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> LabelledValue </span>&#123;</span><br><span class="line">    label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLabel(&lt;LabelledValue&gt;&#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>先使用 type assertion 將 <code>{size: 10, label: &quot;Size 10 Object&quot;}</code> 轉型成 <code>LabelledValue</code> 型別，再傳入 <code>printLabel()</code>。</p>
<p><strong>使用 String Index Signature</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> LabelledValue </span>&#123;</span><br><span class="line">    label: <span class="built_in">string</span>;</span><br><span class="line">    [propName:<span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">    <span class="built_in">console</span>.log(labelledObj[<span class="string">'size'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLabel(&#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>以上兩種做法，基本上就是將多餘的 property 視而不見，目的只是為了避開編譯錯誤，若你想將多餘的 parameter 變成一種附加的資訊，可由 user 自行決定是否傳入，且 function 也可順利存取，則建議改變 interface，改用  string index signature 處理多餘的 property。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> LabelledValue </span>&#123;</span><br><span class="line">    label: <span class="built_in">string</span>;</span><br><span class="line">    [propName:<span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 interface 增加 <code>[propName:string]: any</code>，其中 property name 將成為 index name，由於不限制 user 傳入的 property 型別，因此為 <code>any</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printLabel(&#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>User 因此可以傳入額外的 <code>size</code> property，TypeScript 也不會報錯。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">    <span class="built_in">console</span>.log(labelledObj[<span class="string">'size'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>還可使用 <code>labelledObj[&#39;size&#39;]</code> 存取其他 property。</p>
<p><strong>Readonly Property</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Point </span>&#123;</span><br><span class="line">    readonly x: <span class="built_in">number</span>;</span><br><span class="line">    readonly y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123; x: <span class="number">10</span>, y: <span class="number">20</span> &#125;;</span><br><span class="line">p1.x = <span class="number">5</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure>
<p>當 object 只有在一開始建立時才能設定其 property，之後就不再能修改其 property 時，可在 property 名稱之前加上 <code>readonly</code>。</p>
<blockquote>
<p>Q : 該如何分辨 readonly 與 const ?</p>
</blockquote>
<ul>
<li><code>readonly</code> : 用於 property</li>
<li><code>const</code> : 用於  variable</li>
</ul>
<blockquote>
<p>Q : 實務上哪裡會使用 object interface ?</p>
</blockquote>
<ol>
<li>傳進 API 的 JSON 物件，或從 API 傳回的 JSON 物件，會宣告其 object interface。</li>
<li>Component 與 service 之間的 method 以物件傳遞時 (DTO : Data Transfer Object)，會宣告其 object interface。</li>
</ol>
<h2 id="Index_Interface">Index Interface</h2><hr>
<blockquote>
<p>定義物件的 index signature</p>
</blockquote>
<p>JavaScript 的 object，也可以使用類似陣列的 <code>[]</code> 方式存取，<code>[]</code> 可為 number 或 string。</p>
<p><strong>Index 為 Number</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudDictionary </span>&#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clouds: CloudDictionary = &#123;&#125;;</span><br><span class="line">clouds[<span class="number">0</span>] = <span class="string">'aws'</span>;</span><br><span class="line">clouds[<span class="number">1</span>] = <span class="string">'azure'</span>;</span><br><span class="line">clouds[<span class="number">2</span>] = <span class="string">'gcp'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// aws</span></span><br><span class="line"><span class="comment">// azure</span></span><br><span class="line"><span class="comment">// gcp</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudDictionary </span>&#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>[]</code> 內的 index 為 number 型別，而 <code>[]</code> 的回傳值為 string。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clouds: CloudDictionary = &#123;&#125;;</span><br><span class="line">clouds[<span class="number">0</span>] = <span class="string">'aws'</span>;</span><br><span class="line">clouds[<span class="number">1</span>] = <span class="string">'azure'</span>;</span><br><span class="line">clouds[<span class="number">2</span>] = <span class="string">'gcp'</span>;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>clouds</code> 物件為 <code>CloudDictionary</code> index interface 型別。</p>
<p><code>clouds</code> 的 index  必須為 number，內容必須為 string，否則 TypeScript 會編譯錯誤。</p>
<p><strong>Index 為 String</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudDictionary </span>&#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clouds: CloudDictionary = &#123;&#125;;</span><br><span class="line">clouds[<span class="string">'aws'</span>] = <span class="number">0</span>;</span><br><span class="line">clouds[<span class="string">'azure'</span>] = <span class="number">1</span>;</span><br><span class="line">clouds[<span class="string">'gcp'</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="string">'aws'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="string">'azure'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="string">'gcp'</span>]);</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudDictionary </span>&#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Index signature 也可以是 string。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clouds: CloudDictionary = &#123;&#125;;</span><br><span class="line">clouds[<span class="string">'aws'</span>] = <span class="number">0</span>;</span><br><span class="line">clouds[<span class="string">'azure'</span>] = <span class="number">1</span>;</span><br><span class="line">clouds[<span class="string">'gcp'</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>clouds</code> 物件為 <code>CloudDictionary</code> index interface 型別。</p>
<p><code>clouds</code> 的 index  必須為 string，內容必須為 number，否則 TypeScript 會編譯錯誤。</p>
<p><strong>Index 可為 Number 與 String</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudDictionary </span>&#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clouds: CloudDictionary = &#123;&#125;;</span><br><span class="line">clouds[<span class="number">0</span>] = <span class="string">'aws'</span>;</span><br><span class="line">clouds[<span class="number">1</span>] = <span class="string">'azure'</span>;</span><br><span class="line">clouds[<span class="number">2</span>] = <span class="string">'gcp'</span>;</span><br><span class="line">clouds[<span class="string">'aws'</span>] = <span class="number">0</span>;</span><br><span class="line">clouds[<span class="string">'azure'</span>] = <span class="number">1</span>;</span><br><span class="line">clouds[<span class="string">'gcp'</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="string">'aws'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="string">'azure'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="string">'gcp'</span>]);</span><br><span class="line"><span class="comment">// aws</span></span><br><span class="line"><span class="comment">// azure</span></span><br><span class="line"><span class="comment">// gcp</span></span><br><span class="line"><span class="comment">// aws</span></span><br><span class="line"><span class="comment">// azure</span></span><br><span class="line"><span class="comment">// gcp</span></span><br></pre></td></tr></table></figure>
<p>若希望將前面兩個範例合一，讓 <code>CloudDictionary</code> 同時可接受 number 與 string 的 index。</p>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudDictionary </span>&#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比較 tricky 的是這一段 :</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[index: <span class="built_in">string</span>]: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure>
<p>除了原本的 number，還要加上 string。</p>
<p>因為 <code>clouds[1]</code>，在 JavaScript 也可以寫成 <code>clouds[&#39;1&#39;]</code>，所以若要寫 string index signature 時，還必須考慮相容於 number index signature，否則 TypeScript 會編譯錯誤。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(public name: string) </span>&#123;&#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog extends Animal &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="interface"><span class="keyword">interface</span> IZoo </span>&#123;</span><br><span class="line">    [x: <span class="built_in">number</span>]: Dog;</span><br><span class="line">    [x: <span class="built_in">string</span>]: Animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoo: IZoo = &#123;&#125;;</span><br><span class="line">zoo[<span class="number">0</span>] = <span class="keyword">new</span> Dog(<span class="string">'Sam'</span>);</span><br><span class="line">zoo[<span class="string">'Kevin'</span>] = <span class="keyword">new</span> Animal(<span class="string">'Kevin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(zoo[<span class="number">0</span>].name);</span><br><span class="line"><span class="built_in">console</span>.log(zoo[<span class="string">'Kevin'</span>].name);</span><br><span class="line"><span class="comment">// Sam</span></span><br><span class="line"><span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> IZoo </span>&#123;</span><br><span class="line">    [x: <span class="built_in">number</span>]: Dog;</span><br><span class="line">    [x: <span class="built_in">string</span>]: Animal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若 index 的 return type 是 class type，理論上應該寫成 <code>[x: string]: Animal | Dog</code>，但因為 <code>Dog</code> 繼承於 <code>Animal</code>，基於<code>里氏替換原則</code> : <code>父類別可以用子類別代替</code>，簡化成 <code>Animal</code> 即可。 </p>
<p><strong>Index 搭配 Property</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudDictionary </span>&#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clouds: CloudDictionary = &#123;</span><br><span class="line">    name: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line">clouds[<span class="string">'aws'</span>] = <span class="number">0</span>;</span><br><span class="line">clouds[<span class="string">'azure'</span>] = <span class="number">1</span>;</span><br><span class="line">clouds[<span class="string">'gcp'</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="string">'aws'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="string">'azure'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds[<span class="string">'gcp'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clouds.aws);</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudDictionary </span>&#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Index interface 若包含 property，則 property 的型別必須與 index 的回傳型別相同。</p>
<p>因為在 JavaScript，<code>obj[&quot;property&quot;]</code> 也可以寫成 <code>obj.property</code>，所以 property 的型別必須與 index 型別一致。 </p>
<h2 id="Class_Interface">Class Interface</h2><hr>
<blockquote>
<p>定義 class 的 public method 與 property</p>
</blockquote>
<p>一般物件導向語言 (C#、Java、PHP) 的 interface 都屬於 class interface，要求 class 須具備哪些 public method 與 property 時，會使用 interface 特別定義。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> ClockInterface </span>&#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(h: number, m: number) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ClockInterface</code> 定義了 class 該有 <code>currentTime</code> property，且型別為 <code>Date</code>。</p>
<p><code>Clock</code> class <code>implements</code> 了 <code>ClockInterface</code> 後，就必須有 <code>currentTime</code> property，且型別為 <code>Date</code>，否則會編譯錯誤。</p>
<blockquote>
<p>可在 class type interface 定義 public property。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> ClockInterface </span>&#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(h: number, m: number) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ClockInterface</code> 定義了 class 該有的 <code>setTime()</code> method，其 signature 為 <code>setTime(d: Date)</code>。</p>
<p><code>Clock</code> class <code>implements</code> 了 <code>ClockInterface</code> 後，就必須有 <code>setTime()</code> method，且 signature 為 <code>setTime(d: Date)</code>，否則會編譯錯誤。</p>
<blockquote>
<p>可在 class interface 定義 public method。</p>
</blockquote>
<p>Interface 只能定義 class 的 public 部分，無法定義其 private 與 protected 部分。</p>
<h2 id="Constructor_Interface">Constructor Interface</h2><hr>
<blockquote>
<p>定義 constructor 的 signature</p>
</blockquote>
<p>Class interface 不會去定義 constructor 的 signature，但有時候自己寫 constructor function / factory method 建立物件時，基於<code>依賴反轉原則</code>，我們會希望 object 有我們期望的 signature，因此會定義出 constructor interface，要求 class 去實踐，且受 TypeScript 編譯器檢查。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> ClockConstructor </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockConstructor &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(h: number, m: number) </span>&#123; &#125;</span><br><span class="line">&#125; <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> ClockConstructor </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為 <code>new</code> 會呼叫 constructor，所以使用 <code>new</code> 代表 constructor 描述所期望的 signature。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockConstructor &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(h: number, m: number) </span>&#123; &#125;</span><br><span class="line">&#125; <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p>基於 class interface 的經驗，我們會很直覺的使用 <code>implements</code> 配合 constructor interface，但 TypeScript 編譯後會得到以下錯誤 :</p>
<blockquote>
<p>error TS2420: Class ‘Clock’ incorrectly implements interface ‘ClockConstructor’.<br>  Type ‘Clock’ provides no match for the signature ‘new (hour: number, minute: number): any’.</p>
</blockquote>
<p>錯誤訊息指出 <code>Clock</code> 找不到符合 <code>new</code> signature 的 method。</p>
<blockquote>
<p>Q : 再談物件的 class level 與 object level</p>
</blockquote>
<p>我們知道物件的 property 與 method 分 class level 與 object level，如 <code>static</code> 屬於 class level，一般非 <code>static</code> 屬於 object level，所以也稱為 <code>static side</code> 與 <code>instance side</code>。</p>
<blockquote>
<p>Q : Constructor 該屬於 class level 還是 object level 呢 ?</p>
</blockquote>
<p>Object level 的 property 與 method 要透過 <code>new</code> 之後才能使用，所以 <code>new</code> 不該屬於 object level，只能是 class level。</p>
<p><code>Clock</code> class <code>implements</code> 了 <code>ClockConstructor</code> interface，TypeScript 嘗試在 object level 去尋找符合 <code>new</code> signature 的 method，但 <code>constructor(h: number, m: number)</code> 屬於 class level，所以 TypeScript 在 object level 找不到符合 <code>new</code> signature 的 method，因而報錯。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> ClockInterface </span>&#123;</span><br><span class="line">    tick();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="interface"><span class="keyword">interface</span> ClockConstructor </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>): ClockInterface;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(h: number, m: number) </span>&#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beep beep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clock = createClock(Clock, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line">clock.tick();</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> ClockInterface </span>&#123;</span><br><span class="line">    tick();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ClockInterface</code> 為 class interface，定義 <code>Clock</code> class 該有哪些 object level 的 method。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> ClockConstructor </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>): ClockInterface;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ClockConstructor</code> 為 construtor interface，定義 <code>Clock</code> class 的 constructor 的 signature。</p>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(h: number, m: number) </span>&#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beep beep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Clock</code> class <code>implments</code> 了 <code>ClockInterface</code>，此為 object level 的 interface，故可以使用 <code>implements</code>。</p>
<p>但 <code>Clock</code> class 無法 <code>implments</code> <code>ClockConstructor</code> interface，因為此為 class level 的 interface。</p>
<blockquote>
<p> Q : 所以 TypeScript 編譯器就無法檢查 <code>ClockConstructor</code> interface 了嗎 ?</p>
</blockquote>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title">ClockInterface</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p><code>createClock()</code> 為 constructor function (OOP 稱為 factory method)，第 1 個參數為 class，其型別為 <code>ClockConstructor</code> interface，之後的參數為 constructor 的 signature。</p>
<p>當第 1 個參數傳入 class 後，TypeScript 就會在此檢查該 class 是否有實踐 <code>ClockConstructor</code> 所定義的 constructor interface。</p>
<blockquote>
<p>Constructor interface 不能直接使用 <code>implements</code>，必須要搭配 constructor function / factory method，在其 parameter 使用 constructor interface，如此 TypeScript 就會在此檢查 class 是否有實踐 constructor interface。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br></pre></td></tr></table></figure>
<p><code>ctor</code> 實踐了 <code>ClockConstructor</code> 這個 constructor interface，因此可以直接 <code>new</code> 來建立 object。</p>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clock = createClock(Clock, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line">clock.tick();</span><br></pre></td></tr></table></figure>
<p>在 <code>createClock</code> 第 1 個參數傳入 <code>Clock</code>，注意 <code>Clock</code> 是個 class，不是 object。</p>
<blockquote>
<p><code>createClock()</code> 為典型的 constructor function，要使用 OOP 的 <code>ClockFactory.create()</code> 或 FP 的 <code>createClock()</code> ，實務上兩種都可以。</p>
<p>目前 TypeScript 的 class level 的 interface 只有 constructor interface，並沒有描述 static property 與 static method 的 interface。</p>
</blockquote>
<h2 id="Function_Interface">Function Interface</h2><hr>
<blockquote>
<p>定義 function 的 signature</p>
</blockquote>
<ul>
<li>在 OOP，我們期望 class 該有哪些 public property 與 method，可使用 class interface 描述。</li>
<li>在 FP，我們會期望 function 該有哪些 signature，可使用 function interface 描述。</li>
</ul>
<p>但傳統 OOP 的 class interface 無法滿足 FP 的需求，因而有了 function interface。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> ILogistics </span>&#123;</span><br><span class="line">    (weight: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ShippingService &#123;</span><br><span class="line">    calculateFee(weight: <span class="built_in">number</span>, logistics: ILogistics): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> logistics(weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shippingService = <span class="keyword">new</span> ShippingService();</span><br><span class="line"><span class="keyword">const</span> fee = shippingService.calculateFee(<span class="number">10</span>, weight =&gt; <span class="number">100</span> * weight + <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fee); <span class="comment">// 1010</span></span><br></pre></td></tr></table></figure>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">calculateFee(weight: <span class="built_in">number</span>, logistics: ILogistics): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> logistics(weight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>calculateFee()</code> 的第 2 個參數希望傳入一個 arrow function，其 signature 為 <code>number =&gt;number</code>。</p>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> ILogistics </span>&#123;</span><br><span class="line">    (weight: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>ILogistics</code> function interface，其 signature 為 <code>(weight: number): number</code>。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fee = shippingService.calculateFee(<span class="number">10</span>, weight =&gt; <span class="number">100</span> * weight + <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>Arrow function 為 <code>weight =&gt;100 * weight + 10</code>，TypeScript 編譯器會檢查此 arrow function 是不是符合 <code>ILogistics</code> interface。</p>
<blockquote>
<p>JavaScript 目前都無法對 arrow function 的 signature 做檢查，但有了 function interface 之後，就能在編譯階段檢查 function 的 signature。</p>
</blockquote>
<h2 id="Hybrid_Interface">Hybrid Interface</h2><hr>
<p>由於 JavaScript 的動態語言特性，ES5 的 function 可以同時是 function，也是 object，我們可以使用 hybrid interface 來定義。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Counter </span>&#123;</span><br><span class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    interval: <span class="built_in">number</span>;</span><br><span class="line">    reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) </span>&#123; &#125;;</span><br><span class="line">    counter.interval = <span class="number">123</span>;</span><br><span class="line">    counter.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Counter </span>&#123;</span><br><span class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    interval: <span class="built_in">number</span>;</span><br><span class="line">    reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Counter</code> interface 同時具有 function 與 object 特性 :</p>
<ol>
<li>Function 的 signature 為 <code>(start: number): string</code></li>
<li>Object 有 <code>interval</code> property 與 <code>reset()</code> method</li>
</ol>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) </span>&#123; &#125;;</span><br><span class="line">    counter.interval = <span class="number">123</span>;</span><br><span class="line">    counter.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同時設定 counter 有 function 與 object 部分。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>
<p><code>c</code> 可當 function，也可當 object 使用。</p>
<blockquote>
<p>Hybrid interface 主要用於相容 ES5 與  3rd-party 套件，新寫的 TypeScript 與 Angular 則不建議使用 hybrid interface。</p>
</blockquote>
<h2 id="Inheritance">Inheritance</h2><hr>
<p><strong>Interface Extending Interface</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Shape </span>&#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="interface"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape </span>&#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p><code>Square</code> interface 繼承了 <code>Shape</code> interface，因此 <code>squre</code> 同時有 <code>color</code> 與 <code>sideLength</code> property。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Shape </span>&#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="interface"><span class="keyword">interface</span> PenStroke </span>&#123;</span><br><span class="line">    penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="interface"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke </span>&#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line">square.penWidth = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>
<p><code>Square</code> interface 同時多重繼承了 <code>Shape</code> 與 <code>PenStroke</code>，因此 <code>Squre</code> 除了有自己的 <code>sideLength</code> 外，同時也具備了 <code>Shape</code> 的 <code>color</code> 與 <code>PenStroke</code> 的 <code>penWidth</code>。</p>
<blockquote>
<p>由於 interface 可以繼承，甚至多重繼承，因此設計 interface 時，可以遵循 <code>介面隔離原則</code> : <code>使用者不該使用用不到 method 的 interface</code> ，將 interface 開的小小的，再根據需求去組合 interface，讓物件與物件之間的耦合達到最小。</p>
</blockquote>
<p><strong>Interface Extending Class</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">    <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="interface"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control </span>&#123;</span><br><span class="line">    select(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button extends Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TextBox extends Control &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: Property 'state' is missing in type 'Image'.</span></span><br><span class="line"><span class="keyword">class</span> Image <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Location &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">    <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="interface"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control </span>&#123;</span><br><span class="line">    select(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當 interface 繼承 class 時，有兩個特色 :</p>
<ol>
<li>原 Class 原本的實作部分完全捨棄，只繼承 signature 部分</li>
<li>原 Class 的 private 與 protected 部分也會一併被繼承保留</li>
</ol>
<p>所以 <code>SelectableControl</code> interface 除了有 <code>select()</code> 外，也會有 private <code>state</code> property。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Button extends Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Button</code> 因為繼承了 <code>Control</code>，所以有 private <code>state</code> property，符合 <code>SelectableControl</code> interface 的要求。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Error: Property 'state' is missing in type 'Image'.</span></span><br><span class="line"><span class="keyword">class</span> Image <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Image</code> 沒有繼承 <code>Control</code> class，因此沒有 private <code>state</code> property，因此不符合 <code>SeletableControl</code> interface 的要求，TypeScript 編譯會報錯。</p>
<blockquote>
<p>Q : 實務上該如何使用 interface 繼承 class ?</p>
</blockquote>
<p>一開始就能由 TDD 逼出 interface 是最理想的，這種 interface 來自於需求，所開出的 interface 會最精準，但實務上還是會遇到一開始沒有 interface，事後需要抽 interface 需求，此時可以新增 interface 繼承目前的 class，將來新的 class 再使用 adapter 轉成目前的 interface，則原本的程式碼不用修改，達成<code>開放封閉原則</code>的要求。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> AWSSDK &#123;</span><br><span class="line">    putObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>, file: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deleteObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一開始只有 <code>AWSSDK</code> 需求，因此 service 直接使用 <code>AWSSDK</code> class。</p>
<p>因為需求改變，需要使用 <code>AzureSDK</code>，因為 service 已經直接使用 <code>AWSSDK</code>，為了讓原本使用 <code>AWSSDK</code> 的 service 不要改 code，我們會由 <code>AWSSDK</code> class 去抽 interface。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudSDK </span>&#123;</span><br><span class="line">    putObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>, file: <span class="built_in">string</span>);</span><br><span class="line">    getObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>);</span><br><span class="line">    deleteObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AWSSDK <span class="keyword">implements</span> CloudSDK &#123;</span><br><span class="line">    putObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>, file: <span class="built_in">string</span>) &#123;    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    getObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    deleteObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AzureSDK <span class="keyword">implements</span> CloudSDK &#123;</span><br><span class="line">    putObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>, file: <span class="built_in">string</span>) &#123;    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    getObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    deleteObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudSDK </span>&#123;</span><br><span class="line">    putObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>, file: <span class="built_in">string</span>);</span><br><span class="line">    getObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>);</span><br><span class="line">    deleteObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>傳統 OOP 會使用重構工具 (WebStorm/PhpStorm/Resharper) 去 <code>extract interface</code>，產生 <code>CloudSDK</code>。</p>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> AWSSDK <span class="keyword">implements</span> CloudSDK</span><br><span class="line"><span class="keyword">class</span> AzureSDK <span class="keyword">implements</span> CloudSDK</span><br></pre></td></tr></table></figure>
<p>然後所有的 class 去 implement interface，配合 DI 與 provider，則 service 不用做任何修改，達成<code>開放封閉原則</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudSDK <span class="keyword">extends</span> AWSSDK </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AWSSDK <span class="keyword">implements</span> CloudSDK &#123;</span><br><span class="line">    putObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>, file: <span class="built_in">string</span>) &#123;    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    getObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    deleteObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AzureSDK <span class="keyword">implements</span> CloudSDK &#123;</span><br><span class="line">    putObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>, file: <span class="built_in">string</span>) &#123;    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    getObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    deleteObject(container: <span class="built_in">string</span>, blob: <span class="built_in">string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> CloudSDK <span class="keyword">extends</span> AWSSDK </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CloudSDK</code> interface 直接繼承 <code>AWSSDK</code> class 即可，不必再使用重構工具從 <code>AWSSDK</code> 去抽 interface。</p>
<p>剩下的程式碼完全一樣。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>因為 JavaScript 沒有 interface，TypeScript 為了讓 JavaScript 擁有強型別能力而補上 interface，但 TypeScript 的 interface 的完整度已經超過大部分語言。</li>
<li>TypeScript 的 object interface，其本質類似弱型別 PHP 的 duck typing 與 C# 4.0 的 <code>dynamic</code>，只是明確地將 property signature 型別化，並且提前在編譯階段進行檢查，但 object literal 是例外，會啟動 excess property checks。</li>
<li>因為 TypeScript 有 object interface，所以 model 的型別，一般 OOP 會使用 class，但 TypeScript 會使用 interface。</li>
<li>Constructor interface 為 TypeScript 所獨創，以往 OOP 的 class interface 無法定義constructor，但 constructor interface 則可對 constructor 加以定義，但不能使用 <code>implements</code>，而要改用 constructor function / factory method，在 parameter 使用 constructor interface，如此 TypeScript 編譯器就能對 constructor signature 加以檢查。</li>
<li>Interface 可直接繼承 class，因此 adapter pattern 會有更精簡的實作方式。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/interfaces.html" target="_blank" rel="external">Handbook : Interfaces</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Interface 是 TypeScript 的招牌菜]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 macOS 徹底刪除 App 所留下的設定檔 ?]]></title>
    <link href="http://oomusou.io/macos/uninstall-folder/"/>
    <id>http://oomusou.io/macos/uninstall-folder/</id>
    <published>2018-02-18T12:23:43.000Z</published>
    <updated>2018-02-16T03:43:18.000Z</updated>
    <content type="html"><![CDATA[<p>關於 macOS 的原生 app，雖然可以透過 <code>AppCleaner</code> 或原廠提供了 <code>Uninstall App</code> 移除，但實務上仍會發現一些 app 自己的 <code>設定檔</code> 或 <code>暫存檔</code>，無法百分之百的從系統刪除，需手動加以處理。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3</p>
<h2 id="Directory">Directory</h2><hr>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">Library</span></span><br><span class="line">~/<span class="keyword">Library</span></span><br><span class="line"></span><br><span class="line">/<span class="keyword">Library</span>/Application Support</span><br><span class="line">~/<span class="keyword">Library</span>/Application Support</span><br><span class="line"></span><br><span class="line">/<span class="keyword">Library</span>/Preferences</span><br><span class="line">~/<span class="keyword">Library</span>/Preferences</span><br><span class="line"></span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure>
<p>這幾個目錄，是 app 常見的 <code>設定檔</code> 與 <code>暫存檔</code> 使用目錄，除了依賴 <code>AppCleaner</code> 外，這幾個目錄最好手動檢查一下，是否有尚未移除檔案。</p>
<h2 id="Concluson">Concluson</h2><hr>
<ul>
<li>目前在 macOS 尚未有完美的 <code>反安裝 App</code> 解決方案時，手動檢查這幾個目錄是必要的。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[幾個需要手動刪除檔案的目錄]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何避免 Angular 被瀏覽器 cache ?]]></title>
    <link href="http://oomusou.io/angular/browser-cache/"/>
    <id>http://oomusou.io/angular/browser-cache/</id>
    <published>2018-02-17T12:23:43.000Z</published>
    <updated>2018-02-15T02:02:36.000Z</updated>
    <content type="html"><![CDATA[<p>瀏覽器為了效能，會對 HTML、JavaScript 與 CSS 做 cache，其本意是好的，但對於 developer 來說，卻擔心更新到 production server 後，user 仍然是執行到被瀏覽器 cache 的 HTML、JavaScript 與 CSS，Angular 該如何解決這個問題呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular 5.1</p>
<h2 id="HTML">HTML</h2><hr>
<p>在經過 Angular CLI 的 <code>ng build --prod</code> 之後，會在 <code>dist</code> 目錄下產生整個 Angular 專案唯一的 <code>index.html</code>，擔心的是 user 執行到被瀏覽器 cache 的 <code>index.html</code>。</p>
<h3 id="新增_HTML_Meta">新增 HTML Meta</h3><p><strong>src/index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>NG5HttpClient<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Cache-Control"</span> <span class="attribute">content</span>=<span class="value">"no-cache, no-store, max-age=0, must-revalidate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"expires"</span> <span class="attribute">content</span>=<span class="value">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"icon"</span> <span class="attribute">type</span>=<span class="value">"image/x-icon"</span> <span class="attribute">href</span>=<span class="value">"favicon.ico"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">app-root</span>&gt;</span><span class="tag">&lt;/<span class="title">app-root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 6 行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Cache-Control"</span> <span class="attribute">content</span>=<span class="value">"no-cache, no-store, max-age=0, must-revalidate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"expires"</span> <span class="attribute">content</span>=<span class="value">"0"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>新增這 3 行 <code>&lt;meta&gt;</code>。</p>
<p>在 HTTP 1.1 規格中，有 <a href="https://tools.ietf.org/html/rfc2616#section-14.9" target="_blank" rel="external">Cache-Control</a> 可設定瀏覽器的 cache。</p>
<p>在 HTTP 1.0 規格中，有 <a href="https://tools.ietf.org/html/rfc1945#section-10.12" target="_blank" rel="external">Pragma</a> 可設定瀏覽器的 cache。</p>
<p>而 HTTP 1.0 與 1.1 都有 <code>Expires</code> 設定 cache 內容的有效期限，但在 1.1 的規格中，<code>Cache-Control</code> 的優先權是大於 <code>Expires</code>，因此可以規劃出以上通用設定，就可避免 <code>index.html</code> 被瀏覽器 cache。</p>
<p><img src="/images/angular/browser-cache/cache000.png" alt="cache000"></p>
<ol>
<li>開啟 <code>src</code> 目錄下的 <code>index.html</code></li>
<li>加入 3 行 <code>&lt;meta&gt;</code></li>
</ol>
<h3 id="編譯_Angular">編譯 Angular</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ ng build <span class="comment">--prod</span></span><br></pre></td></tr></table></figure>
<p>要放進 production server 的 code，最後會加上 <code>--prod</code>。</p>
<p><img src="/images/angular/browser-cache/cache001.png" alt="cache001"></p>
<h3 id="編譯後的_index-html">編譯後的 index.html</h3><p>經過 <code>ng build --prod</code> 之後的 HTML、JavaScript 與 CSS 都會放在 <code>dist</code> 目錄下。</p>
<p><img src="/images/angular/browser-cache/cache002.png" alt="cache002"></p>
<ol>
<li>選擇 <code>dist</code> 目錄</li>
<li>選擇 <code>index.html</code>，這是最後會上 production server 的 <code>index.html</code></li>
<li>我們剛剛加入的 3 個 <code>&lt;meta&gt;</code> 都還留著，因此不用每次編譯就修改 <code>index.html</code></li>
</ol>
<blockquote>
<p>只要改一次 <code>src/index.html</code> 的 <code>&lt;meta&gt;</code>，之後就不用擔心 HTML 被瀏覽器 cache 的問題</p>
</blockquote>
<h2 id="JavaScript">JavaScript</h2><hr>
<p>JavaScript 若檔名相同，瀏覽器會優先選擇使用本地的 cache 增加效能，Angular CLI  在每次 <code>ng build --prod</code> 之後，會重新以亂數命名 JavaScript 檔案，因此瀏覽器只能重新對 server 抓 <code>*.js</code>，而不會採用瀏覽器的 cache。</p>
<p><img src="/images/angular/browser-cache/cache003.png" alt="cache003"></p>
<p>所有經過 <code>ng build --prod</code> 所 bundle 的 JavaScript 都經過亂數改掉檔名，因此瀏覽器一定會再跟 server 要新的 JavaScript。</p>
<p><img src="/images/angular/browser-cache/cache005.png" alt="cache005"></p>
<p>Angular CLI 會幫我們將所引用的 JavaScript 一併改名。</p>
<h2 id="CSS">CSS</h2><hr>
<p>CSS 若檔名相同，瀏覽器會優先選擇使用本地的 cache 增加效能，Angular CLI  在每次 <code>ng build --prod</code> 之後，會重新以亂數命名 CSS 檔案，因此瀏覽器只能重新對 server 抓 <code>*.css</code>，而不會採用瀏覽器的 cache。</p>
<p><img src="/images/angular/browser-cache/cache004.png" alt="cache004"></p>
<p>所有經過 <code>ng build --prod</code> 所 bundle 的 CSS 都經過亂數改掉檔名，因此瀏覽器一定會再跟 server 要新的 CSS。</p>
<p><img src="/images/angular/browser-cache/cache006.png" alt="cache006"></p>
<p>Angular CLI 會幫我們將所引用的 CSS 一併改名。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>在開發階段時，完全不用擔心 HTML、JavaScript 與 CSS 被瀏覽器 cache 問題，Angular CLI 內建的 web server 已經幫我們處理</li>
<li>由於 JavaScript 並沒有提供 <code>&lt;meta&gt;</code> 機制，因此若將 JavaScript 獨立於 HTML，就必須面臨 JavaScript 可能被瀏覽器 cache 的問題，Angular CLI 已經幫我們處理了 JavaScript 與 CSS，我們唯一需要處理的只剩下 HTML 部分，所幸 HTML 部分可簡單的用 <code>&lt;meta&gt;</code> 處理即可</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://poychang.github.io/" target="_blank" rel="external">Poy Chang</a>, <a href="https://poychang.github.io/disable-browser-cache-on-angular-site/" target="_blank" rel="external">在 Angular 網站中取消瀏覽器快取功能</a></p>
]]></content>
    <summary type="html">
    <![CDATA[簡單的方式避免瀏覽器 cache]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
</feed>
