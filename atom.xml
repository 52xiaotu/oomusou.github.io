<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2017-05-22T02:53:23.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[TypeScript 之 Type Assertion]]></title>
    <link href="http://oomusou.io/typescript/typescript-type-assertion/"/>
    <id>http://oomusou.io/typescript/typescript-type-assertion/</id>
    <published>2017-05-22T12:23:43.000Z</published>
    <updated>2017-05-22T02:53:23.000Z</updated>
    <content type="html"><![CDATA[<p>C# 有所謂的 Object Initializer，讓我們可以很優雅的建立物件，並且將物件的 field 一次填滿，TypeScript 是否也提供如 C# 一樣的寫法呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.2</p>
<h2 id="傳統建立物件方式">傳統建立物件方式</h2><p><strong>hero.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  state: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 class 建立 model。</p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onAddHeroClick() &#123;</span><br><span class="line">  <span class="keyword">const</span> hero = <span class="keyword">new</span> Hero();</span><br><span class="line">  hero.name = <span class="string">'Sam'</span>;</span><br><span class="line">  hero.state = <span class="string">'active'</span>;</span><br><span class="line">  <span class="keyword">this</span>.heroes.push(hero);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>Hero</code> 物件，然後指定 field 值，最後再 push 進陣列。</p>
<p>這樣寫當然沒有錯，只是必須先透過 constructor 建立物件，然後一一指定 field 值，程式行數會很多，且沒那麼優雅。</p>
<h2 id="傳統建立物件方式-1">傳統建立物件方式</h2><p><strong>hero.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  state: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 class 建立 model。</p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onAddHeroClick() &#123;</span><br><span class="line">  <span class="keyword">const</span> hero = <span class="keyword">new</span> Hero();</span><br><span class="line">  hero.name = <span class="string">'Sam'</span>;</span><br><span class="line">  hero.state = <span class="string">'active'</span>;</span><br><span class="line">  <span class="keyword">this</span>.heroes.push(hero);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>Hero</code> 物件，然後指定 field 值，最後再 push 進陣列。</p>
<p>這樣寫當然沒有錯，只是必須先透過 constructor 建立物件，然後一一指定 field 值，程式行數會很多，且沒那麼優雅。</p>
<h2 id="C_Sharp">C Sharp</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hero = <span class="keyword">new</span> Hero</span><br><span class="line">&#123;</span><br><span class="line">  Name = <span class="string">"Sam"</span>,</span><br><span class="line">  State = <span class="string">"active"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>C# 的 Object Initializer 允許我們不用透過 constructor，直接在型別後面使用 <code>{}</code>，且 Intellisense 會自動對 field 加以提示。</p>
<p>這種方式比起傳統物件導向寫法優雅。</p>
<h2 id="TypeScript">TypeScript</h2><p>TypeScript 有 3 種寫法，可以寫出類似 C# Object Initializer 風格的程式碼。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hero: Hero = &#123;</span><br><span class="line">  name: <span class="string">'Sam'</span>,</span><br><span class="line">  state: <span class="string">'active'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這種寫法也不用透過 new 與 constructor，語法精簡，且 Intellisense 會自動對 field 加以提示。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hero = &lt;Hero&gt;&#123;</span><br><span class="line">  name: <span class="string">'Sam'</span>,</span><br><span class="line">  state: <span class="string">'active'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這種寫法也不用透過 new 與 constructor，使用 type assertion，類似泛型的寫法，將 object type 轉成 <code>Hero</code>，語法精簡，且 Intellisense 會自動對 field 加以提示。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  name: <span class="string">'Sam'</span>,</span><br><span class="line">  state: <span class="string">'active'</span></span><br><span class="line">&#125; as Hero;</span><br></pre></td></tr></table></figure>
<p>這種寫法也不用透過 new 與 constructor，是 type assertion 的另一種寫法，在最後補上 <code>as</code> 將 object type 轉成 <code>Hero</code>，語法精簡，且 Intellisense 會自動對 field 加以提示。</p>
<h2 id="&lt;Foo&gt;_vs-_as_Foo"><code>&lt;Foo&gt;</code> vs. <code>as Foo</code></h2><p><code>&lt;Foo&gt;</code> 與 <code>as Foo</code> 寫法都屬於 type assertion，該用哪一種寫法呢？</p>
<p>一開始 TypeScript 只提供 <code>&lt;Foo&gt;</code>的語法，但這種寫法搭配 JSX 會有問題。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &lt;<span class="built_in">string</span>&gt;bar;</span><br><span class="line">&lt;<span class="regexp">/string&gt;</span></span><br></pre></td></tr></table></figure>
<p>因此 TypeScript 另外提供 <code>as Foo</code> 寫法給 JSX。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = bar as <span class="built_in">string</span>;</span><br><span class="line">&lt;<span class="regexp">/string&gt;</span></span><br></pre></td></tr></table></figure>
<p>對於 Angular 來說，<code>&lt;Foo&gt;</code> 與 <code>as Foo</code> 都可以用，但就語意而言，<code>&lt;Foo&gt;</code> 寫法較優。</p>
<p>因為 type assertion 是在<strong>編譯時期</strong>的<strong>靜態轉型</strong>，而非<strong>執行時期</strong>的<strong>動態轉型</strong>，使用泛型的 <code>&lt;&gt;</code> 符號較能彰顯其<strong>編譯時期</strong>的特性。</p>
<h2 id="Type_Assersion_vs-_Type_Casting">Type Assersion vs. Type Casting</h2><p>或許你會覺得 type assertion 就是一種轉型而已，只是使用了 <code>&lt;Foo&gt;</code> 或 <code>as Foo</code> 的語法，但事實上並不是如此。</p>
<p>在 TypeScript PlayGround，我們可以發現使用 type assertion 之後的 JavaScript 的差異：</p>
<p><strong>TypeScript</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hero = &lt;Hero&gt;&#123;</span><br><span class="line">  name: <span class="string">'Sam'</span>,</span><br><span class="line">  state: <span class="string">'active'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>JavaScript</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line"> name: <span class="string">'Sam'</span>,</span><br><span class="line"> state: <span class="string">'active'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>也就是對於 JavaScript 而言，並沒有所謂的 <code>Hero</code> 型別，只是 <code>object</code> 型別，所以並沒有所謂的<strong>執行時期</strong>的<strong>動態轉型</strong>，type assertion 實際上只有兩個功能：</p>
<ul>
<li>編譯時期的型別檢查</li>
<li>開發時期的 Intellisense。</li>
</ul>
<h2 id="Type_Assertion_的盲點">Type Assertion 的盲點</h2><p>Type assertion 並非萬靈丹，事實上它有以下盲點，回顧一下我們的 model：</p>
<p><strong>hero.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  state: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Hero 有兩個 fields。</p>
<p><img src="/images/typescript/typescript-assertion/assert000.png" alt="assert000"></p>
<p>使用 <code>&lt;Hero&gt;</code> 寫法，就算少寫了 <code>state</code>，Typescript language service 與 TSLint 都不會警告，且編譯後也沒有錯誤。</p>
<p><img src="/images/typescript/typescript-assertion/assert001.png" alt="assert001"></p>
<p>改用了 <code>as Hero</code> 寫法依舊，就算少寫了 <code>state</code>，Typescript language service 與 TSLint 都不會警告，且編譯後也沒有錯誤。</p>
<p><img src="/images/typescript/typescript-assertion/assert002.png" alt="assert002"></p>
<p>若使用了型別宣告，少寫了 <code>state</code>，Typescript language service 會提出警告，編譯也會失敗，明確告知少指定了 <code>state</code> fields。</p>
<blockquote>
<p>以上 3 種寫法，Intellisense 皆正常，但只有明確宣告型別，才能完整檢查出少了 field。</p>
</blockquote>
<h2 id="Nullable">Nullable</h2><p>若 model 有些 field 允許不指定值，卻又希望 Typescript 強型別檢查呢？</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hero &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  state？: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>請在 field 名稱後方加上 <code>?</code>，則 Typescript language service 不會提出警告，編譯也不會失敗。</p>
<h2 id="Conclusion">Conclusion</h2><ul>
<li>Type Assertion 並非最完美的強型別解決方案，只能對 Intellisense 有幫助。</li>
<li>若要完整的檢查，還是要明確的指定型別，如此才能發揮 Typescript 的 type 威力。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.gitbook.com/book/basarat/typescript/details" target="_blank" rel="external">TypeScript Deep Dive</a>, <a href="https://basarat.gitbooks.io/typescript/docs/types/type-assertion.html" target="_blank" rel="external">Type Assertion</a></p>
]]></content>
    <summary type="html">
    <![CDATA[釐清 Type Assertion 觀念與盲點]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Observable Data Service]]></title>
    <link href="http://oomusou.io/angular/angular-observable-data-service/"/>
    <id>http://oomusou.io/angular/angular-observable-data-service/</id>
    <published>2017-04-24T12:23:43.000Z</published>
    <updated>2017-04-24T13:32:31.000Z</updated>
    <content type="html"><![CDATA[<p>在 <a href="/angular/angular-ngrx/">Angular 也走 Redux 風 (使用 Ngrx)</a> 一文中，我們使用了 <code>Ngrx</code> 這種 <code>Redux</code> 風格的 store 來處理 component 之間共用的 state，雖然可行，但有一點 over design，在 RxJS 出現後，我們使用 Observable Data Service 也能實現出相同的效果。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS 10.12.4<br>Angular CLI 1.0.0<br>Angular 4.0.1</p>
<h2 id="Todo_範例">Todo 範例</h2><hr>
<p><img src="/images/angular/ods/service000.png" alt="service000"></p>
<h3 id="AppModule">AppModule</h3><p><strong>app.module.ts</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoListComponent&#125; from <span class="string">'./components/todo-list/todo-list.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoDashboardComponent&#125; from <span class="string">'./components/todo-dashboard/todo-dashboard.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoService&#125; from <span class="string">'./services/todo/todo.service'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    TodoListComponent,</span><br><span class="line">    TodoDashboardComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    TodoService</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>22 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  TodoService</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>須在 <code>AppModule</code> 的 <code>providers</code> 加入 <code>TodoService</code>。</p>
<h3 id="Component">Component</h3><h4 id="AppComponent">AppComponent</h4><p><strong>app.component.html</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Todo<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">app-todo-list</span>&gt;</span><span class="tag">&lt;/<span class="title">app-todo-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">app-todo-dashboard</span>&gt;</span><span class="tag">&lt;/<span class="title">app-todo-dashboard</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>包含了 <code>TodoList</code> 與 <code>TodoDashboard</code> 兩個 component。</p>
<h4 id="TodoList">TodoList</h4><p><strong>todo-list.component.html</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/components/todo-list/todo-list.component.html" target="_blank" rel="external">todo-list.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> #<span class="attribute">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"addTodo(title)"</span>&gt;</span>Add<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let todo of todos|async"</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"removeTodo(todo.id)"</span>&gt;</span>Remove<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>todos</code> 為 <code>Observable</code>，需加上 <code>async</code> 將 <code>Observable</code> 來 subscribe 與 unsubscribe。</p>
<p>但這有個限制，<code>todos</code> 必須為宣告成 <code>Observable&lt;Todo[]&gt;</code> 型別。</p>
<p>Component 包含了<code>Add</code> 與 <code>Remove</code> 2 個 button。</p>
<p><strong>todo-list.component.ts</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/components/todo-list/todo-list.component.ts" target="_blank" rel="external">todo-list.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoService&#125; from <span class="string">'../../services/todo/todo.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo&#125; from <span class="string">'../../models/todo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo-list'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo-list.component.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListComponent &#123;</span><br><span class="line">  todos: Observable&lt;Todo[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private todoService: TodoService) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todoService.getTodos();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo(input: HTMLInputElement) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!input.value) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.todoService.addTodo(input.value);</span><br><span class="line"></span><br><span class="line">    input.value = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.todoService.removeTodo(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private todoService: TodoService) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todoService.getTodos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>TodoService</code> 依賴注入。</p>
<p>由 <code>TodoService.getTodos()</code> 回傳所有 <code>todos</code>， 此為 <code>Observable</code> 型別。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todos: Observable&lt;Todo[]&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>todos</code> 為 <code>Observable</code> 型別，其泛型為 <code>Todo[]</code>。</p>
<blockquote>
<p>為什麼 <code>todos</code> 不是 <code>Todo[]</code> 型別，而是 <code>Observable&lt;Todo[]&gt;</code> 呢？因為 <code>TodoService.getTodos()</code>回傳的型別為 <code>Observable</code>。</p>
</blockquote>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addTodo(input: HTMLInputElement) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!input.value) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.todoService.addTodo(input.value);</span><br><span class="line"></span><br><span class="line">  input.value = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Add</code> button 的 event handler。</p>
<p>呼叫 <code>TodoService</code> 的 <code>addTodo()</code>，並直接傳入欲新增的 todo。</p>
<blockquote>
<p>使用 Observable Data Service 時，就不必呼叫 <code>Ngrx</code> 的 <code>dispatch()</code> 與傳入 action 與 payload，直接呼叫 service 的 method 與傳入資料即可。</p>
</blockquote>
<p>27 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.todoService.removeTodo(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Remove</code> button 的 event handler。</p>
<p>呼叫 <code>TodoService</code> 的 <code>removeTodo()</code>，並直接傳入欲移除的 id。</p>
<h4 id="TodoDashboard">TodoDashboard</h4><p><strong>todo-dashboard.component.html</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/components/todo-dashboard/todo-dashboard.component.html" target="_blank" rel="external">todo-dashboard.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  Last Update: &#123;&#123; lastUpdate | async | date:'mediumTime'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  Total items: &#123;&#123; (todos | async ).length &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"clearTodos()"</span>&gt;</span>Delete All<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>顯示最後更新時間與 <code>Todo</code> 筆數。</p>
<p><code>lastUpdate</code> 與 <code>todos</code> 均為 <code>Observable</code>，需加上 <code>async</code> 將 <code>Observable</code> 來 subscribe 與 unsubscribe。</p>
<p>Component 包含了 <code>Clear All</code> button。</p>
<p><strong>todo-dashboard.component.ts</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/components/todo-dashboard/todo-dashboard.component.ts" target="_blank" rel="external">todo-dashboard.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoService&#125; from <span class="string">'../../services/todo/todo.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo&#125; from <span class="string">'../../models/todo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo-dashboard'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo-dashboard.component.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoDashboardComponent &#123;</span><br><span class="line">  todos: Observable&lt;Todo[]&gt;;</span><br><span class="line">  lastUpdate: Observable&lt;<span class="built_in">Date</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private todoService: TodoService) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todoService.getTodos();</span><br><span class="line">    <span class="keyword">this</span>.lastUpdate = <span class="keyword">this</span>.todoService.getLastUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clearTodos() &#123;</span><br><span class="line">    <span class="keyword">this</span>.todoService.clearTodos();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private todoService: TodoService) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todoService.getTodos();</span><br><span class="line">  <span class="keyword">this</span>.lastUpdate = <span class="keyword">this</span>.todoService.getLastUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>TodoService</code> 依賴注入。</p>
<p>由 <code>TodoService.getTodos()</code> 回傳所有 <code>todos</code>， 此為 <code>Observable</code> 型別。</p>
<p>由 <code>TodoService.getLastUpdate()</code> 回傳 <code>LastUpdate</code>， 此為 <code>Observable</code> 型別。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">todos: Observable&lt;Todo[]&gt;;</span><br><span class="line">lastUpdate: Observable&lt;<span class="built_in">Date</span>&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>todos</code> 為 <code>Observable</code> 型別，其泛型為 <code>Todo[]</code>。</p>
<p>宣告 <code>lastUpdate</code> 為 <code>Observable</code> 型別，其泛型為 <code>Date</code>。</p>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clearTodos() &#123;</span><br><span class="line">  <span class="keyword">this</span>.todoService.clearTodos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Clear All</code> button 的 event handler。</p>
<p>呼叫 <code>TodoService</code> 的 <code>clearTodos()</code>。</p>
<h3 id="Services">Services</h3><h4 id="TodoService">TodoService</h4><p><strong>todo.service.ts</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/services/todo/todo-state.ts" target="_blank" rel="external">todo.service.ts</a></span></span></span><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo&#125; from <span class="string">'../../models/todo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;BehaviorSubject&#125; from <span class="string">'rxjs/BehaviorSubject'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;INITIAL_TODO, TodoState&#125; from <span class="string">'./todo-state'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/pluck'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoService &#123;</span><br><span class="line">  <span class="keyword">private</span> subject = <span class="keyword">new</span> BehaviorSubject&lt;TodoState&gt;(INITIAL_TODO_STATE);</span><br><span class="line"></span><br><span class="line">  getTodos(): Observable&lt;Todo[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subject.pluck(<span class="string">'todos'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getLastUpdate(): Observable&lt;<span class="built_in">Date</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subject.pluck(<span class="string">'lastUpdate'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo(title: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">      todos: [...todos, &#123;</span><br><span class="line">        id: todos.length + <span class="number">1</span>,</span><br><span class="line">        title: title</span><br><span class="line">      &#125;],</span><br><span class="line">      lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">      todos: todos.filter(todo =&gt; todo.id !== id),</span><br><span class="line">      lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clearTodos() &#123;</span><br><span class="line">    <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">      todos: [],</span><br><span class="line">      lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>全部的 state 邏輯都在 <code>TodoService</code> 內。</p>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoService &#123;</span><br></pre></td></tr></table></figure>
<p>使用 Angular 標準的 service。</p>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> subject = <span class="keyword">new</span> BehaviorSubject&lt;TodoState&gt;(INITIAL_TODO_STATE);</span><br></pre></td></tr></table></figure>
<p><code>subject</code> 為實際儲存 Observable state 之處，為 <code>BehaviorSubject</code> 型別，<code>TodoState</code> 包含 <code>Todo[]</code> 與  <code>LastUpdate</code>。</p>
<blockquote>
<p>什麼是 BehaviorSubject？</p>
</blockquote>
<p>根據 RxJS source code</p>
<p><strong>BehaviorSubject.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BehaviorSubject&lt;T&gt; extends Subject&lt;T&gt; &#123;</span><br></pre></td></tr></table></figure>
<p><code>BehaviorSubject</code> 繼承於 <code>Subject</code>。</p>
<p><strong>Subject.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Subject&lt;T&gt; extends Observable&lt;T&gt; <span class="keyword">implements</span> ISubscription &#123;</span><br></pre></td></tr></table></figure>
<p><code>Subject</code> 繼承於 <code>Observable</code>。</p>
<p>也就是 <code>Observable</code> 所有的特性，<code>Subject</code> 與 <code>BehaviorSubject</code> 都有，如 <code>subscribe()</code> 與 RxJS 的 operator 操作。</p>
<p><code>Subject</code> 與 <code>BehaviorSubject</code> 算是一種特殊的 <code>Observable</code>，提供一些原本 <code>Observable</code> 沒有的功能。</p>
<blockquote>
<p>Observable 與 Subject 的差異？</p>
</blockquote>
<p><code>Subject</code> 多提供了 <code>next()</code>，允許我們手動將值送進 <code>Observable</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject = <span class="keyword">new</span> Subject();</span><br><span class="line">subject.subscribe((value) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Subscription got '</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line">subject.next(<span class="string">'Hello World'</span>);</span><br><span class="line"><span class="comment">// Subscription got Hello World</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Subject 與 BehaviorSubject 的差異？</p>
</blockquote>
<p>可提供初始值給 <code>BehaviorSubject</code>，使用端只要 <code>subscribe()</code> 就能收到初始值。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject = <span class="keyword">new</span> BehaviorSubject(<span class="string">'Hello World'</span>);</span><br><span class="line">subject.subscribe((value) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Subscription got '</span>, value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Subscription got Hello World</span></span><br><span class="line">subject.next(<span class="string">'Hello Taiwan'</span>)</span><br><span class="line"><span class="comment">// Subscription got Hello Taiwan</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>Subject</code> 是在 <code>subscribe()</code> 之後，若將來的資料有變動，會得到通知並新資料。</li>
<li><code>BehaviorSubject</code> 是在 <code>subscribe()</code> 時，就能得到資料，因此可設定初始值。</li>
</ul>
<p>因為希望能自己手動更新 state，且有初始值，所以我們選擇使用 <code>BehaviorSubject</code>，而非 <code>Observable</code> 或 <code>Subject</code>。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getTodos(): Observable&lt;Todo[]&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subject.pluck(<span class="string">'todos'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳 <code>todos[]</code> 給使用端，型別為 <code>Observable&lt;Todo[]&gt;</code>。</p>
<blockquote>
<p>因為 <code>Subject</code> 是一種特殊的 <code>Observable</code>，所以也有 <code>pluck</code> operator，取出 <code>todos</code> 屬性值回傳。</p>
</blockquote>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getLastUpdate(): Observable&lt;<span class="built_in">Date</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subject.pluck(<span class="string">'lastUpdate'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳 <code>lastUpdate</code> 給使用端，型別為 <code>Observable&lt;Date&gt;</code>。</p>
<blockquote>
<p>因為 <code>Subject</code> 是一種特殊的 <code>Observable</code>，所以也有 <code>pluck</code> operator，取出 <code>lastUpdate</code> 屬性值回傳。</p>
</blockquote>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/pluck'</span>;</span><br></pre></td></tr></table></figure>
<p>使用 <code>pluck</code> 時，需單獨 import 進來。</p>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addTodo(title: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">    todos: [...todos, &#123;</span><br><span class="line">      id: todos.length + <span class="number">1</span>,</span><br><span class="line">      title: title</span><br><span class="line">    &#125;],</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增 todo 進 <code>BehaviorSubject</code>。</p>
<p>使用 <code>Subject.getValue()</code> 回傳目前 <code>BehaviorSubject</code> 內的 state。</p>
<p>使用 <code>Subject.next()</code> 寫入新的 state 進 <code>BehaviorSubject</code> 。</p>
<p>21 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br></pre></td></tr></table></figure>
<p><code>Subject.getValue()</code> 會回傳 <code>TodoState</code> 型別</p>
<p><strong>todo-state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>內有 <code>todos</code> 與 <code>lastUpdate</code> 兩個屬性，可使用 TypeScript 2.1 的 object destruction 將物件的屬性直接拆成兩個變數。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;todos, lastUpdate&#125; = <span class="keyword">this</span>.subject.getValue();</span><br></pre></td></tr></table></figure>
<p>因為 <code>lastUpdate</code> 目前用不到，只想取 <code>todos</code> 即可，因此省略成</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br></pre></td></tr></table></figure>
<p>32 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">removeTodo(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.subject.getValue();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.subject.next(&#123;</span><br><span class="line">    todos: todos.filter(todo =&gt; todo.id !== id),</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>從 <code>BehaviorSubject</code> 移除 todo。</p>
<p>34 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clearTodos() &#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = [];</span><br><span class="line">  <span class="keyword">this</span>.updateSubject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>從 <code>BehaviorSubject</code> 移除全部 todo。</p>
<h4 id="TodoState">TodoState</h4><p><strong>todo-state.ts</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/services/todo/todo.service.ts" target="_blank" rel="external">todo-state.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Todo&#125; from <span class="string">'../../models/todo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_TODO_STATE: TodoState = &#123;todos: [], lastUpdate: <span class="literal">null</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>定義 state 型別。</p>
<p>第 3 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>TodoState</code> 與其 field。</p>
<p>其中 <code>todos</code> 為 <code>Todo</code> 型別的陣列。</p>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_TODO_STATE: TodoState = &#123;todos: [], lastUpdate: <span class="literal">null</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>定義 <code>INITIAL_TODO_STATE</code> 常數，為 <code>TodoState</code> 的初始狀態。</p>
<h3 id="Models">Models</h3><h4 id="Todo">Todo</h4><p><strong>todo.ts</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/TodoObservable/blob/master/src/app/models/todo.ts" target="_blank" rel="external">todo.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Todo </span>&#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>Todo</code> 型別。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>對於 component 來說，無論使用了 <code>Ngrx/store</code> 或 Observable Data Service，都是使用 Observable，與 state 的維護方式完全解耦合。</li>
<li>使用了 <code>BehaviorSubject</code> 後，我們能手動透過 <code>next()</code> 維護新的 state，並能通知 component 自動更新，原本跨 component 維護 state 問題將獲得解決。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/TodoObservable" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://forum.angular.tw" target="_blank" rel="external">Angular User Group Taiwan</a>, <a href="https://forum.angular.tw/t/behavior-subject-observable/285" target="_blank" rel="external">請問 Behavior Subject 與 Observable 的差異？</a><br><a href="http://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a>, <a href="http://stackoverflow.com/questions/39494058/angular-2-behavior-subject-vs-observable" target="_blank" rel="external">Angular 2 - Behavior Subject vs Observable?</a><br><a href="https://angular-university.io/" target="_blank" rel="external">Angular University</a>, <a href="http://blog.angular-university.io/how-to-build-angular2-apps-using-rxjs-observable-data-services-pitfalls-to-avoid/" target="_blank" rel="external">How to build Angular apps using Observable Data Services - Pitfalls to avoid</a><br><a href="http://jasonwatmore.com/" target="_blank" rel="external">Jason Watmore</a>, <a href="http://jasonwatmore.com/post/2016/12/01/angular-2-communicating-between-components-with-observable-subject" target="_blank" rel="external">Angular 2 - Communicating Between Components with Observable &amp; Subject</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 RxJS 的 BehaviorSubject]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="RxJS" scheme="http://oomusou.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[迪米特法則]]></title>
    <link href="http://oomusou.io/oop/oop-demeter/"/>
    <id>http://oomusou.io/oop/oop-demeter/</id>
    <published>2017-04-20T12:23:43.000Z</published>
    <updated>2017-04-21T23:12:01.000Z</updated>
    <content type="html"><![CDATA[<p><strong>迪米特法則</strong>也稱為<strong>最小知識原則</strong>，是物件導向 <code>SOLID</code> 原則中的 <code>L</code> 其中之一 <code>LKP</code> ( Least Knowledge Principle)，是 1987 年 Ian Holland 在美國東北大學所提出，此法則應用在其 The Demeter Project 而得名，是物件導的基本原則。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>很多人沒有認清<strong>迪米特法則</strong>的本質，只要看到類似 Clean Code p. 110 書中提到的 <code>Train Wreck</code> 風格的程式碼</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();</span><br></pre></td></tr></table></figure>
<p>就認為違反的迪米特法則，真的是這樣嗎？</p>
<h2 id="定義">定義</h2><hr>
<blockquote>
<p>高階模組不應該知道低階模組的內部如何運作。</p>
<p>低階模組不應該<strong>暴露內部物件</strong>，不應該<strong>暴露實踐細節</strong>，應僅提供方法給高階模組使用。</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>Controller 不應該知道 service 的內部如何運作。</p>
<p>Service 應該將內部所用的其它 service 封裝起來，提供 method 給 controller 使用，而非直接提供內部 service 給 controller 呼叫。</p>
</blockquote>
<h2 id="Train_Wreck">Train Wreck</h2><hr>
<p><strong>SMSService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessage</span><span class="params">()</span>: <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Message'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SMSService</code> 僅有一個 <code>getMessage()</code>。</p>
<p><strong>NotificationService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> SMSService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$smsService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * NotificationService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> SMSService $smsService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(SMSService <span class="variable">$smsService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;smsService = <span class="variable">$smsService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSMSService</span><span class="params">()</span>: <span class="title">SMSService</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;smsService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>NotificationService</code> 相依了 <code>SMSService</code>，直接使用 <code>getSMSService()</code> 將  <code>SMSService</code> 物件傳出去。</p>
<p><strong>PostController</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">NotificationService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">View</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> NotificationService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$notificationService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> NotificationService $notificationService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(NotificationService <span class="variable">$notificationService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;notificationService = <span class="variable">$notificationService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示所有簡訊</span><br><span class="line">     * <span class="doctag">@return</span> View</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">'message'</span>] = <span class="variable">$this</span>-&gt;notificationService-&gt;getSMSService()-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'posts.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為 <code>getSMSService()</code> 傳回  <code>SMSService</code> 物件，導致 controller 必須寫出 <code>Train Wreck</code>：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;notificationService-&gt;getSMSService()-&gt;getMessage();</span><br></pre></td></tr></table></figure>
<p>這種寫法有幾個缺點 :</p>
<ul>
<li><code>PostController</code> 與 <code>NotificationService</code> 內部的 <code>SMSService</code> 強烈耦合，若想要換掉 <code>SMSService</code> 物件，則 <code>PostController</code> 必須跟著修改，也就是<strong>暴露內部物件</strong>。</li>
<li><code>PostController</code> 為了要顯示 message，竟然還必須知道 <code>NotificationService</code> 內部使用了 <code>SMSService</code> 物件，先使用 <code>getSMSService()</code> 才行，也就是<strong>暴露實踐細節</strong>。</li>
<li>違反了物件導向的<strong>封裝</strong>原則，<code>PostController</code> 竟然可以將手伸進去執行 <code>SMSService</code> 的方法。</li>
</ul>
<blockquote>
<p>簡單來說，<strong>迪米特法則</strong>就是物件導向<strong>封裝</strong>特性的具體實現。</p>
</blockquote>
<p>建議將以上程式碼重構成以下寫法</p>
<p><strong>NotificationService</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> SMSService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$smsService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * NotificationService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> SMSService $smsService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(SMSService <span class="variable">$smsService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;smsService = <span class="variable">$smsService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessage</span><span class="params">()</span>: <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;smsService-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>PostController</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">NotificationService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">View</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> NotificationService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$notificationService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> NotificationService $notificationService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(NotificationService <span class="variable">$notificationService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;notificationService = <span class="variable">$notificationService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">'message'</span>] = <span class="variable">$this</span>-&gt;notificationService-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'posts.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重構之後，<code>PostController</code> 不再出現 <code>Train Wreck</code> 。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;notificationService-&gt;getMessage();</span><br></pre></td></tr></table></figure>
<ul>
<li><code>PostController</code> 完全不知道<code>NotificationService</code>的<strong>內部物件</strong>，若想要換掉 <code>SMSService</code> 物件，則 <code>PostController</code> 完全不用修改。</li>
<li><code>PostController</code> 為了要顯示 message，不必再知道<strong>實踐細節</strong>， 直接使用 <code>getMessage()</code> 就可以抓到資料。</li>
<li>符合了物件導向的<strong>封裝</strong>原則，<code>PostController</code> 無法將手伸進去執行 <code>SMSService</code> 的方法。</li>
</ul>
<blockquote>
<p>當 service 直接將內部使用的 service 傳出後，逼 controller 必須先了解其內部實踐細節，使得 controller 與 service 的內部其它 service 強烈耦合，這違反了物件導向<strong>封裝</strong>特性，也違反了<strong>迪米特法則</strong>。</p>
<p>違反<strong>迪米特法則</strong>，通常會寫出 <code>Train Wreck</code> ，因此可使用 <code>Train Wreck</code> 檢查是否違反<strong>迪米特法則</strong>。</p>
</blockquote>
<h2 id="最小知識原則">最小知識原則</h2><hr>
<p>物件導向 <code>SOLID</code> 原則的<strong>最小知識原則</strong> <code>LKP</code> (Least Knowledge Principle)，事實上與<strong>迪米特法則</strong>講的是同一件事情。</p>
<blockquote>
<p>一個物件應該對其他物件有最少的了解。</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>Controller 應該以最簡單的方式使用 service。</p>
</blockquote>
<p>之前的 <code>PostController</code> ，因為違反了<strong>迪米特法則</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;notificationService-&gt;getSMSService()-&gt;getMessage();</span><br></pre></td></tr></table></figure>
<p>因此必須知道<code>NotificationService</code>  與 <code>SMSService</code> 之後才能 <code>getMessage()</code>。</p>
<p>但重構之後</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;notificationService-&gt;getMessage();</span><br></pre></td></tr></table></figure>
<p>只要知道 <code>NotificationService</code> 就可以 <code>getMessage()</code>了。</p>
<blockquote>
<p> 符合<strong>最小知識原則</strong>，自然符合<strong>迪米特法則</strong>。</p>
</blockquote>
<h2 id="再論_Train_Wreck">再論 Train Wreck</h2><hr>
<p>我們知道違法<strong>迪米特法則</strong>會寫出 <code>Train Wreck</code>，但寫出 <code>Train Wreck</code> 一定違反<strong>迪米特法則</strong>嗎？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();</span><br></pre></td></tr></table></figure>
<p>Clean Code p.111 認為，要看 <code>getOptions()</code> 、<code>getScratchDir()</code> 與 <code>getAbolutePath()</code> 回傳的是 object 還是 data structure？</p>
<blockquote>
<p>這裡的 data structure 不是我們在學校念書時所謂的<strong>資料結構</strong>，如 linked list、tree 那些，而是指一個<strong>物件只有資料，沒有任何商業邏輯</strong>。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Student&#10;&#123;&#10;    public $id;&#10;    public $name;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>這種完全用 public field 的物件算 data structure。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> int */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int <span class="variable">$id</span>, string <span class="variable">$name</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;name;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>儘管多了 constructor 與 getter，它還是 data structure，因為沒有任何商業邏輯。</p>
<blockquote>
<p>如果回傳的只是一種無其它行為的 data structure，那它們在本質上必然會揭露內部的結構，所以<strong>迪米特法則</strong>在這種狀況下並不適用。</p>
<p>Clean Code p.111</p>
</blockquote>
<p>如前例回傳  <code>SMSService</code>， 因為包含商業邏輯，所以回傳算是 object，而非 data structure，只要包含商業邏輯，就會<strong>暴露實踐細節</strong>，而導致商業邏輯無法抽換，因此 controller 與 service 就必須解耦合，遵守<strong>迪米特法則</strong>。</p>
<blockquote>
<p><code>Train Wreck</code> 不見得違反<strong>迪米特原則</strong>，要看回傳的是 data structure 還是 object。</p>
</blockquote>
<h2 id="Fluent_Interface">Fluent Interface</h2><p>在 Laravel 的 Eloquent，我們會這樣寫</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flights</span> = Flight::where(<span class="string">'active'</span>, <span class="number">1</span>)</span><br><span class="line">               -&gt;orderBy(<span class="string">'name'</span>, <span class="string">'desc'</span>)</span><br><span class="line">               -&gt;take(<span class="number">10</span>)</span><br><span class="line">               -&gt;get();</span><br></pre></td></tr></table></figure>
<p>這也是 <code>Train Wreck</code>，也違反<strong>迪米特法則</strong>嗎？</p>
<p><code>where()</code>、<code>orderBy()</code> 與 <code>take()</code> 這些，並沒有回傳其內部物件，而是傳回 <code>$this</code>，因此沒有<strong>暴露內部物件</strong>與<strong>暴露實踐細節</strong>的問題，也沒有與<strong>內部物件強烈耦合</strong>問題，因此 fluent interface 並沒有違反<strong>迪米特法則</strong>。</p>
<blockquote>
<p>並不是 <code>Train Wreck</code> 一定違反<strong>迪米特法則</strong>，關鍵在於有沒有<strong>暴露內部物件</strong>與<strong>暴露實踐細節</strong>，而不在於 <code>Train Wreck</code> 。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>違反<strong>迪米特法則</strong>會寫出 <code>Train Wreck</code>，但 <code>Train Wreck</code> 不一定會違反<strong>迪米特法則</strong>。</li>
<li><strong>迪米特法則</strong>重點在於強調物件導向的<strong>封裝</strong>特性，關鍵在於不該<strong>暴露內部物件</strong>，進而<strong>暴露實踐細節</strong>，導致使用端與內部物件強烈耦合而無法抽換商業邏輯。</li>
<li><strong>迪米特法則</strong>要求所有的動作都必須透過物件本身的方法操作，而不能傳出內部物件，讓使用端直接操作內部物件，而不在於是否使用 <code>Train Wreck</code> 。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Robert C. Martin, <a href="https://www.tenlong.com.tw/events/106" target="_blank" rel="external">無瑕的程式碼</a><br>良葛格, <a href="http://www.ithome.com.tw/voice/98670" target="_blank" rel="external">封裝與迪米特法則</a><br>Martin Fowler, <a href="https://www.martinfowler.com/bliki/FluentInterface.html" target="_blank" rel="external">Fluent Interface</a></p>
]]></content>
    <summary type="html">
    <![CDATA[並不是使用 Train Wreck 就違反迪米特法則]]>
    
    </summary>
    
      <category term="OOP" scheme="http://oomusou.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular 也走 Redux 風 (使用 Ngrx)]]></title>
    <link href="http://oomusou.io/angular/angular-ngrx/"/>
    <id>http://oomusou.io/angular/angular-ngrx/</id>
    <published>2017-04-19T12:23:43.000Z</published>
    <updated>2017-04-24T13:41:07.000Z</updated>
    <content type="html"><![CDATA[<p>Redux 起源於 React 社群，算是一種 design pattern，適用於某些情境，也提供一些優點，Angular 也有 Redux 的實作，但 Angular 是否該使用 Redux 呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS 10.12.4<br>Angular CLI 1.0.0<br>Angular 4.0.1<br>ngrx/store 2.2.1</p>
<h2 id="為什麼會有_Redux?">為什麼會有 Redux?</h2><hr>
<p><img src="/images/angular/ngrx/ngrx004.png" alt="ngrx004"></p>
<p>Facebook 由於在界面上有多個 component 都可讀取 message，且又同時從 server 端下載 message，也就是當每個 component 的 message 被讀取後，必須更新 unread message count，但 Facebook 發現 unread message count 總是算不準，有解不完的 bug，因此提出了 Flux 架構。</p>
<p>Redux 靈感來自於 Flux 架構，在 Angular 目前有兩套實作，一套是 <a href="https://github.com/angular-redux/ng-redux" target="_blank" rel="external">Ng-redux</a>，另一套是 <a href="https://github.com/ngrx" target="_blank" rel="external">Ngrx</a>。</p>
<ul>
<li><code>Ng-redux</code> 核心仍使用 Redux，增加對 Angular 的支援。</li>
<li><code>Ngrx</code> 只有概念使用 Redux，核心完全使用 RxJS 重新實作。</li>
</ul>
<p>目前 <code>Ngrx</code> 在 GitHub 的星星數遠高於 <code>Ng-redux</code>，本文將以 <code>Ngrx</code> 討論。</p>
<blockquote>
<p>Flux 是一種概念，Redux 是 Flux 在 React 的實作，Ngrx 則是 Redux 在 Angular 的實作。</p>
</blockquote>
<h2 id="Ngrx_簡介">Ngrx 簡介</h2><hr>
<p><img src="/images/angular/ngrx/ngrx005.png" alt="ngrx005"></p>
<p>將 component 與 service 的資料統一放到 store，當 store 的資料有更新，將會自動更新到有 subscribe 的 component 與 service。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>本圖片來自於 <a href="https://github.com/btroncone" target="_blank" rel="external">Brain Troncone</a>, <a href="https://gist.github.com/btroncone/a6e4347326749f938510" target="_blank" rel="external">A Comprehensive Introduction to @ngrx/store</a></span></span></span></p>
<p><img src="/images/angular/ngrx/ngrx006.gif" alt="ngrx006"></p>
<p>在使用 <code>Ngrx</code> 之前，首先必須了解一些專有名詞。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>本圖片來自於 <a href="https://www.pluralsight.com/guides/front-end-javascript/building-a-redux-application-with-angular-2-part-1" target="_blank" rel="external">Building a Redux application with Anguar 2 - Part 1</a></span></span></span></p>
<h3 id="View">View</h3><p>相當於 component，主要在顯示使用者介面。</p>
<h3 id="Action">Action</h3><p>當 component 有任何 event 時，會對 <code>Ngrx</code> 發出 action。</p>
<h3 id="Middleware">Middleware</h3><p>負責存取對 server 端的 API，本文暫不討論此部分。</p>
<h3 id="Dispatcher">Dispatcher</h3><p>負責接受 component 傳來的 action，並將 action 傳給 reducer。</p>
<h3 id="Store">Store</h3><p>可是為 <code>Ngrx</code> 在瀏覽器端的資料庫，各 component 的資料都可統一放在這裡。</p>
<h3 id="Reducer">Reducer</h3><p>根據 dispatcher 傳來的 action，決定該如何寫入 state。</p>
<p>當 state 有改變時，將通知有 subscribe 該 state 的 component 自動更新。</p>
<h3 id="State">State</h3><p>存放在 store 內的資料。</p>
<p><img src="/images/angular/ngrx/ngrx007.svg" alt="ngrx007"></p>
<p>有些東西 <code>Ngrx</code> 已經幫我們做了，真的要我們自己實作只有 4 個部份，且資料流為單向的 : Component -&gt; Action -&gt; Reducer -&gt; Store -&gt; Component。</p>
<h2 id="安裝_Ngrx">安裝 Ngrx</h2><hr>
<h3 id="Installation">Installation</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ <span class="built_in">npm</span> install <span class="property">@ngrx</span>/core <span class="property">@ngrx</span>/store --save</span><br></pre></td></tr></table></figure>
<p>安裝 <code>@ngrx/core</code> 與 <code>@ngrx/store</code>。</p>
<h2 id="Counter_範例">Counter 範例</h2><hr>
<p><img src="/images/angular/ngrx/ngrx002.png" alt="ngrx002"></p>
<h3 id="AppModule">AppModule</h3><p><strong>app.module.ts</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StoreModule&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;counterReducer&#125; from <span class="string">'./stores/counter/counter.reducer'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    StoreModule.provideStore(counterReducer),</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule,</span><br><span class="line">  HttpModule,</span><br><span class="line">  StoreModule.provideStore(counterReducer),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>須在 <code>AppModule</code> import <code>StoreModule.provideStore()</code>，並傳入 reducer。</p>
<h3 id="Component">Component</h3><p><strong>app.component.html</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Counter: &#123;&#123; counter | async &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"increment()"</span>&gt;</span>Increment<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"decrement()"</span>&gt;</span>Decrement<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"reset()"</span>&gt;</span>Reset<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>counter</code> 加上 <code>async</code> pipe，由 <code>async</code> 負責將 <code>ngrx/store</code> 來 subscribe 與 unsubscribe。</p>
<p>但這有個限制，<code>counter</code> 必須為宣告成 <code>Observable&lt;number&gt;</code> 型別。</p>
<p>Component 包含了 <code>Increment</code>、<code>Decrement</code> 與 <code>Reset</code> 3 個 button。</p>
<p><strong>app.component.ts</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/app.component.ts" target="_blank" rel="external">app.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;CounterState&#125; from <span class="string">'./stores/counter/counter.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Store&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;DECREMENT, INCREMENT, RESET&#125; from <span class="string">'./stores/counter/counter.action'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  counter: Observable&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;CounterState&gt;) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.counter = store.select(<span class="string">'counter'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment() &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: INCREMENT,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        value: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement() &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: DECREMENT,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        value: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reset() &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;<span class="keyword">type</span>: RESET&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;CounterState&gt;) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.counter = store.select(<span class="string">'counter'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>ngrx/store</code>  的 <code>Store</code> 依賴注入，它是個泛型，需傳入自己的 state 型別。</p>
<p>由 store 的 <code>select()</code> 傳回 store 內的 <code>counter</code> field，此為 <code>Observable</code> 型別。</p>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter: Observable&lt;<span class="built_in">number</span>&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>counter</code> 為 <code>Observable</code> 型別，其泛型為 <code>number</code>。</p>
<blockquote>
<p>為什麼 <code>counter</code> 不是 <code>number</code> 型別，而是 <code>Observable&lt;number&gt;</code> 呢？因為 <code>store.select()</code> 回傳的型別為 <code>Observable</code>。</p>
</blockquote>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">increment() &#123;</span><br><span class="line">  <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: INCREMENT,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      value: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Increment</code> button 的 event handler。</p>
<p>將 action 透過 store 的 <code>dispatch()</code> 傳入，action 物件包含 <code>type</code> 與 <code>payload</code> 兩個 field，<code>type</code> 為欲 dispatch 的 action，而 <code>payload</code> 則為欲透過 dispatch 傳入的資料，可自行決定其物件屬性，之後會由 reducer 根據 action 寫入 state。 </p>
<blockquote>
<p>可將 dispatch 概念上想成類似 event 的 emit。</p>
</blockquote>
<h3 id="Action-1">Action</h3><p><strong>counter.action.ts</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/stores/counter/counter.action.ts" target="_blank" rel="external">counter.action.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RESET     = <span class="string">'RESET'</span>;</span><br></pre></td></tr></table></figure>
<p>定義 action 常數，將來 component 可用 <code>dispatch()</code> 發布 action， 然後 reducer 再根據 action 做 <code>switch</code> 判斷寫入 state。</p>
<h3 id="Reducer-1">Reducer</h3><p><strong>counter.reducer.ts</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/stores/counter/counter.reducer.ts" target="_blank" rel="external">counter.reducer.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;CounterState, INITIAL_COUNTER_STATE&#125; from <span class="string">'./counter.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;DECREMENT, INCREMENT, RESET&#125; from <span class="string">'./counter.action'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Action&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">counterReducer</span>(<span class="params">state: CounterState = INITIAL_COUNTER_STATE, action: Action</span>): <span class="title">CounterState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="keyword">type</span>, payload&#125; = action;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> INCREMENT:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, counter: state.counter + payload.value&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> DECREMENT:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, counter: state.counter - payload.value&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> RESET:</span><br><span class="line">      <span class="keyword">return</span> INITIAL_COUNTER_STATE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一個 state 會搭配一個 reducer，由 reducer 寫入 state。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">counterReducer</span>(<span class="params">state: CounterState = INITIAL_COUNTER_STATE, action: Action</span>): <span class="title">CounterState</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p>Reducer 會以 state 與 action 為參數，並寫入 state。</p>
<ul>
<li>第 1 個參數為 <code>state</code>，可設定 reducer 一開始的預設 state，傳入目前的 state。</li>
<li>第 2 個參數為 <code>action</code>，傳入目前的 action。</li>
</ul>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="keyword">type</span>, payload&#125; = action;</span><br></pre></td></tr></table></figure>
<p>根據 ngrx 的 <code>dispatcher.d.ts</code> ，<code>Action</code> 的定義如下 :</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Action </span>&#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  payload?: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Action</code> 的兩個 field 為 <code>type</code> 與 <code>payload</code>，因此我們可以使用 TypeScript 2.1 的 object destruction 將 <code>action</code> 分解成 <code>type</code> 與 <code>payload</code> 兩個變數。</p>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> INCREMENT:</span><br><span class="line">    <span class="keyword">return</span> &#123;...state, counter: state.counter + payload.value&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> DECREMENT:</span><br><span class="line">    <span class="keyword">return</span> &#123;...state, counter: state.counter - payload.value&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> RESET:</span><br><span class="line">    <span class="keyword">return</span> INITIAL_COUNTER_STATE;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>典型的 Redux 風格，在 reducer 內會根據 action 的 type 做 <code>switch case</code>。</p>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;...state, counter: state.counter + payload.value&#125;;</span><br></pre></td></tr></table></figure>
<p>Redux 為 FP (Functional Programming) 思維的產物，要求 reducer 必須為 pure function，因此必須回傳一個新的 state，而不是去修改原本的 state。</p>
<p>TypeScript 2.1 提供了 object spread，<code>…state</code> 會將整個物件的屬性加以展開，之後的參數為要修改的屬性值，<code>{}</code> 會將物件屬性加以合併，並回傳新的物件。</p>
<blockquote>
<p>傳統會使用 <code>Object.assign()</code> 的寫法，但寫法並不直覺，且因為其第二個參數需傳入物件，還必須多一層 <code>{}</code>，建議使用 object spread 寫法可讀性較高。</p>
</blockquote>
<h3 id="Store-1">Store</h3><p><strong>counter.store.ts</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/CounterNgrx/blob/master/src/app/stores/counter/counter.store.ts" target="_blank" rel="external">counter.store.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> CounterState </span>&#123;</span><br><span class="line">  counter: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_COUNTER_STATE: CounterState = &#123;</span><br><span class="line">  counter: <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 store 定義自己的 state 型別。</p>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> CounterState </span>&#123;</span><br><span class="line">  counter: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>CounterState</code> 與其 field。</p>
<blockquote>
<p>使用 interface 即可，因為 state 型別主要是給 TypeScript 編譯檢查與 IntelliSense 使用，而 JavaScript 沒有 interface，故編譯後 interface 會消失，若 state 使用 class，將來編譯後還會存在 class。</p>
</blockquote>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_COUNTER_STATE: CounterState = &#123;</span><br><span class="line">  counter: <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>定義 <code>INITIAL_COUNTER_STATE</code> 常數，為 <code>CounterState</code> 的初始狀態。</p>
<h2 id="Todo_範例">Todo 範例</h2><hr>
<p><img src="/images/angular/ngrx/ngrx003.png" alt="ngrx003"></p>
<h3 id="AppModule-1">AppModule</h3><p><strong>app.module.ts</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoListComponent&#125; from <span class="string">'./todo-list/todo-list.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoDashboardComponent&#125; from <span class="string">'./todo-dashboard/todo-dashboard.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StoreModule&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;todoReducer&#125; from <span class="string">'./stores/todo/todo.reducer'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    TodoListComponent,</span><br><span class="line">    TodoDashboardComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    StoreModule.provideStore(todoReducer)</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule,</span><br><span class="line">  HttpModule,</span><br><span class="line">  StoreModule.provideStore(todoReducer)</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>須在 <code>AppModule</code> import <code>StoreModule.provideStore()</code>，並傳入 reducer。</p>
<h3 id="Component-1">Component</h3><h4 id="AppComponent">AppComponent</h4><p><strong>app.component.html</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/app.component.html" target="_blank" rel="external">app.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Todo<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">app-todo-list</span>&gt;</span><span class="tag">&lt;/<span class="title">app-todo-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">app-todo-dashboard</span>&gt;</span><span class="tag">&lt;/<span class="title">app-todo-dashboard</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>包含了 <code>TodoList</code> 與 <code>TodoDashboard</code> 兩個 component。</p>
<h4 id="TodoList">TodoList</h4><p><strong>todo-list.component.html</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/todo-list/todo-list.component.html" target="_blank" rel="external">todo-list.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> #<span class="attribute">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"addTodo(title)"</span>&gt;</span>Add<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> *<span class="attribute">ngFor</span>=<span class="value">"let todo of todos | async"</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"removeTodo(todo)"</span>&gt;</span>Remove<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>todos</code> 為 <code>Observable</code>，需加上 <code>async</code> 將 <code>ngrx/store</code> 來 subscribe 與 unsubscribe。</p>
<p>但這有個限制，<code>todos</code> 必須為宣告成 <code>Observable&lt;Todo[]&gt;</code> 型別。</p>
<p>Component 包含了<code>Add</code> 與 <code>Remove</code> 2 個 button。</p>
<p><strong>todo-list.component.ts</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/todo-list/todo-list.component.ts" target="_blank" rel="external">todo-list.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo, TodoState&#125; from <span class="string">'../stores/todo/todo.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Store&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ADD_TODO, REMOVE_TODO&#125; from <span class="string">'../stores/todo/todo.action'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo-list'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo-list.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListComponent &#123;</span><br><span class="line">  todos: Observable&lt;Todo[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;TodoState&gt;) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = store.select(<span class="string">'todos'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo(input: HTMLInputElement) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!input.value) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: ADD_TODO,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        title: input.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    input.value = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(todo: Todo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: REMOVE_TODO,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        id: todo.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;TodoState&gt;) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = store.select(<span class="string">'todos'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>ngrx/store</code>  的 <code>Store</code> 依賴注入，它是個泛型，需傳入自己的 state 型別。</p>
<p>由 store 的 <code>select()</code> 傳回 store 內的 <code>todos</code> field，此為 <code>Observable</code> 型別。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todos: Observable&lt;Todo[]&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>todos</code> 為 <code>Observable</code> 型別，其泛型為 <code>Todo[]</code>。</p>
<blockquote>
<p>為什麼 <code>todos</code> 不是 <code>Todo[]</code> 型別，而是 <code>Observable&lt;Todo[]&gt;</code> 呢？因為 <code>store.select()</code> 回傳的型別為 <code>Observable</code>。</p>
</blockquote>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">addTodo(input: HTMLInputElement) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!input.value) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: ADD_TODO,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      title: input.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  input.value = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Add</code> button 的 event handler。</p>
<p>將 <code>ADD_TODO</code> action 透過 store 的 <code>dispatch()</code> 傳入，action 物件包含 <code>type</code> 與 <code>payload</code> 兩個 field，<code>type</code> 為 <code>ADD_TODO</code> action，而 <code>payload</code> 則為欲新增資料的 <code>title</code>，之後會由 reducer 根據目前 action 寫入 state。 </p>
<p>33 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">removeTodo(todo: Todo) &#123;</span><br><span class="line">  <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: REMOVE_TODO,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      id: todo.id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Remove</code> button 的 event handler。</p>
<p>將 <code>REMOVE_TODO</code> action 透過 store 的 <code>dispatch()</code> 傳入，action 物件包含 <code>type</code> 與 <code>payload</code> 兩個 field，<code>type</code> 為 <code>REMOVE_TODO</code> action，而 <code>payload</code> 則為欲移除資料的 <code>id</code>，之後會由 reducer 根據目前 action 寫入 state。 </p>
<h4 id="TodoDashboard">TodoDashboard</h4><p><strong>todo-dashboard.component.html</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/todo-dashboard/todo-dashboard.component.html" target="_blank" rel="external">todo-dashboard.component.html</a></span></span></span></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  Last Update: &#123;&#123; lastUpdate | async | date:'mediumTime'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  Total items: &#123;&#123; (todos | async).length &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"clearTodos()"</span>&gt;</span>Clear All<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>顯示最後更新時間與 <code>Todo</code> 筆數。</p>
<p><code>lastUpdate</code> 與 <code>todos</code> 均為 <code>Observable</code>，需加上 <code>async</code> 將 <code>ngrx/store</code> 來 subscribe 與 unsubscribe。</p>
<p>Component 包含了 <code>Clear All</code> button。</p>
<p><strong>todo-dashboard.component.ts</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/todo-dashboard/todo-dashboard.component.ts" target="_blank" rel="external">todo-dashboard.component.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo, TodoState&#125; from <span class="string">'../stores/todo/todo.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Store&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;CLEAR_TODOS&#125; from <span class="string">'../stores/todo/todo.action'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo-dashboard'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo-dashboard.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoDashboardComponent &#123;</span><br><span class="line">  todos: Observable&lt;Todo[]&gt;;</span><br><span class="line">  lastUpdate: Observable&lt;<span class="built_in">Date</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;TodoState&gt;) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = store.select(<span class="string">'todos'</span>);</span><br><span class="line">    <span class="keyword">this</span>.lastUpdate = store.select(<span class="string">'lastUpdate'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clearTodos() &#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: CLEAR_TODOS</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private store: Store&lt;TodoState&gt;) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = store.select(<span class="string">'todos'</span>);</span><br><span class="line">  <span class="keyword">this</span>.lastUpdate = store.select(<span class="string">'lastUpdate'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將  <code>ngrx/store</code>  的 <code>Store</code> 依賴注入，它是個泛型，需傳入自己的 state 型別。</p>
<p>由 store 的 <code>select()</code> 傳回 store 內的 <code>todos</code> 與 <code>lastUpdate</code>field，皆為 <code>Observable</code> 型別。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">todos: Observable&lt;Todo[]&gt;;</span><br><span class="line">lastUpdate: Observable&lt;<span class="built_in">Date</span>&gt;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>todos</code> 為 <code>Observable</code> 型別，其泛型為 <code>Todo[]</code>。</p>
<p>宣告 <code>lastUpdate</code> 為 <code>Observable</code> 型別，其泛型為 <code>Date</code>。</p>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clearTodos() &#123;</span><br><span class="line">  <span class="keyword">this</span>.store.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: CLEAR_TODOS</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Clear All</code> button 的 event handler。</p>
<p>將 <code>CLEAR_TODOS</code> action 透過 store 的 <code>dispatch()</code> 傳入，action 物件包含 <code>type</code> 與 <code>payload</code> 兩個 field，<code>type</code> 為 <code>REMOVE_TODO</code> action，因為沒有要傳入的資料，因此不需 <code>payload</code>，之後會由 reducer 根據目前 action 寫入 state。 。 </p>
<h3 id="Action-2">Action</h3><p><strong>todo.action.ts</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/stores/todo/todo.action.ts" target="_blank" rel="external">todo.action.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TODO    = <span class="string">'ADD_TODO'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REMOVE_TODO = <span class="string">'REMOVE_TODO'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CLEAR_TODOS = <span class="string">'CLEAR_TODOS'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DEFAULT     = <span class="string">'DEFAULT'</span>;</span><br></pre></td></tr></table></figure>
<p>在 action 定義自己的 action 常數。</p>
<p>實務上 action 常數會以 component 或 service 所要 dispatch 的 event 設計，以本範例而言，在 component 有 <code>Add</code>、<code>Remove</code> 與 <code>Delete All</code>  3 個 button，因此會配合 3 個 button 設計出 <code>ADD_TODO</code> 、<code>REMOVE_TODO</code> 與 <code>CLEAR_TODOS</code> 3 個 action。</p>
<h3 id="Reducer-2">Reducer</h3><p><strong>todo.reducer.ts</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/stores/todo/todo.reducer.ts" target="_blank" rel="external">todo.reducer.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;INITIAL_TODO_STATE, TodoState&#125; from <span class="string">'./todo.store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ADD_TODO, CLEAR_TODOS, REMOVE_TODO&#125; from <span class="string">'./todo.action'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Action&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">todoReducer</span>(<span class="params">state: TodoState = INITIAL_TODO_STATE, action: Action</span>): <span class="title">TodoState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="keyword">type</span>, payload&#125; = action;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        todos: [...state.todos, &#123;</span><br><span class="line">          id: state.todos.length + <span class="number">1</span>,</span><br><span class="line">          title: payload.title</span><br><span class="line">        &#125;],</span><br><span class="line">        lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> REMOVE_TODO:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        todos: state.todos.filter(todo =&gt; todo.id !== payload.id),</span><br><span class="line">        lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> CLEAR_TODOS:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        todos: [],</span><br><span class="line">        lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 reducer 定義自己的寫入 state 邏輯。</p>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> ADD_TODO:</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    todos: [...state.todos, &#123;</span><br><span class="line">      id: state.todos.length + <span class="number">1</span>,</span><br><span class="line">      title: payload.title</span><br><span class="line">    &#125;],</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>使用 object spread 方式傳回新物件。</p>
<p><code>todos</code> 為陣列，而 <code>ADD_TODO</code> 主要的目的就是將新的物件加到 <code>todos</code> 陣列，因此可使用 array spread 方式傳回新的陣列。</p>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> REMOVE_TODO:</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    todos: state.todos.filter(todo =&gt; todo.id !== payload.id),</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>一樣使用 object spread 方式傳回新的物件。</p>
<p><code>REMOVE_TODO</code> 主要為移除 <code>payload.id</code> 的 <code>Todo</code>，但因為 <code>Ngrx</code> 要求為 pure function，因此改用 <code>filter()</code> 過濾 <code>todo.id</code> 不為 <code>payload.id</code>。</p>
<p>26 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> CLEAR_TODOS:</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    todos: [],</span><br><span class="line">    lastUpdate: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>一樣使用 object spread 方式傳回新的物件。</p>
<p><code>CLEAR_TODOS</code> 為清除所有 <code>Todo</code>，但因為 <code>Ngrx</code> 要求為 pure function，因此傳回 <code>[]</code> 空陣列。</p>
<h3 id="Store-2">Store</h3><p><strong>todo.store.ts</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/stores/todo/todo.store.ts" target="_blank" rel="external">todo.store.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Todo </span>&#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_TODO_STATE: TodoState = &#123;</span><br><span class="line">  todos: [],</span><br><span class="line">  lastUpdate: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 store 定義自己的 state 型別。</p>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> TodoState </span>&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  lastUpdate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>TodoState</code> 與其 field。</p>
<p>其中 <code>todos</code> 為 <code>Todo</code> 型別的陣列。</p>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> Todo </span>&#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>Todo</code> 型別。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INITIAL_TODO_STATE: TodoState = &#123;</span><br><span class="line">  todos: [],</span><br><span class="line">  lastUpdate: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>定義 <code>INITIAL_TODO_STATE</code> 常數，為 <code>TodoState</code> 的初始狀態。</p>
<h2 id="Ngrx_DevTools">Ngrx DevTools</h2><hr>
<p><code>Ngrx</code> 所提供的開發者工具，讓我們可以針對 <code>Ngrx</code> 的 store 與 action 做 debug。</p>
<h3 id="Installation-1">Installation</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ npm <span class="operator"><span class="keyword">install</span> @ngrx/<span class="keyword">store</span>-devtools <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<p>安裝 <code>@ngrx/store-devtools</code>。</p>
<p><img src="/images/angular/ngrx/ngrx000.png" alt="ngrx000"></p>
<p>安裝 <code>Redux DevTools</code> 到 Chrome。</p>
<h3 id="AppModule-2">AppModule</h3><p><strong>app.module.ts</strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/TodoNgrx/blob/master/src/app/app.module.ts" target="_blank" rel="external">app.module.ts</a></span></span></span></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserModule&#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NgModule&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HttpModule&#125; from <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoListComponent&#125; from <span class="string">'./todo-list/todo-list.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoDashboardComponent&#125; from <span class="string">'./todo-dashboard/todo-dashboard.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StoreModule&#125; from <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;todoReducer&#125; from <span class="string">'./stores/todo/todo.reducer'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StoreDevtoolsModule&#125; from <span class="string">'@ngrx/store-devtools'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    TodoListComponent,</span><br><span class="line">    TodoDashboardComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    StoreModule.provideStore(todoReducer),</span><br><span class="line">    StoreDevtoolsModule.instrumentOnlyWithExtension(),</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  FormsModule,</span><br><span class="line">  HttpModule,</span><br><span class="line">  StoreModule.provideStore(todoReducer),</span><br><span class="line">  StoreDevtoolsModule.instrumentOnlyWithExtension(),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>須在 <code>AppModule</code> import <code>StoreDevtoolsModule.instrumentOnlyWithExtension()</code>。</p>
<p><img src="/images/angular/ngrx/ngrx001.png" alt="ngrx001"></p>
<p>可在 Chrome 使用 Ngrx DevTools 對 state 與 action 做 debug，並可使用 time-traveling 的方式一個 action 一個 action 的執行。</p>
<h2 id="Ngrx_的特色">Ngrx 的特色</h2><hr>
<ul>
<li>將所有 state 統一放在單一 store 內。</li>
<li>所有寫入 state 的邏輯都統一放在單一 reducer 內，且必須為 pure function。</li>
<li>Component 不寫邏輯，只負責 dispatch 適當的 action。</li>
<li>當 state 變更，component 會自動更新。</li>
</ul>
<h2 id="Ngrx_的優點">Ngrx 的優點</h2><hr>
<ul>
<li>單向的資料流程，程式碼較易理解與 debug。</li>
<li>將 state 的變更邏輯統一寫在 reducer 內，而非分散在各 component，較容易維護。</li>
<li>由於 reducer 為 pure function，很容易寫單元測試。</li>
<li>資料邏輯與 framework 解耦合，action/reducer/store 獨立於 framework，將來要移植到其他 framework 很方便。</li>
<li>有 Ngrx DevTools 方便做 time-traveling 方式的 debug。</li>
<li>可將使用者行為錄製下來。</li>
</ul>
<h2 id="Ngrx_的缺點">Ngrx 的缺點</h2><hr>
<ul>
<li>為 FP 思維產物，若只熟 OOP 較難以掌握。</li>
<li>維護的人須事先有 Redux 觀念，否則無法維護，學習門檻較高。</li>
<li>Reducer 需寫成 pure function，難度較高。</li>
<li>有點 over design 味道。</li>
</ul>
<h2 id="什麼時候該使用_Ngrx?">什麼時候該使用 Ngrx?</h2><hr>
<ul>
<li>當多個 component 需使用共用資料，且各 component 的操作會影像其他 component 的結果。</li>
<li>資料可能同時被多個 component 修改，甚至同時被 server API 修改。</li>
<li>需要實作 undo/redo 功能。</li>
</ul>
<blockquote>
<p>You’ll know when you need Flux. If you aren’t sure if you need it, you don’t need it.</p>
</blockquote>
<p>套句 <a href="https://github.com/petehunt/react-howto" target="_blank" rel="external">React How-to</a> 的名言，當你需要 <code>Ngrx</code> 的時候再使用 <code>Ngrx</code>，若你不確定，就不要使用，避免因誤用而 over design。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>Ngrx</code> 有一點 over design，相當於 command 模式與 Observable 模式的合體。</li>
<li><code>Ngrx</code> 就跟所有的 design pattern 一樣，都會使設計複雜化，並不是所有應用都適合使用 <code>Ngrx</code>，必須看需求用在刀口上。</li>
<li><code>RxJS</code> 出來之後，<code>Ngrx</code> 的寫法重要性不若以往，簡單的應用直接在 service 使用 <code>RxJS</code> 即可。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a> 上找到 <a href="https://github.com/oomusou/CounterNgrx" target="_blank" rel="external">CounterNgrx</a> 與 <a href="https://github.com/oomusou/TodoNgrx" target="_blank" rel="external">TodoNgrx</a>。</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/ngrx" target="_blank" rel="external">ngrx</a>, <a href="https://github.com/ngrx/store" target="_blank" rel="external">ngrx/store</a><br><a href="http://programmingwithmosh.com" target="_blank" rel="external">Mosh Hamedani</a>, <a href="https://www.udemy.com/angular2-advanced/" target="_blank" rel="external">Build Enterprise Applications with Angular 2</a><br><a href="https://angular-university.io" target="_blank" rel="external">Angular University</a>, <a href="http://blog.angular-university.io/angular-ngrx-store-and-effects-crash-course/" target="_blank" rel="external">Angular Ngrx Crash Course Part 1: Ngrx Store - Learn It By Understanding The Original Facebook Counter Bug</a><br><a href="https://angular-university.io" target="_blank" rel="external">Angular University</a>, <a href="http://blog.angular-university.io/angular-2-redux-ngrx-rxjs/" target="_blank" rel="external">Angular Service Layers: Redux, RxJs and Ngrx Store - When to Use a Store And Why ?</a><br><a href="https://www.pluralsight.com/guides/author/Kaizeras" target="_blank" rel="external">Hristo Georgiev</a>, <a href="https://www.pluralsight.com/guides/front-end-javascript/building-a-redux-application-with-angular-2-part-1" target="_blank" rel="external">Building a Redux application with Anguar 2 - Part 1</a><br><a href="https://www.pluralsight.com/guides/author/Kaizeras" target="_blank" rel="external">Hristo Georgiev</a>, <a href="https://www.pluralsight.com/guides/front-end-javascript/building-a-redux-application-with-angular-2-part-2" target="_blank" rel="external">Building a Redux application with Anguar 2 - Part 2</a><br><a href="https://github.com/btroncone" target="_blank" rel="external">Brain Troncone</a>, <a href="https://gist.github.com/btroncone/a6e4347326749f938510" target="_blank" rel="external">A Comprehensive Introduction to @ngrx/store</a><br><a href="https://egghead.io" target="_blank" rel="external">egghead.io</a>, <a href="https://egghead.io/courses/building-a-time-machine-with-angular-2-and-rxjs" target="_blank" rel="external">Build Redux Style Application with Angular 2, RxJS, and ngrx/store</a><br><a href="https://hackernoon.com/@MichalMajewski" target="_blank" rel="external">Michal Majewski</a>, <a href="https://hackernoon.com/@MichalMajewski" target="_blank" rel="external">What I have learned using ngrx/Redux with Angular 2</a><br><a href="https://medium.com/@dan_abramov" target="_blank" rel="external">Dan Abramov</a>, <a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367" target="_blank" rel="external">You Might Not Need Redux</a><br><a href="https://github.com/petehunt" target="_blank" rel="external">Pete Hunt</a>,  <a href="https://github.com/petehunt/react-howto" target="_blank" rel="external">React How-to</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Redux 風格開發 Angular]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="RxJS" scheme="http://oomusou.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 繪製 UML?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-uml/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-uml/</id>
    <published>2017-04-18T12:23:43.000Z</published>
    <updated>2017-04-18T14:10:42.000Z</updated>
    <content type="html"><![CDATA[<p>PlantUML 讓我們可以使用文字檔的方式描述 UML，且可以直接在 PhpStorm 內使用，非常方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS 10.12.4<br>PhpStorm 2017.1.2<br>Graphviz 2.40.1<br>PlantUML Integration Plugin 2.5.0</p>
<h2 id="安裝_Graphviz">安裝 Graphviz</h2><hr>
<p>我們必須透過 Graphviz 顯示 <code>puml</code> 格式檔案，因此必須先安裝 Graphviz。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update</span><br><span class="line">$ <span class="keyword">brew </span>install graphviz</span><br></pre></td></tr></table></figure>
<p>透過 Homebrew 安裝 Graphviz。</p>
<h2 id="安裝_PlantUML_Plugin">安裝 PlantUML Plugin</h2><hr>
<p>為了在 PhpStorm 直接編輯與預覽 <code>puml</code> 格式檔案，須先安裝 PlantUML Integration Plugin。</p>
<p><img src="/images/phpstorm/phpstorm-uml/uml01.png" alt="uml01"></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Plugins</em></strong></p>
<p>按 <code>Browse repositories…</code>。</p>
<p><img src="/images/phpstorm/phpstorm-uml/uml02.png" alt="uml02"></p>
<p>輸入 <code>PlantUML</code>，選擇 <code>PlantUML Integration</code>，按 <code>Install</code> 安裝。</p>
<p><img src="/images/phpstorm/phpstorm-uml/uml03.png" alt="uml03"></p>
<p>安裝完需按 <code>Restart PhpStorm</code> 重新啟動。</p>
<p><img src="/images/phpstorm/phpstorm-uml/uml04.png" alt="uml04"></p>
<p>按熱鍵 Command + N，若出現 <code>UML Activity</code> 、<code>UML Class</code> 等圖，則表示安裝成功。</p>
<p><img src="/images/phpstorm/phpstorm-uml/uml05.png" alt="uml05"></p>
<p>能在 PhpStorm 順利顯示 <code>puml</code> 格式的 UML 檔案。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 <code>puml</code> 格式基本上為文字檔，所以可以透過 Git 做版控管理。</li>
<li>為了 code review 方便，可將 <code>puml</code> 格式匯出成 <code>svg</code> 格式，放大縮小不會失真。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://plantuml.com" target="_blank" rel="external">PlantUML in a nutshell</a><br><a href="http://macappstore.org/graphviz/" target="_blank" rel="external">Install graphviz on Mac OSX</a></p>
]]></content>
    <summary type="html">
    <![CDATA[以類似 Markdown 的方式繪製 UML]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="UML" scheme="http://oomusou.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Refactoring (重構)?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactoring/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactoring/</id>
    <published>2017-04-17T12:23:43.000Z</published>
    <updated>2017-04-18T15:39:52.000Z</updated>
    <content type="html"><![CDATA[<p>PhpStorm 最強悍的就是 Refactoring，這也是文字編輯器無法達到的，善用 Refactoring 將可大幅增加 code review 之後重構 PHP 的速度。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PhpStorm 2017.1.2</p>
<h2 id="Extraction">Extraction</h2><hr>
<h3 id="Extract_Method">Extract Method</h3><p>最需要被重構的程式碼，首推 <code>Long Method</code>，一旦一個 method 的程式碼的行數過多，就會難以閱讀、難以維護、難以單元測試、也違反物件導向的<code>單一職責原則</code>，建議使用 <code>Extract Method</code> 將 <code>Long Method</code> 拆成多個小 method。</p>
<p>何時該使用 <code>Extract Method</code> 呢？根據 Martin Fowler 在<code>重構</code>這本書的建議 :</p>
<blockquote>
<ol>
<li>當一段程式碼需要被重複使用時，就該獨立抽成 method。</li>
<li>當一段程式碼需要寫註解才能讓人理解時，就該獨立抽成 method。</li>
<li>當一段程式碼抽成 method 後，<strong>語意</strong>更清楚 ，就該獨立抽成 method。</li>
</ol>
</blockquote>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractMethod</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printOwing</span><span class="params">(string <span class="variable">$name</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;printBanner();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print details</span></span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"name:  "</span> . <span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"amount "</span> . <span class="variable">$this</span>-&gt;getOutstanding());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractMethod</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printOwing</span><span class="params">(string <span class="variable">$name</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;printBanner();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print details</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;printDetails(<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $name</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">printDetails</span><span class="params">(string <span class="variable">$name</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"name:  "</span> . <span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"amount "</span> . <span class="variable">$this</span>-&gt;getOutstanding());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor000.png" alt="refactor000"></p>
<p>選擇要重構成 method 的程式碼，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Method</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor001.png" alt="refactor001"></p>
<p>輸入欲建立的 method 名稱，並選擇 <code>public</code>、<code>protected</code> 或 <code>private</code>，一般來說重構出來的 method 選 <code>private</code> 。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor002.png" alt="refactor002"></p>
<p>PhpStorm 會自動幫我們將所選的程式碼抽成 <code>printDetails()</code>，連參數、型別與 PHPDoc 都會幫我們加上。</p>
<h3 id="Extract_Field">Extract Field</h3><p>實務上有些在 method 內的 local 變數，原本只有單一 method 使用，若有其他 method 也使用相同變數時，建議使用 <code>Extract Field</code> 將此變數重構成 field。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractField</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print1</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">'Hello World'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print2</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">'Hello World'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractField</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">'Hello World'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print1</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print2</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor003.png" alt="refactor003"></p>
<p>將滑鼠游標放在變數名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Field</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor004.png" alt="refactor004"></p>
<p>可選擇要將<strong>單一變數</strong>或者將<strong>整個 expression</strong> 重構成 field，這裡選擇 <code>$name</code> 即可，因為我們想將 <code>$name</code> 變數重構成 field。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor005.png" alt="refactor005"></p>
<p>輸入欲建立的 field 名稱，並選擇 <code>public</code>、<code>protected</code> 或 <code>private</code>，為了實現物件導向資料<strong>封裝</strong>，建議重構出來的 field 選 <code>private</code> 。</p>
<p>在 <code>Initialize in</code> 選擇 field 初始化的方式，若是 PHP 原生型別，如 <code>int</code> / <code>string</code>，則選擇 <code>Field declaration</code>，若是物件，則必須選擇 <code>Class constructor</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor006.png" alt="refactor006"></p>
<p>PhpStorm 會自動幫我們將變數重構成 field，並將原來引用變數之處重構成引用 field。</p>
<h3 id="Extract_Variable">Extract Variable</h3><p>實務上有些原本在 method 內的固定值，想要變成變數，建議使用 <code>Extract Variable</code> 將固定值重構成變數。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractVariable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Calculate</span><span class="params">(int <span class="variable">$i</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="variable">$i</span> = <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">DisplaySum</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$this</span>-&gt;Calculate(<span class="variable">$a</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"The final result is "</span> . <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractVariable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Calculate</span><span class="params">(int <span class="variable">$i</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="variable">$c</span>) &#123;</span><br><span class="line">            <span class="variable">$i</span> = <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">DisplaySum</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$this</span>-&gt;Calculate(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"The final result is "</span> . <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor013.png" alt="refactor013"></p>
<p>將滑鼠游標放在 <code>10</code> 上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Variable</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor014.png" alt="refactor014"></p>
<p>可以將<strong>固定值</strong>或 <strong>expression</strong> 抽成變數，這裡選擇 <code>10</code> 將固定值重構成變數。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor015.png" alt="refactor015"></p>
<p>輸入欲建立的變數名稱。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor016.png" alt="refactor016"></p>
<p>PhpStorm 會自動幫我們加上重構過的變數，並將原有的值都以變數取代。</p>
<h3 id="Extract_Parameter">Extract Parameter</h3><p>實務上有些原本在 method 內的固定值，想要變成參數可由外部帶入，建議使用 <code>Extract Parameter</code> 將固定值重構成參數。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractParameter</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Calculate</span><span class="params">(int <span class="variable">$i</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="variable">$i</span> = <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">DisplaySum</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$this</span>-&gt;Calculate(<span class="variable">$a</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"The final result is "</span> . <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractParameter</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Calculate</span><span class="params">(int <span class="variable">$i</span>, int <span class="variable">$c</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="variable">$c</span>) &#123;</span><br><span class="line">            <span class="variable">$i</span> = <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">DisplaySum</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$this</span>-&gt;Calculate(<span class="variable">$a</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"The final result is "</span> . <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor010.png" alt="refactor010"></p>
<p>將滑鼠游標放在固定值上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Parameter</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor011.png" alt="refactor011"></p>
<p>輸入欲建立的 parameter 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor012.png" alt="refactor012"></p>
<p>PhpStorm 會自動幫我們重構成參數，將原有的固定值都以參數取代，並在 method 呼叫 的地方重構成原來的值。</p>
<h3 id="Extract_Constant">Extract Constant</h3><p>實務上不建議將<strong>字串</strong>或<strong>數字</strong>直接 hardcode 在程式碼中 :</p>
<ul>
<li>日後難以閱讀與維護</li>
<li>若字串與數字需要變動，需要改很多地方</li>
</ul>
<p>建議將這類 Magic Number 使用 <code>Extract Constant</code> 重構成 constant。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractConstant</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">potentialEnergy</span><span class="params">(int <span class="variable">$mass</span>, int <span class="variable">$height</span>)</span>: <span class="title">float</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$mass</span> * <span class="variable">$height</span> * <span class="number">9.81</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractConstant</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> GRAVITATIONAL_CONSTANT = <span class="number">9.81</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">potentialEnergy</span><span class="params">(int <span class="variable">$mass</span>, int <span class="variable">$height</span>)</span>: <span class="title">float</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$mass</span> * <span class="variable">$height</span> * <span class="keyword">self</span>::GRAVITATIONAL_CONSTANT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor007.png" alt="refactor007"></p>
<p>將滑鼠游標放在數值上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Constant</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor008.png" alt="refactor008"></p>
<p>輸入欲建立的 constant 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor009.png" alt="refactor009"></p>
<p>PhpStorm 會自動幫我們重構成 <code>const</code>，並將原有的值都以 constant 取代。</p>
<h3 id="Extract_Interface">Extract Interface</h3><p>為了讓 class 實現不同的角色，且讓 class 與 class 之間的耦合降低，讓物件不要直接相依某個物件，而是僅相依於 interface，建議使用 <code>Extract Interface</code> 重構出 interface。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Print Message'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span><span class="params">()</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Send Message'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> SMSService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$SMSService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> SMSService $SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(SMSService <span class="variable">$SMSService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;SMSService = <span class="variable">$SMSService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;SMSService-&gt;sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sendable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span><span class="params">()</span>: <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Printable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSService</span> <span class="keyword">implements</span> <span class="title">Sendable</span>, <span class="title">Printable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Print Message'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span><span class="params">()</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Send Message'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Sendable */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$SMSService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> ISendable $SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Sendable <span class="variable">$SMSService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;SMSService = <span class="variable">$SMSService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showPost</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;SMSService-&gt;sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor017.png" alt="refactor017"></p>
<p>欲從 class 抽出 interface，將滑鼠游標放在 class 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Interface</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor018.png" alt="refactor018"></p>
<p>輸入欲建立的 interface 名稱，選擇欲抽出的 method。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor019.png" alt="refactor019"></p>
<p>PhpStorm 會幫我們重構出 interface。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor020.png" alt="refactor020"></p>
<p>原 class 也會自動加上 <code>implements</code> interface。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor021.png" alt="refactor021"></p>
<p>繼續抽出第 2 個 interface，將滑鼠游標放在 class 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Interface</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor022.png" alt="refactor022"></p>
<p>輸入欲建立的 interface 名稱，選擇欲抽出的 method。</p>
<p>並勾選 <code>Replace class references with interface where possible</code>，PhpStorm 會自動搜尋所有使用 class 的地方，以 interface 取代。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor023.png" alt="refactor023"></p>
<p>重構前的預覽，PhpStorm 告知即將對以下檔案進行重構，按 <code>Do Refactor</code> 繼續。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor024.png" alt="refactor024"></p>
<p>PhpStorm 會幫我們產生 interface。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor025.png" alt="refactor025"></p>
<p>原 class 也會自動加上 <code>implements</code> interface。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor026.png" alt="refactor026"></p>
<p>原來 constructor 的參數型別，也從 class 變成 interface，field 的型別宣告也變成了 interface。</p>
<p>如此 <code>PostService</code> 與 <code>SMSService</code> 的相依僅限於 <code>Sendable</code> interface，大大降低 <code>PostService</code> 與 <code>SMService</code> 之間的耦合，也就是<code>設計模式</code>一書所說的：</p>
<blockquote>
<p>根據 interface 寫程式，不要根據 class 寫程式</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>若要降低物件之間的耦合程度，讓物件之間方便抽換與組合，就讓物件與物件之間僅相依於 interface，而不要直接相依於 class</p>
</blockquote>
<p>更白話就是</p>
<blockquote>
<p>黑貓白貓，能抓老鼠的就是好貓</p>
<p>黑貓白貓就是 class，能抓老鼠就是 interface</p>
</blockquote>
<h2 id="Rename">Rename</h2><hr>
<p>實務上常會遇到 variable 名稱、method 名稱、class 名稱…的命名不當，導致程式碼難以閱讀，在 code review 後須加以重構，PhpStorm 支援 <code>Rename Class</code>、 <code>Rename Method</code>, <code>Rename Field</code>、 <code>Rename Variable</code>、 <code>Rename Parameter</code>，以下僅對最常用的 <code>Rename Variable</code> 、<code>Rename Method</code>、<code>Change Signature</code>、<code>Rename Class</code> 加以介紹。</p>
<h3 id="Rename_Variable">Rename Variable</h3><p>當遇到命名不當的變數名稱時，建議使用 <code>Rename Variable</code> 將變數名稱加以重構。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenameVariable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="string">'Sam'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$address</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenameVariable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">'Sam'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor027.png" alt="refactor027"></p>
<p>將滑鼠游標放在變數名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Rename</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor028.png" alt="refactor028"></p>
<p>從 <code>$address</code> 重構成 <code>$name</code> 之後，PhpStorm 會將所有原本使用 <code>$address</code> 變數的地方都重構成使用 <code>$name</code>。</p>
<h3 id="Rename_Method">Rename Method</h3><p>當遇到命名不當的 method 名稱時，建議使用 <code>Rename Method</code> 將 method 名稱加以重構。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenameMethod</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;printOutline();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printOutline</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Detail'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenameMethod</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;printDetail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printDetail</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Detail'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor029.png" alt="refactor029"></p>
<p>將滑鼠游標放在 method 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Rename</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor030.png" alt="refactor030"></p>
<p>將 <code>printOutline()</code> 重構成 <code>printDetail()</code>，PhpStorm 會即時顯示修改後的結果。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor031.png" alt="refactor031"></p>
<p>重構前的預覽，PhpStorm 告知即將對以下檔案進行重構，按 <code>Do Refactor</code> 繼續。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor032.png" alt="refactor032"></p>
<p>除了原來的 method 名稱變更外，PhpStorm 會將所有引用該 method 的地方加以修改。</p>
<h3 id="Change_Signature">Change Signature</h3><p>實務上因需求改變，可能必須增加參數，也可能必須刪除參數，建議使用 <code>Change Signature</code> 來重構參數。</p>
<h4 id="Change_Method_Signature">Change Method Signature</h4><p>修改一般 method 的參數。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeSignature</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$this</span>-&gt;sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(int <span class="variable">$num1</span>, int <span class="variable">$num2</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$num1</span> + <span class="variable">$num2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeSignature</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$this</span>-&gt;sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(int <span class="variable">$num1</span>, int <span class="variable">$num2</span>, int <span class="variable">$num3</span> = <span class="number">0</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$num1</span> + <span class="variable">$num2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor033.png" alt="refactor033"></p>
<p>將滑鼠游標放在 method 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Change Signature</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor034.png" alt="refactor034"></p>
<p>按 <code>+</code> 新增參數，Default 則為其他 mehtod 呼叫參數時，所提供的預設值。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor035.png" alt="refactor035"></p>
<p> PhpStorm 除了在 method 增加參數外，其他呼叫 method 的地方都會加上預設值。</p>
<h4 id="Change_Constructor_Signature">Change Constructor Signature</h4><p>修改 constructor 的參數。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeConstructorSignature</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PostService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * ChangeConstructorSignature constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostService $postService</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostService <span class="variable">$postService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postService = <span class="variable">$postService</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeConstructorSignature</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PostService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postService</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> SMSService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$SMSService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * ChangeConstructorSignature constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostService $postService</span><br><span class="line">     * <span class="doctag">@param</span> SMSService $SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostService <span class="variable">$postService</span>, SMSService <span class="variable">$SMSService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postService = <span class="variable">$postService</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;SMSService = <span class="variable">$SMSService</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor036.png" alt="refactor036"></p>
<p>將滑鼠游標放在 <code>__construct()</code> 上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Change Signature</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor037.png" alt="refactor037"></p>
<p>若是對 constructor 使用 <code>Change Signature</code>，會出現 <code>Create and initialize class properties</code>，預設會打勾。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor038.png" alt="refactor038"></p>
<p>PhpStorm 除了自動幫我們在 constructor 加上參數外，還會對 field 加以初始化。</p>
<h3 id="Rename_Class">Rename Class</h3><p>當遇到命名不當的 class 名稱時，建議使用 <code>Rename Class</code> 將 class 名稱加以重構。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenameClass</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Hello World'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> RenameClass();</span><br><span class="line"><span class="variable">$obj</span>-&gt;print();</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRenameClass</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Hello World'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> MyRenameClass();</span><br><span class="line"><span class="variable">$obj</span>-&gt;print();</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor039.png" alt="refactor039"></p>
<p>將滑鼠游標放在 class 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Rename</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor040.png" alt="refactor040"></p>
<p>直接修改 class 名稱，PhpStorm 會即時顯示修改後的結果。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor041.png" alt="refactor041"></p>
<p>重構前的預覽，PhpStorm 告知即將對以下檔案進行重構，按 <code>OK</code> 繼續。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor042.png" alt="refactor042"></p>
<p>class 名稱重構後，PhpStorm 將所有原本 new 之處都改用新的 class 名稱。</p>
<p>除此之外，檔案名稱也從重構成新的名稱。</p>
<h2 id="Movement">Movement</h2><hr>
<h3 id="Move_Static_Member">Move Static Member</h3><p>實務上因需求改變，原本的 field 與 method 可能不再適合目前的 class，建議使用 <code>Move Static Member</code> 搬移 field 與 method 到適當的 class。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveStaticMember1</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="variable">$var1</span> = <span class="string">'Hello World'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="keyword">self</span>::<span class="variable">$var1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveStaticMember2</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveStaticMember0</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        MoveStaticMember1::print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveStaticMember1</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveStaticMember2</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="variable">$var1</span> = <span class="string">'Hello World'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="keyword">self</span>::<span class="variable">$var1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveStaticMember0</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        MoveStaticMember2::print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor043.png" alt="refactor043"></p>
<p>將滑鼠游標放在 <code>$var1</code> 或 <code>print()</code> 上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Move</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor044.png" alt="refactor044"></p>
<p>選擇要重構的 member，並指定要重構到的新 class。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor045.png" alt="refactor045"></p>
<p> 原 class 已經無任何 member。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor046.png" alt="refactor046"></p>
<p>所有的 member 都已經重構到新 class。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor047.png" alt="refactor047"></p>
<p>原來使用舊 class 之處已經重構成新 class。</p>
<blockquote>
<p>目前 PhpStorm 僅支援對 static member 的重構到其他 class，對於一般的 field / const / method，則必須手動重構。</p>
</blockquote>
<h3 id="Move_Class">Move Class</h3><p>實務上因需求改變，原本在某一 namespace 下的 class，可能不再適合目前的 namespace，建議使用 <code>Move Class</code> 將 class 重構到適當的 namespace。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Sendable */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$SMSService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Sendable $SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Sendable <span class="variable">$SMSService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;SMSService = <span class="variable">$SMSService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;SMSService-&gt;sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">SMSService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceIntegrationTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PostService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$SMSService</span> = <span class="keyword">new</span> SMSService();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = <span class="keyword">new</span> PostService(<span class="variable">$SMSService</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示正確簡訊<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;showMessage();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="string">'Send Message'</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Sendable */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$SMSService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Sendable $SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Sendable <span class="variable">$SMSService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;SMSService = <span class="variable">$SMSService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;SMSService-&gt;sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">SMSService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceIntegrationTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PostService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$SMSService</span> = <span class="keyword">new</span> SMSService();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = <span class="keyword">new</span> PostService(<span class="variable">$SMSService</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示正確簡訊<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;showMessage();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="string">'Send Message'</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor048.png" alt="refactor048"></p>
<p>將滑鼠游標放在 class 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Move</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor049.png" alt="refactor049"></p>
<p>在 <code>Move Class PostService to namespace</code> 填入新的 namespace 完整路徑，可以是既有 namespace，也可以是新的 namespace，若是新的 namespace，PhpStorm 會自動幫你建立目錄。</p>
<p>要勾選 <code>Search in comments and strings</code> 與 <code>Search for text occurences</code>，PhpStorm 會一併將有用到此 class 的地方一起修改。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor050.png" alt="refactor050"></p>
<p>重構前的預覽，PhpStorm 告知即將對以下檔案進行重構，按 <code>Do Refactor</code> 繼續。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor051.png" alt="refactor051"></p>
<p>PhpStorm 會幫我們建立新的子目錄，且 namespace 也做了修改。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor052.png" alt="refactor052"></p>
<p>使用到 class 的地方，<code>use</code> 也跟會自動修改。</p>
<h3 id="Move_Namespace">Move Namespace</h3><p>實務上因需求改變，原本在某一 namespace 下的所有 class，可能不再適合目前的 namespace，建議使用 <code>Move Namespace</code> 將所有 class 重構到適當的 namespace。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSService</span> <span class="keyword">implements</span> <span class="title">Printable</span>, <span class="title">Sendable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Print Message'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span><span class="params">()</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Send Message'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Libs</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSService</span> <span class="keyword">implements</span> <span class="title">Printable</span>, <span class="title">Sendable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Print Message'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span><span class="params">()</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Send Message'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor053.png" alt="refactor053"></p>
<p>將滑鼠游標放在 namespace 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Move</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor054.png" alt="refactor054"></p>
<p>在 <code>Move Namespace</code> 填入新的 namespace 完整路徑，可以是既有 namespace，也可以是新的 namespace，若是新的 namespace，PhpStorm 會自動幫你建立目錄。</p>
<p>要勾選 <code>Search in comments and strings</code> 與 <code>Search for text occurences</code>，PhpStorm 會一併將有用到原 namespace 的地方一起修改。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor055.png" alt="refactor055"></p>
<p>PhpStorm 會列出所有即將重構的 class。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor056.png" alt="refactor056"></p>
<p>重構前的預覽，PhpStorm 告知即將對以下檔案進行重構，按 <code>Do Refactor</code> 繼續。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor057.png" alt="refactor057"></p>
<p>PhpStorm 幫我們將原來 <code>Services</code> 目錄下的 class 都重構到 <code>Libs</code> 目錄，且 namespace 也做了修改。</p>
<h2 id="Inheritance">Inheritance</h2><hr>
<h3 id="Pull_Members_Up">Pull Members Up</h3><p>若 class 之間有共用的邏輯，建議使用 <code>Pull Members Up</code> 重構到 super class，讓邏輯不再重複，符合 DRY 原則。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Sendable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span> <span class="keyword">extends</span> <span class="title">AbstractPostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Sendable */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$SMSService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Sendable $SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Sendable <span class="variable">$SMSService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;SMSService = <span class="variable">$SMSService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;SMSService-&gt;sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Sendable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span> <span class="keyword">extends</span> <span class="title">AbstractPostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Sendable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractPostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Sendable */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$SMSService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Sendable $SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Sendable <span class="variable">$SMSService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;SMSService = <span class="variable">$SMSService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;SMSService-&gt;sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor058.png" alt="refactor058"></p>
<p>將滑鼠游標放在欲 pull up 的 member 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Pull Members Up</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor059.png" alt="refactor059"></p>
<p>選擇要 pull up 的 member，若是 <code>private</code>，PhpStorm 會升格成 <code>protected</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor060.png" alt="refactor060"></p>
<p>原 class 內所有 member 都被 pull up。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor061.png" alt="refactor061"></p>
<p>所有 member 都 pull up 到 super class 了。</p>
<h3 id="Push_Members_Down">Push Members Down</h3><p>實務上因需求改變，原本共用的邏輯可能不再共用，建議使用 <code>Pull Members Down</code> 將 member 從 super class 降回 sub class。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Sendable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractPostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Sendable */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$SMSService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Sendable $SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Sendable <span class="variable">$SMSService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;SMSService = <span class="variable">$SMSService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;SMSService-&gt;sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Sendable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span> <span class="keyword">extends</span> <span class="title">AbstractPostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Sendable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span> <span class="keyword">extends</span> <span class="title">AbstractPostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Sendable */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$SMSService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Sendable $SMSService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Sendable <span class="variable">$SMSService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;SMSService = <span class="variable">$SMSService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showMessage</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;SMSService-&gt;sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Sendable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractPostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor062.png" alt="refactor062"></p>
<p>將滑鼠游標放在欲 pull down 的 member 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Push Members Down</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor063.png" alt="refactor063"></p>
<p>選擇要 push down 的 member，若是 <code>__</code> 的 magic method，PhpStorm 會提出警告。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor064.png" alt="refactor064"></p>
<p>原 class 內所有 member 都被 push down。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor065.png" alt="refactor065"></p>
<p>所有 member 都 push down 到 sub class 了。</p>
<h2 id="Others">Others</h2><hr>
<h3 id="If_Else_to_Switch">If Else to Switch</h3><p>由於 <code>if else</code> 較容易思考，所以很容易寫出 <code>if else</code> 的程式碼，PhpStorm 可以幫我們重構成可讀性較高的 <code>switch</code>。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $type</span><br><span class="line">     * <span class="doctag">@param</span> int $days</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span><span class="params">(string <span class="variable">$type</span>, int <span class="variable">$days</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$type</span> == <span class="string">'Regular'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable">$days</span> - <span class="number">7</span>) * <span class="number">10</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$type</span> == <span class="string">'NewRelease'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable">$days</span> - <span class="number">3</span>) * <span class="number">30</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$type</span> == <span class="string">'Children'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable">$days</span> - <span class="number">7</span>) * <span class="number">10</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (<span class="variable">$days</span> - <span class="number">7</span>) * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $type</span><br><span class="line">     * <span class="doctag">@param</span> int $days</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span><span class="params">(string <span class="variable">$type</span>, int <span class="variable">$days</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Regular'</span>:</span><br><span class="line">                <span class="keyword">return</span> (<span class="variable">$days</span> - <span class="number">7</span>) * <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'NewRelease'</span>:</span><br><span class="line">                <span class="keyword">return</span> (<span class="variable">$days</span> - <span class="number">3</span>) * <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Children'</span>:</span><br><span class="line">                <span class="keyword">return</span> (<span class="variable">$days</span> - <span class="number">7</span>) * <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> (<span class="variable">$days</span> - <span class="number">7</span>) * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor066.png" alt="refactor066"></p>
<p>將滑鼠游標放在 <code>if</code> 之前，按熱鍵選擇 <code>Replace if with switch</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Alt + enter</p>
<p><strong>macOS</strong> : option + return</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor067.png" alt="refactor067"></p>
<p>PhpStorm 會幫我們將 <code>if else</code> 重構成 <code>switch</code>。</p>
<h3 id="Inline">Inline</h3><p>大部分的狀況， <code>Extract Variable</code> 會讓程式碼可讀性更高，也更好維護，若發現因此造成程式碼更為複雜，或者多餘，建議使用 <code>Inline Variable</code> 重構刪除變數。</p>
<p><strong><em>重構前</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InlineVariable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">'Sam'</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>重構後</em></strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InlineVariable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'Sam'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor068.png" alt="refactor068"></p>
<p>將滑鼠游標放在欲 inline 的 variable 名稱上，按熱鍵跳出 <code>Refactor This</code>  選單，選擇 <code>Inline</code>。</p>
<blockquote>
<p><strong>Windows</strong> : Ctrl + Alt + Shift + T</p>
<p><strong>macOS</strong> : control + T</p>
</blockquote>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor069.png" alt="refactor069"></p>
<p>PhpStorm 會列出它所找到該 inline 的變數個數，按 <code>OK</code> 繼續。</p>
<p><img src="/images/phpstorm/phpstorm-refactoring/refactor070.png" alt="refactor070"></p>
<p>PhpStorm 會自動幫我們將變數刪除，直接使用值取代變數。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>所有的重構動作若不滿意，都可以取消重構，此外，每個重構步驟都該搭配 git 做版控，確保重構失敗後可以正確還原。</li>
<li>認為重構很花時間的人，是因為沒有善用工具，若能善用 PhpStorm 的重構功能，就能大幅節省重構所花的時間，減少技術債。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52Refactoring_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Martin Fowler, <a href="https://www.tenlong.com.tw/items/9861547533?item_id=45657" target="_blank" rel="external">Refactoring: Improving The Design of Existing Code</a><br>GoF, <a href="https://www.tenlong.com.tw/products/9789572054116" target="_blank" rel="external">Design Pattern</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 PhpStorm 強大的重構功能]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 Angular 的 DI 與 Provider]]></title>
    <link href="http://oomusou.io/angular/angular-di/"/>
    <id>http://oomusou.io/angular/angular-di/</id>
    <published>2017-03-08T12:23:43.000Z</published>
    <updated>2017-04-16T12:02:30.000Z</updated>
    <content type="html"><![CDATA[<p>DI (Dependency Injection) 對於很多前端開發者是個陌生的名詞，畢竟以前沒有 DI 時，也沒有什麼東西寫不出來，為什麼 Angular 要全面提供 DI 與 provider 呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular CLI 1.0.0-rc.0<br>Angular 2.4.9<br>WebStorm 2016.3.3</p>
<h2 id="為什麼需要_DI?">為什麼需要 DI?</h2><hr>
<p>我們先來建立兩個簡單的 service，來觀察有用 DI 與沒用 DI 的差異。</p>
<h3 id="無_DI_版本">無 DI 版本</h3><p><strong>NotificationService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;SMSService&#125; from <span class="string">'./sms.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NotificationService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> smsService : SMSService;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.smsService = <span class="keyword">new</span> SMSService();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showMessage() : <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.smsService.sendMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>NotificationService</code> 的 <code>showMessage()</code> 需要使用到 <code>SMSService</code> 的 <code>sendMessage()</code>，因此我們在 constructor 內建立 <code>SMSService</code>  。</p>
<p><strong>SMSService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SMSService &#123;</span><br><span class="line">  </span><br><span class="line">  printMessage(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Print Message'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sendMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Send Message'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SMSService</code> 提供了 <code>printMessage()</code> 與 <code>sendMessage()</code> 兩個 method。</p>
<p><strong>AppComponent</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NotificationService&#125; from <span class="string">'./notification.service'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> notificationService: NotificationService;</span><br><span class="line"></span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.notificationService = <span class="keyword">new</span> NotificationService();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="keyword">this</span>.notificationService.showMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>AppComponent</code> 因為需要用到 <code>NotificationService</code>，所以也在 constructor 內建立 <code>notificationService</code> 。</p>
<p>目前看起來沒什麼問題，程式也能正常執行，大家之前也都是這樣寫程式。</p>
<p>但是在 <code>NotificationService</code> 使用 new <code>SMSService()</code> 這種寫法有 3 大缺點：<strong><em>Brittle、Inflexible、Hard to Test</em></strong>。</p>
<h4 id="Brittle">Brittle</h4><p>由於我們是在 <code>NotificationService</code> 內去 new <code>SMSService</code>，而 new 是透過 constructor 去建立 service，若今天 <code>SMSService</code> 的 constructor 參數增加或減少，勢必 <code>NotificationService</code> 也必須跟著修改，如 <code>this.smsService = new SMSService(theNewParameter)</code>。</p>
<blockquote>
<p>一個 service 會因為其相依 service 的 constructor 參數修改，而連帶必須跟著修改，因此說其為 <strong><em>Brittle</em></strong>。</p>
</blockquote>
<h4 id="Inflexible">Inflexible</h4><p>由於我們是在 <code>NotificationService</code> 內去 new <code>SMSService</code>，若將來需求改變，想要更換其他簡訊服務商，如原本為 AWS 簡訊服務，想換成 Azure 簡訊服務，目前無法做到，因為 <code>NotificationService</code> 已經直接在內部與 <code>SMSService</code> 耦合在一起，無法由外部更換。</p>
<blockquote>
<p>在一個  service 內直接去 new 其他 service，就類似主機板將記憶體直接焊死 on board，想要擴充都無法擴充，因此說其為 <strong><em>Inflexible</em></strong>。</p>
</blockquote>
<h4 id="Hard_to_Test">Hard to Test</h4><p>當我們想對 <code>NotificationService</code> 做單元測試時，由於 <code>NotificationService</code> 相依了 <code>SMSService</code>，因此 <code>SMSService</code> 的所有行為將會影響 <code>NotificationService</code>，如 <code>SMSServce</code> 可能是非同步，可能每次都要收費，但這些都不是我們對 <code>NotificationService</code> 單元測試想做的，因此希望對 <code>SMSService</code> 加以隔離，單純測試 <code>NotificationService</code> 的行為。</p>
<p>儘管我們建立了 <code>假SMSService</code> 想取代 <code>真SMSService</code>，但因為 <code>SMSService</code> 被 <code>NotificationService</code> 建立在內部，我們沒有任何管道由外部將 <code>假SMSService</code>傳入，進而取代<code>真SMSService</code>。</p>
<blockquote>
<p>在一個 service 內直接去 new 其他 service，在單元測試時會無法在外部以假 service 取代，因此說其為 <strong>Hard to Test</strong>。</p>
</blockquote>
<h3 id="有_DI_版本">有 DI 版本</h3><p>我們該怎麼使 <code>NotificationService</code>  <strong><em>Robut、Flexible 與 Testable</em></strong> 呢?</p>
<p>其實很簡單，只要將 new 改成用 contructor 參數，這就是 DI 了。</p>
<p><strong>NotificationService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;SMSService&#125; from <span class="string">'./sms.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NotificationService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> smsService : SMSService;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(smsService: SMSService) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.smsService = smsService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showMessage() : <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.smsService.sendMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(smsService: SMSService) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.smsService = smsService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>從 new 改成用 constructor 參數。</p>
<p><strong>AppComponent</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NotificationService&#125; from <span class="string">'./notification.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;SMSService&#125; from <span class="string">'./sms.service'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> notificationService: notificationService;</span><br><span class="line"></span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.notificationService = <span class="keyword">new</span> NotificationService(<span class="keyword">new</span> SMSService)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="keyword">this</span>.notificationService.showMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.notificationService = <span class="keyword">new</span> NotificationService(<span class="keyword">new</span> SMSService)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為改用 DI，所以在 new <code>NotificationService</code> 時，就必須將 <code>SMSService</code> 帶入。</p>
<p>當使用 DI 後，<code>NotificationService</code> 與 <code>SMSService</code> 就解耦合了，<code>NotificatonService</code> 不再由內部直接相依 service，而是由外部傳入的 service 所決定，這就是物件導向的<strong>依賴反轉原則</strong>。</p>
<blockquote>
<p>依賴反轉原則</p>
<p>抽象不要依賴細節，細節要依賴抽象。</p>
<p>高階模組不應該依賴低階模組，低階模組應該由高階模組決定其依賴。</p>
</blockquote>
<p> <code>NotificationService</code> 使用 DI 這種寫法有 3 大優點：<strong><em>Robust、Flexible、Testable</em></strong>。</p>
<h4 id="Robust">Robust</h4><p>若 <code>SMSService</code> 的 constructor 新增了參數 :</p>
<p><strong>SMSService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SMSService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> logService: LogService;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(logService: LogService) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.logService = logService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>constructor 增加了 <code>logService: LogService</code> 參數。</p>
<p><strong>AppComponent</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> notificatoinService: NotificationService;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.notificationService = <span class="keyword">new</span> NotificationService(<span class="keyword">new</span> SMSService(<span class="keyword">new</span> LogService));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>AppComponent</code> 新增加 <code>new LogService</code>。</p>
<p>但 <code>NotificationService</code> 完全不用做任何修改。</p>
<blockquote>
<p>將來無論相依 service 怎麼修改，原 service 都不用修改，因此說其為 <strong><em>Robust</em></strong>。</p>
</blockquote>
<h4 id="Flexible">Flexible</h4><p>若原本為 AWS 簡訊服務，想要換成 Azure 簡訊服務。</p>
<p><strong>AzureSMSService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> AzureSMSService extends SMSService &#123;</span><br><span class="line"></span><br><span class="line">  printMessage(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Print Azure Message'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sendMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Send Azure Message'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增 <code>AzureSMSService</code> ，並繼承原本的 <code>SMSService</code>，將原本的 <code>printMessage()</code> 與 <code>sendMessage()</code> 加以 override，換成 Azure 簡訊服務。</p>
<p><strong>AppComponent</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> notificationService: NotificationService;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.notificationService = <span class="keyword">new</span> NotificationService(<span class="keyword">new</span> AzureSMSService);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為物件導向的<strong>里氏替換原則</strong>，<code>AppComponent</code> 可改注入 <code>AzureSMSService</code>。</p>
<blockquote>
<p>里氏替換原則</p>
<p>所有的父類別都可以由子類別代替，但子類別不一定能用父類別代替。</p>
</blockquote>
<p><code>NotificationService</code> 完全不用做任何修改。</p>
<blockquote>
<p>將來若有新的需求，只要新增 service 注入即可，原 service 都不用修改，因此說其為 <strong><em>Flexible</em></strong>。</p>
</blockquote>
<h4 id="Testable">Testable</h4><p>若要對 <code>NotificationService</code> 做單元測試，可建立 <code>假SMSService</code> 取代原來的 <code>真SMSService</code>。</p>
<p><strong>MockSMSService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MockSMSService extends SMSService &#123;</span><br><span class="line"></span><br><span class="line">  printMessage(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Print Mock Message'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sendMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Send Mock Message'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立假的 <code>MockSMSService</code>，並繼承原本的 <code>SMSService</code>，將原本的 <code>printMessage()</code> 與 <code>sendMessage()</code> 加以 override，換成假的簡訊服務。</p>
<p><strong>NotificationServiceTest</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notificationService = <span class="keyword">new</span> NotificationService(<span class="keyword">new</span> MockSMSService());</span><br></pre></td></tr></table></figure>
<p>單元測試時，因為物件導向的<strong>里氏替換原則</strong>，可使用 <code>MockService</code> 取代 <code>SMSService</code>，如此就能完全隔離原本 <code>SMSService</code> ，只執行我們的假 service 的所有功能。</p>
<!-- > Service 單元測試時，只要建立其相依 service 的假 service，並加以注入，如此就能隔離原本相依 service 的所有功能，因此說其為 ***Testable***。 -->
<p>我們來對 DI 做個小結：</p>
<blockquote>
<p>DI 只是一種程式風格，將相依 service 改由外界透過 constructor 注入，而不是在內部自己用 new 產生。</p>
</blockquote>
<h2 id="DI_搭配工廠模式">DI 搭配工廠模式</h2><hr>
<p>DI 雖然對於 service 本身很有利，無論其相依的 service 如何修改，service 本身都不用修改，也就是物件導向的<strong>開放封閉原則</strong>，但對於使用 service 的 component 卻很辛苦。</p>
<blockquote>
<p>開放封閉原則</p>
<p>對於擴展是開放的，對於修改是封閉的。</p>
</blockquote>
<p><strong>AppComponent</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> notificationService: NotificationService;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.notificationService = <span class="keyword">new</span> NotificationService(<span class="keyword">new</span> SMSService);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Component 必須使用 <code>new NotificationService(new SMSService)</code> 這種巢狀的方式才能建立 service，若相依 service 有更多層，則 new 的寫法將相當恐怖。</p>
<p>若使用設計模式的<strong>工廠模式</strong>，則狀況會好一點。</p>
<p><strong>NotificationServiceFactory</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;NotificationService&#125; from <span class="string">'./notification.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;SMSService&#125; from <span class="string">'./sms.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NotificationServiceFactory &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> createNotificationService(): NotificationService &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> NotificationService(<span class="keyword">this</span>.createSMSService());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> createSMSService() : SMSService &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SMSService();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立一個 <code>NotificationServiceFactory</code> 專門負責建立各 service。</p>
<p>其中包含建立 <code>NotificationService</code> 與 <code>SMSService</code>。</p>
<p><strong>AppComponent</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NotificationService&#125; from <span class="string">'./notification.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NotificationServiceFactory&#125; from <span class="string">'./notification-service-factory'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> notificationService: NotificationService;</span><br><span class="line"></span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.notificationService = NotificationServiceFactory.createNotificationService();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="keyword">this</span>.notificationService.showMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>() </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.notificationService = NotificationServiceFactory.createNotificationService();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本在 constructor 的 new 改用 <code>NotificationServiceFactory</code> 取代，最少日後其他 component 要建立 <code>NotificationService</code> 都改用 <code>NotificationServiceFactory</code>，不用再使用很恐怖的 new。</p>
<p>不過這樣寫法仍有些問題。</p>
<p>若 <code>NotificationService</code> 所依賴的 service 很多，或依賴的 service 層數很深，則 <code>NotificationServiceFactory</code> 的 method 數量將會爆炸，所以<strong>工廠模式</strong>也不算最完美的解決方案。</p>
<h2 id="Angular_的_Provider">Angular 的 Provider</h2><hr>
<p>Angular 提供了 Provider，專門替我們建立 service，解決<strong>工廠模式</strong>所面臨的問題。</p>
<p><img src="/images/angular/di/di000.svg" alt="di000"></p>
<p>原本我們透過<strong>工廠模式</strong>自己處理 service 的 DI，現在改由 Angular 的 provider 接手。</p>
<p><strong>NotificationService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;SMSService&#125; from <span class="string">'./sms.service'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NotificationService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private smsService: SMSService) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showMessage() : <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.smsService.sendMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>NotificationService</code> 相依 <code>SMSService</code> 部分，全部改由 DI 方式。</li>
<li>加上  <code>@Injectable()</code> decorator，記得要加上 <code>()</code>。</li>
<li>加上 <code>import {Injectable} from &#39;@angular/core&#39;;</code></li>
</ul>
<p>constructor 參數直接加上 <code>private</code>，TypeScript 會展開成為</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NotificationService &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> smsService: SMSService;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(smsService: SMSService) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.smsService = smsService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這算是 TypeScript  的  syntax sugar，讓我們不用宣告 private field 與寫 field 的 initialization code，讓程式碼更加乾淨。</p>
<p><strong>AppComponent</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NotificationService&#125; from <span class="string">'./notification.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;SMSService&#125; from <span class="string">'./sms.service'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;provide: NotificationService, useClass: NotificationService&#125;,</span><br><span class="line">    &#123;provide: SMSService, useClass: SMSService&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit&#123;</span><br><span class="line"></span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private notificationService: NotificationService) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="keyword">this</span>.notificationService.showMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>AppComponent</code> 相依 <code>NotificationService</code> 部分，全部改由 DI 方式。</p>
<p>除此之外，要在 component 的 decorator 加上 <code>providers</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  &#123;provide: NotificationService, useClass: NotificationService&#125;,</span><br><span class="line">  &#123;provide: SMSService, useClass: SMSService&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Provider 的目的，在於 DI 時，幫我們自動注入 service，但是 Angular 要怎麼知道該注入什麼 service 呢？這裏沒有黑魔法，我們要實際告訴 Angular 一個 mapping table，讓 provider 在自動注入時有所依據，<code>providers</code> 的陣列，就是 provider 所仰賴的 mapping table。</p>
<p>有幾個 service，就要提供幾筆 mapping 資料，這裡我們有  <code>NotificationService</code> 與 <code>SMSService</code>，所以 <code>providers</code> 就有兩筆資料。</p>
<p>以 <code>NotificationService</code> 為例，我們希望 provider 幫我們：</p>
<ul>
<li>當遇到型別為 <code>NotificationService</code>時，請注入<code>NotiticationService</code> 這個 service。</li>
<li><code>provide</code> 為 service 宣告的型別，<code>useClass</code> 則為 service 要實際注入的型別。</li>
</ul>
<p>大部分狀況下，若沒有使用 interface 或 abstract class，<code>provide</code> 與 <code>useClass</code> 會相同，也就是直接注入該型別的 service。</p>
<p>此時可簡寫為</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  NotificationService,</span><br><span class="line">  SMSService</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Angular 會自動展開成</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  &#123;provide: NotificationService, useClass: NotificationService&#125;,</span><br><span class="line">  &#123;provide: SMSService, useClass: SMSService&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>當改用 provider 後，無論有相依的 service 個數有多少，相依的 service 層數有多深，我們不用為很多層的 new 傷腦筋，也不用為<strong>工廠模式</strong>的爆炸傷腦筋，只要記住一件事情：</p>
<blockquote>
<p>有用到幾個 service，就在 providers 註冊幾個 provider。</p>
</blockquote>
<p>剩下就交給 Angular 的 provider 幫我們 DI 了。</p>
<h2 id="Provider_搭配_Interface">Provider 搭配 Interface</h2><hr>
<p>為了讓 service 實現不同的角色，且讓 service 與 service 之間的耦合降低，讓 service 不要直接相依某個 service，而是僅相依於 interface，實務上需要讓  provider 根據 interface 注入 service。</p>
<p><strong><em>重構前</em></strong></p>
<p><strong>SMSService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SMSService &#123;</span><br><span class="line"></span><br><span class="line">  printMessage(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Print Message'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sendMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Send Message'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>NotificationService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;SMSService&#125; from <span class="string">'./sms.service'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NotificationService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private smsService: SMSService) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showMessage() : <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.smsService.sendMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>NotificationService</code> 中，<code>showMessage()</code> 只使用了 <code>SMSService</code> 的 <code>sendMessage()</code>，卻需要相依整個 <code>SMSService</code>，若能讓 <code>NotificationService</code> 與 <code>SMSService</code> 之間的相依僅限於 <code>ISendable</code> interface，將大大降低 <code>NotificationService</code> 與 <code>SMSService</code> 之間的耦合，也就是物件導向的<strong>介面隔離原則</strong>。</p>
<blockquote>
<p>介面隔離原則</p>
<p>用戶端程式碼不應該依賴它用不到的介面。</p>
</blockquote>
<p><strong><em>重構後</em></strong></p>
<p><strong>IPrintable</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> IPrintable </span>&#123;</span><br><span class="line">  printMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>IPrintable</code> interface，其中只有 <code>printMessage()</code>。</p>
<p><strong>ISendable</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> ISendable </span>&#123;</span><br><span class="line">  sendMessage(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>ISendable</code> interface，其中只有 <code>sendMessage()</code>。</p>
<p><strong>SMSService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;IPrintable&#125; from <span class="string">"./iprintable"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ISendable&#125; from <span class="string">"./isendable"</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SMSService <span class="keyword">implements</span> IPrintable, ISendable &#123;</span><br><span class="line"></span><br><span class="line">  printMessage(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Print Message'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sendMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Send Message'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SMSService</code> 去 implement <code>IPrintable</code> 與 <code>ISendable</code>。</p>
<p><strong>NotificationService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ISendable&#125; from <span class="string">'./isendable'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NotificationService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private smsService: ISendable) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showMessage() : <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.smsService.sendMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為 <code>NotificationService</code> 事實上只需要 <code>SMSService</code> 的 <code>sendMessage()</code>，因此只需相依 <code>ISendable</code> interface 即可，不需去相依 <code>SMSService</code> 整個 service，如此 <code>NotificationService</code> 與 <code>SMSService</code> 的耦合將降低到只有 <code>ISendable</code> interface 而已。</p>
<p>但 <code>AppComponent</code> 的 provider 該怎麼寫呢？</p>
<p><strong>AppComponent</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">"@angular/core"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NotificationService&#125; from <span class="string">"./notification.service"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;SMSService&#125; from <span class="string">"./sms.service"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ISendable&#125; from <span class="string">"./isendable"</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>],</span><br><span class="line">  providers: [</span><br><span class="line">    NotificationService,</span><br><span class="line">    &#123;provide: ISendable, useClass: SMSService&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private notificationService: NotificationService) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="keyword">this</span>.notificationService.showMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  NotificationService,</span><br><span class="line">  &#123;provide: ISendable, useClass: SMSService&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>原來的 <code>NotificationService</code> 不變，但 <code>SMSService</code> 需改成 <code>{provide: ISendable, useClass: SMSService}</code>，告訴 Angular 當遇到 <code>ISendable</code> interface 時，請注入 <code>SMSService</code> 。</p>
<p>當 <code>NotificationService</code> 與 <code>SMSService</code> 的相依僅限於 <code>ISendable</code> interface 時，大大降低 <code>NotificationService</code> 與 <code>SMService</code> 之間的耦合，也就是<strong>設計模式</strong>一書所說的：</p>
<blockquote>
<p>根據 interface 寫程式，不要根據 class 寫程式。</p>
</blockquote>
<p>白話就是</p>
<blockquote>
<p>若要降低 service 之間的耦合程度，讓 service 之間方便抽換與組合，就讓 service 與 service 之間僅相依於 interface，而不要直接相依於 service。</p>
</blockquote>
<p>更白話就是</p>
<blockquote>
<p>黑貓白貓，能抓老鼠的就是好貓。</p>
<p>黑貓白貓就是 service，能抓老鼠就是 interface。</p>
</blockquote>
<p>不過最後實際存檔時，卻出現編譯錯誤。</p>
<p><img src="/images/angular/di/di001.png" alt="di001"></p>
<p>Angular CLI 編譯時抱怨找不到 <code>ISendable</code> interface。</p>
<p>在 Angular 官網的 <a href="https://angular.io/docs/ts/latest/guide/dependency-injection.html" target="_blank" rel="external">Angular/Guide/Dependency Injection</a> 一文中特別強調 :</p>
<blockquote>
<p>TypeScript interfaces aren’t valid tokens.</p>
<p>That seems strange if we’re used to dependency injection in strongly typed languages, where an interface is the preferred dependency lookup key.</p>
<p>It’s not Angular’s fault. An interface is a TypeScript design-time artifact. JavaScript doesn’t have interfaces. The TypeScript interface disappears from the generated JavaScript. There is no interface type information left for Angular to find at runtime.</p>
</blockquote>
<p>這並不是 Angular 或 TypeScript 的錯，因為 JavaScript 本來就沒 interface，interface 為 TypeScript 所擴充，因此編譯後會找不到 interface。</p>
<p>既然 interface 不能用，我們只能用些小技巧。</p>
<p><strong>IPrintable</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> abstract <span class="keyword">class</span> IPrintable &#123;</span><br><span class="line">  abstract printMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ISenable</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> abstract <span class="keyword">class</span> ISendable &#123;</span><br><span class="line">  abstract sendMessage(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 interface 全改成 abstract class。</p>
<p>存檔後 provider 就正常了。</p>
<p>這並不是什奇技淫巧，在我們天天在用的 <code>OnInit</code>，在 Angular 內部事實上就是個 abstract class。</p>
<p><a href="https://github.com/angular/angular/blob/2.4.8/modules/%40angular/core/src/metadata/lifecycle_hooks.ts#L52-L69" target="_blank" rel="external">lifycycle_hooks.ts</a></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> abstract <span class="keyword">class</span> OnInit &#123; abstract ngOnInit(): <span class="built_in">void</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>因為 JavaScript 沒有 interface，我們只能拿 abstract class 當 interface 用。</p>
<h2 id="Provider_搭配_useFactory">Provider 搭配 useFactory</h2><hr>
<p>因需求改變，原本使用的是 AWS 簡訊服務，但需求端想改用 Azure 簡訊服務，且希望原來 AWS 簡訊服務暫時留著，由設定檔決定要使用 AWS 或 Azure，因為日後有可能又會從 Azure 改成 AWS。</p>
<p><strong>AWSSMSService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;IPrintable&#125; from <span class="string">'./iprintable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ISendable&#125; from <span class="string">'./isendable'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AWSSMSService <span class="keyword">implements</span> IPrintable, ISendable &#123;</span><br><span class="line">  </span><br><span class="line">  printMessage(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Print AWS Message'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sendMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Send AWS Message'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先將原本的 <code>SMSService</code> 重構成 <code>AWSSMSService</code>。</p>
<p><strong>AzureSMSService</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;IPrintable&#125; from <span class="string">'./iprintable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ISendable&#125; from <span class="string">'./isendable'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AzureSMSService <span class="keyword">implements</span> IPrintable, ISendable &#123;</span><br><span class="line"></span><br><span class="line">  printMessage() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Print Azure Message'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sendMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Send Azure Message'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>AzureSMSService</code>，一樣 implement <code>IPrintable</code> 與 <code>ISendable</code> interface。</p>
<p><strong>environments.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AzureSMSService&#125; from <span class="string">"../app/azure-sms.service"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;AWSSMSService&#125; from <span class="string">"../app/aws-sms.service"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;</span><br><span class="line">  production: <span class="literal">false</span>,</span><br><span class="line">  SMSService: AzureSMSService,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 <code>environment.ts</code> 增加 <code>SMSService</code> 設定，可在此設定要使用 <code>AzureSMSService</code> 或 <code>AWSSMSService</code>。</p>
<blockquote>
<p>一般我們會在設定檔使用字串做設定，因為 provider 主要就是用來建立 service，所以可以直接在設定檔內使用 service 的 class，就不必靠 reflection 由字串建立 service，且還可受到 TypeScript 強型別的編譯保護。</p>
</blockquote>
<p><strong>SMSServiceProvider</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ISendable&#125; from <span class="string">"./isendable"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;environment&#125; from <span class="string">"../environments/environment"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> SMSServiceProvider = &#123;</span><br><span class="line">  provide: Sendable,</span><br><span class="line">  useFactory: () =&gt; <span class="keyword">new</span> (environment.SMSService)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>為了將來其他 componet 要共用此 provider 方便，特別獨立出 <code>SMSServiceProvider</code>。</p>
<p>使用 <code>useFactory</code>，依 <code>environment.SMSService</code> 的設定 new 出 <code>AzureSMSService</code> 或  <code>AWSSMSService</code>。</p>
<p><strong>AppComponent</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NotificationService&#125; from <span class="string">'./notification.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;SMSServiceProvider&#125; from <span class="string">'./smsservice-provider'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>],</span><br><span class="line">  providers: [</span><br><span class="line">    NotificationService,</span><br><span class="line">    SMSServiceProvider,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private notificationService: NotificationService) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="keyword">this</span>.notificationService.showMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>providers</code> 改成使用 <code>SMSServiceProvider</code>。</p>
<p>如此之後，儘管有新增新的 <code>SMSService</code>，只要也 implement <code>IPrintable</code> 與 <code>ISendable</code> interface，並在 <code>environments.ts</code> 設定新的 <code>SMSService</code> 即可，<code>NotificattionService</code>、 <code>AppComponent</code> 與 <code>SMSServiceProvider</code> 都不用修改，達成物件導向的<strong>開放封閉原則</strong>。</p>
<h2 id="重構_Service">重構 Service</h2><hr>
<p>目前全部的 service 都在 app 目錄下有點亂，透過 WebStorm，我們可以將所有 service 加以重構，完全不用人工修改任何程式碼。</p>
<p><img src="/images/angular/di/di002.png" alt="di002"></p>
<p>重構前，所有 service 都在 <code>app</code> 目錄下。</p>
<p><img src="/images/angular/di/di003.png" alt="di003"></p>
<p>重構之後井井有條：</p>
<ul>
<li><code>NotificationService</code> 放在 <code>app/services/notification</code> 目錄下。</li>
<li><code>AWSSMSService</code> 、<code>AzureSMSService</code> 與 <code>SMSServiceProvider</code> 放在 <code>app/services/sms</code> 目錄下。</li>
<li><code>IPrintable</code> 與 <code>ISenable</code> 放在 <code>app/services/interfaces</code> 目錄下。</li>
</ul>
<p>WebStorm 會幫我們修改所有的 import 路徑，完全不用我們操心。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>DI 雖然好用，但要搭配 provider 才能發揮全部威力，達成物件導向的終極目標：<strong>開放封閉原則</strong>。</li>
<li>Angular 提供完整的 DI + provider，讓我們在後端的開發經驗能繼續在前端使用。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Google, <a href="https://angular.io/docs/ts/latest/guide/dependency-injection.html" target="_blank" rel="external">Angular/Guide/Dependency Injection</a><br>Google, <a href="https://angular.io/docs/ts/latest/cookbook/dependency-injection.html" target="_blank" rel="external">Angular/Cookbook/Dependency Injection</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓前端也能使用後端常用的開發技巧]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 TDD 使用「重構九式」?]]></title>
    <link href="http://oomusou.io/refactor/refactor-in-action/"/>
    <id>http://oomusou.io/refactor/refactor-in-action/</id>
    <published>2016-11-27T12:23:43.000Z</published>
    <updated>2017-04-18T15:39:37.000Z</updated>
    <content type="html"><![CDATA[<p>TDD 不僅是先寫測試而已，當第一個 <span class="label label-success">綠燈</span> 之後，剩下的半壁江山就是拼<strong>重構</strong>功力，重構的書多半來自於 Java，因此有些 PHP 獨門的重構技巧在 Java 書上是看不到的，也因為編程思維的持續演進，重構也有了新的面貌，本文整理出自己在實務上，天天必用的 9 個適用於 PHP 重構的 SOP。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>對於很多人來說，使用 imperative 方式寫程式不難，只要將所想的演算法以程式表達即可，也會使用 procedure 方式實現 DRY，但若要長出 <code>class</code>、<code>interface</code>、<code>abstract class</code> 則有難度，更遑論 <code>closure</code> 與 <code>trait</code>，事實上這些東西，都不是<strong>設計</strong>出來的，而是<strong>重構</strong>出來的，也就是 TDD 第一個 <span class="label label-success">綠燈</span> 之後，透過重構慢慢長出 <code>class</code>、<code>interface</code>、<code>abstract class</code>、<code>closure</code> 與 <code>trait</code>。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.3.24</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>假設我們想要計算運費，目前有<strong>黑貓</strong>、<strong>新竹客運</strong>與<strong>郵局</strong>三家可以選擇，每家針對不同的<strong>重量</strong>有其相對應的計算公式，而我們希望能寫出<strong>高內聚、低耦合</strong>，符合 <strong>SOLID</strong> 原則的程式碼，方便日後維護。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>此範例並非我原創，靈感來自於 Joey Chen 的 <a href="https://dotblogs.com.tw/hatelove/2012/12/11/learning-tdd-in-30-days-day9-refactoring-introduction-and-how-to-find-refactoring-target" target="_blank" rel="external">30天快速上手TDD : Refactoring Legacy Code 簡介</a>之範例，因為此範例非常容易懂，而且很適合介紹重構。</span></span></span></p>
<table>
<thead>
<tr>
<th style="text-align:left">貨運商</th>
<th style="text-align:left">計費規則</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">黑貓</td>
<td style="text-align:left">基本運費 <code>100</code> 元，每公斤加收 <code>10</code> 元</td>
</tr>
<tr>
<td style="text-align:left">新竹貨運</td>
<td style="text-align:left">基本運費 <code>80</code> 元，每公斤加收 <code>15</code> 元</td>
</tr>
<tr>
<td style="text-align:left">郵局</td>
<td style="text-align:left">基本運費 <code>60</code> 元，每公斤加收 <code>20</code> 元</td>
</tr>
</tbody>
</table>
<h2 id="測試案例">測試案例</h2><hr>
<p>根據以上規則，我們可定出以下測試案例 :</p>
<table>
<thead>
<tr>
<th style="text-align:left">重量</th>
<th style="text-align:left">運費</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[1, 2, 3]</td>
<td style="text-align:left">360 元</td>
</tr>
<tr>
<td style="text-align:left">[1, 2, 3]</td>
<td style="text-align:left">330 元</td>
</tr>
<tr>
<td style="text-align:left">[1, 2, 3]</td>
<td style="text-align:left">300 元</td>
</tr>
</tbody>
</table>
<h2 id="單元測試">單元測試</h2><hr>
<p><strong>ShippingServiceTest.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/7aa22622f57b13eb58cf659c2e7f89910c6c1461" target="_blank" rel="external">單元測試 : 黑貓、新竹、郵局測試案例</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為360<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> ShippingService $target */</span></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weights</span>, <span class="string">'BlackCat'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">360</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新竹<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為330<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> ShippingService $target */</span></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weights</span>, <span class="string">'Hsinchu'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">330</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 郵局<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為300<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> ShippingService $target */</span></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weights</span>, <span class="string">'PostOffice'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">300</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 3 個測試案例都先寫好測試。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  根據 Uncle Bob 的 The Three Rule of TDD，我們應該一個測試寫完，綠燈後才能寫下一個測試，這樣才能避免 over design，本文重點是重構，而不是 TDD，所以先將 3 個測試先寫好方便講解，實務上應該遵照 The Three Rule of TDD 方式進行。</div>
<h2 id="使用_if_else">使用 if else</h2><hr>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/6a2c6c45e9cfd590633c9a06a9db06a979ba1141" target="_blank" rel="external">if else 計算運費</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$companyName</span> == <span class="string">'BlackCat'</span>) &#123;</span><br><span class="line">            <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$companyName</span> == <span class="string">'Hsinchu'</span>) &#123;</span><br><span class="line">            <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$companyName</span> == <span class="string">'PostOffice'</span>) &#123;</span><br><span class="line">            <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一開始先求 <span class="label label-success">綠燈</span> 就好，因此我們很無腦的只使用 <code>if else</code> 與 <code>foreach()</code> 就完成了。</p>
<p>但這樣只是功能完成而已，所有高低階邏輯全寫在一起，程式碼不容易閱讀，將來也不好維護。</p>
<p><img src="/images/refactor/refactor-in-action/action000.png" alt=""></p>
<p>雖然是很爛的寫法，但仍然有 <span class="label label-success">綠燈</span>。</p>
<h2 id="使用_switch">使用 switch</h2><hr>
<p><img src="/images/refactor/refactor-in-action/action010.png" alt=""></p>
<p>改用 <code>switch</code> 寫法會比 <code>if else</code> 可讀性高些，PhpStorm 也提供工具可以直接將 <code>if else</code> 轉成 <code>switch</code>，按熱鍵 &#8997; + &#8617;，選擇 <code>Replace if with switch</code>。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/c6bac6e69c5da414daed040ca2c286fc3d466063" target="_blank" rel="external">switch 計算運費</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不過由 <code>if else</code> 變成 <code>switch</code> 並不算重構，只是讓程式碼稍微好閱讀些而已。</p>
<p><img src="/images/refactor/refactor-in-action/action001.png" alt=""></p>
<p>馬上跑測試，得到 <span class="label label-success">綠燈</span>，確定程式沒改壞。</p>
<h2 id="第一式_:_Extract_Method">第一式 : Extract Method</h2><hr>
<p>所有的重構，都是從 <code>Extract Method</code> 開始，當我們發現程式碼中有以下特徵 : </p>
<ol>
<li>當一段程式碼需要<strong>寫註解</strong>特別解釋時。</li>
<li>在 <code>if else</code> 內有一段邏輯時。</li>
<li>在 <code>switch case</code> 內有一段邏輯時。</li>
</ol>
<p>就可以開始使用重構第一式 : <code>Extract Method</code>，將一段程式碼重構成 <code>method</code> 。</p>
<p><strong>ShippingService.php</strong><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每個 <code>switch case</code> 內都有一段<strong>計算運費</strong>邏輯，為了程式碼的可讀性與可維護性，我們應該將每個 <code>switch case</code> 內的程式碼加以 <code>Extract Method</code>。</p>
<p><img src="/images/refactor/refactor-in-action/action011.png" alt=""></p>
<p>PhpStorm 內建支援 <code>Extract Method</code>，先選擇要抽取的程式碼，按熱鍵 &#8963; + T，選擇 <code>Method</code>，PhpStorm 就會自動幫你將那段程式碼 extract 成新的 <code>method</code>。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a8b5872eb489f121d17e49d4ff2cac660db8d56b" target="_blank" rel="external">重構 1 式 : Extract Method</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;blackCatCalculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;hsinchuCalculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;postCalculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;blackCatCalculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">blackCatCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hsinchuCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>method</code> 命名方面，建議依照 <code>名詞 + 動詞</code> 的方式命名。</p>
<p>經過 <code>Extract Method</code> 後，最少原來一大坨的 <code>calculateFee()</code> 已經清爽多了，且可讀性也變高了，我們可以直接由 <code>method</code> 名稱，得知那段程式碼的意義，而不再是一段冷冰冰的 <code>foreach()</code> 迴圈而已。</p>
<p><img src="/images/refactor/refactor-in-action/action002.png" alt=""></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Method 讓我們將原本一段很長的程式碼，依照其功能先拆成較小的 method，可增加程式碼的可讀性與可維護性。</div>
<h2 id="第二式_:_Extract_Class">第二式 : Extract Class</h2><hr>
<p>只有 <code>Extract Method</code> 還是不夠的，物件導向程式碼最大的特點就是 <code>class</code>，我們要將更相關的 <code>method</code> 放在同一個 <code>class</code>，達到<strong>高內聚</strong>的目標。</p>
<p>在重構第一式 <code>Extract Method</code> 時，我們特別以<strong>名詞 + 動詞</strong>的方式替 <code>method</code> 命名，其中若<strong>名詞</strong>相同，則表示這些 <code>mehtod</code> 的內聚性很高，適合將這些 <code>method</code> 再透過重構第二式 : <code>Extract Class</code> 重構到新的 <code>class</code> 內。</p>
<p><strong>ShippingService.php</strong><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">blackCatCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hsinchuCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>ShippingService</code> 透過 <code>Extract Method</code> 所產生的 <code>blackCatCalculateFee()</code>、<code>hsinchuCalculateFee()</code> 與 <code>postCalculateFee()</code>，我們發現<strong>名詞</strong>均不同，所以將這些 method 再拆分在不同的 class 內。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a724b603159d67785688192dd23d0cb6851e76dd#diff-d579d2515aa8883f19295d0c447879bc" target="_blank" rel="external">重構 2 式 : Extract Class 之 BlackCat</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將名詞部分的 <code>blackCat</code> 重構成 <code>BlackCat</code> class，動詞部分的 <code>calculateFee()</code> 重構成 <code>BlackCat</code> 的 method。</p>
<p><strong>Hsinchu.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a724b603159d67785688192dd23d0cb6851e76dd#diff-cb0416a426a3bc3d1f17a46b73e1f33d" target="_blank" rel="external">重構 2 式 : Extract Class 之 Hsinchu</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Hsinchu.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hsinchu</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將名詞部分的 <code>hshinchu</code> 重構成 <code>Hsinchu</code> class，動詞部分的 <code>calculateFee()</code> 重構成 <code>Hsinchu</code> 的 method。</p>
<p><strong>Post.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a724b603159d67785688192dd23d0cb6851e76dd#diff-2f1eb31bf97a19fd7ab93396e5c24be5" target="_blank" rel="external">重構 2 式 : Extract Class 之 Post</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Post.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將名詞部分的 <code>post</code> 重構成 <code>Post</code> class，動詞部分的 <code>calculateFee()</code> 重構成 <code>Post</code> 的 method。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a724b603159d67785688192dd23d0cb6851e76dd#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 2 式 : Extract Class 之 ShippingService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$blackCat</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$blackCat</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$hsinchu</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$hsinchu</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$post</span> = <span class="keyword">new</span> Post();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$post</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$blackCat</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$blackCat</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原來 extract 出來的 <code>method</code>，現在已經重構到各自 <code>class</code> 內，因此要使用時，必須先透過 <code>new</code> 將物件建立起來，才能呼叫 <code>calculateFee()</code>。</p>
<p><img src="/images/refactor/refactor-in-action/action003.png" alt=""></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。 </p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Class 讓我們將更相關的 method 放在同一個 class 內，達到高內聚的目標，可增加程式碼的可讀性與可維護性，也更容易重複使用。</div>
<h2 id="第三式_:_Extract_Superclass">第三式 : Extract Superclass</h2><hr>
<p>當 <code>Extract Class</code> 之後，雖然已經長出 <code>class</code>，但實務上會發現，<code>method</code> 內仍然有些程式碼是重複的，根據 DRY 原則，我們不希望有程式碼重複，這會造成日後維護上的困難，因為每次修改就得修改好幾份程式碼，還可能忘記修改其中一份，而造成邏輯上的不一致。</p>
<p>對付 <code>method</code> 內重複的程式碼，就必須使用重構第三式 : <code>Extract Superclass</code>，將重複的程式碼重構到 <code>abstract class</code>。</p>
<p><strong>BlackCat.php</strong><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們發現在 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 3 個 <code>class</code> 的 <code>calculateFee()</code> 內，都有 <code>$weight = collect($weightArray)</code>，我們可以使用 <code>Extract Superclass</code> 將這段程式碼重構到 <code>abstract class</code> 內。</p>
<p><strong>AbstractLogistics.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/82be134f7a5c4488d1b4a4f0515eeb29534a9bad#diff-42a8335  084e3f202eb755166d3bc824f" target="_blank" rel="external">重構 3 式 : Extract Super Class 之 AbstractLogistics</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayToCollection</span><span class="params">(array <span class="variable">$weightArray</span>)</span>: <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$weights</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 <code>$weight = collect($weightArray)</code> 部分重構到 <code>AbstractLogistics</code> 的 <code>arrayToCollection()</code>。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/82be134f7a5c4488d1b4a4f0515eeb29534a9bad#diff-d579d2515aa8883f19295d0c447879bc" target="_blank" rel="external">重構 3 式 : Extract Super Class 之 BlackCat</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">extends</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>BlackCat</code> 改繼承於 <code>AbstractLogistics</code>。</p>
<p>因為 <code>$weight = collect($weightArray)</code> 已經搬到 <code>AbstractLogistics</code>，所以 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 都要改成 <code>$weights = $this-&gt;arrayToCollection($weightArray);</code>，如此重複的邏輯就統一都只存在於 <code>AbstractLogistics</code>，符合 DRY 原則。</p>
<p><img src="/images/refactor/refactor-in-action/action004.png" alt=""></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Super Class 讓我們將 class 內重複的部分抽出來，放到 abstract class 的 protected method 內，如此繼承的 class 就可共用此 method，避免程式碼重複。</div>
<h2 id="第四式_:_Extract_Closure">第四式 : Extract Closure</h2><hr>
<p>雖然我們可以將重複的程式碼透過 <code>Extract Superclass</code> 重構到 <code>abstract class</code>，但有時候會遇到一種程式碼，並不是整塊重複，而是外層重複，內層卻不重複。</p>
<p>對於 <code>method</code> 內有一段外層重複，內層卻不重複的程式碼，就必須使用重構第四式 : <code>Extract Closure</code>，將重複的的程式碼重構到 <code>abstract class</code>，不重複的部分重構到 <code>closure</code>。</p>
<p><strong>BlackCat.php</strong><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">extends</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們在 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 的 <code>calculateFee()</code> 都可發現，<code>foreach()</code> 與 <code>return</code> 是重複的，偏偏只有中間的 <code>$amount = $amount + (100 + $weight * 10);</code> 不重複，這也是各家計算運費演算法的關鍵。</p>
<p>為了符合 DRY 原則，我們應該將 <code>foreach()</code> 與 <code>return</code> 部分使用 <code>Extract Super Class</code> 重構到 <code>abstract class</code>，但偏偏中間的 <code>$amount = $amount + (100 + $weight * 10);</code> 不同，我們可以使用 <code>Extract Closure</code> 將不同的部分重構成 <code>closure</code>。</p>
<p><strong>AbstractLogistics.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/c6071d37752b79c66d3c46d374696d196a131d4d#diff-42a8335084e3f202eb755166d3bc824f" target="_blank" rel="external">重構 4 式 : Extract Closure 之 AbstractLogistics</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@param</span> Collection $weights</span><br><span class="line">     * <span class="doctag">@param</span> callable $closure</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loopWeights</span><span class="params">(int <span class="variable">$amount</span>, Collection <span class="variable">$weights</span>, callable <span class="variable">$closure</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + <span class="variable">$closure</span>(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將整個 <code>foreach()</code> 與 <code>return</code> 都重構到 <code>AbstractLogistics</code> 的 <code>loopWeights()</code> 內，但我們清楚 <code>$amount = $amount + (100 + $weight * 10);</code> 是不重複的，必須使用 <code>closure</code> 代替，且因為 <code>closure</code> 必須使用到 <code>$weight</code> 變數，還必須將 <code>$weight</code> 傳入 <code>closure</code>。</p>
<p>所以新重構的 <code>loopWeights()</code> 除了有 <code>int $amount</code> 與 <code>Collection $weights</code> 參數外，還要多一個 <code>callable $closure</code> 傳進來。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/c6071d37752b79c66d3c46d374696d196a131d4d#diff-d579d2515aa8883f19295d0c447879bc" target="_blank" rel="external">重構 4 式 : Extract Closure 之 BlackCat</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">extends</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;loopWeights(<span class="variable">$amount</span>, <span class="variable">$weights</span>, <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重複的 <code>foreach()</code> 與 <code>return</code> 已經重構到 <code>AbstractLogistics</code> 的 <code>loopWeights()</code>，<code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 不同的計算邏輯就以 <code>closure</code> 的方式傳入 <code>loopWeights()</code>。</p>
<p><img src="/images/refactor/refactor-in-action/action005.png" alt=""></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Closure 讓我們將 class 內重複的部分抽出來，放到 abstract class 的 protected method 內，不重複的部分則放在各 class， 以 closure 的方式傳入 abstract class，如此就可確保程式碼符合 DRY 原則，且各 class 也保有不重複部分。</div>
<h2 id="第五式_:_Extract_Interface">第五式 : Extract Interface</h2><hr>
<p>當使用 <code>Extract Superclass</code> 與 <code>Extract Closure</code> 之後，基本上已經沒有重複的程式碼，也就是已經符合 DRY 原則。</p>
<p>在 <code>名詞 + 動詞</code> 的 <code>method</code> 名稱部分，<code>名詞</code>不同已經使用 <code>Extract Class</code> 解決，剩下的是相同的<code>動詞</code>，也就是我們發現在 3 個 <code>class</code> 都有相同的 <code>method</code>。</p>
<p>既然 3 個 <code>class</code> 的 <code>method</code> 都相同，我們就可以使用重構第五式 : <code>Extract Interface</code>，以用更宏觀的角度，將這 3 個 <code>class</code> <strong>抽象化</strong>成一個<strong>相同</strong>的 <code>interface</code>。</p>
<p><strong>BlackCat.php</strong><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">extends</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;loopWeights(<span class="variable">$amount</span>, <span class="variable">$weights</span>, <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>既然 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 都有 <code>calculateFee()</code>，我們可以使用 <code>Extract Interface</code> 將 <code>calculateFee()</code> 抽成 <code>interface</code>，將 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 抽象化成 <code>LogisticsInterface</code>。</p>
<p><strong>LogisticsInterface.php</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/5f3b9ba391d95a443d38c246227c7db523206405#diff-8306901f34a7e9b0d27d03dfd45162af" target="_blank" rel="external">重構 5 式 : Extract Interface 之 LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>建立新的 <code>LogisticsInterface</code>，定義其 <code>method</code> 為 <code>calculateFee()</code>。</p>
<p><strong>AbstractLogistics.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/5f3b9ba391d95a443d38c246227c7db523206405#diff-42a8335084e3f202eb755166d3bc824f" target="_blank" rel="external">重構 5 式 : Extract Interface 之 AbstractLogistics</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogistics</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>abstract class</code> 當然要遵守 <code>interface</code>。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/5f3b9ba391d95a443d38c246227c7db523206405#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 5 式 : Extract Interface 之 ShippingService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> Post();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>既然 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 都抽象化成 <code>LogisticsInterface</code>，無論是 new <code>BlackCat</code>、<code>Hsinchu</code> 或 <code>Post</code>，抽象化看起來都是同一個 <code>$logistics</code> 物件，這就是物件導向的<strong>多型</strong>，同一個物件，卻可能來自於相同 <code>interface</code> 的不同 <code>class</code>。</p>
<p><img src="/images/refactor/refactor-in-action/action006.png" alt=""></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Interface 讓我們將相同 method 的 class，抽象化成相同 interface 的物件，儘管將來需求改變，但只要 interface 不變，程式碼就不用修改，方便將來維護。</div>
<h2 id="第六式_:_Dependency_Injection">第六式 : Dependency Injection</h2><hr>
<p>經過 <code>Extract Interface</code> 之後，我們已經將 3 個 <code>class</code> 抽象化成相同 <code>interface</code>，理論上我們只需依賴 <code>interface</code> 即可，但程式碼中卻還使用 <code>switch case</code>，並實際去 new 3 個 <code>class</code>，也就是還實際依賴這 3 個 <code>class</code>。</p>
<p>實際依賴這 3 個 <code>class</code> 目前沒什麼大問題，但只要將來有新的 <code>class</code>，儘管也實踐相同 <code>interface</code>，卻仍要繼續修改 <code>swich case</code> 去 new 新的 <code>class</code>，這將造成維護上的負擔。理想是將來無論新增任何 <code>class</code>，都不須修改程式碼，這就必須使用重構第六式 : <code>Dependency Injection</code>，將 <code>switch case</code> 拿掉，由 Service Container 幫我們注入 <code>LogisticsInterface</code> 物件，而不是與特定 <code>class</code>耦合，達到<strong>低耦合</strong>的目標。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/0ce3069cc50fe22d6e121aa00bb78183e10f14a4#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 6 式 : Dependency Injection 之 ShippingService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, LogisticsInterface <span class="variable">$logistics</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為不在需要由 <code>switch case</code> 判斷 <code>$companyName</code>，因此將參數 <code>$companyName</code> 從 <code>calculateFee()</code> 移除。</p>
<p>新增 <code>LogisticsInterface $logistics</code> 參數，由 Service Container 幫我們將所依賴的 <code>$logistics</code> 物件注入。</p>
<p>由於 <code>$logistics</code> 已經抽象化為 <code>LogisticsInterface</code>，所以根本不需要任何 <code>switch case</code> 判斷，因此將來若有新的 <code>class</code> 也不用擔心，一定不需修改 <code>calculateFee()</code>。</p>
<p><strong>ShippingServiceTest.php</strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/0ce3069cc50fe22d6e121aa00bb78183e10f14a4#diff-7f0bd9973ba9075fe67417d92b296620" target="_blank" rel="external">重構 6 式 : Dependency Injection 之 ShippingServiceTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Hsinchu</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為360<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        App::bind(LogisticsInterface::class, BlackCat::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weightArray'</span> =&gt; <span class="variable">$weights</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">360</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 接實踐 <code>LogisticsInterface</code>，Service Container 怎麼知道要注入哪一個物件呢?</p>
<p>必須在 <code>ShippingService</code> 建立之前，先使用 <code>App::bind()</code> 告訴 Service Container，<code>LogisticsInterface</code> 須與哪一個 <code>class</code> 綁定，若要綁定 <code>BlackCat</code>，就是 <code>App::bind(LogisticsInterface::class, BlackCat::class);</code>。</p>
<p>實務上 <code>App::bind()</code> 要寫哪裡呢?</p>
<ol>
<li>寫在整合測試。</li>
<li>若要動態切換 <code>class</code> : 寫在 Controller。</li>
<li>若一開始就決定 <code>class</code> : 寫在 Service Provider。</li>
</ol>
<p><img src="/images/refactor/refactor-in-action/action007.png" alt=""></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Dependency Injection 讓我們由外部注入內部所需相依的物件，因此 method 就不必再根據條件去判斷該相依哪一個物件，也因為不用判斷，因此將來若有新的相依物件，也不需修改程式碼，方便日後維護。</div>
<h2 id="第七式_:_Extract_Trait">第七式 : Extract Trait</h2><hr>
<p>重構一到六式，都是教我們的都是以<strong>垂直</strong>方式將 <code>method</code> 抽取到 <code>class</code>、<code>abstract class</code>、<code>interface</code>，也就是其都有<strong>垂直</strong>的關係，但某些 <code>method</code>，並沒有垂直的關係，反而是跨 <code>class</code> 的<strong>水平</strong>關係。</p>
<p>對於這種<strong>水平</strong>關係的 <code>method</code>，就必須使用重構第七式 : <code>Extract Trait</code>，將 <code>method</code> 重構到 <code>trait</code>。</p>
<p><strong>LogTrait.php</strong><span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/6368f9029123319026e7cc79375863cbadba8989#diff-d8f8691de3be79d81a11ebaf4ca3346a" target="_blank" rel="external">重構 7 式 : Extract Trait 之 LogTrait</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogTrait.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> LogTrait</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Log::info(<span class="string">'Amount : '</span> . <span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們在寫好 <code>ShippingService</code> 之後，被要求在 <code>calculateFee()</code> 加上 <code>writeLog()</code> 功能。</p>
<p><code>writeLog()</code> 這種功能，要放在 <code>class</code> 或 <code>abstract class</code> 都很怪，因為他根本與 <code>ShippingService</code> 無關，反而是每個 class 都會有 <code>writeLog()</code> 的需求，像這種<strong>水平</strong>關係，我們可以使用 <code>Extract Trait</code> 將 <code>writeLog()</code> 重構到 <code>LogTrait</code>。</p>
<p><strong>AbstractLogistics.php</strong><span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/6368f9029123319026e7cc79375863cbadba8989#diff-42a8335084e3f202eb755166d3bc824f" target="_blank" rel="external">重構 7 式 : Extract Trait 之 AbstractLogistics</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogistics</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">LogTrait</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@param</span> Collection $weights</span><br><span class="line">     * <span class="doctag">@param</span> callable $closure</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loopWeights</span><span class="params">(int <span class="variable">$amount</span>, Collection <span class="variable">$weights</span>, callable <span class="variable">$closure</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + <span class="variable">$closure</span>(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;writeLog(<span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重構成 <code>LogTrait</code> 後，只要去 <code>use LogTrait</code>，我們的 <code>class</code> 內會有 <code>writeLog()</code>。</p>
<p>但 <code>$this-&gt;writeLog()</code> 要寫在哪裡呢? 當然也可以寫在每個 <code>class</code> 內的 <code>calculateFee()</code> 內，但這就違反 DRY 了，比較理想的方式是寫在 <code>abstract class</code> 的 <code>loopWeights()</code> 內，這樣 <code>$this-&gt;writeLog()</code> 就只有一份，符合 DRY 原則。</p>
<p><img src="/images/refactor/refactor-in-action/action008.png" alt=""></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extrait Trait 讓我們不用特別將不相關的 method 重構到 class 與 abstract class 內，所有水平關係的 method，都適合重構到 trait，然後跨 class 重複使用。</div>
<h2 id="第八式_:_Refactor_to_Pattern">第八式 : Refactor to Pattern</h2><hr>
<p>當程式碼重構到第七式，基本上已經符合了物件導向的 <strong>SOLID</strong> 原則，也達到<strong>高內聚、低耦合</strong>目標，算是不錯的程式碼，兼具容易閱讀、容易維護的優點。</p>
<p><strong>單一職責原則 Single Responsibility Principle</strong><br><div class="alert alert-info"><i class="fa fa-info"></i>  應該且僅有一個原因引起類別的變更</div></p>
<p>原本所有的<strong>計算運費</strong>邏輯都包在 <code>ShippingService</code> 的 <code>calculateFee()</code> 內，只要任何一個廠商的運費修改，都必須修改 <code>ShippingService</code>，因此違反單一職責原則，透過 <code>Extract Method</code> 與 <code>Extract Class</code>，現在已經將黑貓的計算運費邏輯包在 <code>BlackCat</code> 的 <code>calculateFee()</code>，新竹貨運的計算運費邏輯包在 <code>Hsinchu</code> 的 <code>calculateFee()</code>，而郵局的計算運費邏輯也包在 <code>Post</code> 的 <code>calculateFee()</code>，每個廠商的運費修改，都不會影響到其他 <code>class</code>，符合<strong>單一職責原則</strong>的要求。</p>
<p><strong>開放封閉原則 Open Closed Principle</strong><br><div class="alert alert-info"><i class="fa fa-info"></i>  對於擴展是開放的，對於修改是封閉的</div></p>
<p>將 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 透過 <code>Extract Interface</code> 抽象化成 <code>LogisticsInterface</code>，對於 <code>ShippingServie</code> 來說，不再直接相依 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 三個 class，僅相依於 <code>LogisticsInterface</code>，將來若有新的需求，只需新建立 <code>class</code> 實踐 <code>LogisticsInterface</code> 即可，也就是<strong>對擴展是開放的</strong>，但因為 <code>ShippingService</code> 僅相依於 <code>LogisticsInterface</code>，不相依於任何 <code>class</code>，就算將來有新建立的 <code>class</code>，也不需修改 <code>ShippingService</code>，所以<strong>對修改是封閉</strong>的，符合<strong>開放封閉原則</strong>的要求。</p>
<p><strong>里式替換原則 Liskov Substitution Principle</strong><br><div class="alert alert-info"><i class="fa fa-info"></i>  所有參照基礎類別的地方，必須可以透明地使用衍生類別的物件代替，而不需要任何改變</div></p>
<p>我們將 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 程式碼重複的地方，透過 <code>Extract Super Class</code> 與 <code>Extract Closure</code> 重構到 <code>AbstractLogistics</code> 這個 <code>abstract class</code>，為了確保所有繼承於 <code>AbstractLogistics</code> 的 <code>class</code> 都能被替換，我們特別要求 <code>AbstractLogistics</code> 實現 <code>LogisticsInterface</code>，確保所有使用 <code>abstract class</code> 物件，都可以透明地使用其衍生 <code>class</code> 所代替，符合<strong>里氏替換原則</strong>的要求。</p>
<p><strong>介面隔離原則 Interface Segregation Principle</strong><br><div class="alert alert-info"><i class="fa fa-info"></i>  用戶端程式碼不應該依賴它用不到的介面</div></p>
<p>因為 <code>LogisticsInterface</code> 只有 <code>calculateFee()</code> 單一 <code>method</code>，因此看不到<strong>介面隔離原則</strong>，實務上當 <code>interface</code> 有多個 <code>method</code>，而你發現 <code>class</code> 對於 <code>interface</code> 有空實作時，或者使用者根本沒用到 <code>interface</code> 所提供的所有 <code>method</code>，就表示 <code>interface</code> 應該再細化，再切成更小的 <code>interface</code>。</p>
<p>事實上，介面隔離原則就是另一個角度的單一職責原則，單一職責是以<strong>責任</strong>的角度來看 <code>class</code>，而介面隔離原則是以<strong>需求</strong>的角度看 <code>interface</code>，所以兩者並不衝突，符合單一職責的 <code>class</code> 仍然會實現多個 <code>interface</code>，符合<strong>介面隔離原則</strong>的要求。</p>
<p><strong>依賴反轉原則 Dependency Inversion Principle</strong><br><div class="alert alert-info"><i class="fa fa-info"></i>  高階模組不該依賴低階模組，兩者都應該依賴其抽象</div></p>
<p>在透過 <code>Dependency Injection</code> 之前，我們是直接在 <code>ShippingService</code> 直接去 new <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code>，也就是高階模組的 <code>ShippingService</code> 直接依賴於低階模組的 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code>，這就違反了<strong>高階模組不該依賴低階模組</strong>，既然已經透過 <code>Extract Interface</code> 抽象化出 <code>LogisticsInterface</code>，我們就可以透過 <code>Dependency Injection</code>，由高階模組自行注入所依賴的低階模組，此時高階模組 <code>ShippingService</code> 只依賴於 <code>LogisticsInterface</code>，而低階模組 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 也只依賴於 <code>LogisticsInterface</code>，也就是<strong>兩者都應該依賴其抽象</strong>，符合<strong>依賴反轉原則</strong>的要求。</p>
<p><strong>高內聚 High Cohesion</strong><br><div class="alert alert-info"><i class="fa fa-info"></i>  應該將功能高度相關的 method 放在同一個 class 與 interface 內，這樣才方便閱讀、方便維護、方便重複使用。</div></p>
<p><strong>單一職責原則</strong>、<strong>介面隔離原則</strong>講的就是<strong>高內聚</strong>，<code>Extract Method</code>、<code>Extract Class</code>、<code>Extract Trait</code> 則是實現<strong>高內聚</strong>的具體方法，讓我們將功能高度相關的 <code>method</code> 放在同一個 <code>class</code> 與 <code>interface</code> 內。</p>
<p><strong>低耦合 Low Coupling</strong><br><div class="alert alert-info"><i class="fa fa-info"></i>  class 與 class 間的耦合應該盡量減少，避免因為 class 的修改，而導致其他 class 也必須隨之修改。</div></p>
<p><strong>開放封閉原則</strong>、<strong>里氏替換原則</strong>、<strong>依賴反轉原則</strong>講的就是<strong>低耦合</strong>，<code>Extract Interface</code>、<code>Dependency Injection</code>、<code>Replace Interface with Closure</code> 則是實現<strong>低耦合</strong>的具體方法，讓我們將原本 <code>class</code> 與 <code>class</code> 之間的耦合，變成只與 <code>interface</code> 或 <code>closure</code> 的耦合，由於耦合變少變小，因此將來所做的任何修改，影響將降到最低。</p>
<p><strong>設計模式 Design Pattern</strong><br>若重構到這個階段，突然靈機一動想到在這個情境下，某個 Design Pattern 更適合，則可以繼續重構，基本上，Design Pattern 就是前人所留下來破解某個劍招的精妙劍法，只要用的時機對，就會非常的巧，但不必刻意的追求一定要用什麼 Design Pattern 才算好的物件導向，就如<strong>獨孤九劍</strong>一樣，隨機應變，用得到是緣份，用不到也沒關係，因為重構到第七式，已經符合了 <strong>SOLID</strong> 原則了。</p>
<p>以本例而言，事實上就是 <strong>Strategy Pattern</strong>，但若你完全不知道 Strategy Pattern 也沒關係，只要從重構一式打到重構七式，就會自然長出 Strategy Pattern 了。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Refactor to Pattern 讓我們可以重構出更精妙的程式碼，但不必強求，隨緣使用即可。</div>
<h2 id="第九式_:_Replace_Interface_with_Closure">第九式 : Replace Interface with Closure</h2><hr>
<p>物件導向為人詬病的，就是 <code>interface</code> 滿天飛，與檔案數目爆炸，但函數式編程思維加入後，一切有了變化。</p>
<p>若我們的 <code>interface</code> 只有一個 <code>method</code>，或經由 <strong>ISP</strong> 介面隔離原則切成很多小小的 interface 後，就可使用重構第九式 : <code>Replace Interface with Closure</code>，將 <code>interface</code> 拿掉，改用 <code>closure</code>。</p>
<p><strong>LogisticsInterface.php</strong><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>LogisticsInterface</code> 只有單一的 <code>calculateFee()</code> 而已，我們可以嘗試將 <code>interface</code> 拿掉。</p>
<p><strong>Logistics.php</strong><span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a3c0f64c7c088a831c448c2f8f0947d22afdb82a#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 9 式 : Replace Interface to Closure 之 Logistics</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Logistics.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logistics</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">LogTrait</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayToCollection</span><span class="params">(array <span class="variable">$weightArray</span>)</span>: <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$weights</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> callable $closure</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>, callable <span class="variable">$closure</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) &#123;</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + <span class="variable">$closure</span>(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;writeLog(<span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>建立新的 <code>Logistics</code>，事實上就是將 <code>AbstractLogistics</code> 的程式碼全部搬過來，因為既然沒有 <code>interface</code>，那 <code>abstract class</code>也不需要了。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a3c0f64c7c088a831c448c2f8f0947d22afdb82a#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 9 式 : Replace Interface to Closure 之 ShippingService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> callable $closure</span><br><span class="line">     * <span class="doctag">@param</span> Logistics $logistics</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, callable <span class="variable">$closure</span>, Logistics <span class="variable">$logistics</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>, <span class="variable">$closure</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原本 <code>calculateFee()</code> 的最後一個參數是依賴注入進 <code>LogisticsInterface</code> 物件，為了要將 <code>interface</code> 拿掉，我們只注入 <code>Logistics</code> 即可。</p>
<p>也因為 <code>LogisticsInterface</code> 已經拿掉，所以 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 也順便拿掉，也就是說，原本需要 <code>interface</code> 與 <code>class</code> 封裝計算運費邏輯，現在完全退化到只需 <code>closure</code> 即可。</p>
<p><strong>ShippingServiceTest.php</strong><span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a3c0f64c7c088a831c448c2f8f0947d22afdb82a#diff-7f0bd9973ba9075fe67417d92b296620" target="_blank" rel="external">重構 9 式 : Replace Interface to Closure 之 ShippingServiceTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為360<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weightArray'</span> =&gt; <span class="variable">$weights</span>,</span><br><span class="line">            <span class="string">'closure'</span>     =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">360</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原本我們必須在 <code>arrange</code> 使用 <code>App::bind(LogisticsInterface::class, BlackCat::class);</code>，但目前沒有 <code>LogisticsInterface</code> 與 <code>BlackCat</code>，所以 <code>App::bind()</code> 也不需要了。</p>
<p>原本計算運費邏輯是封裝在 <code>BlackCat</code> 內，但因為現在已經沒有 <code>BlackCat</code>，改用 <code>closure</code>，所以必須在測試提供 <code>closure</code>。</p>
<p><img src="/images/refactor/refactor-in-action/action009.png" alt=""></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<p>我們也發現檔案只剩下 <code>ShippingService</code>、<code>Logistics</code> 與 <code>LogTrait</code> 而已，其他檔案都因為 <code>Replace Interface with Closure</code> 而重構刪除了。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Replace Interface with Closure 讓我們適時的將不必要的 interface 以 closure 取代，將可解決原來物件導向 interface 滿天飛與檔案數目爆炸的問題，但也不是每個 interface 都要重構成 closure，必須自己依照實際情形加以判斷，沒有最佳解，只有最適解。</div>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>基本上重構<strong>第一式</strong>到<strong>第七式</strong>，我每次 TDD 重構都會打一遍，讓自己的程式碼符合 <strong>SOLID</strong> 原則與實現<strong>高內聚、低耦合</strong>，但<strong>第八式</strong>與<strong>第九式</strong>則不一定，會視實際狀況隨機應變。</li>
<li><code>Replace Interface with Closure</code> 的出現，讓物件導向有了不同的實作方式，事實上很多設計模式，如 <code>Strategy Pattern</code>、<code>Command Pattern</code>、<code>Chain of Responsibility Pattern</code> ….等，都可使用 <code>closure</code> 方式實作，但也不是所有的 <code>interface</code> 都要重構成 <code>closure</code>，但最少是個方法，可依實際需求決定是否重構。</li>
<li>重構有很多方法，主要是針對 legacy code，若使用 TDD 方式，因為測試先寫，已經考慮了<strong>可測試性</strong>，基本上程式碼的體質已經不差，只要再加上<strong>重構九式</strong>的輔助，寫出符合 <strong>SOLID</strong> 原則與<strong>高內聚、低耦合</strong>的程式碼將不再是遙不可及的事情。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel53Refactor9_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Martin Fowler, <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672" target="_blank" rel="external">Refactoring : Improving The Design of Existing Code</a><br>范綱, <a href="https://www.tenlong.com.tw/items/9864340468?item_id=1007025" target="_blank" rel="external">大話重構</a><br>Joey Chen, <a href="https://dotblogs.com.tw/hatelove/2013/01/11/learning-tdd-in-30-days-catalog-and-reference" target="_blank" rel="external">30 天快速上手 TDD</a><br>大澤木小鐵, <a href="http://slides.com/jaceju/design-patterns-by-examples/" target="_blank" rel="external">從實例學習設計模式 (使用 PHP)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[歸納自己天天使用的重構步驟]]>
    
    </summary>
    
      <category term="FP" scheme="http://oomusou.io/tags/FP/"/>
    
      <category term="OOP" scheme="http://oomusou.io/tags/OOP/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Forever 搭配 Laravel Queue 寄送 Email?]]></title>
    <link href="http://oomusou.io/laravel/laravel-email-queue-forever/"/>
    <id>http://oomusou.io/laravel/laravel-email-queue-forever/</id>
    <published>2016-11-25T12:23:43.000Z</published>
    <updated>2016-11-28T05:42:02.000Z</updated>
    <content type="html"><![CDATA[<p>傳統寄送 email 是採用同步的方式，也就是當你寄出一封信，必須等 email server 回應後，才可以繼續後續的程式動作，因此使用者會有明顯的等待時間；若能搭配 queue 機制，寄送 email 後，馬上以非同步的方式回到原來程式繼續執行，會有另外一個 process 去消耗 queue，負責寄送 email。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>Laravel 的 <code>Mail::send()</code> 是以同步方式寄送 email，會有明顯的等待時間；而 <code>Mail:queue()</code> 則是以非同步的方式寄送 email，速度非常快，不過必須搭配 queue 以及其他配套機制。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.45</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>先以 <code>Mail::send()</code> 透過 Gmail 寄送信件，然後再改用 <code>Mail::queue()</code> 方式寄送信件。</p>
<h2 id="單元測試_:_由_Sync_寄信">單元測試 : 由 Sync 寄信</h2><hr>
<p><strong> MailServiceTest.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52QueueForever/commit/ce521d9a1e19880a95d2b93b519a32cdbee18aa8" target="_blank" rel="external">單元測試 : 由 sync 寄送信件</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/MailServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">MailService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 由<span class="title">Sync</span>寄送信件<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        App::call(MailService::class . <span class="string">'@mailBySync'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這裡沒做任何測試，只是透過 PHPUnit 啟動 sync 方式寄送信件。 </p>
<h2 id="設定使用_Gmail_寄信">設定使用 Gmail 寄信</h2><hr>
<p><strong> .env </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52QueueForever/commit/b1ceabb5988b5cf1b1a92141aec90cd279107e98" target="_blank" rel="external">設定使用 Gmail 寄信</a></span></span></span><br><figure class="highlight php"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">APP_ENV=local</span><br><span class="line">APP_DEBUG=<span class="keyword">true</span></span><br><span class="line">APP_KEY=base64:PABSMLELX37jW2jJdwm9Fk6LvUWupulQXAWDZcfA7xE=</span><br><span class="line">APP_URL=http:<span class="comment">//localhost</span></span><br><span class="line"></span><br><span class="line">DB_CONNECTION=sqlite</span><br><span class="line">DB_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line"><span class="comment">#DB_DATABASE=homestead</span></span><br><span class="line">DB_USERNAME=homestead</span><br><span class="line">DB_PASSWORD=secret</span><br><span class="line"></span><br><span class="line">CACHE_DRIVER=file</span><br><span class="line">SESSION_DRIVER=file</span><br><span class="line">QUEUE_DRIVER=sync</span><br><span class="line"></span><br><span class="line">REDIS_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">REDIS_PASSWORD=<span class="keyword">null</span></span><br><span class="line">REDIS_PORT=<span class="number">6379</span></span><br><span class="line"></span><br><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=smtp.gmail.com</span><br><span class="line">MAIL_PORT=<span class="number">587</span></span><br><span class="line">MAIL_USERNAME=[your gmail address]</span><br><span class="line">MAIL_PASSWORD=[your password]</span><br><span class="line">MAIL_ENCRYPTION=tls</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=smtp.gmail.com</span><br><span class="line">MAIL_PORT=<span class="number">587</span></span><br><span class="line">MAIL_USERNAME=[your gmail address]</span><br><span class="line">MAIL_PASSWORD=[your password]</span><br><span class="line">MAIL_ENCRYPTION=tls</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong> MAIL_HOST </strong> : 設定為 <code>smtp.gmail.com</code>。</li>
<li><strong> MAIL_PORT </strong> : 設定為 <code>587</code>。</li>
<li><strong> MAIL_USERNAME </strong> : 設定你的 Gmail 帳號，如 <code>example@gmail.com</code>。</li>
<li><strong> MAIL_PASSWORD </strong> : 設定你的 Gmail 密碼。</li>
<li><strong> MAIL_ENCRYPTION </strong> : 設定為 <code>tls</code>。</li>
</ul>
<h2 id="由_Sync_寄信">由 Sync 寄信</h2><hr>
<p><strong> MailService.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52QueueForever/commit/b8bbd243b04d78d57c1307193e07bdb832728817" target="_blank" rel="external">由 sync 寄送信件</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/MailService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Mail</span>\<span class="title">Message</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Mail</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mailBySync</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Mail::send(<span class="string">'welcome'</span>, [], <span class="function"><span class="keyword">function</span> <span class="params">(Message <span class="variable">$message</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$message</span>-&gt;sender(<span class="string">'oomusou@gmail.com'</span>);</span><br><span class="line">            <span class="variable">$message</span>-&gt;subject(<span class="string">'Laravel 5.2 mail by Sync'</span>);</span><br><span class="line">            <span class="variable">$message</span>-&gt;to(<span class="string">'oomusou@gmail.com'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>Mail::send()</code> 寄送信件。</p>
<ul>
<li>第 1 個參數為 blade 檔案名稱。</li>
<li>第 2 個參數為要傳給 blade 的陣列，若不傳任何資料，也要傳一個空陣列。</li>
<li>第 3 個參數為 closure，主要是 Laravel 希望你將 <code>Message</code> 物件資料填滿。</li>
</ul>
<p>實際執行會發現，<code>Mail::send()</code> 會需要等 1 到 2 秒才會執行完，因為是同步，要等 smtp server 回應後才會繼續執行。</p>
<h2 id="單元測試_:_由_Queue_寄信">單元測試 : 由 Queue 寄信</h2><hr>
<p><strong> MailServiceTest.php </strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52QueueForever/commit/35b2742d6a3edfb8b60d34b41c6a9f249cb3aaa6" target="_blank" rel="external">單元測試 : 由 queue 寄送信件</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/MailServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">MailService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 由<span class="title">queue</span>寄送信件<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        App::call(MailService::class . <span class="string">'@mailByQueue'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這裡沒做任何測試，只是透過 PHPUnit 啟動 queue 方式寄送信件。 </p>
<h2 id="設定本機環境使用_Queue">設定本機環境使用 Queue</h2><hr>
<p><strong> .env </strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52QueueForever/commit/f6655a2592eb140e68e8a727464c81b1ad22c37a" target="_blank" rel="external">設定本機環境使用 queue</a></span></span></span><br><figure class="highlight php"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">APP_ENV=local</span><br><span class="line">APP_DEBUG=<span class="keyword">true</span></span><br><span class="line">APP_KEY=base64:PABSMLELX37jW2jJdwm9Fk6LvUWupulQXAWDZcfA7xE=</span><br><span class="line">APP_URL=http:<span class="comment">//localhost</span></span><br><span class="line"></span><br><span class="line">DB_CONNECTION=sqlite</span><br><span class="line">DB_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line"><span class="comment">#DB_DATABASE=homestead</span></span><br><span class="line">DB_USERNAME=homestead</span><br><span class="line">DB_PASSWORD=secret</span><br><span class="line"></span><br><span class="line">CACHE_DRIVER=file</span><br><span class="line">SESSION_DRIVER=file</span><br><span class="line"><span class="comment">#QUEUE_DRIVER=sync</span></span><br><span class="line">QUEUE_DRIVER=database</span><br><span class="line"></span><br><span class="line">REDIS_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">REDIS_PASSWORD=<span class="keyword">null</span></span><br><span class="line">REDIS_PORT=<span class="number">6379</span></span><br><span class="line"></span><br><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=smtp.gmail.com</span><br><span class="line">MAIL_PORT=<span class="number">587</span></span><br><span class="line">MAIL_USERNAME=[your gmail address]</span><br><span class="line">MAIL_PASSWORD=[your password]</span><br><span class="line">MAIL_ENCRYPTION=tls</span><br></pre></td></tr></table></figure></p>
<p>15 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#QUEUE_DRIVER=sync</span></span><br><span class="line">QUEUE_DRIVER=database</span><br></pre></td></tr></table></figure></p>
<p><code>QUEUE_DRIVER</code> 由 <code>sync</code> 改成 <code>database</code>。</p>
<h2 id="設定測試環境使用_Queue">設定測試環境使用 Queue</h2><hr>
<p><strong> phpunit.xml </strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52QueueForever/commit/9402ace92066c9ca89147c234ac2005ac53ae339" target="_blank" rel="external">設定測試環境使用 queue</a></span></span></span><br><figure class="highlight xml"><figcaption><span>phpunit.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">phpunit</span> <span class="attribute">backupGlobals</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">backupStaticAttributes</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">bootstrap</span>=<span class="value">"bootstrap/autoload.php"</span></span><br><span class="line">         <span class="attribute">colors</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertErrorsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertNoticesToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertWarningsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">processIsolation</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">stopOnFailure</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">testsuites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">testsuite</span> <span class="attribute">name</span>=<span class="value">"Application Test Suite"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">"Test.php"</span>&gt;</span>./tests<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">testsuite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">testsuites</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">whitelist</span> <span class="attribute">processUncoveredFilesFromWhitelist</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">".php"</span>&gt;</span>./app<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">file</span>&gt;</span>./app/Http/routes.php<span class="tag">&lt;/<span class="title">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">whitelist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"database"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"sqlite"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">phpunit</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>24 行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"database"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"sqlite"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>將 <code>CACHE_DRIVER</code> 與 <code>SESSION_DRIVER</code> 部分刪除。</li>
<li>將 <code>QUEUE_DRIVER</code> 改成 <code>database</code>。</li>
<li>將 <code>DB_CONNECTION</code> 改成 <code>sqlite</code>。</li>
</ul>
<p><code>CACHE_DRIVER</code> 與 <code>SESSION_DRIVER</code> 必須刪除，否則無法再測試環境使用非同步方式寄送 email。</p>
<p>儘管我們之前已經在 <code>.env</code> 的 <code>QUEUE_DRIVER</code> 改成 <code>database</code>，但 <code>phpunit.xml</code> 的 <code>QUEUE_DRIVER</code> 的 <code>sync</code> 設定會覆蓋掉 <code>.env</code> 的設定，所以這邊也要改成 <code>database</code>。</p>
<p>不能如一般單元測試的 <code>DB_CONNECTION</code> 設定成 <code>sqlite_testing</code>，也就是將資料庫設定成 <code>:memory:</code>，因為這種方式是使用 SQLite in Memory，只要測試一執行完，SQLite in Memory 就會被刪除，因此無法被 Forever 使用，因而無法使用非同步方式寄送 email。</p>
<h2 id="建立_jobs_table">建立 jobs table</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan queue:table&#10;oomusou@mac:~/MyProject$ php artisan migrate</span><br></pre></td></tr></table></figure>
<p>目前是將 queue 建立在資料庫，因此須建立 <code>jobs</code> table。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52QueueForever/commit/70868c78471097febf2e5ea0a2dbbc5aa16ede0d" target="_blank" rel="external">建立 jobs table</a></span></span></span></p>
<h2 id="安裝_Forever">安裝 Forever</h2><hr>
<p>在 Laravel 的 <a href="https://laravel.com/docs/5.2/queues#supervisor-configuration" target="_blank" rel="external">Queues</a> 文件中，是建議大家使用 <code>Supervisor</code>，它會讓 <code>php artisan queue:listen</code> 在背景執行，持續地消耗 queue，不過 <code>Supervisor</code> 是 Linux 的程式，無法在 Windows 與 macOS 執行，因此對於開發並不方便。</p>
<p>這裡介紹的是由 Node.js 開發的 <a href="https://github.com/foreverjs/forever" target="_blank" rel="external">Forever</a>，功能與 <code>Supervisor</code> 完全一樣，但因為由 Node.js 所開發，在 Windows、 macOS 與 Linux 都可執行，只要能能成功安裝 Node.js 即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/$ npm install -g forever</span><br></pre></td></tr></table></figure>
<p>將 <code>forever</code> 全域安裝。</p>
<h2 id="啟動_Forever">啟動 Forever</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/$ forever start -l /Users/oomusou/Code/Laravel/Laravel52QueueForever/forever.log -c php artisan queue:work</span><br></pre></td></tr></table></figure>
<ul>
<li><strong> start </strong> : 使用 forever 啟動其他服務。</li>
<li><strong> -l </strong> : 指定 log 位置， <code>Forever</code> 預設將 log 放在 <code>~/.forever</code> 目錄下，且每次啟動為亂數，若你想將 log 指定在特定目錄，並使用特定檔名，則必須使用 <code>-l</code>，且必須使用完整路徑。 </li>
<li><strong> -c </strong> : 要啟動的 CLI 命令，使用 <code>php artisan queue:work</code> 執行 queue worker。</li>
</ul>
<h2 id="由_Queue_寄信">由 Queue 寄信</h2><hr>
<p><strong> MailService.php </strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52QueueForever/commit/b8bbd243b04d78d57c1307193e07bdb832728817" target="_blank" rel="external">由 queue 寄送信件</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/MailService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Mail</span>\<span class="title">Message</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Mail</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mailByQueue</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Mail::queue(<span class="string">'welcome'</span>, [], <span class="function"><span class="keyword">function</span> <span class="params">(Message <span class="variable">$message</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$message</span>-&gt;sender(<span class="string">'oomusou@gmail.com'</span>);</span><br><span class="line">            <span class="variable">$message</span>-&gt;subject(<span class="string">'Laravel 5.2 mail by Queue'</span>);</span><br><span class="line">            <span class="variable">$message</span>-&gt;to(<span class="string">'oomusou@gmail.com'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>Mail::queue()</code> 寄送信件，其他參數與 <code>Mail::send()</code> 完全相同。</p>
<p>實際執行發現，<code>Mail::queue()</code> 會馬上執行完，不會有任何等待，因為是非同步，不用等 smtp server 回應就可繼續執行。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由同步改成非同步方式寄信，在程式方面，只要將 <code>Mail::send()</code> 改成 <code>Mail::queue()</code> 即可。</li>
<li>Laravel 支援多種 queue，本文使用最簡單的資料庫方式。</li>
<li><code>Forever</code> 為 Node.js 所開發，在 Windows、macOS 與 Linux 都可使用，非常方便。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52QueueForever" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Taylor Otwell, <a href="https://laravel.com/docs/5.2/mail" target="_blank" rel="external">Mail</a><br>Taylor Otwell, <a href="https://laravel.com/docs/5.2/queues" target="_blank" rel="external">Queues</a><br>foreverjs, <a href="https://github.com/foreverjs/forever" target="_blank" rel="external">forever</a></p>
]]></content>
    <summary type="html">
    <![CDATA[以非同步的方式寄送 Email 加快執行速度]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PHPUnit 測試 private 與 protected method?]]></title>
    <link href="http://oomusou.io/phpunit/phpunit-test-private/"/>
    <id>http://oomusou.io/phpunit/phpunit-test-private/</id>
    <published>2016-11-20T12:23:43.000Z</published>
    <updated>2016-11-21T00:53:00.000Z</updated>
    <content type="html"><![CDATA[<p>剛開始學習寫測試時，最多人的疑問就是該如何測試 <code>private</code> 與 <code>protected</code> method? 理論上不該去測試 <code>private</code> 與 <code>protected</code>，本文會介紹一個 PHP 邪惡的技巧來完成測試，但建議除非萬不得已，不要使用此方法。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>在 PHPConf 第二天的 workshop，我曾經舉手問 PHPUnit 的原作者 Sabastian Bergmann：<code>How to test private and protected method?</code>，Sabastian 的回答也很鏗鏘有力：<code>You can&#39;t</code>，實務上我也真的沒測試過 <code>private</code> 與  <code>protected</code> method，不過藉此機會理解為什麼不該測試 <code>private</code> 與 <code>protected</code> 也是不錯的。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.3.10<br>PHPUnit 5.5.5</p>
<h2 id="為什麼不該測試_private_與_protected?">為什麼不該測試 private 與 protected?</h2><hr>
<ol>
<li><p>測試案例是來自於需求，<code>public</code> 才是來自於需求，而 <code>private</code> 與 <code>protected</code> 則是來自於<strong>重構</strong>，所以不應該特別去測試，而應該由 <code>public</code> 的測試案例自然去測試 <code>private</code> 與 <code>protected</code>。</p>
</li>
<li><p>若特別去測試 <code>private</code> 與 <code>protected</code>，則 coverage 將沒有意義，可以特別只針對 <code>private</code> 與 <code>protected</code> 寫測試，而達成 coverage 為 <code>100%</code>，正確方法應該根據需求只測試 <code>public</code>，若有些 <code>private</code> 與 <code>protected</code> 因而沒測試到，則有兩種可能：一個是測試案例不足，導致 <code>private</code> 與 <code>protected</code> 沒測到，另一個則是目前根本無此需求，沒測到的 <code>private</code> 與 <code>protected</code> 就是 over design。</p>
</li>
<li><p>根據物件導向的<strong>封裝</strong>特性，<code>public</code> 會根據 interface 而穩定，但 <code>private</code> 與 <code>protected</code> 則會隨著日後<strong>重構</strong>而變化，若直接針對 <code>private</code> 與 <code>protected</code> 寫測試，則日後只要一重構，就必須修改測試，則將影響測試程式的<strong>健狀性</strong>，測試應該隨著<strong>需求</strong>改變而修改，不該隨著程式碼<strong>重構</strong>而修改。</p>
</li>
</ol>
<h2 id="實際案例">實際案例</h2><hr>
<p>若真的萬不得已，需要對 <code>private</code> 與 <code>protected</code> 做測試時，以下介紹一個簡單的方式。</p>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitPrivateTest_demo/commit/17f65cac2469d1d6af871cebde10a3b9d01bb80f" target="_blank" rel="external">新增 ShippingService</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若 <code>calculateFee()</code> 為 <code>private</code>，我們該怎麼為這段程式補上測試呢?</p>
<p><strong> 單元測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitPrivateTest_demo/commit/89bdc1540df918a362a4acf3dedbc523fd174add" target="_blank" rel="external">單元測試 : ShippingService 使用 Closure::call()</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 當重量為1<span class="title">kg</span>時費用為110元<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$__calculateFee</span> = <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> : <span class="title">int</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$this</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$__calculateFee</span>-&gt;call(<span class="variable">$target</span>, <span class="variable">$weight</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$target</span> = App::make(ShippingService::class);</span><br></pre></td></tr></table></figure></p>
<p>建立 <code>$target</code> 測試物件，在本範例寫 <code>$target = new ShippingService()</code> 亦可，不過若在 class 內有使用到依賴注入，則必須使用 <code>App::make()</code>， 此時 Laravel 的 service container 會自動注入相對應的物件，實務上在寫測試時，建議使用 <code>App::make()</code> 取代 <code>new</code>。</p>
<p>15 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$__calculateFee</span> = <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> : <span class="title">int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>因為 <code>calculateFee()</code> 為 <code>private</code>，我們無法測試，因此特別建立一個 <code>$__calculateFee</code> closure，由 closure 內部去呼叫 <code>private</code> 的 <code>calculateFee()</code>。</p>
<p>20 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$actual</span> = <span class="variable">$__calculateFee</span>-&gt;call(<span class="variable">$target</span>, <span class="variable">$weight</span>);</span><br></pre></td></tr></table></figure></p>
<p>在 PHP 7，<code>Closure</code> 物件新提供了 <code>call()</code>，可以讓我們直接將一個物件動態綁定到 closure 的 <code>$this</code>。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於 PHP 7 的 <code>Closure::call()</code>，詳細請參考 <a href="http://php.net/manual/en/closure.call.php" target="_blank" rel="external">Closure::call</a></span></span></span></p>
<p>closure 內的 <code>$this</code>，就會如同 JavaScript 的 <code>this</code> 一樣，自動指向被綁定的物件，如此我們就可以由自己建立的 closure，透過 <code>this</code> 去存取 <code>private</code> method。</p>
<p><code>call()</code> 的第一個參數為要綁定的物件，之後的參數為要傳給 closure 的參數。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>事實上這就是 PHP 5.4 所提供的 <code>bindTo()</code>，只是 PHP 7 的 <code>Closure::bind()</code> 可讀性更高，若想了解 <code>bindTo()</code>，詳細請參考 <a href="/php/php-bindTo/">深入探討 bindTo()</a></span></span></span></p>
<p>24 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>測試結果是否如預期。</p>
<p><img src="/images/phpunit/phpunit-test-private/private000.png" alt=""></p>
<p>實際跑單元測試，會得到 <span class="label label-success">綠燈</span>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>非到萬不得已，不應該直接測試 <code>private</code> 與 <code>protected</code>，不要為了測試而測試。</li>
<li>本文以 <code>private</code> 為範例，也可以套用在 <code>protected</code>，一樣使用 <code>Closure::call()</code> 的方式。</li>
<li><code>Closure::call()</code> 違反物件導向封裝原則，實務上不建議使用，除非真的萬不得已。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel53PHPUnitPrivateTest_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PHP, <a href="http://php.net/manual/en/closure.call.php" target="_blank" rel="external">Closure::call</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Closure::call() 測試 private 與 protected method]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PHPUnit mock Closure?]]></title>
    <link href="http://oomusou.io/phpunit/phpunit-closure-mock/"/>
    <id>http://oomusou.io/phpunit/phpunit-closure-mock/</id>
    <published>2016-11-19T12:23:43.000Z</published>
    <updated>2016-11-20T02:52:57.000Z</updated>
    <content type="html"><![CDATA[<p>若有需求需要抽換，物件導向編程教我們的是開 interface 達成解耦合，然後使用依賴注入，最後達成依賴反轉目標，隨著函數式編程越來越流行，函數式編程教我們將 closure 當成參數傳進函式，一樣可以解耦合與依賴反轉，尤其對於只使用一次的需求特別有效，不用在另外開 interface 與 class，但在單元測試則面臨挑戰，我們該如何 mock closure 呢？</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>在 PHPConf 第二天的 workshop，我曾經舉手問 PHPUnit 的原作者 Sabastian Bergmann：<code>How to mock closure?</code>，Sabastian 的回答也很鏗鏘有力：<code>You can&#39;t</code>，在這篇 PHPUnit 的 <a href="https://github.com/sebastianbergmann/phpunit-mock-objects/issues/257" target="_blank" rel="external">Closure mock Issue</a>，也有人建議 PHPUnit 支援 mock closure，不過 Sabastian 的回答是</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  I might accept a pull request that implements this but I won't implement it myself.</div>
<p>不過實務上，仍有 mock closure 的需求，如 closure 內包含外部 API 或別人的 package，為了單元測試，能不 mock closure 嗎? 顯然不可能，除非你不使用 closure 寫法，而改用傳統物件導向的 interface 方式。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.3.10<br>PHPUnit 5.5.5</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>假設目前有 3 家貨運公司，每家公司的計費方式不同，使用者可以動態選擇不同的貨運公司。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>完整重構過程請參考 <a href="/tdd/tdd-di/">深入探討依賴注入</a>，本文只從 method injection 繼續重構成 closure。</span></span></span></p>
<h2 id="Method_Injection">Method Injection</h2><hr>
<p><strong> 單元測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/9bfce794d885ece5547b475b547e232aeda6bac9" target="_blank" rel="external">單元測試 : ShippingService 使用 interface</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$mock</span> = <span class="variable">$this</span>-&gt;createMock(BlackCat::class);</span><br><span class="line">        <span class="variable">$mock</span>-&gt;expects(<span class="variable">$this</span>-&gt;once())</span><br><span class="line">            -&gt;method(<span class="string">'calculateFee'</span>)</span><br><span class="line">            -&gt;withAnyParameters()</span><br><span class="line">            -&gt;willReturn(<span class="number">110</span>);</span><br><span class="line"></span><br><span class="line">        App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span> = <span class="variable">$this</span>-&gt;createMock(BlackCat::class);</span><br></pre></td></tr></table></figure></p>
<p>PHPUnit 直接使用 <code>createMock()</code> 建立 mock 物件。</p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span>-&gt;expects(<span class="variable">$this</span>-&gt;once())</span><br><span class="line">    -&gt;method(<span class="string">'calculateFee'</span>)</span><br><span class="line">    -&gt;withAnyParameters()</span><br><span class="line">    -&gt;willReturn(<span class="number">110</span>);</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>expects()</code> : 設定預期該 mock 的 method 要執行幾次，<code>$this-&gt;once()</code> 為只執行一次。</li>
<li><code>method()</code> : 設定要 mock 的 method 名稱。</li>
<li><code>withAnyParameters()</code> : 不考慮 method 的任何參數。</li>
<li><code>willReturn()</code> : 設定該 mock 的 method 的回傳值。</li>
</ul>
<p>19 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br></pre></td></tr></table></figure></p>
<p>告訴 Laravel 的 service container，當遇到 <code>LogisticsInterface</code> 的依賴注入時，一律改注入成剛剛由 PHPUnit 所建立的 mock。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>實際測試 <code>ShippingService</code> 的 <code>calculateFee()</code>。</p>
<p>由於 <code>calculateFee()</code> 使用了 method injection，所以必須改用 Laravel service container 所提供的 <code>App::call()</code> 執行，才會啟動 method injection，自動注入剛剛建立的 mock。</p>
<p>第一個參數要傳進 class 的完整名稱，加上 <code>@</code> 與 method 名稱。</p>
<p>第二個參數為陣列，傳進其他參數，其中 key 為 參數名稱，value 為要傳進參數的變數。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於 <code>App::call()</code>，詳細請參考<a href="/tdd/tdd-di/#Method_Injection">深入探討依賴注入之 Method Injection</a>。</span></span></span></p>
<p>28 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>實際測試結果是否為 <code>110</code>。</p>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/6eb814f4aeeca9a58a52db55c5465861e78569b8" target="_blank" rel="external">建立 ShippingService 使用 interface</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>, LogisticsInterface <span class="variable">$logistics</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 method injection 由 <code>LogisticsInterface</code> 注入 <code>$logistics</code>。</p>
<p>由於 <code>LogisticsInterface</code> 有定義 <code>calculateFee()</code>，因此我們可以在 <code>$logistics</code> 物件使用 <code>calculateFee()</code>。</p>
<p><strong> LogisticsInterface.php </strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/24aa08e727caa463edaad771ea221687ad9ee22f" target="_blank" rel="external">建立 LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/LogisticsInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>)</span> : <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>定義 <code>LogisticsInterface</code> 有 <code>calculateFee()</code>。</p>
<p><strong> BlackCat.php </strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/c25e20315b873a9fe139e2ef9114516f20b09f9e" target="_blank" rel="external">建立 BlackCat 實現 LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>BlackCat</code> 必須實現 <code>LogisticsInterface</code> 所定義的 <code>calculateFee()</code>，將實際的計算運費演算法在此實現。</p>
<p><img src="/images/phpunit/phpunit-closure-mock/closure000.png" alt=""></p>
<p>實際跑單元測試，會得到第 1 個 <span class="label label-success">綠燈</span>。</p>
<p><strong> 整合測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/ffabd0f165734227fce1e39996869d128739a055" target="_blank" rel="external">整合測試 : ShippingService 使用 interface</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓整合測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        App::bind(LogisticsInterface::class, BlackCat::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>12 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line">App::bind(LogisticsInterface::class, BlackCat::class);</span><br></pre></td></tr></table></figure></p>
<p>整合測試就不再 mock 了，而是實際由 <code>App::bind()</code> 告訴 Laravel service container，當遇到 <code>LogisticsInterface</code> 時，要依賴注入 <code>BlackCat</code> 物件。</p>
<p>15 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>一樣使用 <code>App::call()</code> 呼叫 <code>ShippingService</code> 的 <code>calculateFee()</code>，因為使用了 method injection。</p>
<p><img src="/images/phpunit/phpunit-closure-mock/closure001.png" alt=""></p>
<p>實際跑整合測試，會得到第 2 個 <span class="label label-success">綠燈</span>。</p>
<h2 id="重構成_Closure">重構成 Closure</h2><hr>
<p>若<strong>計算運費</strong>的邏輯在整個專案只使用一次，為此大費周章建立 interface 與 class， 或許殺雞用牛刀了，對於這種只使用一次的需求，函數式編程就特別有效，我們可以再繼續將 interface 重構成 closure。</p>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/fb691e1027ee6f5e1025bbf8f4c80c2cbd1fce18" target="_blank" rel="external">重構 ShippingService 使用 closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@param</span> callable $logistics</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>, callable <span class="variable">$logistics</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 <code>$logistics</code> 的 type hint 從原本的 <code>LogisticsInterface</code> 改成 <code>callable</code>，因為我們要重構成 closure 方式。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>關於 <code>callable</code>，詳細請參考 <a href="http://localhost:4000/php/php-closure/" target="_blank" rel="external">如何使用 Closure?</a></span></span></span></p>
<p>既然 <code>$logistics</code> 為 closure，我們就可以直接以 <code>$logistics($weight)</code> 的方式執行了。</p>
<p><strong> 單元測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/9a1347a16940686651b8333d3fad1a0a0a1ea9e7" target="_blank" rel="external">單元測試 : ShippingService 使用 closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$mock</span> = <span class="variable">$this</span>-&gt;createPartialMock(stdClass::class, [<span class="string">'__invoke'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mock</span>-&gt;expects(<span class="variable">$this</span>-&gt;once())</span><br><span class="line">            -&gt;method(<span class="string">'__invoke'</span>)</span><br><span class="line">            -&gt;withAnyParameters()</span><br><span class="line">            -&gt;willReturn(<span class="number">110</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span>    =&gt; <span class="variable">$weight</span>,</span><br><span class="line">            <span class="string">'logistics'</span> =&gt; <span class="variable">$mock</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>11 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span> = <span class="variable">$this</span>-&gt;createPartialMock(stdClass::class, [<span class="string">'__invoke'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>這一行有 3 個重點 :</p>
<ol>
<li>為什麼要 mock <code>__invoke</code>?</li>
<li>為什麼是 <code>stdClass</code> ?</li>
<li>什麼是 Partial Mock?</li>
</ol>
<p><strong> 為什麼要 mock <code>__invoke</code>? </strong><br><figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$anonyFunc</span> = <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$name</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> . <span class="variable">$name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$anonyFunc</span>(<span class="string">"Josh"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// Hello Josh</span></span><br></pre></td></tr></table></figure></p>
<p>將 anoymous function 指定給 <code>anonyFunc</code> 變數，但實際上 <code>anonyFunc</code> 為 <code>Closure</code> 物件，它看起來像函式，卻是個物件，與函式相同語法，可接受參數，也可回傳參數，但是卻沒有函式名稱。</p>
<p>但事實上在 PHP 底層，這個 anonymous function 是實作在 <code>Closure</code> 物件的 <code>__invoke()</code> 這個 magic method，因此我們也可以這樣寫</p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$anonyFunc</span> = <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$name</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">return</span> <span class="string">'Hello '</span> . <span class="variable">$name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$anonyFunc</span>-&gt;__invoke(<span class="string">"Josh"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// Hello Josh</span></span><br></pre></td></tr></table></figure>
<p>執行結果完全一樣。</p>
<p>實務上我們不會去使用 <code>__invoke()</code>，但 PHP 底層卻是靠 <code>__invoke()</code> 去實作 anonymous function。<span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>關於 <code>__invoke()</code>，詳細請參考 <a href="http://localhost:4000/php/php-closure/" target="_blank" rel="external">如何使用 Closure?</a></span></span></span></p>
<p>但因為我們現在是要去 mock closure，因此就相當於要去 mock <code>__invoke()</code>。</p>
<p><strong> 為什麼是 <code>stdClass</code>? </strong></p>
<p>我們知道 anonymous function 底層是 <code>Closure</code> 物件，理論上要去 mock <code>Closure</code> class，但令人沮喪的是，<code>Closure</code> 在 PHP 內部已經被宣告成 <code>final</code>，因此無從 mock。</p>
<blockquote><p>The predefined final class Closure was introduced in PHP 5.3.0. It is used for representing anonymous functions.</p>
<footer><strong>PHP </strong><cite><a href="http://php.net/manual/en/reserved.classes.php" target="_blank" rel="external">Closure</a></cite></footer></blockquote>
<p>別忘了 PHP 的 Duck Type 特性 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當看到一隻鳥走起來像鴨子、游泳起來像鴨子、叫起來也像鴨子，那麼這隻鳥就可以被稱為鴨子。</div>
<p>既然如此，我們就可以對 <code>stdClass</code> 動刀，讓他加上 <code>__invoke()</code>，並對 <code>__invoke()</code> 加以 mock，讓他看起來像 <code>Closure</code>。</p>
<p><strong> 什麼是 Partial Mock? </strong></p>
<p>一般我們只會使用普通 Mock，但有兩個地方可能會用到 Partial Mock :</p>
<ol>
<li>當你不想 mock 一個 class 所有 method，只想 mock 其中一兩個 method 時。</li>
<li>當你想 mock 一個無中生有的 method 時。</li>
</ol>
<p><code>stdClass</code> 並沒有任何 method，且 <code>__invoke()</code> 本應屬於 <code>Closure</code>，對於 <code>stdClass</code> 是無中生有的，因此我們必須使用 Partial Mock 才能將 <code>__invoke()</code> 加在 <code>stdClass</code> 上。</p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span>-&gt;expects(<span class="variable">$this</span>-&gt;once())</span><br><span class="line">    -&gt;method(<span class="string">'__invoke'</span>)</span><br><span class="line">    -&gt;withAnyParameters()</span><br><span class="line">    -&gt;willReturn(<span class="number">110</span>);</span><br></pre></td></tr></table></figure></p>
<p>接下來則跟普通 mock 方式一樣，可以發現我們是直接對 <code>__invoke()</code> 做 mock。</p>
<p>19 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">   <span class="string">'weight'</span>    =&gt; <span class="variable">$weight</span>,</span><br><span class="line">   <span class="string">'logistics'</span> =&gt; <span class="variable">$mock</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>將 mock 物件透過 <code>App::call()</code> 傳入。</p>
<p><img src="/images/phpunit/phpunit-closure-mock/closure002.png" alt=""></p>
<p>實際跑單元測試，會得到第 3 個 <span class="label label-success">綠燈</span>。</p>
<p><strong> 整合測試 ShippingServiceTest.php </strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo/commit/1303628c3c07cce3cf53572c7ddc1d2b3729bc15" target="_blank" rel="external">整合測試 : ShippingService 使用 closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓整合測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span>    =&gt; <span class="variable">$weight</span>,</span><br><span class="line">            <span class="string">'logistics'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> + <span class="number">10</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span>    =&gt; <span class="variable">$weight</span>,</span><br><span class="line">    <span class="string">'logistics'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>整合測試與單元測試的差異就是不 mock，因此我們直接將 closure 傳入。</p>
<p><img src="/images/phpunit/phpunit-closure-mock/closure003.png" alt=""></p>
<p>實際跑整合測試，會得到第 4 個 <span class="label label-success">綠燈</span>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Mock closure 並非是炫技，實務上經常用到，尤其當你從物件導向編程，慢慢趨向函數式編程時，常常會重構成 closure，Taylor Otwell 在 Laravel 內部也大量使用 closure，只要使用到 closure，就可能面臨在單元測試時隔離 closure 的需求，透過本文的方式，你將可輕鬆的將 closure 加以 mock。<span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>關於 closure 實務上的應用，詳細請參考 <a href="/php/php-closure-practice/">實務上如何活用 Closure?</a></span></span></span></li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel53PHPUnitMockClosure_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PHPUnit, <a href="https://github.com/sebastianbergmann/phpunit-mock-objects/issues/257" target="_blank" rel="external">Closure mock Issue</a><br>Sabastian Bergmann, <a href="https://thephp.cc/dates/2016/10/phpconf-taiwan/lately-in-phpunit" target="_blank" rel="external">PHPConf Taiwan 2016 Lately in PHP(Unit)</a><br>大澤木小鐵, <a href="http://jaceju.net/2015-11-09-php-closure-testing/" target="_blank" rel="external">在 PHPUnit 中測試需要 closure 的函式</a></p>
]]></content>
    <summary type="html">
    <![CDATA[為了隔離測試，實務上還是有 mock closure 的需求，不過 PHPUnit 目前無法直接 mock closure]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 使用 Angular CLI 建立 Angular 2 專案?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-angular-cli/"/>
    <id>http://oomusou.io/webstorm/webstorm-angular-cli/</id>
    <published>2016-11-15T12:23:43.000Z</published>
    <updated>2016-11-25T02:42:42.000Z</updated>
    <content type="html"><![CDATA[<p>Angluar 2 提供了 Angular CLI，一些原本必須自己使用前端自動化工具的部分，Angular CLI 都能幫我做到，讓我們不用為整合前端工具煩惱；除此之外，WebStorm 也支援 Angular CLI，讓我們可以在 WebStorm 內直接使用 Angular CLI。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Angular 2.1.2<br>Angular CLI 1.0.0-beta.19-3<br>WebStorm 2016.3</p>
<h2 id="安裝_Angular_CLI">安裝 Angular CLI</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ npm install -g angular-cli</span><br></pre></td></tr></table></figure>
<h2 id="建立新專案">建立新專案</h2><hr>
<p><img src="/images/webstorm/webstorm-angular-cli/hello000.png" alt=""></p>
<p>選擇 <code>Create New Project</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello001.png" alt=""></p>
<p>選擇左側 <code>Angular CLI</code>，WebStorm 會自動抓到你目前所安裝的 Node.js 與 Angular CLI 路徑。</p>
<p>只要輸入專案路徑即可。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello002.png" alt=""></p>
<p>當 NPM 安裝完所有套件後，會顯示 <code>Done</code>。</p>
<h2 id="啟動_Web_Server">啟動 Web Server</h2><hr>
<p><img src="/images/webstorm/webstorm-angular-cli/hello003.png" alt=""></p>
<p>選擇 <code>package.json</code>，按滑鼠右鍵選擇 <code>Show npm Scripts</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello004.png" alt=""></p>
<p>點兩下 <code>start</code> 啟動 Angular CLI 內建的 Web Server。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello005.png" alt=""></p>
<p>在瀏覽器輸入 <code>http://localhost:4200</code>，若出現 <code>app works!</code>，表示 Angular 2 已經正常啟動。</p>
<h2 id="建立_Component">建立 Component</h2><hr>
<p><img src="/images/webstorm/webstorm-angular-cli/hello006.png" alt=""></p>
<p>選擇 <code>src</code> 目錄，按熱鍵 &#8984; +  N，選擇 <code>Angular CLI...</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello007.png" alt=""></p>
<p>選擇 <code>component</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello008.png" alt=""></p>
<p>輸入 component 名稱 : <code>hello-world</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello009.png" alt=""></p>
<p>WebStorm 會呼叫 Angular CLI 幫我們建立 <code>hello-world</code> component，其 selector 為 <code>app-hello-world</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2HelloWorld/commit/fbaf4864f3f7b265dd2a2e1793ba356ceb91bee9" target="_blank" rel="external">建立 hello-world component</a></span></span></span></p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello012.png" alt=""></p>
<p>其 HTML 為 <code>hello-world works!</code>。</p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello010.png" alt=""></p>
<p>在 <code>app.component.html</code> 加上 <code>app-hello-world</code> tag。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2HelloWorld/commit/c944bbbceed1fda1959306f9e019a13a8d7181b2" target="_blank" rel="external">加入 hello-world component</a></span></span></span></p>
<p><img src="/images/webstorm/webstorm-angular-cli/hello011.png" alt=""></p>
<p>瀏覽器會自動更新，顯示我們新加上的 <code>hello-world</code> component。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>WebStorm 內建支援 Angular CLI，除了可以直接透過 Angular CLI 建立專案外，還可以直接在 WebStorm 建立 component、directive、service …等，非常方便。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Angular2HelloWorld" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>JetBrains, <a href="https://blog.jetbrains.com/webstorm/2016/08/webstorm-2016-3-early-access-preview/#ng-cli" target="_blank" rel="external">WebStorm 2016.3 Early Access Preview : Flow, PostCSS, and more</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用圖形化工具建立 Angular 2 專案]]>
    
    </summary>
    
      <category term="Angular 2" scheme="http://oomusou.io/tags/Angular-2/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何設定 WebStorm 的 TypeScript 與 TSLint ?]]></title>
    <link href="http://oomusou.io/webstorm/webstorm-typescript-version/"/>
    <id>http://oomusou.io/webstorm/webstorm-typescript-version/</id>
    <published>2016-11-11T12:23:43.000Z</published>
    <updated>2016-11-11T08:34:53.000Z</updated>
    <content type="html"><![CDATA[<p>WebStorm 已經內建 TypeScript，只要安裝完 WebStorm 就可以開始寫 TypeScript，但由於 TypeScript 更新快速，你可能會想自己更新 TypeScript 版本，此外，WebStorm 並沒有內建 TSLint，需另外安裝設定。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.0.9<br>WebStorm 2016.2.4</p>
<h2 id="TypeScript">TypeScript</h2><hr>
<h3 id="安裝_TypeScript">安裝 TypeScript</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ npm install -g typescript</span><br></pre></td></tr></table></figure>
<h3 id="設定_WebStorm">設定 WebStorm</h3><p><img src="/images/webstorm/webstorm-typescript-version/version000.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; TypeScript </em></strong></p>
<p>WebStorm 內建已安裝 TypeScript 1.8.10，按 <code>Edit</code> 設定其他版本。</p>
<p><img src="/images/webstorm/webstorm-typescript-version/version001.png" alt=""></p>
<p>在 <code>Custom directory</code> 輸入 TypeScript 目錄。</p>
<p>TypeScript 預設會安裝在該 Node.js 版本下的 <code>lib/node_modules/typescript/lib</code> 。</p>
<p>以 Node.js 6.5 為例，TypeScript 會安裝在 <code>/Users/oomusou/.nvm/versions/node/v6.5.0/lib/node_modules/typescript/lib</code> 。</p>
<h2 id="TSLint">TSLint</h2><hr>
<h3 id="安裝_TSList">安裝 TSList</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ npm install -g tslint typescript</span><br></pre></td></tr></table></figure>
<h3 id="設定_WebStorm-1">設定 WebStorm</h3><p><img src="/images/webstorm/webstorm-typescript-version/version002.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; TypeScript -&gt; TSLint </em></strong></p>
<p>TSLint 預設會安裝在該 Node.js 版本下的 <code>lib/node_modules/tslint</code>。</p>
<ul>
<li>將 <code>Enable</code> 打勾。</li>
<li><strong>TSLint package</strong> : 以 Node.js 6.5 為例，TSLint 會安裝在 <code>/Users/oomusou/.nvm/versions/node/v6.5.0/lib/node_modules/tslint</code> 。</li>
</ul>
<p>安裝好 TSLint 之後，當你在寫 TypeScript 時，WebStorm 就會整合 Code Inspection，在編譯前就會顯示警告。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>WebStorm 非常適合開發 TypeScript，只要設定好環境，就可以發揮 WebStorm 的威力。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Microsoft, <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a><br>Palantir, <a href="https://palantir.github.io/tslint/" target="_blank" rel="external">TSLint</a><br>WebStorm Online Help, <a href="https://www.jetbrains.com/help/webstorm/2016.2/using-tslint-code-quality-tool.html" target="_blank" rel="external">Using TSLint Code Quality Tool</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓 WebStorm 支援 TypeScript 與 TSLint]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
      <category term="WebStorm" scheme="http://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 Anonymous Function 與 Arrow Function 的 this]]></title>
    <link href="http://oomusou.io/typescript/typescript-this/"/>
    <id>http://oomusou.io/typescript/typescript-this/</id>
    <published>2016-11-05T12:23:43.000Z</published>
    <updated>2016-11-06T12:27:42.000Z</updated>
    <content type="html"><![CDATA[<p>一般人印象，Arrow Function 只是 Anonymous Function 的 syntax sugur，讓我們用更精簡的語法來表達這類只使用一次的 function，但對於 <code>this</code> 的認知， 兩種表示法卻有很大的差別。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.0.7</p>
<h2 id="this_在_Anonymous_Function">this 在 Anonymous Function</h2><hr>
<p>在 ES5，class 是使用 function 來表示，我們先使用 ES5 的方式。</p>
<p><strong>this_anonymous_function.ts</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/64810f888b29993c148eb73acfb3f888549262e4" target="_blank" rel="external">this 在 anonymous function</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_anonymous_function.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 4 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 anonymous function 來定義 <code>say()</code>，並在 anonymous function 使用 <code>this</code>。</p>
<p>10 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>建立 <code>foo</code> 物件，並將 <code>foo.say</code> 傳入 <code>setTimeout()</code>。</p>
<p><img src="/images/typescript/typescript-this/this000.png" alt=""></p>
<p>實際執行，會發現 <code>this.name</code> 會 <code>undefined</code>，因為 JavaScript 的特性，<code>foo.say</code> 會變成 <code>setTimeout</code> 物件的一部分，但 <code>setTimeout</code> 並沒有定義 <code>name</code>，因此會 <code>undefined</code>，這符合我們之前對 JavaScript 對 <code>this</code> 的認知，與一般物件導向語言的 <code>this</code> 並不相同，當然也與 PHP 的 <code>$this</code> 不相同。</p>
<h2 id="this_在_Arrow_Function">this 在 Arrow Function</h2><hr>
<p>ES6 提供了 arrow function，大凡本來使用 anonymous function 的地方，都可以使用 arrow function 取代。</p>
<p><strong>this_arrow_function.ts</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/9a3d5b83757e5a192a9bb3511f14dce798109a96" target="_blank" rel="external">this 在 arrow function</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_arrow_function.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.say = () =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 4 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.say = () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 anonymous function 改用 arrow function，其他都不變，一樣使用 <code>this</code>。</p>
<p><img src="/images/typescript/typescript-this/this001.png" alt=""></p>
<p>實際執行，竟然出現 <code>Hello, Sam</code>，不再是 <code>undefined</code>，跟原來 anonymous function 結果不一樣！</p>
<p><img src="/images/typescript/typescript-this/this002.png" alt=""></p>
<p>去看編譯過的 js 檔，會發現一開始先 <code>var _this = this</code>。</p>
<p>而 <code>this.say</code> 所執行的並不是 <code>this</code>，而是 <code>_this</code>。</p>
<p>也就是 ES6 的 arrow function，其 <code>this</code> 跟 ES5 的 anonymous function 不同，反而跟主流物件導向語言的 <code>this</code> 相同，當然也跟 PHP 的 <code>$this</code> 相同。</p>
<h2 id="this_在_Class_Function">this 在 Class Function</h2><hr>
<p>ES6 多了 <code>class</code> 關鍵字，當然要使用 <code>class</code> 可讀性較高。</p>
<p><strong>this_class_function.ts</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/fad393cfe415c717dbfe7df9fd358c59d07c28b5" target="_blank" rel="external">this 在 class function</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_class_function.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Foo &#123;</span><br><span class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="constructor"><span class="keyword">constructor</span>(name: string) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> say() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> say() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>使用了我們熟悉的一般物件導向語言方式定義 <code>say()</code>，一樣使用 <code>this</code>。</p>
<p><img src="/images/typescript/typescript-this/this003.png" alt=""></p>
<p>實際執行，又出現 <code>undefined</code>，也就是雖然是 ES6，<code>this</code> 並不是全部跟主流程式語言一樣，這裡仍維持 ES5 的 <code>this</code> 觀念。</p>
<h2 id="this_在_Class_內使用_Arrow_Function">this 在 Class 內使用 Arrow Function</h2><hr>
<p>若在 ES6 的 class 使用 arrow function，又會變成怎樣呢？我們繼續看下去：</p>
<p><strong>this_class_arrow_function1.ts</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/465c28b27dc74d1570e9e7a4553ac17d3c61178a" target="_blank" rel="external">this 在 class 內使用 arrow function 第一種方法</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_class_arrow_function1.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Foo &#123;</span><br><span class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="constructor"><span class="keyword">constructor</span>(name: string) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> say: ()=&gt;<span class="built_in">void</span> = ()=&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> say: ()=&gt;<span class="built_in">void</span> = ()=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>由於 TypeScript 是強行別語言，所以需要定義 say 的型別為 <code>()=&gt;void</code> 這種 arrow function 型別，接著才能定義 arrow function，一樣使用 <code>this</code>。</p>
<p><img src="/images/typescript/typescript-this/this004.png" alt=""></p>
<p>這樣就不會 <code>undefined</code> 了。</p>
<p>還有另外一種寫法，讓我們在 constructor 去定義 arrow function。</p>
<p><strong>this_class_arrow_function2.ts</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/TypeScript18this/commit/2f2a824f497fc1daa0fecd8b382ee4750935bac1" target="_blank" rel="external">this 在 class 內使用 arrow function 第二種方法</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>this_class_arrow_function2.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> MyModule </span>&#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Foo &#123;</span><br><span class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">public</span> say: ()=&gt;<span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">        <span class="constructor"><span class="keyword">constructor</span>(name: string) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.say = () =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> MyModule.Foo(<span class="string">'Sam'</span>);</span><br><span class="line">setTimeout(foo.say, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<p>第 4 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> say: ()=&gt;<span class="built_in">void</span>;</span><br></pre></td></tr></table></figure></p>
<p>先在 field 內定義好 <code>say</code> 的型別為 arrow function。</p>
<p>第 6 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(name: string) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.say = () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(`Hello, $&#123;<span class="keyword">this</span>.name&#125;`);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 constructor 內去定義 arrow function，雖然可行，不過實務上不建議這樣寫，除非 method 真的程式碼很短，否則 constructor 會非常的大而難以維護。</p>
<p><img src="/images/typescript/typescript-this/this005.png" alt=""></p>
<p>實際執行，也不再 <code>undefined</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>無論 ES5 或 ES6，<code>this</code> 都維持 JavaScript 一貫的想法，也就是當 function 內掛在哪一個物件，<code>this</code> 就是那個物件。</li>
<li>唯獨 arrow function 例外，arrow function 會事先將 <code>_this = this</code>，而之後都使用 <code>_this</code>，這種思維與一般物件導向語言相同，但跟傳統 JavaScript 不同。</li>
<li>Anonymous function 與 arrow function 對於 <code>this</code> 的看法都有他的道理，要視狀況使用，大部分狀況，arrow function 與一般物件導向語言的思維一樣，但有些應用，anonymous function 的想法比較方便。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/TypeScript18this" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[一樣的 this，在 Anonymous Function 與 Arrow Function 大大不同]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對 Laravel 進行自動化驗收測試?]]></title>
    <link href="http://oomusou.io/selenium/selenium-phpunit/"/>
    <id>http://oomusou.io/selenium/selenium-phpunit/</id>
    <published>2016-10-29T12:23:43.000Z</published>
    <updated>2016-11-05T12:09:04.000Z</updated>
    <content type="html"><![CDATA[<p>Laravel 在 5.1 之後，提供了<strong>應用程式測試</strong> (<a href="https://laravel.com/docs/master/application-testing" target="_blank" rel="external">Application Testing</a>)，讓我們不用開啟瀏覽器，就可以直接對 route、controller 與 blade 進行驗收測試，且執行速度非常快，但也因為沒有開啟瀏覽器，所以無法對 JavaScript 與 AJAX 進行測試，若搭配了 Selenium，配合我們熟悉的 PHPUnit，就能對驗收測試加以自動化。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>Laravel 的應用程式測試非常好用，API 語意清楚，且提供 fluent 方式串接，不過 Seleinum 提供的又是另外一套 API 方式，若能將應用程式測試與 Selenium 測試整合成相同的 API，那就太棒了。</p>
<h2 id="Version">Version</h2><hr>
<p>macOS Sierra 10.12<br>Java 1.8.0_102<br>PHP 7.0.8<br>Laravel 5.3.18<br>PhpStorm 2016.2.2<br>PHPUnit 5.5.5<br>phpunit-selenium 3.0.2<br>Selenium Standalone Server 2.53.1<br>ChromeDriver 2.24<br>Chrome 53.0.2785.143 (64-bit)</p>
<h2 id="測試種類簡介">測試種類簡介</h2><hr>
<ul>
<li><strong>單元測試</strong> : 針對單一 class 與 method 去做測試，此時會將其相依的 class 加以 mock，也稱為<strong>隔離測試</strong>，為粒度最小，速度最快的測試。</li>
<li><strong>整合測試</strong> : 對相依的 class 不加以 mock，主要在測試各 class 整合的結果。</li>
<li><strong>驗收測試</strong> : 以使用者角度對瀏覽器做測試，為速度最慢的測試。</li>
</ul>
<h2 id="驗收測試">驗收測試</h2><hr>
<h3 id="應用程式測試">應用程式測試</h3><p>前身是 Jeffery Way 所寫的 <code>laracasts/integrated</code> 套件，運用 Symfony 所提供的底層元件，可直接對 GUI 做測試，在 Laravel 5.1 正式被整合進來。</p>
<p><strong>優點</strong> :<br><div class="alert alert-info"><i class="fa fa-info"></i>  不需啟動瀏覽器，速度與單元測試一樣快。</div></p>
<p><strong>缺點</strong> :<br><div class="alert alert-danger"><i class="fa fa-bug"></i>  僅能測試 form 與 submit，無法測試 JavaScript 與 AJAX。</div></p>
<h3 id="Selenium_測試">Selenium 測試</h3><p>能對瀏覽器的鍵盤滑鼠動作加以自動化。</p>
<p><strong>優點</strong> :<br><div class="alert alert-info"><i class="fa fa-info"></i>  能測試 JavaScript 與 AJAX。</div></p>
<p><strong>缺點</strong> :<br><div class="alert alert-danger"><i class="fa fa-bug"></i>  須啟動瀏覽器，速度較慢。</div></p>
<div class="alert alert-danger"><i class="fa fa-bug"></i>  沒正式支援 PHP。</div>
<h2 id="PHPUnit">PHPUnit</h2><hr>
<p>JUnit 在 PHP 的實作，最多人使用的單元測試 framework，在 Laravel 已經內建，不用另外安裝。</p>
<h2 id="Selenium">Selenium</h2><hr>
<img src="/images/selenium/selenium-phpunit/selenium040.svg" width="800">
<p>Laravel 並沒有辦法直接控制 Chrome，必須藉由 Selenium Server，但由於 Selenium 目前沒有直接支援 PHP，因此我們必須透過 phpunit-selenium 套件去控制 Selenium Server。</p>
<p>對於瀏覽器部分，Selenium 預設只支援 Firefox，必須再安裝 ChromeDriver 才能讓 Selenium 控制 Chrome。</p>
<p>稍後將會介紹如何安裝紫色部分的 phpunit-selenium 、Selenium Server 與 ChromeDriver。</p>
<h2 id="安裝_Selenium_環境">安裝 Selenium 環境</h2><hr>
<h3 id="安裝_PHP7">安裝 PHP7</h3><p>請先準備好 PHP 7 環境，本範例無法在 PHP 5.6 執行。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>安裝 PHP 7，macOS 請參考 <a href="mamp/mamp-setup/">如何使用 MAMP PRO 開發 Larave?</a></span></span></span></p>
<h3 id="安裝_Composer">安裝 Composer</h3><p>Composer 是 modern PHP 的基石，負責 PHP 的套件管理與 autoloading。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>關於 Composer，詳細請參考 <a href="https://medium.com/@shengyou" target="_blank" rel="external">范聖佑</a> 的 <a href="https://medium.com/@shengyou/php-也有-day-28-composer-從入門到實戰-4d3b34a91946#.mkjysvq7w" target="_blank" rel="external">Composer 從入門到實戰</a></span></span></span></p>
<h3 id="下載範例">下載範例</h3><p>本次範例的種子專案放在 <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_seed" target="_blank" rel="external">GitHub</a>，請先下載。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ git clone https://github.com/oomusou/Laravel53SeleniumPHPUnit_seed</span><br></pre></td></tr></table></figure>
<p><img src="/images/selenium/selenium-phpunit/selenium009.png" alt=""></p>
<h3 id="重建_vendor_目錄">重建 vendor 目錄</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Laravel53SeleniumPHPUnit_seed&#10;oomusou@mac:~/Laravel53SeleniumPHPUnit_seed$ composer install</span><br></pre></td></tr></table></figure>
<p><img src="/images/selenium/selenium-phpunit/selenium052.png" alt=""></p>
<h3 id="安裝_JDK">安裝 JDK</h3><p>Selenium Server 是基於 Java 所開發，在執行 Selenium Server 之前，必須先安裝 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">JDK</a>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium041.png" alt=""></p>
<p>選擇 <code>Java SE Development Kit 8u102</code>，根據平台下載不同的 JDK 版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium042.png" alt=""></p>
<p>執行剛下載的 <code>jdk-8u102-macosx-x64.dmg</code>，安裝 <code>JDK 8 Update 102.pkg</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium043.png" alt=""></p>
<p>按 <code>Continue</code> 繼續。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium044.png" alt=""></p>
<p>按 <code>Install</code> 開始安裝。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium045.png" alt=""></p>
<p>安裝完成。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/$ java -version</span><br></pre></td></tr></table></figure>
<p>檢查所安裝的 Java 版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium046.png" alt=""></p>
<p>若看到 <code>1.8.0_102</code>，則 JDK 安裝成功。</p>
<h3 id="phpunit-selenium">phpunit-selenium</h3><p><a href="https://packagist.org/packages/phpunit/phpunit-selenium" target="_blank" rel="external">phpunit/phpunit-selenium</a> 是由 <a href="https://github.com/sebastianbergmann/phpunit" target="_blank" rel="external">PHPUnit</a> 官方所提供，讓我們可以在 PHP 與 Selenium Server 溝通，直接對瀏覽器做控制，並使用 PHPUnit 做 assertion，目前僅支援 Selenium Server 2.x。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/4d2eac6e720f2a20d35da6c64a2ec5b6af8611d8" target="_blank" rel="external">安裝 phpunit-selenium</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require phpunit/phpunit-selenium --dev</span><br></pre></td></tr></table></figure>
<p>在專案目錄下由 Composer 安裝 <code>phpunit/phpunit-selenium</code>，由於這是開發用的套件，請加上 <code>--dev</code> 參數。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>種子專案已經先將 <code>phpunit-selenium</code> 事先裝好了。</span></span></span></p>
<p><img src="/images/selenium/selenium-phpunit/selenium005.png" alt=""></p>
<h3 id="Selenium_Server">Selenium Server</h3><p>我們必須透過 Selenium 幫我們對瀏覽器下指令，因此必須先安裝 <a href="http://www.seleniumhq.org/download/" target="_blank" rel="external">Selenium Server</a>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium000.png" alt=""></p>
<p>目前 3.0 尚在 beta，且 phpunit-selenium 目前僅支援 Selenium 2.x，所以選擇 <a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="external">previous release</a> 安裝以前的版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium001.png" alt=""></p>
<p>選擇 <code>2.53</code>，這是 Selenium 2.x 的最後版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium002.png" alt=""></p>
<p>下載 <code>selenium-server-standalone-2.53.1.jar</code>，這是 <code>2.53</code> 的最後一個版本。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>種子專案已經先將 Selenium Server 事先裝好了。</span></span></span></p>
<p><img src="/images/selenium/selenium-phpunit/selenium003.png" alt=""></p>
<p>將 <code>selenium-server-standalone-2.53.1.jar</code> 複製到 Laravel 專案的根目錄下。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/b29b24f2270d80bf0a690008f87972a4b02f8870" target="_blank" rel="external">安裝 Selenium Server</a></span></span></span></p>
<h3 id="ChromeDriver">ChromeDriver</h3><p>Selenium 預設只支援 Firefox，若要使用 Chrome，需另外安裝 <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">ChromeDriver</a>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium006.png" alt=""></p>
<p>選擇目前最新版本下載。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium007.png" alt=""></p>
<p>根據平台下載不同的 ChromeDriver 版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium008.png" alt=""></p>
<p>將 <code>zip</code> 解開後，將 <code>chromedriver</code> 複製到 Laravel 專案的根目錄下。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/820b10dfea92b9bf9072da04f6b4b91f362dbc84" target="_blank" rel="external">安裝 ChromeDriver</a></span></span></span></p>
<h2 id="測試_Selenium_環境">測試 Selenium 環境</h2><hr>
<p>最後要測試整個 Selenium 測試環境是否能正常啟動。</p>
<h3 id="啟動_Web_Server">啟動 Web Server</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Laravel53SeleniumPHPUnit_seed&#10;oomusou@mac:~/Laravel53SeleniumPHPUnit_seed$ php artisan serve</span><br></pre></td></tr></table></figure>
<p>啟動 PHP 內建的 Web Server。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium053.png" alt=""></p>
<p>將啟動在 <code>http://localhost:8000</code>。</p>
<h3 id="啟動_Selenium">啟動 Selenium</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Laravel53SeleniumPHPUnit_seed&#10;oomusou@mac:~/Laravel53SeleniumPHPUnit_seed$ java -jar selenium-server-standalone-2.53.1.jar</span><br></pre></td></tr></table></figure>
<p>原來的 Web Server 必須保持啟動，另外開一個 process 啟動 Selenium Server。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium054.png" alt=""></p>
<p>若能看到 <code>Selenium Server is up and running</code>，則 Selenium 已經正常啟動。</p>
<h3 id="執行測試">執行測試</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Laravel53SeleniumPHPUnit_seed&#10;oomusou@mac:~/Laravel53SeleniumPHPUnit_seed$ vendor/bin/phpunit</span><br></pre></td></tr></table></figure>
<p>原來的 Web Server 與 Selenium Server 必須保持啟動，再另外開一個 process 執行測試。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium055.png" alt=""></p>
<p>若能看到 2 個測試都是 <span class="label label-success">綠燈</span>，表示整個 Selenium 測試環境已經安裝成功。</p>
<h2 id="安裝_PhpStorm">安裝 PhpStorm</h2><hr>
<h3 id="設定目錄">設定目錄</h3><p><strong>Sources</strong><br>設定 <code>PSR-0 namespace roots</code> 的主目錄，也就是 Laravel 的 <code>app</code> 目錄。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium056.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Directories</em></strong></p>
<p>選擇 <code>app</code> 目錄，按上方的 <code>Sources</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium057.png" alt=""></p>
<p>按上方的 <code>Sources</code> 之後，會在右側出現 <code>Source Folders app</code>。</p>
<p>按 <code>P</code> 設定該目錄的 property。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium058.png" alt=""></p>
<p>在 <code>Package prefix</code> 輸入 <code>App</code>，因為 <code>app</code> 目錄對應的正是 Laravel 的 namespace <code>App</code>。</p>
<p>這是所有 directories 設定中最重要的一個，在 Laravel 5 之後，全面使用 namespace，管理 namespace 成為很多人的惡夢，但只要設定了 <code>Sources</code> 之後，將來 PhpStorm 會幫我們管理 namespace。</p>
<p><strong>Tests</strong><br>設定測試程式的主目錄，也就是 Laravel 的 <code>tests</code> 目錄。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium059.png" alt=""></p>
<p>選擇 <code>tests</code> 目錄，按上方的 <code>Tests</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium060.png" alt=""></p>
<p>按上方的 <code>Tests</code> 之後，會在右側出現 <code>Test Source Folders tests</code>。</p>
<p><strong>Resource Root</strong><br>設定前端資源的主目錄，也就是 Laravel 的 <code>public</code> 目錄。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium061.png" alt=""></p>
<p>選擇 <code>public</code> 目錄，按上方的 <code>Resource Root</code>。，會在右側出現 <code>Resource roots public</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium062.png" alt=""></p>
<p>按上方的 <code>Resource Root</code> 之後，會在右側出現 <code>Resource roots public</code>。</p>
<h3 id="設定字型">設定字型</h3><p>PhpStorm 的字型大小預設是 <code>12</code>，個人覺得稍微小了一點，會將字型稍微調大。<br><strong>Editor</strong><br><img src="/images/phpstorm/phpstorm-mysetting/mysetting001.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Editor -&gt; Color &amp; Fonts -&gt; Font </em></strong></p>
<p>建議將字型大小調成 <code>15</code>。</p>
<p><strong>IDE</strong><br><img src="/images/phpstorm/phpstorm-mysetting/mysetting002.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Appearance &amp; Behavior -&gt; Appearance</em></strong></p>
<p>勾選 <code>Override default fonts by (not recommend)</code>，建議將字型大小改成 <code>16</code>。</p>
<p><strong>Terminal</strong><br><img src="/images/phpstorm/phpstorm-mysetting/mysetting003.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Editor -&gt; Colors &amp; Fonts -&gt; Console Font </em></strong></p>
<p>在 PhpStorm 內可以直接在 terminal 下指令，建議將字型改成 <code>16</code>。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>Terminal 字型必須重新啟動 PhpStorm 才會生效。</span></span></span></p>
<h3 id="設定_PHP">設定 PHP</h3><p>PhpStorm 內建支援 PHP，我們可以直接在 PhpStorm 內執行 PHP。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium010.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP</em></strong></p>
<ul>
<li><strong>PHP language level</strong> : <code>7 (return types, scalar type hints, etc.)</code></li>
</ul>
<p>將 language level 調整為 <code>7</code>，讓 PhpStorm Code Inspection 自動針對 PHP 7 語法加以檢查。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>關於 PhpStorm 的 Code Inspection，詳細請參考<a href="/phpstorm/phpstorm-code-inspection/">如何在 PhpStorm 使用 Code Inspection?</a></span></span></span></p>
<p>按 <code>...</code> 設定 PHP CLI 路徑。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium011.png" alt=""></p>
<p>PhpStorm 允許我們設定多組 PHP CLI 版本供切換。</p>
<ul>
<li><strong>PHP executable</strong> : <code>/Applications/MAMP/bin/php/php7.0.8/bin/php</code></li>
<li><strong>Debugger extension</strong> : <code>/Applications/MAMP/bin/php/php7.0.8/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so</code></li>
</ul>
<p>從 PhpStorm 2016.2 開始，提供了 Xdebug On Demand 功能，不必事先在 <code>php.ini</code> 啟動 Xdebug 影響 Composer 速度，只要事先設定好 <code>xdebug.so</code> 路徑，PhpStorm 會在設定中斷點除錯時，自動啟動 Xdebug。<span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>關於 PhpStorm 的 Xdebug on Demand，詳細請參考<a href="/phpstorm/phpstorm-xdebug-on-demand/">如何在 PhpStorm 使用 Xdebug on Demand?</a></span></span></span></p>
<p><img src="/images/selenium/selenium-phpunit/selenium012.png" alt=""></p>
<ul>
<li><strong>Interpreter</strong> : <code>PHP7(7.0.8)</code></li>
</ul>
<p>將 interpreter 設定為剛剛設定的 PHP CLI。</p>
<h3 id="設定_PHPUnit">設定 PHPUnit</h3><p>PhpStorm 內建支援 PHPUnit，我們可以直接在 PhpStorm 內直接執行 PHPUnit。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium013.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP -&gt; PHPUnit</em></strong></p>
<p>選擇 <code>Use Composer autoloader</code> :</p>
<ul>
<li><p><strong>Path to script</strong> : <code>/Users/oomusou/Code/PHPConf/Laravel53SeleniumPHPUnit_demo/vendor/autoload.php</code></p>
</li>
<li><p><strong>Default configuration file</strong> : <code>/Users/oomusou/Code/PHPConf/Laravel53SeleniumPHPUnit_demo/phpunit.xml</code></p>
</li>
</ul>
<p><code>Path to script</code> 指定到專案目錄下的 <code>vendor/autoload.php</code>，告訴 PhpStorm 在執行 PHPUnit 時，先執行此路徑的 autoload。</p>
<p><code>Default configuration file</code> 指定到專案根目錄下的 <code>phpunit.xml</code>，此為 PHPUnit 的設定檔，Laravel 已經在此檔設定好很多預設值。</p>
<h3 id="設定_phpunit-xml">設定 phpunit.xml</h3><p><code>phpunit.xml</code> 位於 Laravel 專案根目錄下，為 PHPUnit 設定檔，Laravel 已將幫我們做了很多設定。</p>
<p>執行測試時，Laravel 會先讀取 <code>.env</code>，再讀取 <code>phpunit.xml</code>，若有一些變數在執行測試階段設定，與原本 <code>.env</code> 設定不同，可以寫在 <code>phpunit.xml</code>。<br><strong>phpunit.xml</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/68c89838559fd33c32a9851c378ec8cdb51ccc7a" target="_blank" rel="external">設定 phpunit.xml</a></span></span></span><br><figure class="highlight xml"><figcaption><span>phpunit.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">phpunit</span> <span class="attribute">backupGlobals</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">backupStaticAttributes</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">bootstrap</span>=<span class="value">"bootstrap/autoload.php"</span></span><br><span class="line">         <span class="attribute">colors</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertErrorsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertNoticesToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertWarningsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">processIsolation</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">stopOnFailure</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">testsuites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">testsuite</span> <span class="attribute">name</span>=<span class="value">"Application Test Suite"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">"Test.php"</span>&gt;</span>./tests<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">testsuite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">testsuites</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">whitelist</span> <span class="attribute">processUncoveredFilesFromWhitelist</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">".php"</span>&gt;</span>./app<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">whitelist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"BROWSER"</span> <span class="attribute">value</span>=<span class="value">"chrome"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"WEBSERVER_URL"</span> <span class="attribute">value</span>=<span class="value">"localhost"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"WEBSERVER_PORT"</span> <span class="attribute">value</span>=<span class="value">"8000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SELENIUM_URL"</span> <span class="attribute">value</span>=<span class="value">"localhost"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SELENIUM_PORT"</span> <span class="attribute">value</span>=<span class="value">"4444"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"AJAX_DELAY"</span> <span class="attribute">value</span>=<span class="value">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">phpunit</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>26 行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"BROWSER"</span> <span class="attribute">value</span>=<span class="value">"chrome"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"WEBSERVER_URL"</span> <span class="attribute">value</span>=<span class="value">"localhost"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"WEBSERVER_PORT"</span> <span class="attribute">value</span>=<span class="value">"8000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SELENIUM_URL"</span> <span class="attribute">value</span>=<span class="value">"localhost"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SELENIUM_PORT"</span> <span class="attribute">value</span>=<span class="value">"4444"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"AJAX_DELAY"</span> <span class="attribute">value</span>=<span class="value">"1"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>BROWSER</strong> : 設定要測試的瀏覽器，目前預設為 <code>chrome</code>，若日後要測試其他瀏覽器，只要安裝好該瀏覽器的 WebDriver，修改此設定即可。</li>
<li><strong>WEBSERVER_URL</strong> : 設定 Web Server 的 URL，目前都在本機跑，所以為 <code>localhost</code>，將來配合 CI Server 時，Web Server 可能會在不同主機，修改此設定即可。</li>
<li><strong>WEBSERVER_PORT</strong> : 設定 Web Server 的 port，目前都在本機跑，所以 port 為 <code>8000</code>，將來配合 CI Server 時，Web Server 的 port 可能不同，修改此設定即可。</li>
<li><strong>SELENIUM_URL</strong> : 設定 Selenium Server 的 URL，目前都在本機跑，所以為 <code>localhost</code>，將來配合 CI Server 時，Selenium Server 可能會在不同主機，修改此設定即可。</li>
<li><strong>SELENIUM_PORT</strong> : 設定 Selenium Server 的 port，預設 Selenium Server 使用 port <code>4444</code>，將來配合 CI Server 時，Selenium Server 的 port 可能不同，修改此設定即可。</li>
<li><strong>AJAX_DELAY</strong> : 使用 AJAX 時，需要等一段時間由 Web Server 回應，由於本機速度快，只需 <code>1</code> 秒即可，將來配合 CI Server 時，等待的時間可能不同，修改此設定即可。<span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>種子專案已經先將 <code>phpunit.xml</code> 事先設定好了。</span></span></span></li>
</ul>
<h2 id="測試_PhpStorm_環境">測試 PhpStorm 環境</h2><hr>
<p>當 PhpStorm 都設定好後，確認是否能直接在 PhpStorm 內跑測試。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium063.png" alt=""></p>
<p>將專案視窗的右上方只選擇 <code>Tests</code>，將只顯示 Laravel 的 <code>tests</code> 目錄。</p>
<p>選擇 <code>tests</code> 目錄，按滑鼠右鍵選擇 <code>Run tests</code>，或按熱鍵 &#8963; + &#8679; + R 執行測試。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium064.png" alt=""></p>
<p>若也能看到 2 個測試都是 <span class="label label-success">綠燈</span>，表示整個 PhpStorm 測試環境已經設定成功。</p>
<h2 id="最簡單的驗收測試">最簡單的驗收測試</h2><hr>
<h3 id="應用程式測試-1">應用程式測試</h3><p><strong>ExampleTest.php</strong><br><figure class="highlight php"><figcaption><span>tests/ExampleTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">WithoutMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseTransactions</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A basic functional test example.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testBasicExample</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/'</span>)</span><br><span class="line">             -&gt;see(<span class="string">'Laravel'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每個 Laravel 都有這隻測試，用來測試 Laravel 預設首頁是否有 <code>Laravel</code> 字串。</p>
<ul>
<li><strong>TestCase</strong> : 每個 Laravel 的測試都要繼承 <code>TestCase</code>。</li>
<li><strong>Test Method</strong> : 每個 test method 必須以 <code>test</code> 開頭，或加上註解 <code>@test</code>，PHPUnit 才會執行。</li>
<li><strong>visit()</strong> : 以 <code>GET</code> 方式對指定 URL 加以測試。</li>
<li><strong>see()</strong> : 測試網頁內容是否包含指定字串。</li>
</ul>
<p><strong>TestCase.php</strong><br><figure class="highlight php"><figcaption><span>tests/TestCase.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCase</span> <span class="keyword">extends</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The base URL to use while testing the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$baseUrl</span> = <span class="string">'http://localhost'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Foundation\Application</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createApplication</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$app</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>為 Laravel 測試的 abstract class，主要目的在載入 Laravel kernel 部分。</p>
<h3 id="Selenium_測試-1">Selenium 測試</h3><p><strong>ExampleSeleniumTest.php</strong><br><figure class="highlight php"><figcaption><span>tests/ExampleSeleniumTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleSeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testTitle</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="string">'/'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'Laravel'</span>, <span class="variable">$this</span>-&gt;title());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這是摘自於 <code>phpunit-selenium</code> 官網，為最簡單的 Selenium 測試。</p>
<p>不同於應用程式測試是繼承於 <code>TestCase</code>，Selenium 測試要改繼承 <code>phpunit-selenium</code> 所提供的 <code>PHPUnit_Extensions_Selenium2TestCase</code>。</p>
<p>第 5 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每個測試案例執行時，都會執行 <code>setUp()</code>，可用來執行設定動作。</p>
<ul>
<li><strong>setBrowser()</strong> : 設定要測試的瀏覽器。</li>
<li><strong>setBrowserUrl()</strong> : 設定 Web Server 的 URL 與 port。</li>
<li><strong>setHost()</strong> : 設定 Selenium Server 的 URL。</li>
<li><strong>setPort()</strong> : 設定 Selenium Server 的 port。</li>
</ul>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testTitle</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;url(<span class="string">'/'</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'Laravel'</span>, <span class="variable">$this</span>-&gt;title());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>url()</strong> : 以 <code>GET</code> 方式對指定 URL 加以測試，相當於 Laravel 應用程式測試的 <code>visit()</code>。</li>
<li><strong>assertEquals()</strong> : 測試網頁的 title 是否為 <code>Laravel</code>。</li>
</ul>
<h2 id="建立_Todo_專案">建立 Todo 專案</h2><hr>
<p>以 Laravel 官方的 <a href="https://laravel.com/docs/5.2/quickstart" target="_blank" rel="external">Basic Task List</a> 為範例，建立一個簡單的 Todo 專案，將以此專案建立驗收測試 : 分別使用<strong>應用程式測試</strong>與<strong>Selenium測試</strong>。<span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/853c57dac7bf0a4d239123cd508037ed81372b6a" target="_blank" rel="external">建立 Todo</a></span></span></span></p>
<p><img src="/images/selenium/selenium-phpunit/selenium019.png" alt=""></p>
<p>一開始顯示目前所有的 task，因為還沒建立任何 task，所以是空的。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium020.png" alt=""></p>
<p>輸入 <code>Study</code>，按 <code>Add Task</code> 新增。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium021.png" alt=""></p>
<p><code>Study</code> 被新增到資料庫，並顯示在下方的 <code>Current Tasks</code>。</p>
<p>按下 <code>Delete</code> 刪除 <code>Study</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium019.png" alt=""></p>
<p><code>Study</code> 從資料庫被刪除，不顯示任何 task。</p>
<h2 id="驗收測試案例">驗收測試案例</h2><hr>
<p>目前 Todo 專案非常簡單，我們想為此專案建立 3 個測試案例。</p>
<ul>
<li>Todo 一啟動時，顯示目前資料庫的 3 筆 task。</li>
<li>新增 1 筆 task，並顯示在下方的 <code>Current Tasks</code>。</li>
<li>新增 1 筆 task，並立即刪除 task。</li>
</ul>
<h2 id="應用程式測試-2">應用程式測試</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:test TodoAppTest</span><br></pre></td></tr></table></figure>
<p>由 Laravel artisan 建立 <code>TodoAppTest</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium022.png" alt=""></p>
<h3 id="測試案例1">測試案例1</h3><div class="alert alert-info"><i class="fa fa-info"></i>  Todo 一啟動時，顯示目前資料庫的 3 筆 task。</div>
<p><strong>TodoAppTest.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/74eb13230560e0e0fde268238df7e8c52de2b620" target="_blank" rel="external">TodoAppTest (一啟動顯示 3 筆 task)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoAppTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$rootURL</span> = <span class="string">'todo'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        DB::table(<span class="string">'tasks'</span>)-&gt;truncate();</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 一啟動顯示3筆<span class="title">task</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 2'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 3'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>,</span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    DB::table(<span class="string">'tasks'</span>)-&gt;truncate();</span><br><span class="line">    <span class="keyword">parent</span>::tearDown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>撰寫測試時，只要牽涉到資料庫讀寫，就必須遵造<strong>童子軍法則</strong> : <strong>測試結束時，要負責將假資料刪除</strong>，如此才能確保下一個測試執行時，是一個完全乾淨的資料庫，測試時才沒有任何 side effect。</p>
<p>每個測試案例執行完時，都會執行 <code>tearDown()</code>，所以可以將 truncate 動作寫在 <code>tearDown()</code> 內。</p>
<p>19 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>使用後端技術做驗收測試，最大的優點就是可以根據測試案例的需求，直接對資料庫做假資料。</p>
<p>這裡直接使用 Laravel 的 Model Factory。<span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>關於 Model Factory，詳細請參考 Laravel 官網 <a href="https://laravel.com/docs/5.2/testing#model-factories" target="_blank" rel="external">Model Factories</a></span></span></span></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">    -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">    -&gt;see(<span class="string">'Task 2'</span>)</span><br><span class="line">    -&gt;see(<span class="string">'Task 3'</span>)</span><br><span class="line">    -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>,</span><br><span class="line">    ])</span><br><span class="line">    -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>,</span><br><span class="line">    ])</span><br><span class="line">    -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>,</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>visit()</code> : 以 <code>GET</code> 方式對指定 URL 加以測試。</li>
<li><code>see()</code> : 測試網頁是否包含指定字串，相當於 PHPUnit 的 <code>assertContains()</code>。</li>
<li><code>seeInDatabase()</code> : 測試資料是否存在於資料庫，第 1 個參數為 table 名稱，第 2 個參數為欲驗收資料的陣列，key 為欄位名稱，value 為資料。</li>
</ul>
<p>應用程式測試讓我們不僅可以測試網頁資料是否正確，還可以順便測試資料庫資料，也由於其 fluent API 特性，可讀性非常高，讓我們可以使用口語化的方式輕鬆閱讀測試程式碼，這也是應用程式測試最大的魅力所在。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium027.png" alt=""></p>
<p>在 <code>一啟動顯示3筆task</code> 的 method 內，按滑鼠右鍵選擇 <code>Run TodoAppTest,一啟動顯示3筆task</code>，或按熱鍵 &#8963; + &#8679; + R，只執行此測試案例。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium023.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，注意此時並沒有啟動瀏覽器，就如往常執行單元測試一樣，這也是應用程式測試速度超快的原因。</p>
<h3 id="測試案例2">測試案例2</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並顯示在下方的 <b>Current Tasks</b>。</div>
<p><strong>TodoAppTest.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/3a91cbdf05d54dad4e869a00aacd290d963a9e5e" target="_blank" rel="external">TodoAppTest (新增 1 筆 task 並顯示在下方)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoAppTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>並顯示在下方<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">            -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">    -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">    -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure></p>
<p>前一個測試我們使用了 Model Factory 對資料庫新增假資料，特別在測試一開始，先確認資料已經被刪除。</p>
<ul>
<li><code>dontSee()</code> : 測試網頁是否<code>不</code>包含指定字串，相當於 PHPUnit 的 <code>assertNotContains()</code>。</li>
<li><code>dontSeeInDatabase()</code> : 測試資料是否<code>不</code>存在於資料庫。 </li>
</ul>
<p>16 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">    -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">    -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">    -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">    -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure></p>
<p>模擬使用者打字輸入的動作與按下 button，最後再測試資料是否已經新增到資料庫。</p>
<ul>
<li><code>type()</code> : 針對 <code>&lt;input type=text&gt;</code> 做輸入，第 1 個參數為欲輸入字串，第 2 個參數為 HTML 的 name。</li>
<li><code>press()</code> : 按下 <code>&lt;input type=submit&gt;</code>，第 1 個參數為 button 顯示的字串。</li>
</ul>
<p><img src="/images/selenium/selenium-phpunit/selenium024.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，儘管這次有輸入的動作，依然沒有啟動瀏覽器。</p>
<h3 id="測試案例3">測試案例3</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並立即刪除 task。</div>
<p><strong>TodoAppTest.php</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/e2231b0dfafd14fdc7b030ab91513dd68f08f7b7" target="_blank" rel="external">TodoAppTest (新增 1 筆 task 立即刪除)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoAppTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>立即刪除<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">            -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;post(<span class="variable">$this</span>-&gt;rootURL . <span class="string">'/task/1'</span>)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>24 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;post(<span class="variable">$this</span>-&gt;rootURL . <span class="string">'/task/1'</span>)</span><br><span class="line">    -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">    -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure></p>
<p>目前每個 <code>Delete</code> 都有自己的 <code>&lt;form&gt;</code> 做 submit，但應用程式測試只能針對單一 <code>&lt;form&gt;</code> 做測試，因此無法使用 <code>press()</code> 來按 <code>Delete</code>，改用 <code>post()</code> URL 的方式。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium025.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，這次依然沒有啟動瀏覽器。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium026.png" alt=""></p>
<p>一次執行 <code>TodoAppTest</code> 的 3 個測試，都是 <span class="label label-success">綠燈</span>。</p>
<h2 id="建立_AJAX_版_Todo_專案">建立 AJAX 版 Todo 專案</h2><hr>
<p>應用程式測試有很多優點，如執行速度快、API 語意清楚、fluent 方式串接，且還可同時測試資料庫，但由於測試時沒有啟動瀏覽器，因此無法測試 JavaScript 與 AJAX 部分，只能測試 <code>&lt;form&gt;</code> 與 submit，但實務上 JavaScript 與 AJAX 需求越來越多，顯然只有應用程式測試是不夠的。<span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/6b6ab431fdcbb44b3b9ba2ec1e3b2aacdcd972b1" target="_blank" rel="external">建立 AJAX 版 Todo</a></span></span></span></p>
<p>剛剛的 Todo 專案，<code>Add Task</code> 有一個 <code>&lt;form&gt;</code>，而每個 <code>Delete</code> 都有自己的 <code>&lt;form&gt;</code>，也就是整個網頁基本上都是透過 <code>&lt;form&gt;</code> 與 submit 機制達成，因此可以順利使用應用程式測試，現在我們要將 <code>Add Task</code> 與所有的 <code>Delete</code> 都改用 JavaScript 與 AJAX 方式。</p>
<h2 id="Selenium_測試-2">Selenium 測試</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:test TodoSeleniumTest</span><br></pre></td></tr></table></figure>
<p>由 Laravel artisan 建立 <code>TodoSeleniumTest</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium050.png" alt=""></p>
<p>將原來的 <code>TodoAppTest</code> 所有測試測試複製過來，只有 URL 從 <code>/todo</code> 改成 <code>/todo2</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium028.png" alt=""></p>
<p>使用應用程式測試跑 AJAX 版的 Todo 就悲劇了，只有第 1 個測試案例能通過，因為後 <code>Add Task</code> 與 <code>Delete</code> 都改用了 JavaScript 與 AJAX，這就必須動用 Selenium 測試了。</p>
<h3 id="測試案例1-1">測試案例1</h3><div class="alert alert-info"><i class="fa fa-info"></i>  Todo 一啟動時，顯示目前資料庫的 3 筆 task。</div>
<p><strong>TodoSeleniumTest.php</strong><span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/a0812399ba5f2bcc999a8bd8c5a66be4ec446376" target="_blank" rel="external">TodoSeleniumTest (一啟動顯示 3 筆 task)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoSeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$rootURL</span> = <span class="string">'todo2'</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> int */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$ajaxDelay</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;ajaxDelay = (int)env(<span class="string">'AJAX_DELAY'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line">        <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        DB::table(<span class="string">'tasks'</span>)-&gt;truncate();</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 一啟動顯示3筆<span class="title">task</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 2'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 3'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 5 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span></span><br></pre></td></tr></table></figure></p>
<p>改用 phpunit-selenium 驅動 Selenium，因次必須繼承 phpunit-selenium 所提供的 <code>PHPUnit_Extensions_Selenium2TestCase</code>。</p>
<p>第 7 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$rootURL</span> = <span class="string">'todo2'</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> int */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$ajaxDelay</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;ajaxDelay = (int)env(<span class="string">'AJAX_DELAY'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line">    <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不同於應用程式測試，Selenium 測試必須在每個測試案例執行時，設定 Web Server URL、port、Selenium URL、port 等資訊。</p>
<p>除此之外，還要特別設定 <code>$ajaxDelay</code> 時間，好讓測試等 AJAX 回應，否則動態產生的 HTML 元素會抓不到。</p>
<p>最後在每個測試案例執行時，還必須載入 Laravel 核心部分，在應用程式測試時，我們不需要處理這些事情，因為 <code>TestCase</code> 幫我們做掉了，這裡因為改繼承 <code>PHPUnit_Extensions_Selenium2TestCase</code>，所以載入 Laravel 核心這件事情必須自己處理。</p>
<p>31 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 一啟動顯示3筆<span class="title">task</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">    factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">    factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 2'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 3'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一樣先使用 Model Factory 對資料庫新增 3 筆假資料。</p>
<ul>
<li><code>url()</code> : 為 phpunit-selenium 所提供的 API，會以 <code>GET</code> 方式對指定 URL 加以測試，相當於應用程式測試的 <code>visit()</code>。</li>
<li><code>byTag()</code> : phpunit-selenium 提供一系列 <code>byXXX()</code> 的 API，如 <code>byId()</code>、<code>byName()</code>、<code>byTag()</code>、<code>byXPath()</code> …，讓我們可以抓到 HTML 的元素，進而加以控制。</li>
<li><code>assertContains()</code> : PHPUnit 所提供的 API，測試是否包含指定字串，相當於應用程式測試的 <code>see()</code>。</li>
</ul>
<p><img src="/images/selenium/selenium-phpunit/selenium029.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，與應用程式測試不同的時，此時會真的啟動瀏覽器，因此可以測試 JavaScript 與 AJAX，也因為必須啟動瀏覽器，所以測試速度較應用程式測試來得慢。</p>
<h3 id="測試案例2-1">測試案例2</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並顯示在下方的 <b>Current Tasks</b>。</div>
<p><strong>TodoSeleniumTest.php</strong><span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/329be5e3a67842b7fc399bd088c688d91ec989f5" target="_blank" rel="external">TodoSeleniumTest (新增 1 筆 task 並顯示在下方)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>並顯示在下方<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertNotContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line">        <span class="variable">$this</span>-&gt;byName(<span class="string">'name'</span>)-&gt;value(<span class="string">'Task 1'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Add Task')]"</span>)-&gt;click();</span><br><span class="line"></span><br><span class="line">        sleep(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 7 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line"><span class="variable">$this</span>-&gt;assertNotContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br></pre></td></tr></table></figure></p>
<p>前一個測試我們使用了 Model Factory 對資料庫新增假資料，特別在測試一開始，先確認資料已經被刪除。</p>
<ul>
<li><code>assertNotContains()</code> : PHPUnit 所提供的 API，測試是否<code>不</code>包含指定字串，相當於應用程式測試的 <code>dontSee()</code>。</li>
</ul>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line"><span class="variable">$this</span>-&gt;byName(<span class="string">'name'</span>)-&gt;value(<span class="string">'Task 1'</span>);</span><br><span class="line"><span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Add Task')]"</span>)-&gt;click();</span><br></pre></td></tr></table></figure></p>
<p>模擬使用者打字輸入的動作與按下 button。</p>
<ul>
<li><code>byName()</code> : phpunit-selenium 提供的 API，讓我們可以根據 name 抓到 HTML 的元素，進而加以控制。</li>
<li><code>byXPath()</code> : phpunit-selenium 提供的 API，讓我們可以根據 XPath 抓到 HTML 的元素，進而加以控制。</li>
</ul>
<p>17 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br></pre></td></tr></table></figure></p>
<p>由於採用 AJAX 方式，需要等 server 回應，需要等一段時間，若在本機執行，實務上設定 <code>1</code> 秒即可，若要在 CI Server 上執行，時間需要設定長一點。</p>
<p>19 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br></pre></td></tr></table></figure></p>
<p>最後測試畫面是是否看得到 <code>Task 1</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium030.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，會看到瀏覽器啟動與實際輸入的動作。</p>
<h3 id="測試案例3-1">測試案例3</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並立即刪除 task。</div>
<p><strong>TodoSeleniumTest.php</strong><span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/c6f492dee8a09fb1c0bd97cf96dacb7ece89d0d0" target="_blank" rel="external">TodoSeleniumTest (新增 1 筆 task 立即刪除)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>立即刪除<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertNotContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$this</span>-&gt;rootURL);</span><br><span class="line">        <span class="variable">$this</span>-&gt;byName(<span class="string">'name'</span>)-&gt;value(<span class="string">'Task 1'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Add Task')]"</span>)-&gt;click();</span><br><span class="line"></span><br><span class="line">        sleep(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Delete')]"</span>)-&gt;click();</span><br><span class="line"></span><br><span class="line">        sleep(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertNotContains(<span class="string">'Task 1'</span>, <span class="variable">$this</span>-&gt;byTag(<span class="string">'body'</span>)-&gt;text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), 'Delete')]"</span>)-&gt;click();</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>byXPath()</code> 找到 <code>Delete</code>，並模擬使用者按下 <code>Delete</code> 動作。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium031.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>，會看到瀏覽器啟動與實際輸入，最後會看到實際刪除的動作。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium032.png" alt=""></p>
<p>一次執行 <code>TodoSeleniumTest</code> 的 3 個測試，都是 <span class="label label-success">綠燈</span>。</p>
<h2 id="將兩種測試_API_統一">將兩種測試 API 統一</h2><hr>
<p>雖然直接使用 phpunit-selenium 所提供的 API，我們已經能驅動 Selenium 並對 JavaScript 與 AJAX 加以測試，但相對於 Laravel 的應用程式測試，仍然有改善的空間 :</p>
<ul>
<li>phpunit-selenium 的 API 與 應用程式 API 不同，也就是同樣寫驗收測試，必須學習兩套 API。</li>
<li>phpunit-selenium API 的語意較差，可讀性較差，將來維護不若應用程式測試般直覺。</li>
<li>phpunit-selenium 無法直接測試資料庫。</li>
</ul>
<p>其實我們已經發現 PHPUnit 與 phpunit-selenium 所提供的 API，與應用程式測試的 API 很多功能是相同的，只是 API 不同而已，我們將學習 Laravel 的 <code>TestCase</code>，另外再包一個 <code>TestCaseSelenium</code>，將應用程式測試 API 實作於此，將來測試案例將不繼承 <code>PHPUnit_Extensions_Selenium2TestCase</code>，而改繼承我們自己的 <code>TestCaseSelenium</code>，就能達到應用程式測試與 Selenium 測試完全相同 API 的目標。</p>
<p><strong>TestCaseSelenium.php</strong><span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/1237215be57feaa03c9526bc92d707d5b06ccee5" target="_blank" rel="external">建立 TestCaseSelenium</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TestCaseSelenium.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Console</span>\<span class="title">Kernel</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCaseSelenium</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ajaxDelay</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;ajaxDelay = (int)env(<span class="string">'AJAX_DELAY'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line">        <span class="variable">$app</span>-&gt;make(Kernel::class)-&gt;bootstrap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $path</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visit</span><span class="params">(string <span class="variable">$path</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $text</span><br><span class="line">     * <span class="doctag">@param</span> string $tag</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">see</span><span class="params">(string <span class="variable">$text</span>, string <span class="variable">$tag</span> = <span class="string">'body'</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertContains(<span class="variable">$text</span>, <span class="variable">$this</span>-&gt;byTag(<span class="variable">$tag</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $text</span><br><span class="line">     * <span class="doctag">@param</span> string $tag</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dontSee</span><span class="params">(string <span class="variable">$text</span>, string <span class="variable">$tag</span> = <span class="string">'body'</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertNotContains(<span class="variable">$text</span>, <span class="variable">$this</span>-&gt;byTag(<span class="variable">$tag</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $value</span><br><span class="line">     * <span class="doctag">@param</span> string $name</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span><span class="params">(string <span class="variable">$value</span>, string <span class="variable">$name</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;byName(<span class="variable">$name</span>)-&gt;value(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> $text</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">press</span><span class="params">(string <span class="variable">$text</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), '&#123;$text&#125;')]"</span>)-&gt;click();</span><br><span class="line">        <span class="variable">$this</span>-&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> $seconds</span><br><span class="line">     * <span class="doctag">@return</span> TestCaseSelenium $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hold</span><span class="params">(int <span class="variable">$seconds</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        sleep(<span class="variable">$seconds</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> $table</span><br><span class="line">     * <span class="doctag">@param</span> array $data</span><br><span class="line">     * <span class="doctag">@param</span> null $connection</span><br><span class="line">     * <span class="doctag">@return</span> $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$database</span> = App::make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$connection</span> = <span class="variable">$connection</span> ?: <span class="variable">$database</span>-&gt;getDefaultConnection();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$database</span>-&gt;connection(<span class="variable">$connection</span>)-&gt;table(<span class="variable">$table</span>)-&gt;where(<span class="variable">$data</span>)-&gt;count();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertGreaterThan(<span class="number">0</span>, <span class="variable">$count</span>, sprintf(</span><br><span class="line">            <span class="string">'Unable to find row in database table [%s] that matched attributes [%s].'</span>, <span class="variable">$table</span>, json_encode(<span class="variable">$data</span>)</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span>  string $table</span><br><span class="line">     * <span class="doctag">@param</span>  array $data</span><br><span class="line">     * <span class="doctag">@param</span>  string $connection</span><br><span class="line">     * <span class="doctag">@return</span> $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dontSeeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;notSeeInDatabase(<span class="variable">$table</span>, <span class="variable">$data</span>, <span class="variable">$connection</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span>  string $table</span><br><span class="line">     * <span class="doctag">@param</span>  array $data</span><br><span class="line">     * <span class="doctag">@param</span>  string $connection</span><br><span class="line">     * <span class="doctag">@return</span> $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">notSeeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$database</span> = App::make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$connection</span> = <span class="variable">$connection</span> ?: <span class="variable">$database</span>-&gt;getDefaultConnection();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$database</span>-&gt;connection(<span class="variable">$connection</span>)-&gt;table(<span class="variable">$table</span>)-&gt;where(<span class="variable">$data</span>)-&gt;count();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="number">0</span>, <span class="variable">$count</span>, sprintf(</span><br><span class="line">            <span class="string">'Found unexpected records in database table [%s] that matched attributes [%s].'</span>, <span class="variable">$table</span>, json_encode(<span class="variable">$data</span>)</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 5 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCaseSelenium</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span></span><br></pre></td></tr></table></figure></p>
<p>由我們自己建立的 <code>TestCaseSelenium</code> 去繼承 phpunit-selenium 的 <code>PHPUnit_Extensions_Selenium2TestCase</code>。</p>
<p>第 7 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$ajaxDelay</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowser(env(<span class="string">'BROWSER'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://'</span> . env(<span class="string">'WEBSERVER_URL'</span>) . <span class="string">':'</span> . env(<span class="string">'WEBSERVER_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setHost(env(<span class="string">'SELENIUM_URL'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;setPort((int)env(<span class="string">'SELENIUM_PORT'</span>));</span><br><span class="line">    <span class="variable">$this</span>-&gt;ajaxDelay = (int)env(<span class="string">'AJAX_DELAY'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line">    <span class="variable">$app</span>-&gt;make(Kernel::class)-&gt;bootstrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>TodoSeleniumTest</code> 中，這些設定都是寫在每個 test 的 <code>setUp()</code>，由於這些基礎設定都一樣，將其 <code>Pull members up</code> 到 <code>TestCaseSelenium</code>，以後每個 test 就不需再寫了。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $path</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visit</span><span class="params">(string <span class="variable">$path</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;url(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>visit()</code> 其實相當於 phpunit-selenium 的 <code>url()</code>。</p>
<p>33 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $text</span><br><span class="line"> * <span class="doctag">@param</span> string $tag</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">see</span><span class="params">(string <span class="variable">$text</span>, string <span class="variable">$tag</span> = <span class="string">'body'</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertContains(<span class="variable">$text</span>, <span class="variable">$this</span>-&gt;byTag(<span class="variable">$tag</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>see()</code> 其實相當於 PHPUnit 的 <code>assertContains()</code>，若沒有特別指定 tag，相當於從 <code>body</code> 下開始找。</p>
<p>45 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $text</span><br><span class="line"> * <span class="doctag">@param</span> string $tag</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dontSee</span><span class="params">(string <span class="variable">$text</span>, string <span class="variable">$tag</span> = <span class="string">'body'</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertNotContains(<span class="variable">$text</span>, <span class="variable">$this</span>-&gt;byTag(<span class="variable">$tag</span>)-&gt;text());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>dontSee()</code> 其實相當於 PHPUnit 的 <code>assertNotContains()</code>，若沒有特別指定 tag，相當於從 <code>body</code> 下開始找。</p>
<p>57 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $value</span><br><span class="line"> * <span class="doctag">@param</span> string $name</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span><span class="params">(string <span class="variable">$value</span>, string <span class="variable">$name</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;byName(<span class="variable">$name</span>)-&gt;value(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>type()</code> 其實相當於 phpunit-selenium 的 <code>byName()</code> 找到元素後，再用 <code>value()</code> 去填值。</p>
<p>69 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> $text</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">press</span><span class="params">(string <span class="variable">$text</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;byXPath(<span class="string">"//button[contains(text(), '&#123;$text&#125;')]"</span>)-&gt;click();</span><br><span class="line">    <span class="variable">$this</span>-&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>press()</code> 其實相當於 phpunit-selenium 的 <code>byXPath()</code> 找到元素後，再用 <code>click()</code> 去按下 button。</p>
<p>由於 button 會搭配 AJAX，故需要 <code>hold()</code> 等待一點時間。</p>
<p>80 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> $seconds</span><br><span class="line"> * <span class="doctag">@return</span> TestCaseSelenium $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hold</span><span class="params">(int <span class="variable">$seconds</span>)</span> : <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    sleep(<span class="variable">$seconds</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>應用程式測試的 <code>hold()</code> 其實相當於 <code>sleep()</code>，目的在等 AJAX 回應。</p>
<p>91 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> $table</span><br><span class="line"> * <span class="doctag">@param</span> array $data</span><br><span class="line"> * <span class="doctag">@param</span> null $connection</span><br><span class="line"> * <span class="doctag">@return</span> $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$database</span> = App::make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$connection</span> = <span class="variable">$connection</span> ?: <span class="variable">$database</span>-&gt;getDefaultConnection();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$count</span> = <span class="variable">$database</span>-&gt;connection(<span class="variable">$connection</span>)-&gt;table(<span class="variable">$table</span>)-&gt;where(<span class="variable">$data</span>)-&gt;count();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertGreaterThan(<span class="number">0</span>, <span class="variable">$count</span>, sprintf(</span><br><span class="line">        <span class="string">'Unable to find row in database table [%s] that matched attributes [%s].'</span>, <span class="variable">$table</span>, json_encode(<span class="variable">$data</span>)</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此段程式是由 Laravel 的 <code>Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase</code> trait 移植過來的的，目的在測試資料是否在資料庫內。</p>
<p>112 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span>  string $table</span><br><span class="line"> * <span class="doctag">@param</span>  array $data</span><br><span class="line"> * <span class="doctag">@param</span>  string $connection</span><br><span class="line"> * <span class="doctag">@return</span> $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dontSeeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;notSeeInDatabase(<span class="variable">$table</span>, <span class="variable">$data</span>, <span class="variable">$connection</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span>  string $table</span><br><span class="line"> * <span class="doctag">@param</span>  array $data</span><br><span class="line"> * <span class="doctag">@param</span>  string $connection</span><br><span class="line"> * <span class="doctag">@return</span> $this</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">notSeeInDatabase</span><span class="params">(<span class="variable">$table</span>, array <span class="variable">$data</span>, <span class="variable">$connection</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$database</span> = App::make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$connection</span> = <span class="variable">$connection</span> ?: <span class="variable">$database</span>-&gt;getDefaultConnection();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$count</span> = <span class="variable">$database</span>-&gt;connection(<span class="variable">$connection</span>)-&gt;table(<span class="variable">$table</span>)-&gt;where(<span class="variable">$data</span>)-&gt;count();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="number">0</span>, <span class="variable">$count</span>, sprintf(</span><br><span class="line">        <span class="string">'Found unexpected records in database table [%s] that matched attributes [%s].'</span>, <span class="variable">$table</span>, json_encode(<span class="variable">$data</span>)</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此段程式是由 Laravel 的 <code>Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase</code> trait 移植過來的的，目的在測試資料是否<code>不</code>在資料庫內。</p>
<p><strong>composer.json</strong><span class="margin-note-marker"><sup>23</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">23</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/0e217b24fa33ce797082cff9da6708e9f18ce130" target="_blank" rel="external">修改 composer.json</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>composer.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"autoload-dev"</span>: &#123;</span><br><span class="line">    <span class="string">"classmap"</span>: [</span><br><span class="line">        <span class="string">"tests/TestCase.php"</span>,</span><br><span class="line">        <span class="string">"tests/TestCaseSelenium.php"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p><code>TestCaseSelenium</code> 為自己新建的 class，因為不是遵循 <code>PSR-4</code> 放在 <code>app</code> 目錄下，所以必須在 <code>classmap</code> 下加上 <code>tests/TestCaseSelenium.php</code>，讓 Composer 可以順利載入。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium033.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer dumpautoload</span><br></pre></td></tr></table></figure>
<p>重新命令 Composer 建立 autoload。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium034.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:test TodoSeleniumAppTest</span><br></pre></td></tr></table></figure>
<p>由 Laravel artisan 建立 <code>TodoSeleniumAppTest</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium051.png" alt=""></p>
<h3 id="測試案例1-2">測試案例1</h3><div class="alert alert-info"><i class="fa fa-info"></i>  Todo 一啟動時，顯示目前資料庫的 3 筆 task。</div>
<p><strong>TodoSeleniumAppTest.php</strong><span class="margin-note-marker"><sup>24</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">24</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/4a6b32c4e35fff6779eb4ac36f279970cf328f68" target="_blank" rel="external">TodoSeleniumAppTest (一啟動顯示 3 筆 task)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumAppTest</span> <span class="keyword">extends</span> <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$rootURL</span> = <span class="string">'todo2'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        DB::table(<span class="string">'tasks'</span>)-&gt;truncate();</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 一啟動顯示3筆<span class="title">task</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>]);</span><br><span class="line">        factory(Task::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 2'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Task 3'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span>,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 2'</span>,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 3'</span>,</span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>從原來繼承 <code>PHPUnit_Extensions_Selenium2TestCase</code> 改繼承自己的 <code>TestCaseSelenium</code>，因為 API 與應用程式測試的 API 完全一樣，只要將原來 <code>TodoAppTest</code> 的 <code>一啟動顯示3筆task()</code> 內的測試程式碼複製過來，再將 <code>rootURL</code> 從 <code>/todo</code> 改成 <code>/todo2</code> 即可。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium035.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>。</p>
<h3 id="測試案例2-2">測試案例2</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並顯示在下方的 <b>Current Tasks</b>。</div>
<p><strong>TodoSeleniumAppTest.php</strong><span class="margin-note-marker"><sup>25</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">25</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/03a151bbf7b4be9ba023998902b2aa63da64976b" target="_blank" rel="external">TodoSeleniumAppTest (新增 1 筆 task 並顯示在下方)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumAppTest</span> <span class="keyword">extends</span> <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>並顯示在下方<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">            -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">            -&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原來 <code>TodoAppTest</code> 的 <code>新增1筆task並顯示在下方()</code> 內的測試程式碼複製過來即可。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium036.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>。</p>
<h3 id="測試案例3-2">測試案例3</h3><div class="alert alert-info"><i class="fa fa-info"></i>  新增 1 筆 task，並立即刪除 task。</div>
<p><strong>TodoSeleniumAppTest.php</strong><span class="margin-note-marker"><sup>26</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">26</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo/commit/df45e362b472598ae2bc92a489dfcee52d180576" target="_blank" rel="external">TodoSeleniumAppTest (新增 1 筆 task 立即刪除)</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TodoSeleniumAppTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Task</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo2SeleniumAppTest</span> <span class="keyword">extends</span> <span class="title">TestCaseSelenium</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新增1筆<span class="title">task</span>立即刪除<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="variable">$this</span>-&gt;rootURL)</span><br><span class="line">            -&gt;type(<span class="string">'Task 1'</span>, <span class="string">'name'</span>)</span><br><span class="line">            -&gt;press(<span class="string">'Add Task'</span>)</span><br><span class="line">            -&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay)</span><br><span class="line">            -&gt;see(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;seeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;press(<span class="string">'Delete'</span>)</span><br><span class="line">            -&gt;hold(<span class="variable">$this</span>-&gt;ajaxDelay)</span><br><span class="line">            -&gt;dontSee(<span class="string">'Task 1'</span>)</span><br><span class="line">            -&gt;dontSeeInDatabase(<span class="string">'tasks'</span>, [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'Task 1'</span></span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原來 <code>TodoAppTest</code> 的 <code>新增1筆task立即刪除()</code> 內的測試程式碼複製過來，唯一修改在於 <code>Delete</code> 部分，之前是直接 post URL，現在改成 <code>press(&#39;Delete&#39;)</code>，並加上<code>hold($this-&gt;ajaxDelay)</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium037.png" alt=""></p>
<p>測試會通過並顯示 <span class="label label-success">綠燈</span>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium038.png" alt=""></p>
<p>一次執行 <code>TodoSeleniumAppTest</code> 的 3 個測試，都是 <span class="label label-success">綠燈</span>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium039.png" alt=""></p>
<p>最後將測試全部跑一遍，全部都是 <span class="label label-success">綠燈</span>，包含之前寫的應用程式測試與 Selenium 測試。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>應用程式測試適合用在單純使用 <code>&lt;form&gt;</code> 來 submit 的需求，優點是速度非常快。</li>
<li>Selenium 測試適合用在使用 JavaScript 與 AJAX 的需求，由於需要開啟瀏覽器，速度稍慢。</li>
<li>透過繼承 <code>TestCaseSelenium</code>，Selenium 測試也能使用與應用程式測試相同的 API，除了測試程式碼可無痛升級外，也能享受 API 語意清楚，fluent 方式串接的優點，還可以同時測試資料庫。</li>
<li>目前 <code>TestCaseSelenium</code> 並沒有將應用程式測試的所有 API 包進來，不過證明是個可行的方式，當所有 API 都包進來後，預計將來會以 package 方式釋出。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel53SeleniumPHPUnit_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Taylor Otwell, <a href="https://laravel.com/docs/master/application-testing" target="_blank" rel="external">Laravel Application Testing</a><br>Sebastian Bergmann, <a href="https://github.com/sebastianbergmann/phpunit" target="_blank" rel="external">PHPUnit</a><br>Sebastian Bergmann, <a href="https://packagist.org/packages/phpunit/phpunit-selenium" target="_blank" rel="external">phpunit/phpunit-selenium</a><br>SeleniumHQ, <a href="http://www.seleniumhq.org" target="_blank" rel="external">Selenium Server</a><br>Google, <a href="https://sites.google.com/a/chromium.org/chromedriver/" target="_blank" rel="external">ChromeDriver</a><br>Jeffery Way, <a href="https://laracasts.com/series/whatcha-working-on/episodes/1" target="_blank" rel="external">Laracast : Laravel Test Helpers for Selenium</a></p>
]]></content>
    <summary type="html">
    <![CDATA[PHPUnit 搭配 Selenium 之後，就能實際對瀏覽器做驗收測試，也能測試 JavaScript 與 AJAX。]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Selenium" scheme="http://oomusou.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何修改 PhpStorm 預設的 Class Template?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-class-template/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-class-template/</id>
    <published>2016-10-05T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>當使用 PhpStorm 建立 class 時，預設會產生 <code>Created by PhpStorm</code> 的註解，並包含<strong>作者</strong>、<strong>日期</strong>、<strong>時間</strong>等資訊，有的人喜歡，有的人不喜歡，若你不希望每次建立 class 時都有這個檔頭，可以自行修改；除此之外，在 PHP 7 為了讓強行別檢查發揮作用，我們會在一開始 <code>declare(strict_types = 1);</code>，這也可以直接設定在 class template，以後只要建立新的 class，都會自動加上宣告。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p><img src="/images/phpstorm/phpstorm-class-template/template000.png" alt=""></p>
<p>預設在 PhpStorm 建立 class 時，都會在檔頭加上 <code>Created by PhpStorm</code> 的註解，很多人建立 class 後的第一件事情，就是去刪除這些註解，事實上我們可以透過修改 PhpStorm 的 class template，移除這些設定。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>PhpStorm 2016.2.1</p>
<h2 id="移除註解">移除註解</h2><hr>
<p><img src="/images/phpstorm/phpstorm-class-template/template001.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; File and Code Templates -&gt; PHP Class</em></strong></p>
<p>我們發現每個 class template 都有 <code>#parse(&quot;PHP File Header.php&quot;)</code>。</p>
<p><img src="/images/phpstorm/phpstorm-class-template/template002.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; File and Code Templates -&gt; includes -&gt; PHP File Header</em></strong></p>
<p>切換到 <code>includes</code> 的 <code>PHP File Header</code>，我們可以看到預設的註解就是在此，若你不喜歡這些註解，可以全部刪除後存檔。</p>
<h2 id="宣告_Strict_Type">宣告 Strict Type</h2><hr>
<p>PHP 7 增加了 scalar type hint 與 return type，不過為了相容於過去 PHP 弱型別傳統，預設並沒有啟動型別檢查，必須自己加上 <code>declare(strict_types = 1)</code> 之後，PHP 與 PhpStorm 的 Code Inspection 才會根據 type hint 與 return type 檢查型別。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 PhpStorm 的 Code Inspection，詳細請參考<a href="/phpstorm/phpstorm-code-inspection/">如何在 PhpStorm 使用 Code Inspection?</a></span></span></span></p>
<p>目前 PHP 7 並沒有提供全域的 <code>php.ini</code> 設定，必須自己在每個 <code>.php</code> 加上設定，很麻煩也容易忘記，若能設定在 class template 內，則以後新增 class 都會有 <code>declare(strict_types = 1)</code>。</p>
<p><img src="/images/phpstorm/phpstorm-class-template/template003.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; File and Code Templates -&gt; includes -&gt; PHP File Header</em></strong></p>
<p>刪除預設註解後，改加上 <code>declare(strict_types = 1)</code>。</p>
<p><img src="/images/phpstorm/phpstorm-class-template/template004.png" alt=""></p>
<p>以後新增 class，預設註解不見了，且自動加上 <code>declare(strict_types = 1)</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>除了移除預設註解與宣告 <code>strict types</code> 外，如一些需靠 <code>Laravel artisan</code> 建立的 controller、unit test …，事實上也可以新增一個 template，直接使用 PhpStorm 來新增。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/file-and-code-templates.html" target="_blank" rel="external">File and Code Templates</a></p>
]]></content>
    <summary type="html">
    <![CDATA[將惱人的預設檔頭拿掉，並加上 PHP 7 所需要 strict types 宣告]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Azure 使用 Laravel + Blob Storage?]]></title>
    <link href="http://oomusou.io/azure/azure-blob-storage/"/>
    <id>http://oomusou.io/azure/azure-blob-storage/</id>
    <published>2016-08-13T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>除了關聯式資料庫外，實務上我們常需要將<strong>文字檔</strong>或<strong>二進位檔</strong> (圖片檔或影音檔) 上傳到雲端，並提供下載，此時我們可以使用 Azure 的 Blob Storage 儲存這類型的檔案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.43<br>PhpStorm 2016.2</p>
<h2 id="Blob_Storage_簡介">Blob Storage 簡介</h2><hr>
<ul>
<li>在雲端中儲存檔案的服務，可儲存任何類型的檔案，包含文字檔與二進位檔。</li>
<li>全球任何地方都可透過 HTTP 或 HTTPS 來存取這些資料。您可以使用 Blob Storage 向全球公開資料，或私下儲存應用程式資料。</li>
</ul>
<h2 id="Blob_Storage_應用">Blob Storage 應用</h2><hr>
<ul>
<li>瀏覽器所需的圖片或文件。</li>
<li>檔案的分散式存取。</li>
<li>視訊和音訊的串流傳輸。</li>
<li>檔案備份、歸檔。</li>
</ul>
<h2 id="Blob_Storage_概念">Blob Storage 概念</h2><hr>
<p><img src="/images/azure/azure-blob-storage/blob018.jpg" alt=""></p>
<ul>
<li><strong>Account</strong><ul>
<li>需透過 Account 存取 Container 與 Blob。</li>
</ul>
</li>
<li><strong>Container</strong><ul>
<li>放置 Blob 的地方，類似檔案的<strong>資料夾</strong>。</li>
<li>必須以<strong>小寫</strong>命名。</li>
</ul>
</li>
<li><strong>Blob</strong><ul>
<li>任何類型的檔案。</li>
</ul>
</li>
</ul>
<h2 id="建立_Azure_Storage_Account">建立 Azure Storage Account</h2><hr>
<p>要使用 Azure Blob Storage，首先必須登入 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>，建立 storage account 。</p>
<p><img src="/images/azure/azure-blob-storage/blob001.png" alt=""></p>
<p><strong><em>New -&gt; Data + Storage -&gt; Storage account</em></strong></p>
<p><img src="/images/azure/azure-blob-storage/blob002.png" alt=""></p>
<ul>
<li><strong>Name</strong> : 輸入 storage account 名稱。</li>
<li><strong>Resource Manager</strong> : 選擇 <code>Resource manager</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>關於 <code>Resource manager</code> 與 <code>classic</code> 的差異，詳細請參考 Tom FitzMacken, <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-deployment-model/" target="_blank" rel="external">Azure Resource Manager vs. classic deployment: Understand deployment models and the state of your resources</a></span></span></span></li>
<li><strong>Account Kind</strong> : 選擇 <code>Blob storage</code>。</li>
<li><strong>Replication</strong> : 選擇最基本的 <code>Locally-redundant storage (LRS)</code> 即可。</li>
<li><strong>Access Tier</strong> : 選擇 <code>Hot</code>。</li>
</ul>
<div class="alert alert-info"><i class="fa fa-info"></i>  Replication 快速整理</div>
<ul>
<li>Azure 會自動為 storage account 的資料進行 replication，確保資料的持久性與高可用性。</li>
<li><p>提供了 4 種 replication 機制 :<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於 replication，詳細請參考 Tamra Myers, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-redundancy/#locally-redundant-storage" target="_blank" rel="external">Azure Storage replication</a></span></span></span></p>
<ol>
<li><strong>Locally Redundant Storage (LRS)</strong> : 提供本機備援。</li>
<li><strong>Zone-redundant Storage (ZRS)</strong> : 提供區域備援。</li>
<li><strong>Geo-redundant Storage (GRS)</strong> : 提供異地備援。</li>
<li><strong>Read-access Geo-redundant Storage (RA-GRS)</strong> : 提供讀取權限的異地備援。</li>
</ol>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Replication</th>
<th style="text-align:center">LRS</th>
<th style="text-align:center">ZRS</th>
<th style="text-align:center">GRS</th>
<th style="text-align:center">RA-GRS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">可跨多個設備複寫</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:left">可從次要位置及主要位置讀取資料</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:left">可在不同的節點上維護的資料副本數量</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
</tr>
</tbody>
</table>
<div class="alert alert-info"><i class="fa fa-info"></i>  Access Tier 快速整理</div>
<p>預設為 <code>Hot</code>。</p>
<p><strong>用途</strong></p>
<ul>
<li><strong>Hot</strong> : 適合經常讀、寫的檔案，例如 : 圖檔、文件等。</li>
<li><strong>Cool</strong> : 適合備份檔案，或不常使用之檔案。</li>
</ul>
<p><strong>價格</strong></p>
<ul>
<li><strong>Hot</strong> : 儲存空間費用較高、存取與交易成本較低。</li>
<li><strong>Cool</strong> : 儲存空間費用較低、存取與交易成本較高。</li>
</ul>
<p><img src="/images/azure/azure-blob-storage/blob003.png" alt=""></p>
<ul>
<li><strong>Resource Group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
<li><strong>Location</strong> : 選擇離我們最近的 <code>East Asia</code>。</li>
</ul>
<p>按 <code>Create</code> 開始建立 storage account。</p>
<p><img src="/images/azure/azure-blob-storage/blob004.png" alt=""></p>
<p>成功建立 storage account 後，可以在儀表板看到。</p>
<h2 id="安裝_Azure_SDK_for_PHP">安裝 Azure SDK for PHP</h2><hr>
<p>Azure 提供了 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a>，讓我們可以在 PHP 輕鬆地使用 Azure 服務，由於使用了 Composer 管理套件，所以不單 Laravel 可使用，其他 PHP framework 也可以使用。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/efde1a2fbfa266f483e46b668beb93de2099390a" target="_blank" rel="external">安裝 Azure SDK for PHP</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require microsoft/windowsazure</span><br></pre></td></tr></table></figure>
<p><img src="/images/azure/azure-blob-storage/blob000.png" alt=""></p>
<h2 id="建立_Azure_Storage_連接字串">建立 Azure Storage 連接字串</h2><hr>
<p>剛剛雖然在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 建立了 storage account，但 Laravel 還是不知道該如何連上 Azure Storage，我們還必須在 Laravel 建立連接字串，才能存取 Container 與 Blob。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey]</span><br></pre></td></tr></table></figure>
<p>Azure Storage 連接字串的格式需包含幾個部分 :</p>
<ul>
<li><strong>DefaultEndpointsProtocol</strong> : 選擇 <code>http</code> 或 <code>https</code>。</li>
<li><strong>AccountName</strong> : Azure Storage account 名稱。</li>
<li><strong>AccountKey</strong> : Azure Storage account 的 key。</li>
</ul>
<div class="alert alert-info"><i class="fa fa-info"></i>  AccountName 與 AccountKey 該填什麼呢?</div>
<p><img src="/images/azure/azure-blob-storage/blob005.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Access Keys</em></strong></p>
<p><img src="/images/azure/azure-blob-storage/blob006.png" alt=""></p>
<ul>
<li><code>Storage account name</code> 即為連接字串的 <code>AccountName</code>。</li>
<li><code>key1</code> 即為連接字串的 <code>AccountKey</code>。</li>
</ul>
<p><img src="/images/azure/azure-blob-storage/blob007.png" alt=""></p>
<p>在 Laravel 的 <code>.env</code> 建立以 <code>AZURE_STORAGE</code> 為 key 的連接字串。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/9f84f40aef236c30d16beb8f37311b646a1b02c1" target="_blank" rel="external">建立 Azure Storage 連接字串</a></span></span></span></p>
<h2 id="建立_Container">建立 Container</h2><hr>
<p>以 TDD 方式使用 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a>。</p>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/325d35d15c8f6b0c31d0a6eb46f7ba24bacdc0dd" target="_blank" rel="external">單元測試 : 建立 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Container</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 5 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 <code>AzureBlobService</code> 建立待測試的 <code>$target</code> 物件。</p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Container</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>createContainer()</code>，傳入 Container 名稱。</li>
<li><strong>Assert</strong> : 期望建立 Container 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/10905247074a251dc711573af1287b11310a72f0" target="_blank" rel="external">建立 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立 Container</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * AzureBlobService constructor.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 <code>env()</code> 讀取剛剛在 <code>.env</code> 建立的 <code>AZURE_STORAGE</code> 連接字串。</p>
<p>由 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a> 所提供的 <code>ServiceBuilder::getInstance()</code> 的 <code>createBlobService()</code> 在本機建立 <code>$blobProxy</code> 物件，傳入 Azure Storage 連接字串。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 建立 Container</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>createContainer()</code> 建立 Container。</p>
<p>若 Container 建立失敗 (如重複建立 Container )，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob008.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，建立 Container 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob009.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 也能看到剛剛所建立的 Container。</p>
<h2 id="建立_Blob">建立 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/0b913cd4c94a98a84c4d7a362fcabdcfb62389fd" target="_blank" rel="external">單元測試 : 建立 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">        <span class="variable">$content</span> = fopen(<span class="keyword">__DIR__</span> . <span class="string">'/blob.txt'</span>, <span class="string">'r'</span>);</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">    <span class="variable">$content</span> = fopen(<span class="keyword">__DIR__</span> . <span class="string">'/blob.txt'</span>, <span class="string">'r'</span>);</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>createBlob()</code>，傳入 Container 名稱、Blob 名稱與上傳物件。</li>
<li><strong>Assert</strong> : 期望建立 Blob 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/c9345c5b913c082588e55fe080b2bf8f0c545d17" target="_blank" rel="external">建立 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@param</span> string $blobName</span><br><span class="line">     * <span class="doctag">@param</span> $content</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>, <span class="variable">$content</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;createBlockBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 建立 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@param</span> string $blobName</span><br><span class="line"> * <span class="doctag">@param</span> $content</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>, <span class="variable">$content</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;createBlockBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>createBlockBlob()</code> 建立 Blob。</p>
<p>若 Blob 建立失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob010.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，建立 Container 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob011.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 也能看到剛剛所建立的 Blob。</p>
<h2 id="顯示所有_Blob">顯示所有 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/43cf30577d4f981439b24c1c57be268fba270067" target="_blank" rel="external">單元測試 : 顯示所有 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;listAllBlobs(<span class="variable">$containerName</span>)-&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'name'</span> =&gt; <span class="string">'myblob'</span>, <span class="string">'url'</span>  =&gt; <span class="string">'https://laravel52blobstorage.blob.core.windows.net/mycontainer/myblob'</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;listAllBlobs(<span class="variable">$containerName</span>)-&gt;all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = [</span><br><span class="line">        [<span class="string">'name'</span> =&gt; <span class="string">'myblob'</span>, <span class="string">'url'</span>  =&gt; <span class="string">'https://laravel52blobstorage.blob.core.windows.net/mycontainer/myblob'</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>listAllBlobs()</code>，傳入 Container 名稱。</li>
<li><strong>Assert</strong> : 建立期望回傳的的陣列做 assertion。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/ec3b356bc8f55d5b1a8bf0b2d25f667aa126b257" target="_blank" rel="external">顯示所有 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 列出 Container 的所有 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listAllBlobs</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> ListBlobsResult $blobLists */</span></span><br><span class="line">            <span class="variable">$blobLists</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;listBlobs(<span class="variable">$containerName</span>);</span><br><span class="line">            <span class="variable">$blobs</span> = <span class="variable">$blobLists</span>-&gt;getBlobs();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> collect(<span class="variable">$blobs</span>)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(Blob <span class="variable">$blob</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    <span class="string">'name'</span> =&gt; <span class="variable">$blob</span>-&gt;getName(),</span><br><span class="line">                    <span class="string">'url'</span>  =&gt; <span class="variable">$blob</span>-&gt;getUrl(),</span><br><span class="line">                ];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> collect([]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 列出 Container 的所有 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@return</span> Collection</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listAllBlobs</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">Collection</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> ListBlobsResult $blobLists */</span></span><br><span class="line">        <span class="variable">$blobLists</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;listBlobs(<span class="variable">$containerName</span>);</span><br><span class="line">        <span class="variable">$blobs</span> = <span class="variable">$blobLists</span>-&gt;getBlobs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> collect(<span class="variable">$blobs</span>)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(Blob <span class="variable">$blob</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="variable">$blob</span>-&gt;getName(),</span><br><span class="line">                <span class="string">'url'</span>  =&gt; <span class="variable">$blob</span>-&gt;getUrl(),</span><br><span class="line">            ];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> collect([]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>listBlobs()</code> 取得 <code>$blobLists</code> 物件，在由其 <code>getBlobs()</code> 取得所有 Blob 陣列。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob012.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，顯示所有 Blob 成功。</p>
<h2 id="下載_Blob">下載 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/fe083b525cebe45853cf536f98a0520d1b7f9259" target="_blank" rel="external">單元測試 : 下載 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 下載<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;downloadBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 下載<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;downloadBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>downloadBlob()</code>，傳入 Container 名稱與 Blob 名稱。</li>
<li><strong>Assert</strong> : 期望下載 Blob 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/ee55a135ee2ec1b0e319707674c8f2cf79893790" target="_blank" rel="external">下載 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下載 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@param</span> string $blobName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> GetBlobResult $blob */</span></span><br><span class="line">            <span class="variable">$blob</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;getBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">            fpassthru(<span class="variable">$blob</span>-&gt;getContentStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 下載 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@param</span> string $blobName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> GetBlobResult $blob */</span></span><br><span class="line">        <span class="variable">$blob</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;getBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">        fpassthru(<span class="variable">$blob</span>-&gt;getContentStream());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>getBlob()</code> 取得 <code>$blob</code> 物件，在由其 <code>getContentStream()</code> 以串流資源形式取得 Blob。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob013.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，並顯示文字檔內容為 <code>Hello Azure Blob</code>。</p>
<h2 id="刪除_Blob">刪除 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/90c6bdd5fcddae4c9c31eb06bc2c704f7f22d555" target="_blank" rel="external">單元測試 : 刪除 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>deleteBlob()</code>，傳入 Container 名稱與 Blob 名稱。</li>
<li><strong>Assert</strong> : 期望刪除 Blob 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/1ca521fece2d59b672f2edfd536a48954d02befc" target="_blank" rel="external">刪除 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@param</span> string $blobName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@param</span> string $blobName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>deleteBlob()</code> 刪除 Blob。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob014.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，刪除 Blob 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob015.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 已經看不到任何 Blob。</p>
<h2 id="刪除_Container">刪除 Container</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/ffd04ac8890c76c1313c537e22391b0474422d89" target="_blank" rel="external">單元測試 : 刪除 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Container</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Container</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>deleteContainer()</code>，傳入 Container 名稱。</li>
<li><strong>Assert</strong> : 期望刪除 Container 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/9e49ce014487beb0b8df96e7e92019103c38eeb6" target="_blank" rel="external">刪除 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除 Container</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除 Container</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>deleteContainer()</code> 刪除 Container。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob016.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，刪除 Container 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob017.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 已經看不到任何 Container。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 提供了 Blob Storage，讓我們可以方便地儲存文字檔或二進位檔。</li>
<li>Azure 還提供了 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a>，使用了 Composer 的套件管理方式，只要簡單的 <code>composer require</code> 後即可立即使用，且不限於 Laravel，其他 PHP framework 也可以使用。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Microsoft Azure, <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a></li>
<li>Microsoft Azure, <a href="https://azure.microsoft.com/en-us/develop/php/" target="_blank" rel="external">PHP Develop Center</a></li>
<li>Robert McMurray, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-php-how-to-use-blobs/" target="_blank" rel="external">How to use blob storage from PHP</a></li>
<li>Robin Shahan, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-create-storage-account/#create-a-storage-account" target="_blank" rel="external">About Azure storage accounts</a></li>
<li>Tamra Myers, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-manage-access-to-resources/" target="_blank" rel="external">Manage anonymous read access to containers and blobs</a></li>
<li>Tom FitzMacken, <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-deployment-model/" target="_blank" rel="external">Azure Resource Manager vs. classic deployment: Understand deployment models and the state of your resources</a></li>
<li>Tamra Myers, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-redundancy/#locally-redundant-storage" target="_blank" rel="external">Azure Storage replication</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[利用 Azure SDK for PHP 使用 Azure 服務]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解決安裝 IDE Helper 造成 Laravel 在 Azure 部署失敗?]]></title>
    <link href="http://oomusou.io/azure/azure-ide-helper/"/>
    <id>http://oomusou.io/azure/azure-ide-helper/</id>
    <published>2016-08-06T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/barryvdh/laravel-ide-helper" target="_blank" rel="external">Laravel IDE Helper</a> 解決了 PhpStorm 無法對 Facade 做 code completion 的問題，，為使用 Laravel 與 PhpStorm 必裝的套件，但安裝方式的差異，可能造成 Laravel 在 Azure 無法部署成功。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>因為 IDE Helper 為<strong>開發用</strong>套件，在<a href="/phpstorm/phpstorm-ide-helper/">如何在 PhpStorm 活用 PHPDoc?</a> 一文中，建議大家將 IDE Helper 安裝在 <code>require-dev</code>，事實上開發用套件都應該使用這種方式安裝，不過 IDE Helper 在 Azure 部署時卻遇到困難。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>已經在本機順利安裝 IDE Helper 的 Laravel 專案，部署到 Azure 後，出現部署失敗的錯誤。</p>
<p><img src="/images/azure/azure-ide-helper/ide000.png" alt=""></p>
<p><strong><em>Settings -&gt; Publishing -&gt; Development source</em></strong></p>
<p><img src="/images/azure/azure-ide-helper/ide001.png" alt=""></p>
<p>部署出現 <code>Failed</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide002.png" alt=""></p>
<p>繼續往下按 <code>View Log</code>，按錯誤訊息。</p>
<p><img src="/images/azure/azure-ide-helper/ide003.png" alt=""></p>
<p>錯誤訊息出現在 <code>composer install</code> 之後，在執行 <code>php artisan optimize</code> 時，出現找不到 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code> 的錯誤。</p>
<h2 id="Root_Cause">Root Cause</h2><hr>
<p><img src="/images/azure/azure-ide-helper/ide008.png" alt=""></p>
<p>觀察 <code>composer.json</code>，會發現當 Azure 在執行完 <code>composer install</code> 後，會觸發 <code>post-install-cmd</code> 事件，並執行 <code>php artisan optimize</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide007.png" alt=""></p>
<p>一旦執行 <code>php artisan optimize</code>，就會執行 <code>config/app.php</code> 的所有 service provider，當然包括我們安裝 IDE Helper 新增的 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide004.png" alt=""></p>
<p>實際由 PhpStorm 的 Remote Host 連到 Azure，會發現 Laravel 專案只出現在 <code>repository</code> 目錄下，而沒在 <code>wwwroot</code> 目錄下，事實上 Laravel 整個專案應該放在 <code>wwwroot</code> 目錄下，這表示在 Azure 的部署並沒有成功。</p>
<p><img src="/images/azure/azure-ide-helper/ide005.png" alt=""></p>
<p>我們再比較本機的 <code>vendor</code> 目錄與 Azure 的 <code>repository</code> 下的 <code>vendor</code> 目錄，會發現 Azure 的 <code>vendor</code> 目錄並沒有 IDE Helper 所需的 <code>barryvdh</code> 目錄。</p>
<p>而 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code> 這個 service provider 正是放在 <code>vendor/barryvdh</code> 目錄下。</p>
<p><img src="/images/azure/azure-ide-helper/ide006.png" alt=""></p>
<p>打開本機的 <code>composer.json</code>，我們發現 <code>barryvdh/laravel-ide-helper</code> 是放在 <code>require-dev</code>，也就是說，Azure 在部署時，是下 <code>composer install --no-dev</code>，因此才沒將 <code>barryvdh</code> 安裝在 <code>vendor</code> 目錄下。</p>
<h2 id="Solution">Solution</h2><hr>
<p><img src="/images/azure/azure-ide-helper/ide009.png" alt=""></p>
<p>在 <code>composer.json</code> 中，將 <code>barryvdh/laravel-ide-helper&quot;: &quot;^2.2&quot;</code> 從 <code>require-dev</code> 改到 <code>require</code>。</p>
<p>雖然本機已經有 <code>vendor/barryvdh</code>，但別忘了 <code>composer install</code> 吃的是 <code>composer.lock</code>，所以我們必須重新執行 <code>composer update</code> 來更新 <code>composer.lock</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide010.png" alt=""></p>
<p><code>composer update</code> 執行完後，會發現 <code>_ide_helper.php</code>、<code>composer.json</code> 與 <code>composer.lock</code> 三個檔案被變更，須重新寫入 git repository。</p>
<p>直接在 PhpStorm 的 <code>Version Control</code> 按 <code>Commit Changes</code> 即可。</p>
<p><img src="/images/azure/azure-ide-helper/ide011.png" alt=""></p>
<p>輸入 commit message 之後，直接按 <code>Commit and Push</code> 一併 push 到 GitHub。</p>
<p><img src="/images/azure/azure-ide-helper/ide012.png" alt=""></p>
<p>按 <code>Push</code> 直接送進 GitHub。</p>
<p><img src="/images/azure/azure-ide-helper/ide013.png" alt=""></p>
<p>上傳至 GitHub 成功。</p>
<p><img src="/images/azure/azure-ide-helper/ide014.png" alt=""></p>
<p>再次觀察 Azure 的部署訊息，這次就成功了。</p>
<p><img src="/images/azure/azure-ide-helper/ide015.png" alt=""></p>
<p>由 PhpStorm 的 Remote Host 去觀察 Azure，<code>wwwroot</code> 目錄下的確有完整的 Laravel 專案，表示 Azure 已經成功部署。</p>
<p><img src="/images/azure/azure-ide-helper/ide016.png" alt=""></p>
<p>再觀察 <code>vendor</code> 目錄的確多了 <code>barryvdh</code>，因此 <code>php artisan optimize</code> 時，可以順利找到 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 會自動下 <code>composer install --no-dev</code>，因此只會安裝 <code>require</code> 的套件，不會安裝 <code>requre-dev</code> 的套件。</li>
<li>開發用的套件，理論上安裝在 <code>require-dev</code> 即可，除非該套件會用到 service provider，就必須改安裝在 <code>require</code>，否則會造成 Azure 部署失敗。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureMySQL_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[將 IDE Helper 安裝在 require-dev 將造成 Azure 部署失敗]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Azure 使用 Laravel + MySQL?]]></title>
    <link href="http://oomusou.io/azure/azure-phpstorm-mysql/"/>
    <id>http://oomusou.io/azure/azure-phpstorm-mysql/</id>
    <published>2016-08-02T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>Azure 除了可以跑 PHP 與 Laravel 外，更可以跑我們喜愛的 MySQL 資料庫。本文將實際在 Azure 建立 MySQL 資料庫，透過 <code>.env</code> 的設定，讓 Laravel 可以連上 MySQL，並透過 PhpStorm 直接管理 Azure 雲端的 MySQL 資料庫。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>在 <a href="/azure/azure-phpstorm-deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure</a> 一文中，我們已經可以順利在 Azure 跑 PHP 7.0 與 Laravel，唯一就是 MySQL 還沒連上，本文將以前一篇為基礎，繼續設定 MySQL 部分。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p>請參考 <a href="/azure/azure-phpstorm-deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure</a>，將本機的 Laravel 專案部署到 Azure。</p>
<h2 id="在_Azure_建立_MySQL_資料庫">在 Azure 建立 MySQL 資料庫</h2><hr>
<p>登入 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>，在 Azure 建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql000.png" alt=""></p>
<p><strong><em>New -&gt; Data + Analytics</em></strong>，選擇 <code>See all</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql001.png" alt=""></p>
<p>在 <code>Data services</code> 下選擇 <code>More</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql002.png" alt=""></p>
<p>選擇 <code>ClearDB</code> 的 <code>MySQL Database</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql003.png" alt=""></p>
<p>按 <code>Create</code> 建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql004.png" alt=""></p>
<ul>
<li><strong>Database Name</strong> : 輸入資料庫名稱。</li>
<li><strong>Resource group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
<li><strong>Location</strong> : 選擇離我們最近的 <code>East Asia</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql005.png" alt=""></p>
<ul>
<li><strong>Pricing Tier</strong> : 選擇免費的 <code>Mercury</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql006.png" alt=""></p>
<ul>
<li><strong>Legal Terms</strong> : 確認是 <code>0.00 TWD/month</code>，按 <code>Purchase</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql007.png" alt=""></p>
<p>建議將 <code>Pin to dashboard</code> 打勾，方便我們管理。</p>
<p>按 <code>Create</code> 開始建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql008.png" alt=""></p>
<p>MySQL 資料庫建立完成，會顯示 <code>Healthy</code>。</p>
<h2 id="設定本機_-env">設定本機 .env</h2><hr>
<p>MySQL 資料庫建立完成後，馬上來測試資料庫是否建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql009.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Properties</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql010.png" alt=""></p>
<p>注意其 <code>HOSTNAME</code>、<code>PORT</code>、<code>USERNAME</code>、<code>PASSWORD</code> 與 <code>CONNECTION STRING</code> 欄位。</p>
<p>其中 <code>CONNECTION STRING</code> 的 <code>Database</code>，即為我們剛剛建立的資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql011.png" alt=""></p>
<p>將本機 <code>.env</code> 的設定與 Azure 的設定一致。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql012.png" alt=""></p>
<p>執行 <code>php artisan migrate</code>，若能成功執行 migration，表示 MySQL 資料庫已經順利建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql016.png" alt=""></p>
<p>執行 seeding，將預設資料寫入 Azure 的 MySQL 資料庫。</p>
<h2 id="設定_PhpStorm_Database">設定 PhpStorm Database</h2><hr>
<p>目前為止，我們已經將資料 seeding 到 Azure 的 MySQL，不過還無法確定資料是否真的已經寫入成功，因此要設定 PhpStorm 的 Database 工具連到 Azure 查看資料。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql013.png" alt=""></p>
<p>點選右側的 <code>Database</code>，按 <code>+</code> 新增資料庫連線。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql014.png" alt=""></p>
<p><strong><em>Data Source -&gt; MySQL</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql015.png" alt=""></p>
<p>將之前的 Azure 的 <code>Host</code>、<code>Database</code>、<code>User</code> 與 <code>Password</code> 設定填過來。</p>
<p>按 <code>Test Connection</code> 測試是否可連線成功。</p>
<p>若第一次在 PhpStorm 連接 MySQL，需安裝 MySQL 的 Java driver。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql017.png" alt=""></p>
<p>PhpStorm 的 Database 工具可以看到 Azure MySQL 上所有的 table，也能看到 <code>posts</code> 上剛剛 seeding 的三筆資料。</p>
<h2 id="設定_Azure_-env">設定 Azure .env</h2><p>資料已經上 Azure 的 MySQL了，不過在 Azure 上的 Laravel 還不認識我們剛剛建立的 MySQL 資料庫。</p>
<p>Laravel 雖然提供了 <code>.env</code>，可以設定些敏感資訊，如資料庫連線。但預設 <code>.gitignore</code> 有排除 <code>.env</code>，所以並沒有上 GitHub，因此也不會上 Azure。</p>
<p>我們須在 Azure 的 <code>Application settings</code> 設定資料庫連線資訊。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql019.png" alt=""></p>
<p>選擇我們的 Laravel Web App。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql020.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Application Settings</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql021.png" alt=""></p>
<p>建立 <code>DB_CONNECTION</code>、<code>DB_HOST</code>、<code>DB_DATABASE</code>、<code>DB_USERNAME</code> 與 <code>DB_PASSWORD</code> 這些 key，並將 <code>.env</code> 的這些值設定在這裡。</p>
<h2 id="在_Azure_執行_Laravel">在 Azure 執行 Laravel</h2><hr>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql018.png" alt=""></p>
<p>Azure 上的 Laravel 已經能順利讀取到 Azure 上的 MySQL 了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 雖然沒有原生支援 MySQL，但透過 ClearDB 所提供的 MySQL 服務，我們依然可以在 Azure 上使用 PHP + Laravel + MySQL。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureMySQL_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Cephas Lin, <a href="https://azure.microsoft.com/en-us/documentation/articles/store-php-create-mysql-database/" target="_blank" rel="external">Create and connect to a MySQL database in Azure</a></li>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+SQL+Database+in+PhpStorm" target="_blank" rel="external">Working with Windows Azure SQL Database in PhpStorm</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 Azure 一樣可以使用我們喜愛的 MySQL]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="MySQL" scheme="http://oomusou.io/tags/MySQL/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 部署 Laravel 到 Azure?]]></title>
    <link href="http://oomusou.io/azure/azure-phpstorm-deploy/"/>
    <id>http://oomusou.io/azure/azure-phpstorm-deploy/</id>
    <published>2016-08-01T12:23:43.000Z</published>
    <updated>2016-10-18T06:13:35.000Z</updated>
    <content type="html"><![CDATA[<p>Azure 是微軟的雲端平台，也可以跑 PHP 與 Laravel，本文將以 PhpStorm 為工具，與 GitHub 結合，將來程式有任何變更，只要 push 到 GitHub，就會自動更新到 Azure，還可透過 PhpStorm 內建的工具管理 Azure。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure000.png" alt=""></p>
<p>啟動 PhpStorm，選擇 <code>Create New Project</code> 建立新專案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure001.png" alt=""></p>
<ul>
<li><strong>專案類型</strong> :  <code>Composer Project</code>。</li>
<li><strong>Location</strong> : Laravel 專案路徑與專案名稱</li>
<li><strong>composer.phar</strong> : 選擇 <code>Use existing composer.phar</code>，輸入 <code>/usr/local/bin/composer</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>選擇 <code>Download composer.phar from getcomposer.org</code> 亦可，這種方式在 OS X 本機並不需要事先安裝 Composer，PhpStorm 會自動將 Composer 下載到目錄專案跟目錄下，唯此種方式安裝 package 將無法使用到 cache，必須從網路上下載，安裝時間較長，所以實務上建議使用 <code>Use existing composer.phar</code>。</span></span></span></li>
<li><strong>Filter packages</strong> : 輸入 <code>laravel/laravel</code>，此為 Laravel 專案的 package 名稱。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure002.png" alt=""></p>
<p>將畫面向下卷，還有其他設定。</p>
<ul>
<li><strong>Version to install</strong> : 選擇 Laravel 版本，<code>&lt;default&gt;</code> 為 Laravel 最新版本。</li>
<li><strong>Path to PHP executable</strong> : 指定 PHP 執行檔路徑，主要為了執行 Composer。</li>
<li><strong>Command line parameters</strong> : Composer 參數，輸入 <code>prefer-dist</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure003.png" alt=""></p>
<p>建立 Laravel 專案中，由於 Composer 需解析 package 相依性，需要一些時間。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve</span><br></pre></td></tr></table></figure>
<p><img src="/images/azure/azure-phpstorm-deploy/azure004.png" alt=""></p>
<p>執行 PHP 內建 Http Server。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure005.png" alt=""></p>
<p>Laravel 已經順利在 OS X 本機執行。</p>
<h2 id="建立_Local_Git_Repository">建立 Local Git Repository</h2><hr>
<p>實務上開發 Laravel 會搭配 Git 做版本控制，先在本機建立 local repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure006.png" alt=""></p>
<p><strong><em>VCS -&gt; Import ino Version Control -&gt; Create Git Repository</em></strong></p>
<p>建立 Git repository。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>相當於 <code>git init</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure007.png" alt=""></p>
<p>選擇 local repository 目錄，也就是目前專案目錄。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure008.png" alt=""></p>
<p>下方出現 <code>Version Control</code>，並顯示有檔案尚未受 Git 管理，按 <code>browse</code> 顯示檔案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure009.png" alt=""></p>
<p>選擇專案目錄，按 <code>+</code> (Add to VCS) 將檔案加入 stage。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>相當於 <code>git add .</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure010.png" alt=""></p>
<p>綠色檔案為加入 stage 的檔案，按 <code>VCS</code> (Commit Changes)。<br><img src="/images/azure/azure-phpstorm-deploy/azure011.png" alt=""></p>
<ul>
<li>不要選擇 <code>Perform code analysis</code>。</li>
<li><strong>Commit Message</strong> : Initial commit。</li>
</ul>
<p>按 <code>Commit</code> 寫檔案寫入 local repository。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>相當於 <code>git commit -m &quot;Initial commit&quot;</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure012.png" alt=""></p>
<p>Commit 成功後，下方會顯示 <code>xx files committed : initial commit</code>。</p>
<h2 id="建立_Remote_GitHub_Repository">建立 Remote GitHub Repository</h2><hr>
<p>將 local repository 上傳至 GitHub 建立 remote repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure017.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Version Control -&gt; GitHub</em></strong></p>
<p>設定 GitHub 帳號。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure013.png" alt=""></p>
<p><strong><em>VCS -&gt; Import into Version Control -&gt; Share Project on GitHub</em></strong></p>
<p>將專案發佈到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure014.png" alt=""></p>
<p>預設會使用專案名稱為 remote GitHub repository 名稱。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure015.png" alt=""></p>
<p>在 GitHub 建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure016.png" alt=""></p>
<p>在 GitHub 已經看到剛剛上傳的專案。</p>
<h2 id="建立_Azure_Web_App">建立 Azure Web App</h2><hr>
<p>之前都在 PhpStorm 操作，現在開始要在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 操作了。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure018.png" alt=""></p>
<p><strong><em>New -&gt; Web + Mobile -&gt; Web App</em></strong></p>
<p>在 Azure 建立 Web App。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure019.png" alt=""></p>
<ul>
<li><strong>App name</strong> : 將來可以使用網址 <code>https://appname.azurewebsites.net</code> 連過來。</li>
<li><strong>Resource Group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
</ul>
<p>按 <code>App Service plan/location</code> 繼續設定。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure020.png" alt=""></p>
<p>預設的 App Service plan 是在美國，並不適合我們，我們應該選離我們最近的主機，所以選擇 <code>Create New</code> 建立新的 App Service plan。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure021.png" alt=""></p>
<ul>
<li><strong>App Service plan</strong> : 替 App Service plan 選個名稱。</li>
<li><strong>Location</strong> : 選擇主機位置，離我們最近的是 <code>East Asia</code>，位在香港。</li>
<li><strong>Pricing tier</strong> : 預設為 <code>D1 Shared</code>，需要收費，由於我們只是測試用，可以選擇 <code>0</code> 元的方案。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure022.png" alt=""></p>
<p>預設只會顯示 <code>Recommended</code> 方案，按 <code>View all</code> 顯示全部方案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure023.png" alt=""></p>
<p>選擇 <code>0</code> 元的 <code>F1 Free</code> 方案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure024.png" alt=""></p>
<p>Pricing tier 改成 <code>F1 Free</code>，按 <code>OK</code> 繼續。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure025.png" alt=""></p>
<p>App Service plan/location 改成我們想要的 <code>Laravel (East Asia)</code>。</p>
<p>建議將 <code>Pin to dashboard</code> 打勾，方便我們管理。</p>
<p>按 <code>Create</code> 開始建立 Web App。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure026.png" alt=""></p>
<p>Azure 正在建立 Web App 中，需要一點時間。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure027.png" alt=""></p>
<p>Web App 建立完成，會顯示 <code>Running</code>。</p>
<h2 id="設定_PHP_版本">設定 PHP 版本</h2><hr>
<p>Web App 預設的版本為 PHP 5.4，無法執行 Laravel，必須另外設定。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure028.png" alt=""></p>
<p>選擇剛剛建立的 <code>Laravel52PhpStormAzure</code> Web App。</p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure029.png" alt=""></p>
<ul>
<li><strong>PHP version</strong> : 選擇 <code>5.6</code> 或 <code>7.0</code>。</li>
</ul>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="安裝_Composer">安裝 Composer</h2><hr>
<p>Laravel 預設的 <code>.gitignore</code> 有排除 <code>vendor</code> 目錄，使得上傳到 GitHub 不包含 <code>vendor</code> ，所以將來 Azure 從 GitHub 所抓下來的檔也沒有 <code>vendor</code> 目錄。</p>
<p>這使得 Azure 要自己下 <code>composer install</code> 安裝 <code>vendor</code> 下的 package，因此必須另外在 Azure 安裝 Composer。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure030.png" alt=""></p>
<p><strong><em>Tools -&gt; Develop -&gt; Extensions</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure031.png" alt=""></p>
<p>按 <code>Add</code> 新增 extension。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure032.png" alt=""></p>
<p>選 <code>Choose Extension</code> 與 <code>Composer</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure033.png" alt=""></p>
<p>成功安裝 Composer。</p>
<h2 id="設定_Deployment_Source">設定 Deployment Source</h2><hr>
<p>設定 Azure 從 GitHub 抓資料，只要有任何 push 到 GitHub，Azure 都會自動更新。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure034.png" alt=""></p>
<p><strong><em>Setting -&gt; Publishing -&gt; Deployment source</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure035.png" alt=""></p>
<p> <strong><em>Choose Source -&gt; GitHub</em></strong></p>
<p>Azure 支援多種 deployment source，本文以 GitHub 為例。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure036.png" alt=""></p>
<p>選擇 GitHub 上的 <code>project</code> 與 <code>branch</code>。</p>
<p>按 <code>OK</code> 後，開始第一次從 GitHub 部署到 Azure。</p>
<p>由於第一次部署，<code>composer install</code> 要重新安裝 <code>vendor</code> 目錄，需要一點時間。</p>
<h2 id="設定_Remote_Host">設定 Remote Host</h2><hr>
<p>設定 Web App 一定得設定虛擬目錄，但是之前的部署皆由 Azure 自動完成，到底 Azure 將我們的專案下載到什麼目錄下呢?</p>
<p>讓我們再回到 PhpStorm。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure037.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Build, Execution Development -&gt; Deployment</em></strong></p>
<p>按 <code>+</code> 新增。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure038.png" alt=""></p>
<p>輸入自訂 server 名稱，選擇 type 為 <code>FTP</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure039.png" alt=""></p>
<p>需要輸入 <code>FTP host</code>、<code>User name</code> 與 <code>Web server root url</code>。</p>
<p>但此時我們還不知道該輸入什麼。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure040.png" alt=""></p>
<p>回到 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>。</p>
<p><strong><em>Settings -&gt; General -&gt; Properties</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure044.png" alt=""></p>
<ul>
<li><code>URL</code> 為 <code>Web server root url</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure041.png" alt=""></p>
<ul>
<li><code>FTP/DEPLOYMENT USER</code> 為 <code>User name</code>。</li>
<li><code>FTP HOST NAME</code> 為 <code>FTP host</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure042.png" alt=""></p>
<p>再回到 PhpStorm，將 <code>FTP host</code>、<code>User name</code> 與 <code>Web server root url</code> 補上。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  FTP host 不包含 <strong>ftp://</strong></div>
<p><img src="/images/azure/azure-phpstorm-deploy/azure043.png" alt=""></p>
<p><strong><em>Tools -&gt; Deployment -&gt; Browse Remote Host</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure045.png" alt=""></p>
<p>由 <code>Remote Host</code> 視窗，我們發現 Laravel 專案是放在 <code>site/wwwroot</code> 底下，所以 virtual root 應該設定在 <code>site/wwwroot/public</code>。</p>
<h2 id="設定_Virtual_Root">設定 Virtual Root</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure046.png" alt=""></p>
<p>再回到 <a href="http://protal.azure.com" target="_blank" rel="external">Azure portal</a>。</p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure047.png" alt=""></p>
<p>在 <code>Virtual application and directories</code> 下，將 virtual root 改成 <code>site\wwwroot\public</code>。</p>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="設定_-env">設定 .env</h2><hr>
<p>Laravel 提供了 <code>.env</code>，可以設定些敏感資訊，如資料庫連線。預設 <code>.gitignore</code>有排除 <code>.env</code>，所以並沒有上 GitHub，因此也不會上 Azure。</p>
<p>但 <code>.env</code> 的 <code>APP_KEY</code> 又是 Laravel 執行時所必要資訊，必須加以補上。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure046.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure048.png" alt=""></p>
<p>將本機的 <code>.env</code> 的 <code>APP_KEY</code> 內容加以複製。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure049.png" alt=""></p>
<p>在 <code>App settings</code> 下新增 <code>APP_KEY</code>，將 <code>.env</code> 的 <code>APP_KEY</code> 值貼上。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>實務上 <code>.env</code> 的設定，都可以改設定在 Azure 的 <code>App settings</code>。</span></span></span></p>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="第一次在_Azure_執行_Laravel">第一次在 Azure 執行 Laravel</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure050.png" alt=""></p>
<p>點擊 <code>URL</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure051.png" alt=""></p>
<p>在 Azure 的網址上正確執行 Laravel。</p>
<h2 id="修改並_Push_到_GitHub">修改並 Push 到 GitHub</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure052.png" alt=""></p>
<p>將 <code>welcome.blade.php</code> 加以修改，由 <code>Laravel 5</code> 改成 <code>Hello Laravel</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure053.png" alt=""></p>
<p>點擊下方的 <code>Version control</code> 標籤，按 <code>VCS</code> 將此次變更加以 commit。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure054.png" alt=""></p>
<p>填入 commit message 後，按 <code>Commit and Push</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure055.png" alt=""></p>
<p>按 <code>Push</code> 將直接 push 到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure056.png" alt=""></p>
<p>Push 到 GitHub 成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure057.png" alt=""></p>
<p>Azure 會自動從 GitHub 更新。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文以 GitHub 為例，實務上你可以搭配你習慣的版本控制系統。</li>
<li>透過 <a href="http://protal.azure.com" target="_blank" rel="external">Azure portal</a> 與 PhpStorm，您不需要下任何一行指令，就可以經鬆的將 Laravel 部署到 Azure。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzure_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Cephas Lin, <a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-web-php-get-started/" target="_blank" rel="external">Create, configure, and deploy a PHP web app to Azure</a></li>
<li>Robert McMurray, <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-php-configure/" target="_blank" rel="external">Configure PHP in Azure App Service Web Apps</a></li>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+from+within+PhpStorm" target="_blank" rel="external">Working with Windows Azure from within PhpStorm</a></li>
<li>KevinAtStout, <a href="https://www.youtube.com/watch?v=48moauj0KtE" target="_blank" rel="external">Connecting PhpStorm to Your Azure Web Server</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用有效率的工具部署 Laravel]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://oomusou.io/tags/GitHub/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
</feed>
