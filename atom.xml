<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2018-03-17T13:49:50.370Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[深入探討 F# 之 Discriminated Union]]></title>
    <link href="http://oomusou.io/fsharp/union/"/>
    <id>http://oomusou.io/fsharp/union/</id>
    <published>2018-03-17T02:23:43.000Z</published>
    <updated>2018-03-17T13:49:50.370Z</updated>
    <content type="html"><![CDATA[<p>將實質上不同的型別，在邏輯上看成相同的型別。如 function 可能回傳 <code>int</code> 或 <code>bool</code> 兩種型別，可為此 function 特別建立 <code>IntOrBool</code> 型別，同時包含 <code>int</code> 與 <code>bool</code>，這就是 Discriminated Union，簡稱 <code>union</code>。</p>
<p>若說 <code>tuple</code> 是將不同型別加以 AND，則 <code>union</code> 是將不同型別加以 OR。</p>
<a id="more"></a>
<h2 id="Definition">Definition</h2><hr>
<p>將不同的型別，整合成單一型別。</p>
<blockquote>
<p>Q : 為什麼要稱為 <code>Discriminated</code> Union？</p>
</blockquote>
<p>因為不是簡單的將不同型別加以 union 而已，而可以將不同的型別取 <code>case-identifier</code> 加以區別 (discriminated)，所以稱為 <code>Discriminated</code> Union。</p>
<h2 id="Syntax">Syntax</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ attributes ]&#10;type type-name =&#10;    | case-identifier1 [of [ fieldname1 : ] type1 [ * [ fieldname2 : ] type2 ...]&#10;    | case-identifier2 [of [fieldname3 : ]type3 [ * [ fieldname4 : ]type4 ...]&#10;...</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>type-name</strong> : 定義 <code>union</code> 的型別名稱</li>
<li><strong>I</strong> : 因為 <code>union</code> 包含多種型別，所以使用 <code>|</code>，第一個 <code>|</code> 可省略</li>
<li><strong>case-identifider</strong> : 為每個型別取一個別名，必須為 <code>大駝峰</code></li>
<li><strong>of</strong> : 每個別名的型別，可以是內建型別，也可以是自己定義的其他 type</li>
<li><strong>*</strong> : 若 <code>of</code> 之後為 <code>tuple</code>，不同 type 以 <code>*</code> 區別不同型別</li>
<li><strong>fieldname</strong> : 若 <code>of</code> 型別是 <code>tuple</code>，可為 <code>tuple</code> 內每個型別取別名</li>
</ul>
<p>以上只有 <code>type-name</code> 與 <code>case-identifier</code> 為必須，其他都可省略。</p>
<blockquote>
<p>簡單來說，<code>|</code> 之後稱為 case，<code>of</code> 之後稱為 field</p>
<p>Case 不可省略，但 field 可省略</p>
</blockquote>
<h2 id="Case">Case</h2><hr>
<h3 id="Case_of_Primitive_Type">Case of Primitive Type</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">OrderId</span> </span>= </span><br><span class="line">  | Int <span class="keyword">of</span> int</span><br><span class="line">  | Bool <span class="keyword">of</span> bool</span><br></pre></td></tr></table></figure>
<p>如 function 找得到資料會傳回 <code>int</code> 型態的的 <code>orderId</code>，若找不到則傳回 <code>bool</code> 型態的 <code>false</code>，也就是回傳型態可能是 <code>int</code> 或  <code>bool</code>，可將此型態重新定義為 <code>OrderId</code> union，則無論傳回 <code>int</code> 或 <code>bool</code> 都是 <code>OrderId</code> union，且也只能傳回 <code>int</code> 或  <code>bool</code>。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">OrderId</span> </span>= Int <span class="keyword">of</span> int | Bool <span class="keyword">of</span> bool</span><br></pre></td></tr></table></figure>
<p>若 case 很少，也可以寫成一行，則第一個 <code>|</code> 可省略。</p>
<h3 id="Case_of_Unnamed_Type">Case of Unnamed Type</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Shape</span> </span>=</span><br><span class="line">    | Rectangle <span class="keyword">of</span> int * int</span><br><span class="line">    | Circle <span class="keyword">of</span> int</span><br><span class="line">    | Prism <span class="keyword">of</span> int * int * int</span><br></pre></td></tr></table></figure>
<p><code>of</code> 之後的型別，如是 unnamed type，可以直接 inline 表示，如直接指定為 <code>tuple</code> 。</p>
<p>如打算將 <code>Rectangle</code>、<code>Circle</code> 與 <code>Prism</code> 三個型別定義出一個新的 <code>Shape</code> union，只要是 <code>Rectangle</code> 或 <code>Circle</code> 或 <code>Prism</code> 之一，都算是 <code>Shape</code>。</p>
<ul>
<li><code>Rectangle</code> 為 <code>int</code> * <code>int</code> 組合的 <code>tuple</code></li>
<li><code>Circle</code> 為 <code>int</code></li>
<li><code>Prism</code> 為 <code>int</code> <em> <code>int</code> </em> <code>int</code> 組合的 <code>tuple</code></li>
</ul>
<blockquote>
<p>type * type 為 tuple 的型別定義方式</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MixedType</span> </span>= </span><br><span class="line">    Tuple <span class="keyword">of</span> int * int</span><br><span class="line">    List <span class="keyword">of</span> int list</span><br></pre></td></tr></table></figure>
<p><code>Collection</code> 也屬於 unnamed type，亦可直接 inline 表示。</p>
<blockquote>
<p><code>int list</code> 表示為 <code>list</code> 型別，其 element 型別為 <code>int</code>。</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rectangle = Rectangle (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> circle = Circle <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> prism = Prism (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>當建立 <code>union</code> 時，以類似 constructor 的方式建立，稱為 case constructor，唯沒有 <code>new</code>， <code>class</code> 換成 <code>case</code>，且必須要照 <code>定義順序</code> 傳入。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">C</span> </span>= </span><br><span class="line">    | Circle <span class="keyword">of</span> int </span><br><span class="line">    | Rectangle <span class="keyword">of</span> int * int</span><br><span class="line"></span><br><span class="line">[<span class="number">1.</span><span class="number">.10</span>]</span><br><span class="line">|&gt; List.map Circle</span><br><span class="line"></span><br><span class="line">[<span class="number">1.</span><span class="number">.10</span>]</span><br><span class="line">|&gt; List.zip [<span class="number">21.</span><span class="number">.30</span>]</span><br><span class="line">|&gt; List.map Rectangle</span><br></pre></td></tr></table></figure>
<p>Case contructor 本質就是 function，因此任何可傳入 function 之處，就可傳入 case constructor。</p>
<h3 id="Case_of_Named_Type">Case of Named Type</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Person</span> </span>= &#123; first: string; last: string &#125;</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">IntOrBool</span> </span>= Int <span class="keyword">of</span> int | Bool <span class="keyword">of</span> bool</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MixedType</span> </span>= </span><br><span class="line">    | Person <span class="keyword">of</span> Person       </span><br><span class="line">    | IntOrBool <span class="keyword">of</span> IntOrBool</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MixedType</span> </span>= </span><br><span class="line">    | Person <span class="keyword">of</span>  &#123; first: string; last: string &#125;  <span class="comment">// error</span></span><br><span class="line">    | IntOrBool <span class="keyword">of</span> (Int <span class="keyword">of</span> int | Bool <span class="keyword">of</span> bool)    <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p><code>of</code> 之後的型別若是 named type，則必須先用 <code>type</code> 定義好型別，如 <code>record</code> 或 <code>union</code>，不能以 inline 的方式表示。</p>
<h2 id="Field">Field</h2><hr>
<p>若 case 的型別為 <code>tuple</code>，雖能在 <code>of</code> 之後簡單的宣告 <code>int * int</code>，有幾個缺點 :</p>
<ol>
<li>要建立 <code>union</code> 時，只能依照 <code>定義順序</code> 傳入，可讀性較差</li>
<li>無法由 <code>tuple</code> 看出其 domain 上的意義</li>
</ol>
<p>若我們加上 field，則清楚許多。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Shape</span> </span>=</span><br><span class="line">    | Rectangle <span class="keyword">of</span> width : int * length : int</span><br><span class="line">    | Circle <span class="keyword">of</span> radius: int</span><br><span class="line">    | Prism <span class="keyword">of</span> width: int * length : int * height: int</span><br></pre></td></tr></table></figure>
<p>在 <code>of</code> 之後加上 field，可明確表達出 <code>tuple</code> 的每個 element 的 domain 意義。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rectangle = Rectangle (length = <span class="number">1</span>, width = <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> circle = Circle (radius = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> prism = Prism (width = <span class="number">1</span>, length = <span class="number">2</span>, height = <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>建立 <code>union</code> 時，可在 case constructor 明確指定其 field，如此可讀性更高，且不用依照 <code>定義順序</code> 傳入。</p>
<h2 id="Empty_Case">Empty Case</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Directory</span> </span>= </span><br><span class="line">    | Root                   </span><br><span class="line">    | Subdirectory <span class="keyword">of</span> string</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Result</span> </span>= </span><br><span class="line">    | Success                </span><br><span class="line">    | ErrorMessage <span class="keyword">of</span> string</span><br></pre></td></tr></table></figure>
<p>Case 並不一定要搭配 type，若該 case 並不需要任何型態的值傳入，可以不指定 type。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myDir1 = Root</span><br><span class="line"><span class="keyword">let</span> myDir2 = Subdirectory <span class="string">"bin"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myResult1 = Success</span><br><span class="line"><span class="keyword">let</span> myResult2 = ErrorMessage <span class="string">"not found"</span></span><br></pre></td></tr></table></figure>
<p>沒有 type 的 case，其 case constructor 就不用傳入任何值。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Size</span> </span>= Small | Medium | Large</span><br><span class="line"><span class="keyword">let</span> mySize = Small</span><br></pre></td></tr></table></figure>
<p>當全部 case 都沒有 type 時，其功能等效於 <code>enum</code>。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Size</span> </span>= Small     | Medium     | Large     <span class="comment">// DU</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Size</span> </span>= Small = <span class="number">0</span> | Medium = <span class="number">1</span> | Large = <span class="number">2</span> <span class="comment">// enum</span></span><br></pre></td></tr></table></figure>
<p><code>union</code> 與 <code>enum</code> 都使用 type 定義，沒有指定 <code>int</code> 值為 <code>union</code>，有則為 <code>enum</code>。</p>
<blockquote>
<p>Q : F# 也有 <code>enum</code>，我該用 <code>union</code> 還是 <code>enum</code> 呢 ?</p>
</blockquote>
<p>F# 的 <code>union</code> 功能較強，<code>enum</code> 只是 <code>union</code> 的特例，實務上應優先使用 <code>union</code>，除非有以下需求：</p>
<ol>
<li>Case 必須搭配 <code>int</code></li>
<li><code>union</code> 必須與其他 .NET 語言搭配時</li>
</ol>
<p>才必須使用 <code>enum</code>。</p>
<blockquote>
<p>F# 的 <code>enum</code> 與 .NET 的 <code>enum</code> 是相同的</p>
</blockquote>
<h2 id="Single_Case">Single Case</h2><hr>
<p>雖然 <code>union</code> 原本的用途是用在將不同的型別整合成單一型別，也就是將不同的 case 整合成一個 <code>union</code>，但實務上有一種應用是一個 <code>union</code> 只有一個 case，所謂的 single case。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">CustomerId</span> </span>= int</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">OrderId</span> </span>= int</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> printOrderId (orderId: OrderId) = </span><br><span class="line">   printfn <span class="string">"The orderId is %i"</span> orderId</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> custId = <span class="number">1</span></span><br><span class="line">printOrderId custId</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CustomerId = int</span><br><span class="line"><span class="keyword">type</span> OrderId = int</span><br></pre></td></tr></table></figure>
<p><code>type</code> 能對 primitive type 取 alias，所以我們分別對  <code>int</code> 定義成 <code>CustomerId</code> type 與 <code>OrderId</code> type。</p>
<p>第 4 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> printOrderId (orderId: OrderId) = </span><br><span class="line">   printfn <span class="string">"The orderId is %i"</span> orderId</span><br></pre></td></tr></table></figure>
<p>建立 <code>printOrderId</code> function，傳入參數的型別為 <code>OrderId</code>。</p>
<p>第 7 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> custId = <span class="number">1</span></span><br><span class="line">printOrderId custId</span><br></pre></td></tr></table></figure>
<p><code>custId</code> 的型別為 <code>int</code>，傳入 <code>printOrderId</code> compiler 也沒報錯，明明要的是 <code>OrderId</code> 型別。</p>
<p>因為 <code>OrderId</code> 與 <code>CustomerId</code> 都只能算是 <code>int</code> 的 alias，還不算是個型別。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">CustomerId</span> </span>= CustomerId <span class="keyword">of</span> int</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">OrderId</span> </span>= OrderId <span class="keyword">of</span> int</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> printOrderId (OrderId orderId) =</span><br><span class="line">   printfn <span class="string">"The orderId is %i"</span> orderId</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> custId = CustomerId <span class="number">1</span></span><br><span class="line">printOrderId custId                   <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">CustomerId</span> </span>= CustomerId <span class="keyword">of</span> int</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">OrderId</span> </span>= OrderId <span class="keyword">of</span> int</span><br></pre></td></tr></table></figure>
<ul>
<li>定義 <code>CustomerId</code> union，其 case 為 <code>CustomerId</code>，型別為 <code>int</code></li>
<li>定義 <code>OrderId</code> union，其 case 為 <code>OrderId</code>，型別為 <code>int</code></li>
</ul>
<blockquote>
<p>當使用 single case 的 <code>union</code> 時，type 會與 case 相同</p>
</blockquote>
<p>第 4 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> printOrderId (OrderId orderId) =</span><br><span class="line">   printfn <span class="string">"The orderId is %i"</span> orderId</span><br></pre></td></tr></table></figure>
<p>建立 <code>printOrderId</code> function，傳入參數的型別為 <code>OrderId</code>。</p>
<p>與之前的 <code>printOrderId</code> function 一樣。</p>
<p>第 7 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> custId = CustomerId <span class="number">1</span></span><br><span class="line">printOrderId custId                   <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>
<p><code>custId</code> 型別不再是 <code>int</code>，而是 <code>CustomerId</code>，因為使用了 <code>CustomerId</code>  的 case constructor 建立。</p>
<p><code>custId</code> 傳入  <code>printOrderId</code> 後，如願出現 compiler error，因為 <code>OrderId</code> 與 <code>CustomerId</code> 都是具體的 type，而不只是 alias。</p>
<h2 id="Destructor">Destructor</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getShapeHeight shape =</span><br><span class="line">    <span class="keyword">match</span> shape <span class="keyword">with</span></span><br><span class="line">    | Rectangle(height = h) -&gt; h</span><br><span class="line">    | Circle(radius = r) -&gt; <span class="number">2.</span> * r</span><br><span class="line">    | Prism(height = h) -&gt; h</span><br></pre></td></tr></table></figure>
<p>當 <code>union</code> 傳入 function 後，可使用 Pattern Matching 與 field 將 <code>tuple</code> 的值取出。</p>
<p><code>with</code> 之後配合的 <code>union</code> 的 case，<code>()</code> 內配合 field，可以直接取出該 field 的值。</p>
<blockquote>
<p>使用 field 之後，可輕易的配合 Pattern Matching 取出 <code>tuple</code> 內的值</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getCustomerId (CustomerId customerId) = </span><br><span class="line">    printfn <span class="string">"The CustomerId is %i"</span> customerId</span><br></pre></td></tr></table></figure>
<p>在 function 的 paramter 使用 <code>()</code>，將 case 寫在 parameter 之前，則自動會將傳入的 <code>union</code> destruct 成 value。</p>
<blockquote>
<p>語法雖然很類似 C#，但別忘了 F# 的 type 是在 <code>:</code> 之後，所以 <code>CustomerId</code> 寫在前面並不是型別，而是 <code>union</code> 的 case</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (CustomerId customerId) = custId </span><br><span class="line"><span class="keyword">let</span> CustomerId customerIdInt = custId <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p><code>custId</code> 為 <code>CustomerId</code> union，會直接 destruct 成 <code>customerId</code>。</p>
<blockquote>
<p>使用 destructor 時，一定要加上 <code>()</code>，否則會誤以為是新的 function</p>
</blockquote>
<h2 id="Equality">Equality</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Contact</span> </span>= </span><br><span class="line">    | Email <span class="keyword">of</span> string </span><br><span class="line">    | Phone <span class="keyword">of</span> int</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> email1 = Email <span class="string">"bob@example.com"</span></span><br><span class="line"><span class="keyword">let</span> email2 = Email <span class="string">"bob@example.com"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> areEqual = (email1=email2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>雖然 <code>union</code> 為 reference type，但 <code>union</code> 的比較卻像 value type，只要 type 一樣，value 一樣，<code>union</code> 就算一樣。</p>
<h2 id="Representation">Representation</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Contact</span> </span>= Email <span class="keyword">of</span> string | Phone <span class="keyword">of</span> int</span><br><span class="line"><span class="keyword">let</span> email = Email <span class="string">"bob@example.com"</span></span><br><span class="line"></span><br><span class="line">printfn <span class="string">"%A"</span> email    <span class="comment">// nice</span></span><br></pre></td></tr></table></figure>
<p><code>printfn</code> 使用 <code>%A</code> 支援 <code>union</code>。</p>
<h2 id="Object_Hierarchy">Object Hierarchy</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Shape</span> </span>=</span><br><span class="line">    | Circle <span class="keyword">of</span> float</span><br><span class="line">    | EquilateralTriangle <span class="keyword">of</span> double</span><br><span class="line">    | Square <span class="keyword">of</span> double</span><br><span class="line">    | Rectangle <span class="keyword">of</span> double * double</span><br></pre></td></tr></table></figure>
<p>若使用 OOP，會設計 <code>Shape</code> interface，再由 <code>Circle</code>、<code>EquilateralTriangle</code>、<code>Square</code> 與 <code>Rectangle</code> 實踐 <code>Shape</code>，如此需要開 5 個檔案。</p>
<p>若使用 <code>union</code>，只要 5 行就可解決。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pi = <span class="number">3.141592654</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> area myShape =</span><br><span class="line">    <span class="keyword">match</span> myShape <span class="keyword">with</span></span><br><span class="line">    | Circle radius -&gt; pi * radius * radius</span><br><span class="line">    | EquilateralTriangle s -&gt; (sqrt <span class="number">3.0</span>) / <span class="number">4.0</span> * s * s</span><br><span class="line">    | Square s -&gt; s * s</span><br><span class="line">    | Rectangle (h, w) -&gt; h * w</span><br></pre></td></tr></table></figure>
<p>若使用 OOP，由於各種形狀計算面積的公式不同，勢必在 <code>Shape</code> interface 開 <code>area()</code>，再由  <code>Circle</code>、<code>EquilateralTriangle</code>、<code>Square</code> 與 <code>Rectangle</code> 各自實作 <code>area()</code>。</p>
<p>但在 FP 的 F#，只需使用 pattern matching 根據 <code>union</code> 的不同 case 實作即可，6 行即可解決。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>F# 的 <code>union</code> 非常強大，可以算是 <code>enum</code> 的威力加強版，搭配 Pattern Matching 更是如虎添翼</li>
<li><code>union</code> 配合 <code>tuple</code> 可以定義出複雜的 domain model</li>
<li>Single case 的 <code>union</code> 可以替 domain 定義一個更有意義的型別名稱，且兼具 type safety 與 compiler 保護</li>
</ul>
<h2 id="Reference">Reference</h2><p><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/" target="_blank" rel="external">F#</a>, <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/discriminated-unions" target="_blank" rel="external">Discriminated Unions</a><br><a href="https://fsharpforfunandprofit.com" target="_blank" rel="external">F# for fum and profit</a>, <a href="https://fsharpforfunandprofit.com/posts/discriminated-unions/" target="_blank" rel="external">Discriminated Unions</a></p>
]]></content>
    <summary type="html">
    <![CDATA[將不同型別 OR 起來]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何管理 Package Reference ?]]></title>
    <link href="http://oomusou.io/netcore/package-reference/"/>
    <id>http://oomusou.io/netcore/package-reference/</id>
    <published>2018-03-17T01:23:43.000Z</published>
    <updated>2018-03-17T13:37:07.964Z</updated>
    <content type="html"><![CDATA[<p>實務上我們一定會用到別人寫的 NuGet package，我們該如何使用 .NET Core SDK 加入 package reference 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="建立_Console_App_專案">建立 Console App 專案</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new</code> 建立 project。</p>
<ul>
<li><strong>console</strong> : 建立 console 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，建立在 <code>MyConsole</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/package-reference/pkg000.png" alt="kg00"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 將 console 類型專案建立在 <code>MyConsole</code> 目錄下</li>
<li>.NET Core SDK 開始建立專案所需的檔案</li>
<li>自動 restore dependency</li>
</ol>
<h2 id="使用_VS_Code_開啟專案">使用 VS Code 開啟專案</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接開啟目錄名稱。</p>
<p><img src="/images/netcore/package-reference/pkg001.png" alt="onsole00"></p>
<ol>
<li>第一次使用 VS Code 開啟 .NET Core 專案，會要求建立 <code>.vscode</code> 設定檔目錄，按 <code>Yes</code> 繼續</li>
</ol>
<p><img src="/images/netcore/package-reference/pkg002.png" alt="onsole01"></p>
<ol>
<li><code>.vscode</code> 被 VS Code 自動建立</li>
</ol>
<h2 id="新增_Package_Reference">新增 Package Reference</h2><hr>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ dotnet <span class="built_in">add</span> <span class="keyword">package</span> Newtonsoft.Json</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet add package</code> 加入 NuGet package。</p>
<p><img src="/images/netcore/package-reference/pkg003.png" alt="kg00"></p>
<ol>
<li>輸入 <code>dotnet add package Newtonsoft.Json</code> 新增 <code>Newtonsoft.Json</code> package</li>
</ol>
<h2 id="編輯_Program-cs">編輯 Program.cs</h2><hr>
<p><strong>program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyConsole</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> students = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Sam"</span>,</span><br><span class="line">                <span class="string">"Kevin"</span>,</span><br><span class="line">                <span class="string">"Jessie"</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> json = JsonConvert.SerializeObject(students);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(json);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>JsonConvert.SerializeObject()</code> 將 <code>List</code> 轉成 JSON string。</p>
<h2 id="執行_Console_App">執行 Console App</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ dotnet <span class="command">run</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet run</code> 執行專案。</p>
<p><img src="/images/netcore/package-reference/pkg004.png" alt="kg00"></p>
<ol>
<li>輸入 <code>dotnet run</code> 顯示執行結果</li>
</ol>
<h2 id="其他相關指令">其他相關指令</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet remove <span class="package"><span class="keyword">package</span> <span class="title">Newtonsoft</span>.<span class="title">Json</span></span></span><br></pre></td></tr></table></figure>
<p>移除 package reference。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用 <code>dotnet add package</code> 與 <code>dotnet remove package</code>，我們就可在 project 中新增與移除 NuGet package</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 .NET Core SDK 管理 Package Reference]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立 Solution ?]]></title>
    <link href="http://oomusou.io/netcore/solution/"/>
    <id>http://oomusou.io/netcore/solution/</id>
    <published>2018-03-17T00:23:43.000Z</published>
    <updated>2018-03-17T13:29:51.629Z</updated>
    <content type="html"><![CDATA[<p>對於大型專案，我們可以建立 solution 管理眾多 project，只要對 solution 下 <code>dotnet build</code> ，就可以全部 project 都一起 build。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="建立_Solution">建立 Solution</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> sln -n MySolution</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new sln</code> 建立 solution。</p>
<ul>
<li><strong>-n</strong> : 建立 <code>.sln</code> 檔案即可，不用建立目錄</li>
</ul>
<blockquote>
<p>Solution 是 Microsoft 技術特別的觀念，算 project 的集合，一個 solution 可以有多個 project</p>
</blockquote>
<p><img src="/images/netcore/solution/sln000.png" alt="sln00"></p>
<ol>
<li>輸入 <code>dotnet new sln -n MySolution</code> 在目前目錄建立 <code>MySolution.sln</code></li>
<li>已建立 <code>MySolution.sln</code> 在目前目錄下</li>
</ol>
<h2 id="將_Project_加入_Solution">將 Project 加入 Solution</h2><hr>
<p><strong>macOS/Linux</strong></p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet sln MySolution.sln add <span class="keyword">*</span><span class="keyword">*</span>/<span class="keyword">*</span>.csproj</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet sln … add</code> 將 project 加入 solution</p>
<blockquote>
<p><code>**/*.csproj</code> 表示目前目錄下 <code>所有子目錄</code> 的 <code>cspoj</code></p>
</blockquote>
<p><img src="/images/netcore/solution/sln001.png" alt="ln00"></p>
<ol>
<li>輸入 <code>dotnet sln MySolution.sln add **/*.csproj</code> 將目前目錄下的所有 project 都加入 <code>MySolution.sln</code></li>
</ol>
<p><strong>Windows</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet sln MySolution<span class="class">.sln</span> add MyConsole/MyConsole<span class="class">.csproj</span></span><br><span class="line">$ dotnet sln MySolution<span class="class">.sln</span> add MyClassLib/MyClassLib<span class="class">.csproj</span></span><br><span class="line">$ dotnet sln MySolution<span class="class">.sln</span> add MyClassLib.Tests/MyClassLib<span class="class">.Tests</span><span class="class">.csproj</span></span><br></pre></td></tr></table></figure>
<p>Windows 只能乖乖地用 <code>3</code> 次 <code>dotnet sln … add</code> 。</p>
<p><img src="/images/netcore/solution/sln002.png" alt="ln00"></p>
<ol>
<li>一個一個 project 加入 <code>MySolution.sln</code></li>
</ol>
<h2 id="編譯整個_Solution">編譯整個 Solution</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">build </span>MySolution.sln</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 將 solution 下所有 project 一起編譯。</p>
<p><img src="/images/netcore/solution/sln003.png" alt="ln00"></p>
<ol>
<li>輸入 <code>dotnet build MySolution.sln</code> 編譯整個 <code>MySolution</code></li>
<li><code>MySolution</code> 下所有 project 都執行 <code>dotnet restore</code></li>
<li><code>MySoluton</code> 下所有 project 都執行 <code>dotnet build</code> 編譯新的 dll</li>
</ol>
<h2 id="將整個_Solution_建立_Package">將整個 Solution 建立 Package</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>dotnet pack <span class="constant">MySolution.</span>sln</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet pack</code> 將 solution 下所有 project 建立 NuGet package。</p>
<p><img src="/images/netcore/solution/sln004.png" alt="ln00"></p>
<ol>
<li>輸入 <code>dotnet pack MySolution.sln</code> 將整個 <code>MySolution</code> 建立 package</li>
<li><code>MySolution</code> 下所有 project 都執行 <code>dotnet restore</code></li>
<li><code>MySoluton</code> 下所有 project 都執行 <code>dotnet pack</code> </li>
</ol>
<blockquote>
<p>只有 <code>MyConsole</code> 與 <code>MyClassLib</code> 會建立 package，<code>MyClassLib.Tests</code> 因為是 Unit Test，所以不會建立 package</p>
</blockquote>
<h2 id="發佈整個_Solution">發佈整個 Solution</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>dotnet publish <span class="constant">MySolution.</span>sln</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet publish</code> 將 solution 下所有 project 都加以 publish。</p>
<p><img src="/images/netcore/solution/sln005.png" alt="ln00"></p>
<ol>
<li>輸入 <code>dotnet publish MySolution.sln</code> 將整個 <code>MySolution</code> 下的所有 project 都加以 publish</li>
<li><code>MySolution</code> 下所有 project 都執行 <code>dotnet restore</code></li>
<li><code>MySoluton</code> 下所有 project 都執行 <code>dotnet publish</code> </li>
</ol>
<h2 id="其他相關指令">其他相關指令</h2><hr>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet sln <span class="keyword">*</span>.sln remove <span class="keyword">*</span>.csproj</span><br></pre></td></tr></table></figure>
<p>將 project 從 solution 移除。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet sln *<span class="class">.sln</span> list</span><br></pre></td></tr></table></figure>
<p>列出 solution 共有哪些 project。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Solution 在 .NET Core SDK 中，重要性已經不如 Visual Studio，但對於大型專案，卻可透過 solution 對所有 project 下指令，還是非常好用</li>
<li>VS Code 不一定要使用 solution，但若專案也需要被 Visual Studio 或 Rider 開啟，則建議建立 solution</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 .NET Core SDK 建立 Solution]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立 Unit Test ?]]></title>
    <link href="http://oomusou.io/netcore/unit-test/"/>
    <id>http://oomusou.io/netcore/unit-test/</id>
    <published>2018-03-16T23:23:43.000Z</published>
    <updated>2018-03-17T13:21:29.561Z</updated>
    <content type="html"><![CDATA[<p>雖然我們可以使用 console app 來測試 class library，但比較好的方式是建立 unit test，搭配各種測試案例測試 class library 的結果。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="建立_Unit_Test_專案">建立 Unit Test 專案</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> mstest -o MyClassLib.Tests</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new</code> 建立 project。</p>
<ul>
<li><strong>mstest</strong> : 建立  MSTest 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，建立在 <code>MyClassLib.Tests</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/unit-test/ut000.png" alt="t00"></p>
<ol>
<li>輸入 <code>dotnet new mstest -o MyClasLib.Tests</code> 將 MSTest 類型專案建立在 <code>MyClassLib.Tests</code> 目錄下</li>
<li>.NET Core SDK 開始建立專案所需的檔案</li>
<li>自動 restore dependency</li>
</ol>
<blockquote>
<p>除了 MSTest，.NET Core SDK 預設還支援 xUnit，若想使用 NUnit，可到 <a href="https://github.com/dotnet/templating/wiki/Available-templates-for-dotnet-new" target="_blank" rel="external">Available templates for dotnet new</a> 下載 NUnit project template</p>
</blockquote>
<h2 id="使用_VS_Code_開啟專案">使用 VS Code 開啟專案</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyClassLib.Tests</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接開啟目錄名稱。 </p>
<p><img src="/images/netcore/unit-test/ut001.png" alt="t00"></p>
<ul>
<li>使用 VS Code 開啟 <code>MyClassLib.Tests</code></li>
</ul>
<h2 id="新增_Project_Reference">新增 Project Reference</h2><hr>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ dotnet <span class="keyword">add</span> <span class="keyword">reference</span> ../MyClassLib/MyClassLib.csproj</span><br></pre></td></tr></table></figure>
<p>因為 <code>MyClassLib.Tests</code> 需要使用 <code>MyClassLib</code>，所以使用 <code>dotnet add reference</code> 新增 project reference。</p>
<p><img src="/images/netcore/unit-test/ut002.png" alt="t00"></p>
<ol>
<li>輸入 <code>dotnet add reference ../MyClassLib/MyClassLib.csproj</code> 將 <code>MyClassLib</code> project 加入 reference</li>
<li>觀察 <code>MyConsole.csproj</code></li>
<li><code>MyClassLib.csproj</code>  被加入在  <code>&lt;ItemGroup&gt;</code> 下的 <code>&lt;ProjectReference&gt;</code> </li>
<li>其他 package 被加入在 <code>&lt;ItemGroup&gt;</code> 下的 <code>&lt;PackageReference&gt;</code></li>
</ol>
<blockquote>
<p>Project reference 與 package reference 都被記錄在 <code>csproj</code> 中，其中 <code>&lt;ProjectReference&gt;</code> 紀錄 project reference，而 <code>&lt;PackageReference&gt;</code> 記錄 package reference</p>
</blockquote>
<h2 id="編輯_UnitTest1-cs">編輯 UnitTest1.cs</h2><hr>
<p><strong>UnitTest1.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyClassLib.Tests</span></span><br><span class="line">&#123;</span><br><span class="line">    [TestClass]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitTest1</span></span><br><span class="line">    &#123;</span><br><span class="line">        [TestMethod]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestMethod1</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">// Arrange</span></span><br><span class="line">            <span class="keyword">var</span> target = <span class="keyword">new</span> CalculatorService();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Act</span></span><br><span class="line">            <span class="keyword">var</span> actual = target.Sum(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Assert</span></span><br><span class="line">            <span class="keyword">var</span> expected = <span class="number">2</span>;</span><br><span class="line">            Assert.AreEqual(expected, actual);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 <code>3A原則</code> 建立 <code>CalculatorService</code> 的 Unit Test。</p>
<p><img src="/images/netcore/unit-test/ut003.png" alt="t00"></p>
<ol>
<li>開啟 <code>UnitTest1.cs</code></li>
<li>建立 <code>CalculatorService</code> 的 Unit Test</li>
</ol>
<h2 id="執行_Unit_Test">執行 Unit Test</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProjet $ dotnet <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet test</code> 執行單元測試。</p>
<p><img src="/images/netcore/unit-test/ut004.png" alt="t00"></p>
<ol>
<li>輸入 <code>dotnet test</code> 執行單元測試</li>
<li>測試通過，得到 <code>綠燈</code></li>
</ol>
<h2 id="其他相關指令">其他相關指令</h2><hr>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">remove</span> <span class="keyword">reference</span> *.csproj</span><br></pre></td></tr></table></figure>
<p>移除 project reference。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="type">list</span> <span class="keyword">reference</span></span><br></pre></td></tr></table></figure>
<p>列出所有 project reference。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>.NET Core SDK 支援各種 Unit Test，包括 MSTest、xUnit 與 NUnit</li>
<li>使用 <code>dotnet add reference</code> 新增 project reference</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 .NET Core SDK 建立 Unit Test]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何驗證 Class Library ?]]></title>
    <link href="http://oomusou.io/netcore/console/"/>
    <id>http://oomusou.io/netcore/console/</id>
    <published>2018-03-16T22:23:43.000Z</published>
    <updated>2018-03-17T13:16:05.262Z</updated>
    <content type="html"><![CDATA[<p>雖然我們可以使用 <code>ng new classlib</code> 建立 class library 型態專案，但畢竟是 class library，無法看到結果，此時我們會建立另外一個 console app 專案當成 client，用來測試 class library 的結果。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="建立_Console_App_專案">建立 Console App 專案</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new</code> 建立 project。</p>
<ul>
<li><strong>console</strong> : 建立 console 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，建立在 <code>MyConsole</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/console/console000.png" alt="onsole00"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 將 console 類型專案建立在 <code>MyConsole</code> 目錄下</li>
<li>.NET Core SDK 開始建立專案所需的檔案</li>
<li>自動 restore dependency</li>
</ol>
<h2 id="使用_VS_Code_開啟專案">使用 VS Code 開啟專案</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接開啟目錄名稱。</p>
<p><img src="/images/netcore/console/console001.png" alt="onsole00"></p>
<ol>
<li>第一次使用 VS Code 開啟 .NET Core 專案，會要求建立 <code>.vscode</code> 設定檔目錄，按 <code>Yes</code> 繼續</li>
</ol>
<p><img src="/images/netcore/console/console002.png" alt="onsole01"></p>
<ol>
<li><code>.vscode</code> 被 VS Code 自動建立</li>
</ol>
<h2 id="新增_Project_Reference">新增 Project Reference</h2><hr>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ dotnet <span class="keyword">add</span> <span class="keyword">reference</span> ../MyClassLib/MyClassLib.csproj</span><br></pre></td></tr></table></figure>
<p>因為 <code>MyConsole</code> 需要使用 <code>MyClassLib</code>，所以使用 <code>dotnet add reference</code> 新增 project reference。</p>
<p><img src="/images/netcore/console/console003.png" alt="onsole00"></p>
<ol>
<li>輸入 <code>dotnet add reference ../MyClassLib/MyClassLib.csproj</code> 將 <code>MyClassLib</code> project 加入 reference</li>
<li>觀察 <code>MyConsole.csproj</code></li>
<li><code>MyClassLib.csproj</code>  被加入在  <code>&lt;ItemGroup&gt;</code> 下的 <code>&lt;ProjectReference&gt;</code> </li>
</ol>
<blockquote>
<p>若你不想下 <code>dotnet add reference</code> 指令，也可以直接修改 <code>MyConsole.csproj</code> 檔案</p>
</blockquote>
<h2 id="編輯_Program-cs">編輯 Program.cs</h2><hr>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> MyClassLib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyConsole</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> calculatorService = <span class="keyword">new</span> CalculatorService();</span><br><span class="line">            <span class="keyword">var</span> result = calculatorService.Sum(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125; + &#123;1&#125; = &#123;2&#125;"</span>, <span class="number">1</span>, <span class="number">1</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>CalculatorService</code> 物件，並執行 <code>Sum()</code>。</p>
<p><img src="/images/netcore/console/console004.png" alt="onsole00"></p>
<ol>
<li>開啟 <code>Program.cs</code></li>
<li>建立 <code>CalculatorService</code> 物件並執行</li>
</ol>
<h2 id="編譯_Console_App">編譯 Console App</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ dotnet <span class="keyword">build </span>-c Release</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯專案。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet build</code> 是以 <code>Debug</code> 模式編譯，若要以 <code>Release</code> 編譯，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/console/console005.png" alt="onsole00"></p>
<ol>
<li>輸入 <code>dotnet build -c Release</code> 以 <code>Release</code> 模式編譯</li>
<li>自動執行 <code>dotnet restore</code></li>
<li>最後 build 出 <code>MyConsole.dll</code></li>
</ol>
<blockquote>
<p>注意 <code>dotnet restore</code> 與 <code>dotnet build</code> 時，<code>MyClassLib</code> 與 <code>MyConsole</code> 兩個專案都會重新 build 與 restore</p>
</blockquote>
<h2 id="執行_Console_App">執行 Console App</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ dotnet <span class="command">run</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet run</code> 執行專案。</p>
<p><img src="/images/netcore/console/console006.png" alt="onsole00"></p>
<ol>
<li>輸入 <code>dotnet run</code> 顯示執行結果</li>
</ol>
<h2 id="發佈_Console_App">發佈 Console App</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyConsole</span> $ <span class="keyword">dotnet</span> publish -c <span class="type">Release</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet publish</code> 將編譯後的 dll 與其 dependency 整理到 <code>publish</code> 目錄，將來只要將此目錄 deploy 到 server 即可。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet publish</code> 是將 <code>Debug</code> 模式的 dll 整理至 <code>publish</code> 目錄，若要整理 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/console/console007.png" alt="onsole00"></p>
<ol>
<li>輸入 <code>dotnet publish -c Release</code> 將欲 deploy 的檔案整理到 <code>bin/Release/netcoreapp2.0/publish</code> 目錄</li>
<li>在 <code>publish</code> 目錄下，我們發現除了有 <code>MyConsole.dll</code> 外，還有 reference 的 <code>MyClassLib.dll</code>，<code>dotnet publish</code> 也一並幫我們整理到 <code>publish</code> 目錄了</li>
</ol>
<h2 id="執行_Console_App-1">執行 Console App</h2><hr>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyProject $ dotnet run bin/</span>Release<span class="regexp">/netcoreapp2.0/</span>publish<span class="regexp">/MyConsole.dll</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet</code> 執行 publish 後的 dll。</p>
<p><img src="/images/netcore/console/console008.png" alt="onsole00"></p>
<ol>
<li>輸入 <code>dotnet</code> 直接執行  publish 過的 <code>MyConsole.dll</code></li>
<li>馬上出現 <code>1 + 1 = 2</code> ，不用等待</li>
</ol>
<h2 id="其他相關指令">其他相關指令</h2><hr>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">remove</span> <span class="keyword">reference</span> *.csproj</span><br></pre></td></tr></table></figure>
<p>移除 project reference。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="type">list</span> <span class="keyword">reference</span></span><br></pre></td></tr></table></figure>
<p>列出所有 project reference。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Console app 適合用來測試 class library</li>
<li>使用 <code>dotnet add reference</code> 新增 project reference</li>
<li><code>dotnet publish</code> 時，會一併將 class library 的 dll 也整理到 <code>publish</code> 目錄</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 .NET Core SDK 建立 Class Library]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立 Class Library ?]]></title>
    <link href="http://oomusou.io/netcore/classlib/"/>
    <id>http://oomusou.io/netcore/classlib/</id>
    <published>2018-03-16T15:23:43.000Z</published>
    <updated>2018-03-16T14:06:47.257Z</updated>
    <content type="html"><![CDATA[<p>除了 Console app 扮演 client 的角色，另外一個常見需求就是建立自己的 class library，我們可以使用 <code>ng new classlib</code> 建立 class library 型態專案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="建立_Class_Library_專案">建立 Class Library 專案</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> classlib -o MyClassLib</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new</code> 建立 project。</p>
<ul>
<li><strong>classlib</strong> : 建立 class library 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，建立在 <code>MyClassLib</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/classlib/lib000.png" alt="ib00"></p>
<ol>
<li>輸入 <code>dotnet new classlib -o MyClasLib</code> 將 class library 類型專案建立在 <code>MyClassLib</code> 目錄下</li>
<li>.NET Core SDK 開始建立專案所需的檔案</li>
<li>自動 restore dependency</li>
</ol>
<h2 id="使用_VS_Code_開啟專案">使用 VS Code 開啟專案</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyClassLib</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接開啟目錄名稱。 </p>
<p><img src="/images/netcore/classlib/lib001.png" alt="ib00"></p>
<ul>
<li>使用 VS Code 開啟 <code>MyClassLib</code></li>
</ul>
<h2 id="編輯_CalculatorService-cs">編輯 CalculatorService.cs</h2><hr>
<p><strong>CalculatorService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyClassLib</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CalculatorService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Sum</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>) </span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>CalculatorService</code>，並有一個 <code>Sum()</code>。</p>
<p><img src="/images/netcore/classlib/lib002.png" alt="ib00"></p>
<ol>
<li>開啟 <code>CalculatorService.cs</code></li>
<li>建立 <code>Sum()</code></li>
</ol>
<h2 id="編譯_Class_Library">編譯 Class Library</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyClassLib $ dotnet <span class="keyword">build </span>-c Release</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯專案。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet build</code> 是以 <code>Debug</code> 模式編譯，若要以 <code>Release</code> 編譯，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/classlib/lib003.png" alt="ib00"></p>
<ol>
<li>輸入 <code>dotnet build -c Release</code> 以 <code>Release</code> 模式編譯</li>
<li>自動執行 <code>dotnet restore</code></li>
<li>最後 build 出 <code>MyClassLib.dll</code></li>
</ol>
<blockquote>
<p>注意是 build 到 <code>Release</code> 目錄</p>
</blockquote>
<p><strong>使用 MSBuild</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyClassLib $ dotnet msbuild /p</span><span class="symbol">:Configuration=Release</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>msbuild</code> 編譯專案。</p>
<p><img src="/images/netcore/classlib/lib004.png" alt="ib00"></p>
<ol>
<li>輸入 <code>dotnet msbuild /p:Configuration=Release</code> 以 <code>Release</code> 模式編譯</li>
<li>最後 build 出 <code>MyClassLib.dll</code></li>
</ol>
<blockquote>
<p>注意使用 MSBuild 時，並沒有執行 <code>dotnet restore</code></p>
</blockquote>
<h2 id="建置_NuGet_Package">建置 NuGet Package</h2><hr>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyClassLib $ dotnet <span class="built_in">pack</span> -c Release</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet pack</code> 將 class library 打包成 Nuget package。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet pack</code> 是以 <code>Debug</code> 模式打包，若要以 <code>Release</code> 打包，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/classlib/lib005.png" alt="ib00"></p>
<ol>
<li>輸入 <code>dotnet pack -c Release</code> 以 <code>Release</code> 模式打包</li>
<li>最後 build 出 <code>MyClassLib.1.0.0.nupkg</code></li>
<li>在 <code>bin/Release/</code> 會看到 <code>MyClassLib.1.0.0.nupkg</code></li>
</ol>
<h2 id="發佈_Class_Library">發佈 Class Library</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyClassLib</span> $ <span class="keyword">dotnet</span> publish -c <span class="type">Release</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet publish</code> 將編譯後的 dll 與其 dependency 整理到 <code>publish</code> 目錄，將來只要將此目錄 deploy 到 server 即可。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet publish</code> 是將 <code>Debug</code> 模式的 dll 整理至 <code>publish</code> 目錄，若要整理 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
</ul>
<p>![ib00](/images/netcore/classlib</p>
<ol>
<li>輸入 <code>dotnet publish -c Release</code> 將欲 deploy 的檔案整理到 <code>bin/Release/netcoreapp2.0/publish</code> 目錄</li>
<li>我們發現總共有 3 個檔案<ul>
<li><code>MyClassLib.dll</code> : 以 IL 為內容的 assembly</li>
<li><code>MyClassLib.deps.json</code> : 描述執行 dll 所需要的 dependency</li>
<li><code>MyClassLib.pdb</code> : 在 production 環境啟動 debug 時使用</li>
</ul>
</li>
</ol>
<p><strong>使用 MSBuild</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">~/MyClassLib $ dotnet msbuild /</span><span class="string">t:</span>Publish /<span class="string">p:</span>Configuration=Release</span><br></pre></td></tr></table></figure>
<p>使用 <code>msbuild</code> 發佈專案。</p>
<p><img src="/images/netcore/classlib/lib007.png" alt="ib00"></p>
<ol>
<li>輸入 <code>dotnet msbuild /t:Publish /p:Configuration=Release</code> 以 <code>Release</code> 發佈</li>
<li>一樣發布 <code>3</code> 個檔案</li>
</ol>
<blockquote>
<p>注意使用 MSBuild 時，並沒有執行 <code>dotnet restore</code></p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Class library 與 console app 的建置模式並沒有什麼差別，因為 console app 其實也是 dll</li>
<li>一樣可以使用 MSBuild 編譯與發佈 class library，但不會事先執行 <code>dotnet restore</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 .NET Core SDK 建立]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何安裝與移除 Project Template ?]]></title>
    <link href="http://oomusou.io/netcore/project-template/"/>
    <id>http://oomusou.io/netcore/project-template/</id>
    <published>2018-03-16T14:23:43.000Z</published>
    <updated>2018-03-16T13:51:12.142Z</updated>
    <content type="html"><![CDATA[<p>.NET Core SDK 已經內建提供不少 project template，但事實上 .NET Core 官網還提供不少 project template，可自行另外安裝。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="列出所有_Project_Template">列出所有 Project Template</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> -l</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>-l</strong> : <code>l</code>ist ，使用 <code>dotnet new</code> 加上 <code>-l</code> 參數，將列出目前系統所安裝的所有 project template。</li>
</ul>
<p><img src="/images/netcore/project-template/sdk001.png" alt="sdk001"></p>
<p>我們可以發現內建的 project template 對 C# 支援最齊全，預設就是 C#，其次是 F#。</p>
<p><img src="/images/netcore/project-template/sdk002.png" alt="sdk001"></p>
<p>事實上在 .NET Core 官網的 <a href="https://github.com/dotnet/templating/wiki/Available-templates-for-dotnet-new" target="_blank" rel="external">Available templates for dotnet new</a>，還準備了不少其他 project template 可供下載。</p>
<h2 id="安裝_Project_Template">安裝 Project Template</h2><hr>
<p><img src="/images/netcore/project-template/sdk003.png" alt="sdk003"></p>
<p>以 C# 為例，.NET Core 官網亦提供了 <code>AWS Lambda .NET Core Templates</code>，讓我們自動安裝相關工具與 NuGet package。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet new -<span class="tag">i</span> <span class="string">"Amazon.Lambda.Templates::*"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>-i</strong> : <code>i</code>nstall，使用 <code>dotnet new -i</code> 安裝新 project template</li>
</ul>
<p><img src="/images/netcore/project-template/sdk004.png" alt="sdk004"></p>
<ol>
<li>輸入 <code>dotnet new -i &quot;Amazon.Lambda.Templates::*&quot;</code> 安裝 <code>Amazon Lambda</code> project template</li>
</ol>
<blockquote>
<p>由於 <code>Amazon Lambda</code> project template 的 NuGet package 較大，安裝要一點時間</p>
</blockquote>
<p><img src="/images/netcore/project-template/sdk005.png" alt="sdk005"></p>
<ol>
<li>安裝完後會自動執行 <code>dotnet new -l</code>，會安裝不少 <code>Amazon Lambda</code> 相關的 project template</li>
</ol>
<h2 id="移除_Project_Template">移除 Project Template</h2><hr>
<p>既然能安裝 project template，也就要能移除 project template，但比較麻煩。</p>
<p>.NET Core SDK 預設將所有的 project template 安裝在 <code>Users/oomusou/.templateengine/dotnetcli/v2.1.101/packages</code> 目錄下。</p>
<blockquote>
<p>其中 <code>oomusou</code> 為 user name</p>
</blockquote>
<p><img src="/images/netcore/project-template/sdk006.png" alt="sdk006"></p>
<ol>
<li><code>amazon.lambda.template.2.0.3.nupkg</code> 為剛剛所安裝的 <code>Amazon Lambda</code> project template</li>
</ol>
<blockquote>
<p>我們可以發現每個 project template 事實上都是 NuGet package</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> -u .../amazon.lambda.templates<span class="number">.2</span><span class="number">.0</span><span class="number">.3</span>.nupkg</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>-u</strong> : <code>u</code>ninstall，使用 <code>dotnet new -u</code> 移除已安裝的 project template NuGet package</li>
</ul>
<blockquote>
<p>NuGet package 不可使用 <code>./</code> 方式，但可用完整路徑或 <code>~/</code></p>
</blockquote>
<p><img src="/images/netcore/project-template/sdk007.png" alt="sdk007"></p>
<ol>
<li>輸入 <code>dotnet new -u /Users/…/amazon.lambda.templates.2.0.3.nupkg</code>，必須是完整路徑或 <code>~/</code>，不可為 <code>./</code></li>
</ol>
<p><img src="/images/netcore/project-template/sdk008.png" alt="sdk008"></p>
<ol>
<li><code>Amazon Lambda</code> project template 已順利移除。</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>若想知道 C# 與 F# 還有什麼應用，可上 <a href="https://github.com/dotnet/templating/wiki/Available-templates-for-dotnet-new" target="_blank" rel="external">Available templates for dotnet new</a> 發現更多有趣的 project template</li>
<li>若要移除 project template，NuGet package 必須使用 <code>完整路徑</code> 或 <code>~/</code>，不可使用 <code>./</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[發現更多有趣的 .NET Core 應用]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 dotnet restore]]></title>
    <link href="http://oomusou.io/netcore/restore/"/>
    <id>http://oomusou.io/netcore/restore/</id>
    <published>2018-03-16T14:23:43.000Z</published>
    <updated>2018-03-16T13:36:29.324Z</updated>
    <content type="html"><![CDATA[<p>.NET Core SDK 提供了 <code>dotnet restore</code> 指令，但官網的說明很簡單，只說明了他是 <code>restore dependency</code>，到底什麼是 <code>restore dependency</code> 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1<br>Node.js 8.9.4<br>NPM 5.7.1</p>
<h2 id="NuGet_vs-_NPM">NuGet vs. NPM</h2><hr>
<p>NuGet 與 NPM 都是為了解決 package dependency 的問題</p>
<p>相同之處 :</p>
<ul>
<li><strong>NuGet</strong> : 採用 <code>csproj</code> 紀錄所使用 package</li>
<li><strong>NPM</strong> : 使用 <code>package.json</code> 紀錄所使用 package</li>
</ul>
<p>相異之處 :</p>
<ul>
<li><strong>NuGet</strong> : 將 package 統一放在 <code>~/.nuget/packages</code>，若該 package 有多個版本，則以版本當目錄</li>
<li><strong>NPM</strong> : 多專案共用的 global package 統一放在 <code>/usr/local/lib/node_modules/npm/node_modules</code>，但若專案自己用的 package 則放在專案目錄的 <code>node_modules</code></li>
</ul>
<blockquote>
<p>PHP Composer 哲學與 NPM 類似，也分成 global package 與 local package</p>
</blockquote>
<p><strong>NuGet 優點</strong></p>
<ul>
<li>整個系統只有一份 package，省硬碟空間，而不像 NPM 每個專案都有重複的 package。</li>
</ul>
<p><strong>NuGet 缺點</strong></p>
<ul>
<li>當你刪除專案，系統可能會留著沒用到的 package</li>
<li>必須要有一份 mapping 檔案，讓 compiler 在 build 時，知道 package 放在哪裡，因為 package 不是放在專案目錄下。</li>
</ul>
<p>第 2 點就是 dotnet restore 要解決的。</p>
<h2 id="觀察_Console_App">觀察 Console App</h2><hr>
<p><img src="/images/netcore/restore/restore000.png" alt="estore00"></p>
<ol>
<li>當使用 <code>dotnet new console</code> 時，事實上只是建立了 <code>csproj</code></li>
<li>自動執行 <code>dotnet restore</code>，根據 <code>csproj</code> 建立了 <code>nuget.g.props</code> 與 <code>nuget.g.targets</code></li>
</ol>
<p><img src="/images/netcore/restore/restore001.png" alt="estore00"></p>
<ol>
<li>觀察 <code>nuget.g.props</code>，雖然很多資訊看不懂，但最少看到 <code>&lt;NuGetPackageRoot&gt;</code> 記載著 NuGet 目錄放在 <code>/Users/oomusou/.nuget/packages</code>，這樣 compiler 就可以從這個目錄抓到 NuGet package 放哪裡</li>
</ol>
<blockquote>
<p>之所以沒用 VS Code 開啟專案，是因為 VS Code 還會自動建立其他目錄與檔案，怕模糊焦點，所以這裡選擇 Sublime Text</p>
</blockquote>
<h2 id="刪除_obj_目錄">刪除 obj 目錄</h2><hr>
<p><img src="/images/netcore/restore/restore002.png" alt="estore00"></p>
<ol>
<li>選擇 <code>obj</code> 目錄</li>
<li>刪除 <code>obj</code> 目錄</li>
</ol>
<h2 id="dotnet_restore">dotnet restore</h2><hr>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ dotnet <span class="built_in">restore</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet restore</code> 重新建立 <code>obj</code> 目錄。</p>
<p><img src="/images/netcore/restore/restore003.png" alt="estore00"></p>
<ol>
<li>輸入 <code>dotnet restore</code></li>
<li>根據 <code>csproj</code> 重新建立 <code>nuget.g.props</code> 與 <code>nuget.g.targets</code> </li>
</ol>
<p><img src="/images/netcore/restore/restore004.png" alt="estore00"></p>
<ol>
<li><code>obj</code> 目錄被 <code>restore</code> 回來了</li>
</ol>
<h2 id="-NET_Core_2-0">.NET Core 2.0</h2><hr>
<p>在 .NET Core 1.x 時代，還常常需要自己下 <code>dotnet restore</code>，但從 .NET Core 2.0 開始，當你使用以下 command 時，都會自動執行 <code>dotnet restore</code>。</p>
<ul>
<li><code>dotnet new</code></li>
<li><code>dotnet build</code></li>
<li><code>dotnet run</code></li>
<li><code>dotnet test</code></li>
<li><code>dotnet publish</code></li>
<li><code>dotnet pack</code></li>
</ul>
<p>所以在實務上已經幾乎不用自己下 <code>dotnet restore</code> 了，只要有觀念即可，為了相容，目前 .NET Core SDK 還是有留下 <code>dotnet restore</code> 指令。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>dotnet restore</code> 是根據 <code>csproj</code> 建立 package 與實際位置的 mapping 檔案</li>
<li>.NET Core 2 之後幾乎不用再自己下 <code>dotnet restore</code> 指令，只要有觀念即可</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[NuGet 特有的管理機制]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[.NET Core SDK 基本指令練習]]></title>
    <link href="http://oomusou.io/netcore/basic-sdk/"/>
    <id>http://oomusou.io/netcore/basic-sdk/</id>
    <published>2018-03-16T13:23:43.000Z</published>
    <updated>2018-03-16T08:33:31.541Z</updated>
    <content type="html"><![CDATA[<p>Console app 是最基本的 .NET Core 專案類型，常用在測試 class library、提供 class library 範例程式，或者開發跨平台的 CLI 工具，我們可以使用 <code>ng new console</code> 建立 console app 型態專案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="建立_Console_App_專案">建立 Console App 專案</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new</code> 建立專案。</p>
<ul>
<li><strong>console</strong> : 建立 console 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，建立在 <code>MyConsole</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/basic-sdk/sdk009.png" alt="sdk009"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 將 console 類型專案建立在 <code>MyConsole</code> 目錄下</li>
<li>.NET Core SDK 開始建立專案所需的檔案</li>
<li>自動 restore dependency</li>
</ol>
<h2 id="使用_VS_Code_開啟專案">使用 VS Code 開啟專案</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接開啟目錄名稱。</p>
<p><img src="/images/netcore/basic-sdk/sdk010.png" alt="sdk010"></p>
<ol>
<li>第一次使用 VS Code 開啟 .NET Core 專案，會要求建立 <code>.vscode</code> 設定檔目錄，按 <code>Yes</code> 繼續</li>
</ol>
<p><img src="/images/netcore/basic-sdk/sdk011.png" alt="sdk011"></p>
<ol>
<li><code>.vscode</code> 被 VS Code 自動建立</li>
</ol>
<h2 id="編輯_Program-cs">編輯 Program.cs</h2><hr>
<p><img src="/images/netcore/basic-sdk/sdk012.png" alt="sdk012"></p>
<ol>
<li>開啟 <code>Program.cs</code></li>
<li>將 <code>World</code> 改成 <code>Sam</code> 存檔</li>
</ol>
<h2 id="觀察_MyConsole-csproj">觀察 MyConsole.csproj</h2><hr>
<p><img src="/images/netcore/basic-sdk/sdk013.png" alt="sdk013"></p>
<ol>
<li>開啟 <code>MyConsole.csproj</code></li>
</ol>
<blockquote>
<p><code>csproj</code> 負責紀錄 project 的 project 與 package 的 reference ，以及其他與 project 相關資訊，使用 Visual Studio 配合 .NET Framework 時，我們不會去維護 <code>csproj</code> 檔案，而是靠 Visual Studio 幫我們維護，但若使用 VS Code + .NET Core CLI 的組合時，將來會有很多機會要自己維護 <code>csproj</code></p>
</blockquote>
<h2 id="還原_Dependency">還原 Dependency</h2><hr>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ dotnet <span class="built_in">restore</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet restore</code> 根據 <code>csproj</code> 建立 package 與實際位置的 mapping 檔案。</p>
<p><img src="/images/netcore/basic-sdk/sdk014.png" alt="sdk014"></p>
<ol>
<li>按熱鍵 Ctrl + ` 開啟內建的 terminal</li>
<li>輸入 <code>dotnet restore</code> 還原 dependency</li>
</ol>
<h2 id="編譯_Console_App">編譯 Console App</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ dotnet <span class="keyword">build </span>-c Release</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯專案。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet build</code> 是以 <code>Debug</code> 模式編譯，若要以 <code>Release</code> 編譯，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/basic-sdk/sdk000.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet build -c Release</code> 以 <code>Release</code> 模式編譯</li>
<li>自動執行 <code>dotnet restore</code></li>
<li>最後 build 出 <code>MyConsole.dll</code></li>
</ol>
<blockquote>
<p>注意是 build 到 <code>Release</code> 目錄</p>
</blockquote>
<h2 id="執行_Console_App">執行 Console App</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ dotnet <span class="command">run</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet run</code> 執行專案。</p>
<blockquote>
<p><code>dotnet run</code> 明顯感覺比較慢，因為 C# 不是 script，<code>dotnet run</code> 事實上做了幾件事情 :</p>
<ol>
<li><code>dotnet restore</code></li>
<li><code>dotnet build</code></li>
<li>最後才是執行程式</li>
</ol>
<p>所以才會感覺比較慢</p>
</blockquote>
<p><img src="/images/netcore/basic-sdk/sdk001.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet run</code> 顯示執行結果</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">~/MyConsole $ dotnet /</span>Users<span class="regexp">/oomusou/</span>Code<span class="regexp">/CSharp/</span>MyConsole<span class="regexp">/bin/</span>Release/netcoreapp2.</span><br><span class="line"><span class="number">0</span>/MyConsole.dll</span><br></pre></td></tr></table></figure>
<p>直接使用 <code>dontet</code> 執行 dll，由於使用 <code>Release</code> 模式編譯，速度非常快。</p>
<p><img src="/images/netcore/basic-sdk/sdk002.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet</code> 直接執行編譯過 <code>Release</code> 模式的 <code>MyConsole.dll</code></li>
<li>馬上出現 <code>Hello Sam!</code> ，不用等待</li>
</ol>
<blockquote>
<p>實務上不建議直接使用 <code>dotnet run</code>，因為速度很慢，要用 <code>dotnet</code> 執行編譯過且最佳化的 dll</p>
</blockquote>
<h2 id="清除_Assembly">清除 Assembly</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyConsole</span> $ <span class="keyword">dotnet</span> clean -c <span class="type">Release</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet clean</code> 清除所編譯的 dll。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet clean</code> 是清除 <code>Debug</code> 模式的 dll，若要清除 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/basic-sdk/sdk003.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet clean -c Release</code> 清除以 <code>Release</code> 模式 build 的 <code>MyConsole.dll</code></li>
<li>查看 <code>bin/Release/netcoreapp2.0</code> 目錄，確認所有檔案已經清除</li>
</ol>
<h2 id="發佈_Console_App">發佈 Console App</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyConsole</span> $ <span class="keyword">dotnet</span> publish -c <span class="type">Release</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet publish</code> 將編譯後的 dll 與其 dependency 整理到 <code>publish</code> 目錄，將來只要將此目錄 deploy 到 server 即可。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet publish</code> 是將 <code>Debug</code> 模式的 dll 整理至 <code>publish</code> 目錄，若要整理 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
</ul>
<p><img src="/images/netcore/basic-sdk/sdk004.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet publish -c Release</code> 將欲 deploy 的檔案整理到 <code>bin/Release/netcoreapp2.0/publish</code> 目錄</li>
<li>在 <code>publish</code> 目錄下，我們總共發現有 4 個檔案<ul>
<li><code>MyConsole.dll</code> : 以 IL 為內容的 assembly</li>
<li><code>MyConsole.deps.json</code> : 描述執行 dll 所需要的 dependency</li>
<li><code>MyConsole.runtimeconfig.json</code> : 描述 dll 所需要的 .NET Core runtime 版本，以及其他 runtime 設定 (Ex. Garbage Collection 方式)</li>
<li><code>MyConsole.pdb</code> : 在 production 環境啟動 debug 時使用</li>
</ul>
</li>
</ol>
<h2 id="執行_Console_App-1">執行 Console App</h2><hr>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyProject $ dotnet bin/</span>Release<span class="regexp">/netcoreapp2.0/</span>publish<span class="regexp">/MyConsole.dll</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet</code> 執行 publish 後的 dll。</p>
<p><img src="/images/netcore/basic-sdk/sdk005.png" alt="dk00"></p>
<ol>
<li>輸入 <code>dotnet</code> 直接執行  publish 過的 <code>MyConsole.dll</code></li>
<li>馬上出現 <code>Hello Sam!</code> ，不用等待</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>藉由 <code>Hello World</code> 練習最基本的 .NET Core SDK 指令</li>
<li><code>dotnet run</code> 因為要執行 <code>dotnet restore</code> 、<code>dotnet build</code> ，所以執行速度較慢</li>
<li><code>dotnet publish</code> 會幫我們將 dependency 加以整理，方便 deployment</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[天天都會用到的 .NET Core 指令]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[.NET Core SDK 簡介]]></title>
    <link href="http://oomusou.io/netcore/sdk/"/>
    <id>http://oomusou.io/netcore/sdk/</id>
    <published>2018-03-16T12:23:43.000Z</published>
    <updated>2018-03-16T08:23:57.894Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 為了要跨平台，在 .NET Core SDK 提供了全套的 CLI，讓我們可以完全用 command 方式管理專案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.4.1</p>
<h2 id="為什麼要用_Command_?">為什麼要用 Command ?</h2><hr>
<p>傳統 .NET Framework 都是在 Visual Studio 以 GUI 方式操作，GUI 對 End User 是友善的，但對 Developer 與 DevOps 而言卻不見得友善 :</p>
<ol>
<li>GUI 很難自動化，但 command 很適合寫 script 自動化，而且可以 git 版控</li>
<li>若要遠端管理 server，GUI 只能透過 Remote Desktop，但 command 只要 SSH 就可執行</li>
<li>Command 可以寫在 Dockerfile 內，但 GUI 無法</li>
<li>.NET Core 最新功能會先在 SDK 支援，Visual Studio 支援稍慢於 SDK</li>
<li>Command 適合在 macOS 與 Linux 執行</li>
</ol>
<p>這也是為什麼目前潮流是 End User 與 Designer 使用 GUI，但 Developer 與 DevOps 使用 command。</p>
<p>.NET Core 全部的動作都可以使用 command 執行。</p>
<blockquote>
<p>就類似學 Git 要從 command 開始學，只要原理懂，自然會使用 Visual Studio / Rider 的 GUI </p>
</blockquote>
<h2 id="-NET_Core_SDK_Command">.NET Core SDK Command</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>列出全部 .NET Core SDK 指令的說明。</p>
<p><img src="/images/netcore/sdk/sdk000.png" alt="sdk000"></p>
<ul>
<li><strong>dotnet help</strong> : 顯示所有 command 與 option 的文件</li>
<li><strong>dotnet new</strong> : 根據指定 template 建立 project</li>
<li><strong>dotnet restore</strong> : 根據  <code>*.csproj</code> 的資訊 restore dependency</li>
<li><strong>dotnet run</strong> : 執行 .NET Core 應用程式</li>
<li><strong>dotnet build</strong> : 編譯 .NET Core 應用程式為 assembly (dll)</li>
<li><strong>dotnet publish</strong> : 發布 .NET Core 應用程式</li>
<li><strong>dotnet test</strong> : 執行 .NET Core 單元測試</li>
<li><strong>dotnet pack</strong> : 建立 NuGet package</li>
<li><strong>dotnet migrate</strong> : 將 project.json 專案升級到 msbuild 專案</li>
<li><strong>dotnet clean</strong> : 將之前編譯的 assembly (dll) 刪除</li>
<li><strong>dotnet sln</strong> : 管理 solution 檔</li>
<li><strong>dotnet add</strong> : 新增 project reference 或 package reference</li>
<li><strong>dotnet remove</strong> : 移除 project reference 與 package reference</li>
<li><strong>dotnet list</strong> : 列出 project 所有的 reference</li>
<li><strong>dotnet nuget</strong> : 執行 NuGet command</li>
<li><strong>dotnet msbuild</strong> : 執行 MSBuild</li>
<li><strong>dotnet vstest</strong> : 對 assembly 執行單元測試</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過 .NET Core SDK，我們可以完全使用 command 的方式管理專案，完全不需要 GUI</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[完全以 command 方式管理 .NET Core]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[F# 語法檢定考]]></title>
    <link href="http://oomusou.io/fsharp/syntax-all/"/>
    <id>http://oomusou.io/fsharp/syntax-all/</id>
    <published>2018-03-16T12:23:43.000Z</published>
    <updated>2018-03-14T07:57:49.606Z</updated>
    <content type="html"><![CDATA[<p>F# 的語法雖然很精簡，但還是得稍微花時間學習，Scott Wlaschin 所寫的這份 code，幾乎包含 F# 的所有語法，若都看得懂，F# 語法部分就算過關了。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>F# 4.1</p>
<h2 id="Overview_of_F#_Syntax">Overview of F# Syntax</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is presented with permission from Scott Wlaschin, the original author.  This has been slightly modified.</span></span><br><span class="line"><span class="comment">// Single line comments use a double slash.</span></span><br><span class="line"><span class="comment">(* </span><br><span class="line">    Multi-line comments can be done this way (though double-slash is usually used).</span><br><span class="line">*)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======== "Variables" (but not really) ==========</span></span><br><span class="line"><span class="comment">// The "let" keyword defines an (immutable) value</span></span><br><span class="line"><span class="keyword">let</span> myInt = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> myFloat = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">let</span> myString = <span class="string">"hello"</span>   <span class="comment">// note that no types needed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======== Lists ============</span></span><br><span class="line"><span class="keyword">let</span> twoToFive = [ <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span> ]        <span class="comment">// Square brackets create a list with</span></span><br><span class="line">                                     <span class="comment">// semicolon delimiters.</span></span><br><span class="line"><span class="keyword">let</span> oneToFive = <span class="number">1</span> :: twoToFive   <span class="comment">// :: creates list with new 1st element</span></span><br><span class="line"><span class="comment">// The result is [1; 2; 3; 4; 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zeroToFive = [<span class="number">0</span>;<span class="number">1</span>] @ twoToFive   <span class="comment">// @ concats two lists</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IMPORTANT: commas are never used as delimiters, only semicolons!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======== Functions ========</span></span><br><span class="line"><span class="comment">// The "let" keyword also defines a named function.</span></span><br><span class="line"><span class="keyword">let</span> square x = x * x          <span class="comment">// Note that no parens are used.</span></span><br><span class="line">square <span class="number">3</span>                      <span class="comment">// Now run the function. Again, no parens.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add x y = x + y           <span class="comment">// don't use add (x,y)! It means something</span></span><br><span class="line">                              <span class="comment">// completely different.</span></span><br><span class="line">add <span class="number">2</span> <span class="number">3</span>                       <span class="comment">// Now run the function.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// to define a multiline function, just use indents. No semicolons needed.</span></span><br><span class="line"><span class="keyword">let</span> evens list =</span><br><span class="line">   <span class="keyword">let</span> isEven x = x % <span class="number">2</span> = <span class="number">0</span>     <span class="comment">// Define "isEven" as an inner ("nested") function</span></span><br><span class="line">   List.filter isEven list      <span class="comment">// List.filter is a library function</span></span><br><span class="line">                                <span class="comment">// with two parameters: a boolean function</span></span><br><span class="line">                                <span class="comment">// and a list to work on</span></span><br><span class="line">  </span><br><span class="line">evens oneToFive               <span class="comment">// Now run the function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You can use parens to clarify precedence. In this example,</span></span><br><span class="line"><span class="comment">// do "map" first, with two args, then do "sum" on the result.</span></span><br><span class="line"><span class="comment">// Without the parens, "List.map" would be passed as an arg to List.sum</span></span><br><span class="line"><span class="keyword">let</span> sumOfSquaresTo100 =</span><br><span class="line">   List.sum (List.map square [ <span class="number">1</span> .. <span class="number">100</span> ])</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can pipe the output of one operation to the next using "|&gt;"</span></span><br><span class="line"><span class="comment">// Here is the same sumOfSquares function written using pipes</span></span><br><span class="line"><span class="keyword">let</span> sumOfSquaresTo100piped =</span><br><span class="line">   [ <span class="number">1</span> .. <span class="number">100</span> ] |&gt; List.map square |&gt; List.sum  <span class="comment">// "square" was defined earlier</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can define lambdas (anonymous functions) using the "fun" keyword</span></span><br><span class="line"><span class="keyword">let</span> sumOfSquaresTo100withFun =</span><br><span class="line">   [ <span class="number">1</span> .. <span class="number">100</span> ] |&gt; List.map (<span class="keyword">fun</span> x -&gt; x * x) |&gt; List.sum</span><br><span class="line"></span><br><span class="line"><span class="comment">// In F# returns are implicit -- no "return" needed. A function always</span></span><br><span class="line"><span class="comment">// returns the value of the last expression used.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======== Pattern Matching ========</span></span><br><span class="line"><span class="comment">// Match..with.. is a supercharged case/switch statement.</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">match</span> x <span class="keyword">with</span></span><br><span class="line">| <span class="string">"a"</span> -&gt; printfn <span class="string">"x is a"</span></span><br><span class="line">| <span class="string">"b"</span> -&gt; printfn <span class="string">"x is b"</span></span><br><span class="line">| _ -&gt; printfn <span class="string">"x is something else"</span>   <span class="comment">// underscore matches anything</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Some(..) and None are roughly analogous to Nullable wrappers</span></span><br><span class="line"><span class="keyword">let</span> validValue = Some(<span class="number">99</span>)</span><br><span class="line"><span class="keyword">let</span> invalidValue = None</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this example, match..with matches the "Some" and the "None",</span></span><br><span class="line"><span class="comment">// and also unpacks the value in the "Some" at the same time.</span></span><br><span class="line"><span class="keyword">let</span> optionPatternMatch input =</span><br><span class="line">   <span class="keyword">match</span> input <span class="keyword">with</span></span><br><span class="line">    | Some i -&gt; printfn <span class="string">"input is an int=%d"</span> i</span><br><span class="line">    | None -&gt; printfn <span class="string">"input is missing"</span></span><br><span class="line"></span><br><span class="line">optionPatternMatch validValue</span><br><span class="line">optionPatternMatch invalidValue</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========= Complex Data Types =========</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tuple types are pairs, triples, etc. Tuples use commas.</span></span><br><span class="line"><span class="keyword">let</span> twoTuple = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> threeTuple = (<span class="string">"a"</span>, <span class="number">2</span>, <span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Record types have named fields. Semicolons are separators.</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Person</span> </span>= &#123; First: string; Last: string &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = &#123; First=<span class="string">"John"</span>; Last=<span class="string">"Doe"</span> &#125;</span><br><span class="line"><span class="comment">// You can also use new lines to elide the semiclon.</span></span><br><span class="line"><span class="keyword">let</span> person2 =</span><br><span class="line">    &#123; First=<span class="string">"Jane"</span></span><br><span class="line">      Last=<span class="string">"Doe"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Union types have choices. Vertical bars are separators.</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Temp</span> </span>= </span><br><span class="line">    | DegreesC <span class="keyword">of</span> float</span><br><span class="line">    | DegreesF <span class="keyword">of</span> float</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> temp = DegreesF <span class="number">98.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Types can be combined recursively in complex ways.</span></span><br><span class="line"><span class="comment">// E.g. here is a union type that contains a list of the same type:</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Employee</span> </span>= </span><br><span class="line">  | Worker <span class="keyword">of</span> Person</span><br><span class="line">  | Manager <span class="keyword">of</span> Employee list</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jdoe = &#123; First=<span class="string">"John"</span>; Last=<span class="string">"Doe"</span> &#125;</span><br><span class="line"><span class="keyword">let</span> worker = Worker jdoe</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========= Printing =========</span></span><br><span class="line"><span class="comment">// The printf/printfn functions are similar to the</span></span><br><span class="line"><span class="comment">// Console.Write/WriteLine functions in C#.</span></span><br><span class="line">printfn <span class="string">"Printing an int %i, a float %f, a bool %b"</span> <span class="number">1</span> <span class="number">2.0</span> <span class="keyword">true</span></span><br><span class="line">printfn <span class="string">"A string %s, and something generic %A"</span> <span class="string">"hello"</span> [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// all complex types have pretty printing built in</span></span><br><span class="line">printfn <span class="string">"twoTuple=%A,\nPerson=%A,\nTemp=%A,\nEmployee=%A"</span> </span><br><span class="line">         twoTuple person1 temp worker</span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://blogs.msdn.microsoft.com/dotnet/" target="_blank" rel="external">.NET Blog</a>, <a href="https://blogs.msdn.microsoft.com/dotnet/2017/07/24/get-started-with-f-as-a-c-developer/" target="_blank" rel="external">Get Started with F# as a C# developer</a></p>
]]></content>
    <summary type="html">
    <![CDATA[一段 code 幾乎包含 F# 所有語法]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 macOS 輕鬆使用 Visual Studio 熱鍵?]]></title>
    <link href="http://oomusou.io/vs/shortcut/"/>
    <id>http://oomusou.io/vs/shortcut/</id>
    <published>2018-03-15T12:23:43.000Z</published>
    <updated>2018-03-13T14:46:57.172Z</updated>
    <content type="html"><![CDATA[<p>只要安裝了 Parallel Desktop，就可以在 macOS 執行 Windows 10 與 Visual Studio，但一些 Visual Studio 的熱鍵會先被 macOS 攔截，且 mac 鍵盤又天生沒有 Home / End / Page Down / Page Up，再加上 Touch Bar 之後，我們會希望盡量不要用到 <code>F1 ~ F12</code>，在種種條件下， 我們該如何在 macOS 上高效率的使用 Visual Studio 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Parallel Desktop 13 for Mac Pro Edition 13.3.0 (43321)<br>Windows 10 Pro 1709 16299.251<br>Visual Studio 2017 15.5.7</p>
<h2 id="Home">Home</h2><hr>
<p>Visual Studio 熱鍵眾多，在此先針對最常用的熱鍵處理，只要學會方法，可自行舉一反三。</p>
<p><img src="/images/vs/shortcut/shortcut000.png" alt="shortcut000"></p>
<ol>
<li>選擇要設定的 VM</li>
<li>按滑鼠右鍵選 <code>Configure…</code></li>
</ol>
<p><img src="/images/vs/shortcut/shortcut001.png" alt="shortcut001"></p>
<ol>
<li>選 <code>Hardware</code></li>
<li>選 <code>Mouse &amp; Keyboard</code></li>
<li>按下 <code>Open Shortcuts Preferences…</code></li>
</ol>
<p><img src="/images/vs/shortcut/shortcut002.png" alt="shortcut002"></p>
<ol>
<li>選擇你要設定的 VM</li>
<li><strong>Profile</strong> : 選擇 Widnows，Parallel Desktop 預設已經幫我們根據 macOS 的習慣，預先設定了相對應的 Windows shortcut mapping</li>
<li>若你修改了 mapping 之後不滿意，可以隨是按下 <code>Restore Defaults</code> 回到 Parallel Desktop 預設所提供的 shortcut mapping</li>
<li>按下 <code>+</code> 新增 shortcut : 雖然已經內建一下 shortcut mapping，但對於 Visual Studio 的使用仍然不足，我們必須自行增加 mapping</li>
</ol>
<p><img src="/images/vs/shortcut/shortcut003.png" alt="shortcut003"></p>
<p>根據 macOS 的習慣，<code>⌘ + ←</code> 相當於 Windows 的 <code>Home</code>。</p>
<ol>
<li><code>From</code> ：設定 macOS 的 shortcut，</li>
<li><code>To</code> ：設定 Windows 的 shortcut。</li>
</ol>
<blockquote>
<p>因為 Mac 鍵盤沒有 <code>Home</code>，可用下拉選單選擇 <code>Home</code> ，或者輸入 <code>fn + ←</code></p>
</blockquote>
<h2 id="End">End</h2><hr>
<p><img src="/images/vs/shortcut/shortcut004.png" alt="shortcut004"></p>
<p>根據 macOS 的習慣，<code>⌘ + →</code> 相當於 Windows 的 <code>End</code>。</p>
<h2 id="Page_Up">Page Up</h2><hr>
<p><img src="/images/vs/shortcut/shortcut005.png" alt="shortcut005"></p>
<p>根據 macOS 的習慣，<code>⌘ + ↑</code> 相當於 Windows 的 <code>Page Up</code>。</p>
<h2 id="Page_Down">Page Down</h2><hr>
<p><img src="/images/vs/shortcut/shortcut006.png" alt="shortcut006"></p>
<p>根據 macOS 的習慣，<code>⌘ + ↓</code> 相當於 Windows 的 <code>Page Down</code>。</p>
<h2 id="Shift_+_Home">Shift + Home</h2><hr>
<p><img src="/images/vs/shortcut/shortcut007.png" alt="shortcut007"></p>
<p>根據 macOS 的習慣，<code>⇧ + ⌘ + ←</code> 相當於 Windows 的 <code>Shift + Home</code>。</p>
<h2 id="Shift_+_End">Shift + End</h2><hr>
<p><img src="/images/vs/shortcut/shortcut008.png" alt="shortcut008"></p>
<p>根據 macOS 的習慣，<code>⇧ + ⌘ + →</code> 相當於 Windows 的 <code>Shift + End</code>。</p>
<h2 id="Delete_Line">Delete Line</h2><hr>
<p><img src="/images/vs/shortcut/shortcut009.png" alt="shortcut009"></p>
<p>根據 JetBrains 習慣，<code>⌘ + ⌦</code> 相當於 Delete Line，這在 Visual Studio 對應的熱鍵為 <code>Ctrl + Shift + L</code>。</p>
<h2 id="Start_Without_Debugging">Start Without Debugging</h2><hr>
<p><code>Start without Debugging</code> 也是 Visual Studio 常用的熱鍵，但預設是 <code>Ctrl + F5</code>，對於 macOS 而言，一般我們不會用到 <code>F1 ~ F12</code>，而是將這些熱鍵讓給 Touch Bar，所以建議更改 Visual Studio 熱鍵。</p>
<p>將 <code>⇧ + ⌥ + R</code> 設定為 Start without Debugging。</p>
<p><img src="/images/vs/shortcut/shortcut010.png" alt="shortcut010"></p>
<p><strong><em>Tools -&gt; Options</em></strong></p>
<p><img src="/images/vs/shortcut/shortcut011.png" alt="shortcut011"></p>
<ol>
<li>選擇 <code>keyboard</code></li>
<li><code>Show commands containing</code> 輸入 <code>Debug.Start</code></li>
<li>選擇 <code>Debug.StartWithoutDebugging</code></li>
<li>新增 <code>Shift + Alt + R</code> 熱鍵</li>
</ol>
<h2 id="Start_Debugging">Start Debugging</h2><hr>
<p><code>Start Debugging</code> 也是 Visual Studio 常用的熱鍵，但預設是 <code>F5</code>，我們一樣希望 <code>F1 ~ F12</code> 讓給 Touch Bar，所以建議更改 Visual Studio 熱鍵。</p>
<p>將 <code>⇧ + ⌥ + D</code> 設定為 Start Debugging。</p>
<p><img src="/images/vs/shortcut/shortcut012.png" alt="shortcut012"></p>
<ol>
<li>選擇 <code>keyboard</code></li>
<li><code>Show commands containing</code> 輸入 <code>Debug.Start</code></li>
<li>選擇 <code>Debug.Start</code></li>
<li>新增 <code>Shift + Alt + D</code> 熱鍵</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>若是熱鍵被 macOS 攔截，可在 Parallel Desktop 設定 shortcut mapping</li>
<li>若是 Visual Studio 的預設熱鍵不滿意，可在 <code>Tools -&gt; Options</code> 重新設定熱鍵</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[重新設定 Parallel Desktop 與 Visual Studio 的 shortcut mapping]]>
    
    </summary>
    
      <category term="Parallel Desktop" scheme="http://oomusou.io/tags/Parallel-Desktop/"/>
    
      <category term="Visual Studio" scheme="http://oomusou.io/tags/Visual-Studio/"/>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 .NET Framework 使用有 FIFO 的 AWS SQS ?]]></title>
    <link href="http://oomusou.io/aws/sqs/"/>
    <id>http://oomusou.io/aws/sqs/</id>
    <published>2018-03-14T12:23:43.000Z</published>
    <updated>2018-03-14T01:36:17.766Z</updated>
    <content type="html"><![CDATA[<p>在非同步的資料處理當中，Queue 是常見的應用，本文使用 .NET Framework + AWS Toolkit for Visual Studio 控制有 FIFO 的 AWS SQS。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Windows 10 Pro 1709 16299.251<br>.NET Framework 4.6.2<br>Visual Studio 2017 15.5.7<br>AWS Toolkit for Visual Studio</p>
<h2 id="安裝_AWS_Toolkit_for_Visual_Studio">安裝 AWS Toolkit for Visual Studio</h2><hr>
<p><img src="/images/aws/sqs/sqs001.png" alt="sqs001"></p>
<ol>
<li>到 AWS 官網下載 <a href="https://aws.amazon.com/visualstudio/" target="_blank" rel="external">AWS Toolkit for Visual Studio</a></li>
<li>選擇 <code>AWS Toolkit for Visual Studio 2017</code></li>
</ol>
<p><img src="/images/aws/sqs/sqs002.png" alt="sqs002"></p>
<ol>
<li>按 <code>Download</code> 開始下載</li>
</ol>
<p><img src="/images/aws/sqs/sqs003.png" alt="sqs003"></p>
<ol>
<li><code>AWSToolkitPackage.vsix</code> 會下載到 <code>Downloads</code> 目錄下</li>
<li>執行 <code>AWSToolkitPackage</code> 安裝 AWS Toolkit for Visual Studio</li>
</ol>
<p><img src="/images/aws/sqs/sqs004.png" alt="sqs004"></p>
<p>安裝完成後，重新啟動 Visual Studio 2017 就會出現 <code>AWS Getting Started</code> 首頁。</p>
<h2 id="建立_Project">建立 Project</h2><hr>
<p><img src="/images/aws/sqs/sqs005.png" alt="sqs005"></p>
<p><strong><em>File -&gt; New Project</em></strong></p>
<p><strong><em>Visual C# -&gt; AWS Samples -&gt; App Services -&gt; AWS SQS Sample</em></strong></p>
<p><img src="/images/aws/sqs/sqs006.png" alt="sqs006"></p>
<p>第一次建立專案時，會要求你建立 <code>Account Profile</code> 與 <code>Region</code>。</p>
<ol>
<li>按 <code>+</code> 新增</li>
</ol>
<p><img src="/images/aws/sqs/sqs007.png" alt="sqs007"></p>
<ol>
<li>輸入 <code>Access Key ID</code> 與 <code>Secret Access Key</code></li>
</ol>
<p><img src="/images/aws/sqs/sqs008.png" alt="sqs008"></p>
<ol>
<li>會自動選擇美西的 server</li>
</ol>
<blockquote>
<p>AWS 並不是所有的 SQS 都支援 FIFO，如東京的 server 的 SQS 就不支援 FIFO</p>
</blockquote>
<h2 id="寫入_Message_進_Queue">寫入 Message 進 Queue</h2><hr>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Amazon.SQS;</span><br><span class="line"><span class="keyword">using</span> Amazon.SQS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SQSSendMessage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">// SQSClient from AWSSDK</span></span><br><span class="line">            <span class="keyword">var</span> amazonSqsClient = <span class="keyword">new</span> AmazonSQSClient();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// FIFO quene URL</span></span><br><span class="line">            <span class="keyword">string</span> myQueueUrl = <span class="string">"https://sqs.us-west-2.amazonaws.com/781160412246/ecfe.fifo"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Send 3 messages to FIFO queue</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> message = <span class="string">"message"</span> + i;</span><br><span class="line">                    <span class="keyword">var</span> sendMessageRequest = <span class="keyword">new</span> SendMessageRequest</span><br><span class="line">                    &#123;</span><br><span class="line">                        QueueUrl = myQueueUrl,</span><br><span class="line">                        MessageBody = message,</span><br><span class="line">                        MessageGroupId = <span class="string">"Senao"</span></span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    amazonSqsClient.SendMessage(sendMessageRequest);</span><br><span class="line">                    Console.WriteLine(<span class="string">"Send message &#123;0&#125;"</span>, message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (AmazonSQSException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Caught Exception: "</span> + ex.Message);</span><br><span class="line">                Console.WriteLine(<span class="string">"Response Status Code: "</span> + ex.StatusCode);</span><br><span class="line">                Console.WriteLine(<span class="string">"Error Code: "</span> + ex.ErrorCode);</span><br><span class="line">                Console.WriteLine(<span class="string">"Error Type: "</span> + ex.ErrorType);</span><br><span class="line">                Console.WriteLine(<span class="string">"Request ID: "</span> + ex.RequestId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"Press Enter to continue..."</span>);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SQSClient from AWSSDK</span></span><br><span class="line"><span class="keyword">var</span> amazonSqsClient = <span class="keyword">new</span> AmazonSQSClient();</span><br></pre></td></tr></table></figure>
<p>要使用 SQS，首先要建立 <code>AmazonSQSClient</code> 物件，所有的操作都從 <code>AmazonSQSClient</code> 開始。</p>
<p>14 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FIFO quene URL</span></span><br><span class="line"><span class="keyword">string</span> myQueueUrl = <span class="string">"https://sqs.us-west-2.amazonaws.com/781160412246/ecfe.fifo"</span>;</span><br></pre></td></tr></table></figure>
<p>無論是 <code>寫入 message</code>、<code>讀出 message</code> 或者 <code>刪除 message</code>，都必須靠 <code>QueueUrl</code> 辨識你所要控制的 queue。</p>
<p>23 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendMessageRequest = <span class="keyword">new</span> SendMessageRequest</span><br><span class="line">&#123;</span><br><span class="line">    QueueUrl = myQueueUrl,</span><br><span class="line">    MessageBody = message,</span><br><span class="line">    MessageGroupId = <span class="string">"oomusou"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">amazonSqsClient.SendMessage(sendMessageRequest);</span><br><span class="line">Console.WriteLine(<span class="string">"Send message &#123;0&#125;"</span>, message);</span><br></pre></td></tr></table></figure>
<p>建立 <code>SendMessageRequest</code> DTO，其中 <code>QueueUrl</code> 為 queue 的 URL；而 <code>MessageBody</code> 為要傳入 queue 的內容。</p>
<blockquote>
<p>FIFO queue 與 Standard queue 最大的差別在於 <code>MessageGroupId</code>，根據 AWS 文件，只有相同的 <code>MessageGroupId</code> 才能使用 FIFO queue，並保證 message 會 <code>先進先出</code>，若沒指定 <code>MessageGroupId</code> 則視為 Standard Queue，並不保證 message 會 <code>先進先出</code>。</p>
</blockquote>
<p>再將 <code>SendMessageRequest</code> DTO 傳入 <code>AmazonSQSClient.SendMessage()</code>，正式將資料寫入 queue。</p>
<h2 id="從_Queue_讀出_Message">從 Queue 讀出 Message</h2><hr>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Amazon;</span><br><span class="line"><span class="keyword">using</span> Amazon.SQS;</span><br><span class="line"><span class="keyword">using</span> Amazon.SQS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SQSReceiveMessage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">// SQSClient from AWSSDK</span></span><br><span class="line">            <span class="keyword">var</span> amazonSqsClient = <span class="keyword">new</span> AmazonSQSClient();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// FIFO quene URL</span></span><br><span class="line">            <span class="keyword">string</span> myQueueUrl = <span class="string">"https://sqs.us-west-2.amazonaws.com/781160412246/ecfe.fifo"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Send 3 messages to FIFO queue</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Read message from FIFO queue</span></span><br><span class="line">                    <span class="keyword">var</span> receiveMessageRequest = <span class="keyword">new</span> ReceiveMessageRequest</span><br><span class="line">                    &#123;</span><br><span class="line">                        QueueUrl = myQueueUrl</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> receiveMessageResponse = amazonSqsClient.ReceiveMessage(receiveMessageRequest);</span><br><span class="line">                    <span class="keyword">if</span> (receiveMessageResponse.Messages != <span class="keyword">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> message = receiveMessageResponse.Messages[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(message.Body))</span><br><span class="line">                        &#123;</span><br><span class="line">                            Console.WriteLine(<span class="string">"Read message: &#123;0&#125;"</span>, message.Body);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Delete message from FIFO queue</span></span><br><span class="line">                        <span class="keyword">var</span> messageRecieptHandle = message.ReceiptHandle;</span><br><span class="line">                        <span class="keyword">var</span> deleteMessageRequest = <span class="keyword">new</span> DeleteMessageRequest</span><br><span class="line">                        &#123;</span><br><span class="line">                            QueueUrl = myQueueUrl,</span><br><span class="line">                            ReceiptHandle = messageRecieptHandle</span><br><span class="line">                        &#125;;</span><br><span class="line">                        amazonSqsClient.DeleteMessage(deleteMessageRequest);</span><br><span class="line">                        Console.WriteLine(<span class="string">"Delete message: &#123;0&#125;"</span>, message.Body);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (AmazonSQSException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Caught Exception: "</span> + ex.Message);</span><br><span class="line">                Console.WriteLine(<span class="string">"Response Status Code: "</span> + ex.StatusCode);</span><br><span class="line">                Console.WriteLine(<span class="string">"Error Code: "</span> + ex.ErrorCode);</span><br><span class="line">                Console.WriteLine(<span class="string">"Error Type: "</span> + ex.ErrorType);</span><br><span class="line">                Console.WriteLine(<span class="string">"Request ID: "</span> + ex.RequestId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"Press Enter to continue..."</span>);</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>39 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> receiveMessageRequest = <span class="keyword">new</span> ReceiveMessageRequest</span><br><span class="line">&#123;</span><br><span class="line">    QueueUrl = myQueueUrl</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> receiveMessageResponse = amazonSqsClient.ReceiveMessage(receiveMessageRequest);</span><br></pre></td></tr></table></figure>
<p>建立 <code>ReceiveMessageRequest</code> DTO，其中 <code>QueueUrl</code> 為 queue 的 URL。</p>
<p>再將 <code>ReceiveMessageRequest</code> DTO 傳入 <code>AmazonSQSClient.ReceiveMessage()</code>，正式從 queue 讀出資料。</p>
<p>45 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (receiveMessageResponse.Messages != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> message = receiveMessageResponse.Messages[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(message.Body))</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Read message: &#123;0&#125;"</span>, message.Body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 <code>receiveMessageResponse.Messages</code> 為 <code>List&lt;Message&gt;</code>，預設每次 <code>ReceiveMessage()</code> 只會從 queue 讀出一筆 message，且資料在 <code>message.Body</code> 內。</p>
<p>55 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete message from FIFO queue</span></span><br><span class="line"><span class="keyword">var</span> messageRecieptHandle = message.ReceiptHandle;</span><br><span class="line"><span class="keyword">var</span> deleteMessageRequest = <span class="keyword">new</span> DeleteMessageRequest</span><br><span class="line">&#123;</span><br><span class="line">    QueueUrl = myQueueUrl,</span><br><span class="line">    ReceiptHandle = messageRecieptHandle</span><br><span class="line">&#125;;</span><br><span class="line">                        amazonSqsClient.DeleteMessage(deleteMessageRequest);</span><br></pre></td></tr></table></figure>
<p>建立 <code>DeleteMessageRequest</code> DTO，其中 <code>QueueUrl</code> 為 queue 的 URL；此外 <code>ReceipeHandle</code> 為要刪除 message 的 handle。</p>
<p><code>ReceipeHandle</code> 由 <code>message.ReceiptHandle</code> 獲得。</p>
<p>再將 <code>DeleteMessageRequest</code> DTO 傳入 <code>AmazonSQSClient.DeleteMessage()</code>，正式從 queue 刪除資料。</p>
<blockquote>
<p>根據 AWS SQS 特性，若不從 SQS 刪除 message， 若繼續下  <code>ReceiveMessage()</code> ，仍然會讀取到相同的 message，唯有刪除了 <code>message</code> 之後，才會依 FIFO 順序讀到下一筆 message</p>
</blockquote>
<p><img src="/images/aws/sqs/sqs010.png" alt="sqs010"></p>
<p>依序寫入 <code>message0</code>、<code>message1</code> 與 <code>message2</code> 三筆資料進有 FIFO 的 AWS SQS。</p>
<p><img src="/images/aws/sqs/sqs011.png" alt="sqs011"></p>
<p>依序讀出 <code>message0</code>、<code>message1</code> 與 <code>message2</code> 。</p>
<h2 id="Q&amp;A">Q&amp;A</h2><hr>
<blockquote>
<p>Q : 如何查看 AWS SQS API ?</p>
</blockquote>
<p><img src="/images/aws/sqs/sqs009.png" alt="sqs009"></p>
<p>到 <a href="https://docs.aws.amazon.com/sdkfornet/v3/apidocs/Index.html" target="_blank" rel="external">AWS SDK for .NET API Reference</a> 官網，查詢 <code>Amazon.SQS</code> 的 <code>AmazonSQSClient</code>，所有 SQS 的 API 都是由這裡展開出來。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>FIFO queue 與 Standard queue 最大的差異在於 <code>SendMessage()</code> 的 DTO 必須包含 <code>MessageGroupId</code>，才能保證相同 <code>MessageGroupId</code> 有 FIFO 的 <code>先進先出</code> 特性</li>
<li><code>ReceiveMessage()</code> 之後還必須 <code>DeleteMessage()</code>，才能確保 <code>SendMessage()</code> 會收到下一筆 message，否則仍然會繼續收到目前的 message</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/SQSFIFOSample" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>, <a href="https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/welcome.html" target="_blank" rel="external">AWS SDK for .NET Developer Guide</a><br><a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>, <a href="https://aws.amazon.com/visualstudio/" target="_blank" rel="external">AWS Toolkit for Visual Studio</a><br><a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>, <a href="https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/sqs-apis-intro.html" target="_blank" rel="external">Messaging Using Amazon SQS</a><br><a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>, <a href="https://docs.aws.amazon.com/sdkfornet/v3/apidocs/Index.html" target="_blank" rel="external">AWS SDK for .NET API Reference</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 .NET Framework 與 AWS Toolkit for Visual Studio]]>
    
    </summary>
    
      <category term=".NET Framework" scheme="http://oomusou.io/tags/NET-Framework/"/>
    
      <category term="AWS" scheme="http://oomusou.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Function Composition (TypeScript vs. F#)]]></title>
    <link href="http://oomusou.io/fsharp/function-composition/"/>
    <id>http://oomusou.io/fsharp/function-composition/</id>
    <published>2018-03-13T12:23:43.000Z</published>
    <updated>2018-03-11T03:16:20.860Z</updated>
    <content type="html"><![CDATA[<p>數學的 <code>fog(x) = f(g(x))</code> 就是 FP 的 Function Composition，本文分別以 TypeScript 與 F# 實現。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.5.3<br>F# 4.1</p>
<h2 id="User_Story">User Story</h2><hr>
<p>定義 <code>f(x) = x + 1</code> 與 <code>g(x) = x * 2</code>，希望實作出 <code>fog(x) = f(g(x))</code></p>
<h2 id="Task">Task</h2><hr>
<p>分別以 TypeScript 與 F# 實作。</p>
<h2 id="TypeScript">TypeScript</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = x =&gt; x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> g = x =&gt; x * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> fog = x =&gt; f(g(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v = fog(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fog = x =&gt; f(g(x));</span><br></pre></td></tr></table></figure>
<p>使用 arrow function 實作，重點是仍然回傳的 <code>f(g(x))</code> 仍是 function。</p>
<h2 id="FSharp">FSharp</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f x = x + <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> g x = x * <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> fog = g &gt;&gt; f</span><br><span class="line">   </span><br><span class="line"><span class="keyword">let</span> v = fog <span class="number">10</span></span><br><span class="line">   </span><br><span class="line">printfn <span class="string">"%i"</span> v</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fog = g &gt;&gt; f</span><br></pre></td></tr></table></figure>
<p>以 <code>g &gt;&gt; f</code> 表示，很清楚以 <code>從左至右</code> 表示。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>至於 TypeScript 與 F# 何者語法較優，結果已經很明顯了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[同時以 TypeScript 與 F# 實作 Compose Function]]>
    
    </summary>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 F# 之 Function]]></title>
    <link href="http://oomusou.io/fsharp/function/"/>
    <id>http://oomusou.io/fsharp/function/</id>
    <published>2018-03-12T12:23:43.000Z</published>
    <updated>2018-03-10T11:11:15.692Z</updated>
    <content type="html"><![CDATA[<p>F# 身為 function first-first language，最迷人的當然就是 function 部分。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>.NET Core SDK 2.4.1<br>F# 4.1</p>
<h2 id="Syntax">Syntax</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f x = x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>由於 function 也被視為 value，因此同樣使用 <code>let</code> 定義 function</li>
<li><code>f</code> 為 function name，<code>x</code> 為 parameter，之間以 space 隔開</li>
<li><code>=</code> 右側為 function 定義</li>
<li>由於 pure function 要求要有回傳值，所以 <code>x + 1</code> 將被回傳，不用加上 <code>return</code></li>
<li>不必使用 <code>;</code> 結束</li>
</ul>
<h2 id="Scope">Scope</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list1 = [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> list1 = [] <span class="comment">// module : error, function : []</span></span><br><span class="line"><span class="keyword">let</span> function1 =</span><br><span class="line">   <span class="keyword">let</span> list1 = [<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>]</span><br><span class="line">   <span class="keyword">let</span> list1 = []</span><br><span class="line">   list1 <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<ul>
<li>當 value 名稱相同時，若在 module 會 compile error，若在 function 內則是 <code>後蓋前</code>，因此 <code>list1</code> 皆為 <code>[]</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list1 = [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> sumPlus x =</span><br><span class="line"><span class="comment">// OK: inner list1 hides the outer list1.</span></span><br><span class="line">   <span class="keyword">let</span> list1 = [<span class="number">1</span>; <span class="number">5</span>; <span class="number">10</span>]</span><br><span class="line">   x + List.sum list1</span><br></pre></td></tr></table></figure>
<ul>
<li>若 function 內的 value 與 function 外的 value 名稱相同，則 function 內的 value 會蓋掉 (shadow) function 外的變數，因此 <code>sumPlus</code> 的 <code>list</code> 為 <code>[1; 5; 10]</code></li>
</ul>
<blockquote>
<p>雖然 value 相同，F# 會啟動 shadow 機制，但實務上還是不建議重複使用 value 名稱，將造成維護上的困難</p>
</blockquote>
<h2 id="Parameter">Parameter</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f (x : int) = x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>亦可在 parameter 加上型別，必須使用 <code>()</code>，在 parameter 名稱之後加上 <code>:</code> 與 <code>型別</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f x = x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>儘管 paramter 不加上型別，因為 F# 的 Type Inference 機制，compiler 會自動由 function body 推導出 parameter 型別</li>
</ul>
<p><img src="/images/fsharp/function/function000.png" alt="function000"></p>
<p>只要將滑鼠移動到 parameter，就可看到其型別為 <code>int</code>。</p>
<blockquote>
<p>F# 的 parameter 雖然不用寫型別，但不代表 F# 沒有型別，而是因為其強悍的 Type Inference 機制，讓我們可以少打點字，閱讀上真的想知道型別，就靠 IDE 顯示型別</p>
<p>實務上建議 parameter 不用寫型別，使用 Type Inference 即可</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f x = (x, x)</span><br></pre></td></tr></table></figure>
<p>若 Type Inference 無法推導出型別，就視為 <code>泛型</code>。</p>
<p><img src="/images/fsharp/function/function001.png" alt="function001"></p>
<p>由於 Type Inference 無法由 function body 推導出型別，所以啟動 Automatic Generalization 機制，其中 <code>&#39;a</code> 為自動推導出的 <code>泛型</code>。</p>
<blockquote>
<p>在 F# 要使用 <code>泛型</code>，只要不寫型別，且無法推導出具體型別，就被視為 <code>泛型</code>，syntax 比 C# 精簡很多</p>
</blockquote>
<h2 id="Function_Body">Function Body</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cylinderVolume radius length =</span><br><span class="line">    <span class="comment">// Define a local value pi.</span></span><br><span class="line">    <span class="keyword">let</span> pi = <span class="number">3.14159</span></span><br><span class="line">    length * pi * radius * radius</span><br></pre></td></tr></table></figure>
<ul>
<li><p>若 function 內的程式碼不只一行時，則 <code>=</code> 換行之後並加以縮排，不必使用 <code>{}</code></p>
</li>
<li><p>Function 內的 value 的 scope 僅限於 function 內，因此 <code>pi</code> 只有 <code>cylinderVolume</code>  可讀取</p>
</li>
</ul>
<blockquote>
<p>C# 程式碼中，<code>{}</code> 佔了不少行數，F# 利用縮排取代 <code>{}</code>，程式碼顯的更清爽，且輸入 <code>tab</code> 速度也比 <code>{}</code> 還快</p>
</blockquote>
<h2 id="Return_Value">Return Value</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cylinderVolume radius length =</span><br><span class="line">    <span class="comment">// Define a local value pi.</span></span><br><span class="line">    <span class="keyword">let</span> pi = <span class="number">3.14159</span></span><br><span class="line">    length * pi * radius * radius</span><br></pre></td></tr></table></figure>
<ul>
<li>Function 最後一行的 expression 或 value 都視為 return 值，因此回傳值為 <code>length * pi * radius * radius</code> expression</li>
<li>Function 最後一行的 expression 或 value 的型別會被推導為 return type，因為 <code>pi</code> 為 <code>float</code>，所以 return type 被推導為 <code>float</code></li>
</ul>
<p><img src="/images/fsharp/function/function002.png" alt="function002"></p>
<p>只要將滑鼠移動到 function，就可看到其 return type 為 <code>float</code>。</p>
<blockquote>
<p>C# 程式碼中會到處充滿 <code>return</code>，F# 很聰明的用最後一行的 value 或 expression 當回傳值，讓程式碼更精簡</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cylinderVolume radius length : float =</span><br><span class="line">   <span class="comment">// Define a local value pi.</span></span><br><span class="line">   <span class="keyword">let</span> pi = <span class="number">3.14159</span></span><br><span class="line">   length * pi * radius * radius</span><br></pre></td></tr></table></figure>
<ul>
<li>亦可為 return type 加上型別，只要在最後加上 <code>:</code> 與 <code>型別</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cylinderVolume (radius : float) (length : float) : float =</span><br><span class="line">   <span class="comment">// Define a local value pi.</span></span><br><span class="line">   <span class="keyword">let</span> pi = <span class="number">3.14159</span></span><br><span class="line">   length * pi * radius * radius</span><br></pre></td></tr></table></figure>
<ul>
<li>亦可為 parameter 與 return type 全部加上型別</li>
</ul>
<blockquote>
<p>實務上建議不用替 parameter 與 return type 加上型別，使用 Type Inference 即可</p>
</blockquote>
<h2 id="Calling_a_Function">Calling a Function</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vol = cylinderVolume <span class="number">2.0</span> <span class="number">3.0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Argument 不需使用 <code>()</code>，只要與 function name 用 space 隔開即可</li>
<li>Argument 之間不需要 <code>,</code>，只需用 space 隔開即可</li>
</ul>
<blockquote>
<p>傳入 parameter 不需 <code>()</code> 與 <code>,</code>，減少打字時間</p>
</blockquote>
<h2 id="Currying">Currying</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> smallPipeRadius = <span class="number">2.0</span></span><br><span class="line"><span class="keyword">let</span> bigPipeRadius = <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> smallPipeVolume = cylinderVolume smallPipeRadius</span><br><span class="line"><span class="keyword">let</span> bigPipeVolume = cylinderVolume bigPipeRadius</span><br></pre></td></tr></table></figure>
<ul>
<li>若對 function 只傳入部分 parameter，將回傳一個新的 function，可將剩下的 parameter 繼續傳給新的 function，因此可先將 <code>radius</code> 傳入 <code>cylinderVolume</code>，產生<code>smallPipeVolume</code> 與 <code>bigPipeVolume</code> 兩個新的 function</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> length1 = <span class="number">30.0</span></span><br><span class="line"><span class="keyword">let</span> length2 = <span class="number">40.0</span></span><br><span class="line"><span class="keyword">let</span> smallPipeVol1 = smallPipeVolume length1</span><br><span class="line"><span class="keyword">let</span> smallPipeVol2 = smallPipeVolume length2</span><br><span class="line"><span class="keyword">let</span> bigPipeVol1 = bigPipeVolume length1</span><br><span class="line"><span class="keyword">let</span> bigPipeVol2 = bigPipeVolume length2</span><br></pre></td></tr></table></figure>
<ul>
<li>再傳入 <code>cylinerVolume</code> 剩餘的參數 <code>length</code> 給 <code>smallPipeVolume</code> 與  <code>bigPipeVolume</code>，即可得到與  <code>cylinderVolume</code> 相同的結果</li>
</ul>
<blockquote>
<p>Q : 為什麼要使用 Currying ?</p>
</blockquote>
<p>傳統 function 必須在所有 argument 都準備好後，才可以呼叫 function，且 function 是立即執行。</p>
<p>若使用 currying，可分階段將 argument 傳入 function，並回傳新的 function，直到所有 argument 都具備後，function 才會真正執行。</p>
<blockquote>
<p>Q : 實務上何時會使用 Currying ?</p>
</blockquote>
<ol>
<li>Argument 無法一次提供，需要逐次提供時</li>
<li>Function 的某些重要 argument 先由底層 library 提供，並傳回新的 function 給 client，client 只要提供剩下的參數即可</li>
<li>實現 Decorator Pattern</li>
</ol>
<h2 id="Recursive_Function">Recursive Function</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> fib n = <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> fib (n - <span class="number">1</span>) + fib (n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>若在 function body 需要呼叫 function 本身，在 function name 前面加上 <code>rec</code>，表示此為 recursive function</li>
</ul>
<blockquote>
<p>有些演算法的數學，就是使用 recursive 表示，若要改用 loop 改寫反而有難度，若直接用 recursive 表示，不僅能忠實呈現演算法，也比較容易 implement</p>
</blockquote>
<h2 id="Function_Value">Function Value</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apply1 (transform : int -&gt; int ) y = transform y</span><br></pre></td></tr></table></figure>
<ul>
<li>FP 的核心概念就是將 function 當成 value 看，稱為 Function Value。</li>
<li>除了與 value 一樣使用 <code>let</code> 定義 function 外，也跟 value 一樣，可以將 function 當成 function 的 parameter，因此 <code>apply</code> 為 function， <code>transform</code> 為 <code>apply1</code> 的 parameter，但 <code>transform</code> 為 function，其 type 為 <code>int -&gt; int</code>，此為 <code>transfom</code> 的 input 為 <code>int</code>，output 為 <code>int</code></li>
<li>F# 以 <code>-&gt;</code> 定義 function 的 signature type</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> increment x = x + <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> result1 = apply1 increment <span class="number">100</span></span><br></pre></td></tr></table></figure>
<ul>
<li>因此可定義 <code>increment</code> function，再將 <code>increment</code> 傳入 <code>apply</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apply2 (f: int -&gt; int -&gt; int) x y = f x y</span><br><span class="line"><span class="keyword">let</span> mul x y = x * y</span><br><span class="line"><span class="keyword">let</span> result2 = apply2 mul <span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<ul>
<li>當 function 有多個 parameter 時，其型別表示為多個 <code>-&gt;</code> 串起來，如 <code>let mul x y = x * y</code>，則 <code>mul</code> 的型別為  <code>int -&gt; int -&gt; int</code></li>
</ul>
<blockquote>
<p>Q : 為什麼多 paramter 要以 <code>-&gt; … -&gt;</code> 表示</p>
</blockquote>
<p>別忘了 F# 的 Currying，如 <code>mul</code> 相當於以下寫法</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mul2 = mul <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> mul2x3 = mul2 <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>所以多個 parameter 就相當於 1 個 parameter 的 function 連續呼叫多次，因此相當於 <code>-&gt;</code> 串起來多次。</p>
<h2 id="Lambda_Expression">Lambda Expression</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result3 = apply1 (<span class="keyword">fun</span> x -&gt; x + <span class="number">1</span>) <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> result4 = apply2 (<span class="keyword">fun</span> x y -&gt; x * y ) <span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Function 的 parameter 可以傳入 function，除了使用 <code>let</code> 先定義好 function 外，也可以直接在 arguemtn 以 unnamed function 或 anonymous function 表示，這就是 Lambda Expression</li>
<li>Lambda Expression 以 <code>fun</code> 開頭，使用 <code>-&gt;</code> 取代 <code>=</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> increment = <span class="keyword">fun</span> x -&gt; x + <span class="number">1</span> <span class="comment">// let increment x = x + 1 is better</span></span><br><span class="line"><span class="keyword">let</span> result1 = apply1 increment <span class="number">100</span></span><br></pre></td></tr></table></figure>
<ul>
<li>就語法而言，的確可以 <code>let</code> 配合 <code>fun</code> ，但實務不建議這種寫法，因為 <code>increment</code> 的 parameter 必須由 <code>fun</code> 才能看出，較不直覺</li>
<li>建議 <code>let</code> 與 <code>fun</code> 不要混用，將 <code>fun</code> 用在直接傳入 function 的 argument 即可</li>
</ul>
<h2 id="Function_Composition">Function Composition</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> function1 x = x + <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> function2 x = x * <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> h = function1 &gt;&gt; function2</span><br><span class="line"><span class="keyword">let</span> result5 = h <span class="number">100</span></span><br></pre></td></tr></table></figure>
<ul>
<li>若有兩個 function，需求是先執行 <code>function1</code> ，並將 <code>function1</code> 的結果傳入 <code>function2</code>，可使用 <code>&gt;&gt;</code> 將兩個 function 組合成新的 function</li>
</ul>
<blockquote>
<p>在數學，我們常常有 fog(x) = f(g(x))，若以 F#，可使用 <code>let fog = g &gt;&gt; f</code> 表示，重點還是 <code>從左到右</code>，可讀性更數學更高</p>
</blockquote>
<h2 id="Pipelining">Pipelining</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">100</span> |&gt; function1 |&gt; function2</span><br></pre></td></tr></table></figure>
<ul>
<li>將 <code>100</code> 傳入 <code>function1</code>，並將結果傳入 <code>function2</code></li>
</ul>
<blockquote>
<p>在 imperative language，我們會寫成 <code>function2(function1(100))</code>，只要層數夠多，程式碼可讀性就不高，而且還必須 <code>從右到左</code>，但使用 pipelining 之後，無論幾層都很容易閱讀，並且還是 <code>從左到右</code>。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文介紹了 F# 所有的 function 功能，一些看似直覺的如 Currying、Function Composition 與 Pipelineing ….，在 F# 寫法都很直覺，但在大部分非 FP 語言實現都有難度，這就是 F# 可愛的地方</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/" target="_blank" rel="external">F#</a>, <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/functions/" target="_blank" rel="external">Functions</a></p>
]]></content>
    <summary type="html">
    <![CDATA[強悍的 FP 支援令人著迷]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Ubuntu 安裝 VS Code ?]]></title>
    <link href="http://oomusou.io/vscode/ubuntu/"/>
    <id>http://oomusou.io/vscode/ubuntu/</id>
    <published>2018-03-11T12:23:43.000Z</published>
    <updated>2018-03-08T10:35:17.029Z</updated>
    <content type="html"><![CDATA[<p>由於 VS Code 本來就是跨平台，因此也可以在 Ubuntu 使用 VS Code。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Ubuntu 16.04<br>VS Code 1.21.0</p>
<h2 id="Download">Download</h2><hr>
<p><img src="/images/vscode/ubuntu/ubuntu000.png" alt="ubuntu000"></p>
<ol>
<li>到 <a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code</a> 官網，選擇 <code>deb</code> 格式下載。</li>
</ol>
<p><img src="/images/vscode/ubuntu/ubuntu001.png" alt="ubuntu001"></p>
<ol>
<li>選擇將檔案存下來到 <code>~/Downloads</code> 目錄</li>
</ol>
<h2 id="安裝_deb">安裝 deb</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd Downloads</span><br><span class="line">$ sudo dpkg -<span class="tag">i</span> code_1.<span class="number">21.0</span>-<span class="number">1520420608</span>_amd64<span class="class">.deb</span></span><br><span class="line">$ code</span><br></pre></td></tr></table></figure>
<p>使用 dpkg 安裝 <code>deb</code>。</p>
<ul>
<li><strong>-i</strong> : <code>i</code> stall，安裝 <code>deb</code></li>
</ul>
<p>使用 <code>code</code> 執行 VS Code。</p>
<p><img src="/images/vscode/ubuntu/ubuntu002.png" alt="ubuntu002"></p>
<ol>
<li>輸入 <code>cd Downloads</code> 將目前目錄切到 <code>Downloads</code>，因為 Firefox 將 <code>deb</code> 下載到 <code>~/Downloads</code> 目錄下</li>
<li>輸入 <code>sudo dpkg -i code_1.21.0-1520420608_amd64.deb</code> 安裝 <code>deb</code></li>
<li>輸入 <code>code</code> 執行 VS Code</li>
</ol>
<p><img src="/images/vscode/ubuntu/ubuntu003.png" alt="ubuntu003"></p>
<p>VS Code 成功執行在 Ubuntu。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>VS Code 在 Ubuntu 安裝稍微不一樣，需要使用 <code>dpkg</code> 安裝 <code>deb</code> 格式</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Ubuntu 也可以安裝 VS Code]]>
    
    </summary>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
      <category term="VS Code" scheme="http://oomusou.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 VS Code 建立 .NET Core 開發環境 ?]]></title>
    <link href="http://oomusou.io/vscode/netcore/"/>
    <id>http://oomusou.io/vscode/netcore/</id>
    <published>2018-03-10T12:23:43.000Z</published>
    <updated>2018-03-08T09:11:37.670Z</updated>
    <content type="html"><![CDATA[<p>VS Code 是 Microsoft 這幾年最成功的 open source project，也是最多人使用的 Angular 與 .NET Core 開發工具。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.4<br>VS Code 1.21.0</p>
<h2 id="Download">Download</h2><hr>
<p><img src="/images/vscode/netcore/setup000.png" alt="setup000"></p>
<p>到 <a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code</a> 官網，選擇你的平台下載。</p>
<blockquote>
<p>選擇 <code>Stable</code>，不要選擇 <code>Insiders</code> </p>
<p><code>Insiders</code> 是測試版，有可能會當機   </p>
</blockquote>
<h2 id="Extension">Extension</h2><hr>
<p><img src="/images/vscode/netcore/setup001.png" alt="setup001"></p>
<ol>
<li>按下左側 <code>Extension</code> icon</li>
<li>輸入 <code>.NET Core Extension Pack</code></li>
<li>選擇 Will 保哥所整理 .NET Core Extension Pack</li>
</ol>
<blockquote>
<p>由於 VS Code 為 open source project，當然可以自行選擇各種 extension 使用，此為保哥所整理的好用 extension，基本上安裝保哥的版本就已經足夠使用</p>
</blockquote>
<h2 id="Hello_World">Hello World</h2><hr>
<h3 id="建立專案">建立專案</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>new</strong> : 建立新專案</li>
<li><strong>console</strong> : 建立 console 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，表建立在 <code>MyConsole</code> 目錄下</li>
</ul>
<p><img src="/images/vscode/netcore/setup002.png" alt="setup002"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 將 console 類型專案建立在 <code>MyConsole</code> 目錄下</li>
<li>.NET Core SDK 開始建立專案所需的檔案</li>
<li>自動下載所需要的 NuGet package</li>
</ol>
<h3 id="VS_Code_開啟專案">VS Code 開啟專案</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyConsole</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接 <code>開啟目錄</code>名稱。</p>
<p><img src="/images/vscode/netcore/setup003.png" alt="setup003"></p>
<ol>
<li>輸入 <code>code MyConsole</code> 要求 VS Code 直接開啟 <code>MyConsole</code> 目錄</li>
</ol>
<p><img src="/images/vscode/netcore/setup004.png" alt="setup004"></p>
<ol>
<li>第一次使用 VS Code 開啟 .NET Core 專案，會要求建立 <code>.vscode</code> 設定檔目錄，按 <code>Yes</code> 繼續</li>
</ol>
<p><img src="/images/vscode/netcore/setup005.png" alt="setup005"></p>
<ol>
<li><code>.vscode</code> 被 VS Code 自動建立</li>
<li>點選 <code>Program.cs</code>，VS Code 已經能辨識出 C#，並支持語法變色與 Intellisense</li>
</ol>
<h3 id="編譯_-NET_Core">編譯 .NET Core</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>dotnet build</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>build</strong> : 編譯專案</li>
</ul>
<p><img src="/images/vscode/netcore/setup006.png" alt="setup006"></p>
<ol>
<li>按熱鍵 Ctrl + ` 開啟內建的 terminal，輸入 dotnet build 編譯目前專案</li>
<li>.NET Core SDK 將編譯成 <code>MyConsole.dll</code>，將路徑複製下來</li>
</ol>
<h3 id="執行_-NET_Core">執行 .NET Core</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="regexp">/Users/</span>oomusou<span class="regexp">/Code/</span>CSharp<span class="regexp">/MyConsole/</span>bin<span class="regexp">/Debug/</span>netcorea</span><br><span class="line">pp2.<span class="number">0</span><span class="regexp">/MyConsole.dll</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet</code> 執行 <code>dll</code>。</p>
<p><img src="/images/vscode/netcore/setup007.png" alt="setup007"></p>
<ol>
<li>輸入 <code>dotnet</code>，並將剛剛複製的 <code>dll</code> 路徑貼上</li>
<li>顯示<code>Hello World!</code></li>
</ol>
<p>目前已經可以成功在 VS Code 編譯 C# 並執行之。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>VS Code 是個輕量的 .NET Core 開發環境，配合 .NET Core SDK，你可以在 macOS 寫 C#</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 macOS 建立輕量級的 .NET Core 開發環境]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="VS Code" scheme="http://oomusou.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Angular 實現 State Pattern ?]]></title>
    <link href="http://oomusou.io/design-pattern/state/"/>
    <id>http://oomusou.io/design-pattern/state/</id>
    <published>2018-03-09T12:23:43.000Z</published>
    <updated>2018-03-08T02:23:22.038Z</updated>
    <content type="html"><![CDATA[<p>State Pattern 是 OOP 中著名的 Design Pattern，當 method 的行為會隨著 field 而改變時特別有效。在本文中，我們將以 Angular 與 TypeScript 實現。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Node.js 8.9.4<br>Angular CLI 1.7.2<br>TypeScript 2.5.3<br>Angular 5.2.7</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/design-pattern/state/state000.png" alt="state000"></p>
<ul>
<li>模擬 iPhone 的 <code>Home</code> 鍵動作</li>
<li><code>Home</code> 雖然只有一個按鍵，但在不同的情境下有不同的功能<ul>
<li>當在 <code>Locked</code> 下，可以 <code>Unlocked</code></li>
<li>當在 <code>Unlocked</code> 下，可以進入 <code>Home</code></li>
<li>當在 <code>App</code> 開啟下，可以回到 <code>Home</code></li>
<li>當在 <code>Desktop</code> 下，可以切換 <code>Home</code></li>
</ul>
</li>
</ul>
<h2 id="Task">Task</h2><hr>
<ul>
<li>因為 <code>Home</code> 有在不同情境下有不同的功能，勢必有很多 <code>if else</code> 判斷情境而切換功能</li>
<li>先用 <code>if else</code> 寫法完成，最後再重構成 State Pattern</li>
</ul>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>State Pattern</p>
<p>當 method 的行為會隨著 field 而改變時，將 <code>if</code> 改用 <code>state</code> 物件表示</p>
<p>將 <code>外部 nested if</code> 改由 <code>內部決定</code> 的 <code>物件串列</code> 表示，藉以消除 <code>if</code> </p>
</blockquote>
<p><img src="/images/design-pattern/state/state015.svg" alt="state015"></p>
<p>將 <code>if</code> 要處理的邏輯包在每個 state 內，但不包含 <code>if</code>。</p>
<p><img src="/images/design-pattern/state/state012.svg" alt="state012"></p>
<ul>
<li><strong>Client</strong> : <code>Context</code> 的 user，實務上可能是 component 或 controller</li>
<li><strong>Context</strong> : 根據 field 的不同，<code>request()</code> 會有不同功能，實務上可能是 service</li>
<li><strong>State</strong> : 定義 <code>ConcreteState</code> 的 interface，只有 <code>handle()</code> ，負責封裝 <code>if 要處理的邏輯</code></li>
<li><strong>ConcreteState</strong> : 將 <code>if 要處理的邏輯</code> 封裝成物件</li>
</ul>
<p>一個 <code>if</code> 要處理的邏輯放在一個 <code>ConcreteState</code> 物件內，並根據 state diagram 指定下一個 state。</p>
<p>由於 method 的行為會根據 field (state) 改變，因此稱為 <code>State</code>  Pattern。</p>
<p><strong>適用時機</strong></p>
<ul>
<li>深層 <code>nested if</code></li>
<li>在 design-time 就可決定 <code>if</code> 組合 (以 state diagram 描述)</li>
<li>當 method 的行為會隨著 field 而改變時</li>
</ul>
<p><strong>優點</strong></p>
<ul>
<li>每個 <code>if 要處理的邏輯</code> 使用一個 class，符合 <code>單一職責原則</code></li>
<li>將來若有新的 <code>if 要處理的邏輯</code>，不用修改 service，而是新增 <code>ConcreState</code>，符合 <code>開放封閉原則</code></li>
<li>Client 與 <code>if 判斷</code> 解耦合，兩者都僅相依於 interface，符合 <code>依賴反轉原則</code></li>
<li>可使用 state diagram 清楚描述狀態轉變</li>
</ul>
<p><strong>缺點</strong> </p>
<ul>
<li>若邏輯複雜，state class 可能會很多檔案，但還是比單一檔案 <code>nested if</code> 好維護</li>
</ul>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/design-pattern/state/state013.svg" alt="state013"></p>
<ul>
<li>只有在 <code>Unlock</code>、<code>App</code> 與 <code>Desktop</code> 才能使用 <code>Home</code> 鍵</li>
<li>只有在 <code>Home</code> 與 <code>Desktop</code> 才能切到 <code>App</code></li>
<li>只有 <code>Home</code> 才能切到 <code>Desktop</code></li>
</ul>
<p><img src="/images/design-pattern/state/state002.svg" alt="state002"></p>
<ul>
<li><code>AppComponent</code> 相當於 <code>Client</code></li>
<li><code>PhoneContext</code> 相當於 <code>Context</code>，<code>AppComponent</code> 負責注入 <code>PhoneContext</code>，無論怎麼重構，<code>PhoneContext</code> 都是穩定的，不會導致 <code>AppComponent</code> 修改</li>
<li><code>PhoneStateInterface</code> 相當於 <code>State</code> interface，訂出所有 state 標準</li>
<li><code>LockedState</code> 及其他 state 都是 <code>ConcreteState</code>，為實際 <code>if</code> 所處理的邏輯</li>
</ul>
<h2 id="Implmentation">Implmentation</h2><hr>
<p><strong>app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onHomeClick()"</span>&gt;</span>Home<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onOpenAppClick()"</span>&gt;</span>Open App<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> (<span class="attribute">click</span>)=<span class="value">"onSwitchDesktopClick()"</span>&gt;</span>Switch Desktop<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123; message &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>在 HTML 提供 <code>Home</code>、<code>Open App</code> 與 <code>Switch Desktop</code> 3 個 button，任何訊息將顯示在 <code>message</code>。</p>
<h3 id="If_Else">If Else</h3><p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  <span class="keyword">private</span> state = <span class="string">'Locked'</span>;</span><br><span class="line">  message = <span class="string">'The phone is locked'</span>;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Locked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Unlocked'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is unlocked'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Unlocked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span> || <span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'App'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is opening app'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Desktop'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is switching desktop'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">onHomeClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Locked'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Unlocked'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is unlocked'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Unlocked'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>Home</code> 鍵，由於 <code>Home</code> 在不同情境有不同功能，因此分成 <code>Locked</code>、<code>Unlocked</code>、<code>Home</code>、<code>App</code> 與 <code>Desktop</code> 5 個 state，使用 <code>if</code> 判斷當目前什麼 state 下，要做什麼事情，以及即將切到什麼 state。</p>
<p>31 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onOpenAppClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span> || <span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'App'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is opening app'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>開啟 App</code>，根據 state diagram，由於不可能在 <code>Locked</code>、<code>Unlocked</code> 與 <code>App</code> state 下開啟 app，將顯示 <code>The operation is not allowed</code>，並切到特別建立的 <code>Null</code> state。</p>
<p>也就是只有 <code>Home</code> 與 <code>Desktop</code> state 下才能開啟 app，因此特別使用 <code>if else</code> 做判斷。</p>
<p>41 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onSwitchDesktopClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Desktop'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is switching desktop'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模擬 <code>切換桌面</code>，根據 state diagram，只能在 <code>Home</code> state 下切換桌面，因此需要 <code>if else</code> 做判斷。</p>
<blockquote>
<p>以功能面來說，目前已經完全需求，只是程式碼含有眾多的 code smell，尚無法達成 production code 的標準，需要繼續重構。</p>
</blockquote>
<h3 id="Unit_Test">Unit Test</h3><p>在重構之前，必須要有測試保護，才能確保沒把原本的商業邏輯重構壞，因此我們先準備好 <code>AppComponent</code> 的 Unit Test，確保每個 <code>if else</code> 的 path 都有測到。</p>
<p><strong>app.component.spec.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ComponentFixture, TestBed &#125; from <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DebugElement &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'AppComponent'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> fixture: ComponentFixture&lt;AppComponent&gt;;</span><br><span class="line">  <span class="keyword">let</span> appComponent: AppComponent;</span><br><span class="line">  <span class="keyword">let</span> debugElement: DebugElement;</span><br><span class="line">  <span class="keyword">let</span> htmlElement: HTMLElement;</span><br><span class="line">  <span class="keyword">let</span> target: AppComponent;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">    appComponent = fixture.componentInstance;</span><br><span class="line">    debugElement = fixture.debugElement;</span><br><span class="line">    htmlElement = debugElement.nativeElement;</span><br><span class="line">    target = <span class="keyword">new</span> AppComponent();</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should create the app'</span>, () =&gt; &#123;</span><br><span class="line">    expect(appComponent).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`一開始應顯示 <span class="string">'The phone is locked'</span>`, () =&gt; &#123;</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is locked'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">1</span> 次按下 Home 應顯示 <span class="string">'The phone is unlocked'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is unlocked'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">2</span> 次按下 Home 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">3</span> 次按下 Home 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">2</span> 次按下 Home 與第一次按下 Open App 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onOpenAppClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is opening app'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當按下 Open App 再按下 Home 應顯示 <span class="string">'The phone is at home'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onOpenAppClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">2</span> 次按下 Home 與第一次按下 Switch Desktop 應顯示 <span class="string">'The phone is switching desktop'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onSwitchDesktopClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is switching desktop'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當按下 Switch Desktop 再按下 Home 應顯示 <span class="string">'The phone is switching desktop'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onSwitchDesktopClick();</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The phone is at home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">1</span> 次按下 Home 再按下 Open App 應顯示 <span class="string">'The operation is not allowed'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onOpenAppClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The operation is not allowed'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(`當第 <span class="number">1</span> 次按下 Home 再按下 Switch Desktop 應顯示 <span class="string">'The operation is not allowed'</span>`, () =&gt; &#123;</span><br><span class="line">    appComponent.onHomeClick();</span><br><span class="line">    appComponent.onSwitchDesktopClick();</span><br><span class="line">    expect(appComponent.message).toBe(<span class="string">'The operation is not allowed'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由於本文重點不是在講 Unit Test，因此就不浪費篇幅解釋以上程式碼。</p>
<p><img src="/images/design-pattern/state/state001.png" alt="state001"></p>
<p>執行 Wallaby.js 單元測試，確保 <code>AppComponent</code> 所有的 <code>if else</code> 的 path 都有測到，也就是 coverage 是 <code>100%</code>，接下來的重構將以此 Unit Test 為標準，無論怎麼重構，都必須確保 11 個測試案例 <code>綠燈</code>。</p>
<blockquote>
<p>實務上若 TDD 有困難，其實可以先用 <code>if else</code> 寫一段 <code>比較髒</code> 的 production code，最少功能都符合需求，因為 <code>比較髒</code>，所以一定得重構，在重構之前補上 Unit Test，重點是 coverage 是 <code>100%</code>，然後不斷的重構維持 Unit Test 都是 <code>綠燈</code>，無論是先寫測試或是後寫測試，但要寫 Unit Test 與重構的目標都是一致的，只是先寫還是後寫而已。</p>
<p>若發現 <code>比較髒</code> 的 production code 已經無法寫出 Unit Test，就必須回頭修改 production code 寫法，那表示你的 production code 已經違反 SOLID 原則，導致 Unit Test 寫不出來。</p>
</blockquote>
<h3 id="Refactoring">Refactoring</h3><p>目前這段 code 至少含有以下 3 項 code smell : </p>
<ol>
<li>使用 <code>else</code> 造成 <code>nested if</code></li>
<li><code>state</code> 與 <code>message</code> 目前都以 <code>string</code> hardcode</li>
<li><code>onHomeClick()</code> 眾多 <code>if else</code> 嚴重違反 <code>單一職責原則</code> 與 <code>開放封閉原則</code></li>
</ol>
<p>我們將針對這 3 點加以重構。</p>
<h3 id="Guard_Clause">Guard Clause</h3><p>重構目標 : 使用 Guard Clause 取代 <code>else</code>。</p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  <span class="keyword">private</span> state = <span class="string">'Locked'</span>;</span><br><span class="line">  message = <span class="string">'The phone is locked'</span>;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Locked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Unlocked'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is unlocked'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Unlocked'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span> || <span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'App'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is opening app'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Home'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'Desktop'</span>;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'The phone is switching desktop'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'The operation is not allowed'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>25 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'App'</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'Desktop'</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.state = <span class="string">'Home'</span>;</span><br><span class="line"><span class="keyword">this</span>.message = <span class="string">'The phone is at home'</span>;</span><br></pre></td></tr></table></figure>
<p>以 <code>return</code> 取代 <code>else</code>，換來 <code>if</code> 全部壓平在第一層，避免寫出 <code>nested if</code>。</p>
<p>最後一行即為預設值。</p>
<p>其他皆以這種方式重構。</p>
<h3 id="Enum">Enum</h3><p>重構目標 : 使用 <code>enum</code> 取代 <code>string</code> hardcode。</p>
<p><strong>message.enum.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> MessageEnum &#123;</span><br><span class="line">  Locked   = <span class="string">'The phone is locked'</span>,</span><br><span class="line">  Unlocked = <span class="string">'The phone is unlocked'</span>,</span><br><span class="line">  Home     = <span class="string">'The phone is at home'</span>,</span><br><span class="line">  App      = <span class="string">'The phone is opening app'</span>,</span><br><span class="line">  Desktop  = <span class="string">'The phone is switching desktop'</span>,</span><br><span class="line">  Null     = <span class="string">'The operation is not allowed'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前 <code>state</code> 與 <code>message</code> 都使用 <code>string</code> hardcode，使用上雖然直覺簡單，但有兩個致命缺點 :</p>
<ol>
<li><code>message</code> 到處散佈，將來若 <code>message</code> 修改，要改的地方很多</li>
<li><code>state</code> 使用 <code>string</code>，不僅容易 typo，也無法受到 compiler 保護</li>
</ol>
<p>比較好的方式是 <code>state</code> 由 <code>string</code> 改由 <code>enum</code>，如此不會 typo，也受到 compiler 保護。</p>
<blockquote>
<p>一般語言由於 <code>enum</code> 傳統只能代表 <code>int</code>，因此還掉搭配其他 collection，如 ES6  的 <code>Map</code> 或 C# 的 <code>Dictionary</code> ，但 TypeScript 2.4 的 <code>enum</code> 可代表 <code>string</code>，因此可省掉 <code>Map</code> 或 <code>Dictionary</code>，直接使用 <code>enum</code> 搞定。</p>
</blockquote>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  message = MessageEnum.Locked;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Locked) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Unlocked;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Unlocked) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.App) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Desktop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = MessageEnum.Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Home || <span class="keyword">this</span>.message === MessageEnum.Desktop) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.App;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = MessageEnum.Null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Home) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = MessageEnum.Desktop;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = MessageEnum.Null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = MessageEnum.Locked;</span><br></pre></td></tr></table></figure>
<p>將 <code>state</code> 拿掉，只留下 <code>message</code>。</p>
<p>13 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.message === MessageEnum.Locked) &#123;</span><br><span class="line">  <span class="keyword">this</span>.message = MessageEnum.Unlocked;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本判斷 <code>state</code>，直接判斷 <code>message</code> 即可。</p>
<p>其他以此類推。</p>
<h3 id="State_Pattern">State Pattern</h3><p>重構目標 : 使用 State Pattern 實現 <code>單一職責原則</code> 與 <code>開放封閉原則</code>。</p>
<p><strong>AppComponent</strong></p>
<p><img src="/images/design-pattern/state/state010.svg" alt="state010"></p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneContext &#125; from <span class="string">'./phone.context'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; from <span class="string">'./AppState'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DesktopState &#125; from <span class="string">'./DesktopState'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  message = MessageEnum.Locked;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private phoneContext: PhoneContext) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onHomeClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.request();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onOpenAppClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.setState(<span class="keyword">new</span> AppState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSwitchDesktopClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.setState(<span class="keyword">new</span> DesktopState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private phoneContext: PhoneContext) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 DI 依賴注入 <code>PhoneContext</code>。</p>
<p>18 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onHomeClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.request();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <code>onHomeClick()</code> 只剩下一行 <code>Context.request()</code>。</p>
<blockquote>
<p>我們可以發現 <code>onHomeClick()</code> 的 <code>if</code> 都不見了，也就是說，State Pattern 用多個檔案的 class 去換一個檔案的 <code>if</code> 。</p>
<ul>
<li>由於多個檔案，一個 class 代表一個 <code>if</code> ，符合 <code>單一職責原則</code></li>
<li>將來若有新的 state，只要根據 interface 新增 class，不用修改原來的 code，符合 <code>開放封閉原則</code></li>
</ul>
</blockquote>
<p>22 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onOpenAppClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.message = <span class="keyword">this</span>.phoneContext.setState(<span class="keyword">new</span> AppState());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本需要在 client 判斷是否可以切換 state，現在只管新增 state 即可，不用再用 <code>if</code> 判斷。</p>
<p><strong>PhoneContext</strong></p>
<p><img src="/images/design-pattern/state/state003.svg" alt="state003"></p>
<p><strong>phone.context.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Inject, Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterfaceToken &#125; from <span class="string">'./interface.token'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PhoneContext &#123;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(@Inject(PhoneStateInterfaceToken) private state: PhoneStateInterface) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.state.handle();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">if</span> (!state.chkContext(<span class="keyword">this</span>.state)) &#123;</span><br><span class="line">      <span class="keyword">return</span> MessageEnum.Null;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">      <span class="keyword">return</span> state.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(@Inject(PhoneStateInterfaceToken) private state: PhoneStateInterface) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即將使用 State Pattern，使用 DI 依賴注入 <code>state</code>，注意其型別為 <code>PhoneStateInterface</code>。</p>
<p>12 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request(): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="keyword">this</span>.state.handle();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.state.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>request()</code> 為原本 State Pattern 所設計的 method。</p>
<p>執行目前 <code>state</code> 的 <code>handle()</code>，此為目前 state 主要的商業邏輯所在。</p>
<p><code>handle()</code> 將回傳下一個 <code>state</code>。</p>
<p><code>state.getMessage()</code> 將回傳目前 <code>state</code> 要顯示的訊息。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">if</span> (!state.chkContext(<span class="keyword">this</span>.state)) &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Null;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>setState()</code> 並非 State Pattern 所設計的 method，目前因為 <code>Open App</code> 與 <code>Switch Desktop</code> 需要動態切換 state，因而衍生出動態設定 state 的需求。</p>
<p>由於不是每個 state 都能任意切換到其他 state，因此特別在每個 state 設計 <code>chkContext()</code>，判斷是否允許切換 state。</p>
<blockquote>
<p><code>Context.setState()</code> 與 <code>State.chkContext()</code> 並非原始 State Pattern 所設計，為了能動態切換 state，實務上經常會有此需求</p>
</blockquote>
<p><strong>PhoneStateInterface</strong></p>
<p><img src="/images/design-pattern/state/state004.svg" alt="state004"></p>
<p><strong>phone.state.interface.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> PhoneStateInterface </span>&#123;</span><br><span class="line">  handle(): PhoneStateInterface;  </span><br><span class="line">  getMessage(): MessageEnum;</span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 State Pattern 的 interface ：</p>
<ul>
<li><code>handle()</code> : 為 State Pattern 所設計的 method，專門放每個 <code>if</code> 的邏輯</li>
<li><code>getMessage()</code> : 回傳目前 state 的 message，非 State Pattern 所設計，為根據目前需求所設計的 method</li>
<li><code>chkContext()</code> : 檢查目前 state 是否可以允許切換到下一個 state，非 State Pattern 所設計，為根據目前需求所設計的 method</li>
</ul>
<p><strong>LockedState</strong></p>
<p><img src="/images/design-pattern/state/state005.svg" alt="state005"></p>
<p>接下來要將每個 state 的 <code>if</code> 搬進 class，實現 <code>單一職責原則</code> 與 <code>開放封閉原則</code>。</p>
<p><strong>locked.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UnlockedState &#125; from <span class="string">'./UnlockedState'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LockedState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UnlockedState();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Locked;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handle(): PhoneStateInterface &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> UnlockedState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將原本 <code>Locked</code> state 的 code 搬到 <code>handle()</code>，最後回傳下一個 state，其型別為 <code>PhoneStateInterface</code>。</p>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getMessage(): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">return</span> MessageEnum.Locked;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳目前 state 的 message，注意其型別為 <code>MessageEnum</code>，而不是 <code>string</code>。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>檢查目前 state 是否進進入 <code>Locked</code> state，因為毫無限制，傳回 <code>true</code> 即可。</p>
<p><strong>UnlockedState</strong></p>
<p><img src="/images/design-pattern/state/state006.svg" alt="state006"></p>
<p><strong>unlocked.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./HomeState'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UnlockedState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Unlocked;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage() === MessageEnum.Locked;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.getMessage() === MessageEnum.Locked;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 state diagram，只有當 <code>Locked</code> state 才能進入 <code>Unlocked</code> state。</p>
<p><strong>HomeState</strong></p>
<p><img src="/images/design-pattern/state/state007.svg" alt="state007"></p>
<p><strong>home.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomeState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>與 <code>LockedState</code> 類似，就不再贅述。</p>
<p><strong>AppState</strong></p>
<p><img src="/images/design-pattern/state/state008.svg" alt="state008"></p>
<p><strong>app.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./HomeState'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.App;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.getMessage() === MessageEnum.Home) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (state.getMessage() === MessageEnum.Desktop) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (state.getMessage() === MessageEnum.Home) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.getMessage() === MessageEnum.Desktop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 state diagram，只有 <code>Home</code> 與 <code>Desktop</code> state 才能進入 <code>App</code> state。</p>
<p><strong>DesktopState</strong></p>
<p><img src="/images/design-pattern/state/state009.svg" alt="state009"></p>
<p><strong>desktop.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./home.state'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DesktopState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Desktop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.getMessage() === MessageEnum.Home) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 state diagram，只有 <code>Home</code> state 才能進入 <code>Desktop</code> state。</p>
<h3 id="Refactoring-1">Refactoring</h3><p><strong>PhoneContext</strong></p>
<p><img src="/images/design-pattern/state/state003.svg" alt="state003"></p>
<p><strong>phone.context.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Inject, Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterfaceToken &#125; from <span class="string">'./interface.token'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PhoneContext &#123;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(@Inject(PhoneStateInterfaceToken) private state: PhoneStateInterface) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.state.handle();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">const</span> setCurrentState = (currentState) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = currentState;</span><br><span class="line">      <span class="keyword">return</span> currentState.getMessage();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !state.chkContext(<span class="keyword">this</span>.state) ? MessageEnum.Null :</span><br><span class="line">           setCurrentState(state);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setState(state: PhoneStateInterface): MessageEnum &#123;</span><br><span class="line">  <span class="keyword">const</span> setCurrentState = (currentState) =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = currentState;</span><br><span class="line">    <span class="keyword">return</span> currentState.getMessage();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> !state.chkContext(<span class="keyword">this</span>.state) ? MessageEnum.Null :</span><br><span class="line">          setCurrentState(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將原本的 <code>if else</code> 重構成 <code>?:</code> 。</p>
<p>尤其原本 <code>else</code> 的部分抽成 function，讓可讀性更高。</p>
<p><strong>AppState</strong></p>
<p><img src="/images/design-pattern/state/state008.svg" alt="state008"></p>
<p><strong>app.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./home.state'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.App;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage() === MessageEnum.Home ? <span class="literal">true</span> :</span><br><span class="line">           state.getMessage() === MessageEnum.Desktop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.getMessage() === MessageEnum.Home ? <span class="literal">true</span> :</span><br><span class="line">         state.getMessage() === MessageEnum.Desktop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>if else</code> 重構成 <code>?:</code>。</p>
<p><strong>DesktopState</strong></p>
<p><img src="/images/design-pattern/state/state009.svg" alt="state009"></p>
<p><strong>destop.state.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PhoneStateInterface &#125; from <span class="string">'./phone.state.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageEnum &#125; from <span class="string">'./message.enum'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeState &#125; from <span class="string">'./home.state'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DesktopState <span class="keyword">implements</span> PhoneStateInterface &#123;</span><br><span class="line">  getMessage(): MessageEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageEnum.Desktop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.getMessage() === MessageEnum.Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle(): PhoneStateInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkContext(state: PhoneStateInterface): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.getMessage() === MessageEnum.Home;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>if else</code> 重構成 <code>?:</code>。</p>
<p><img src="/images/design-pattern/state/state014.png" alt="state014"></p>
<p>經過一系列的重構成 State Pattern，一樣必須確認 Wallaby.js 單元測試的 11 個測試案例都是 <code>綠燈</code>。</p>
<h2 id="Summary">Summary</h2><hr>
<blockquote>
<p>Chain of Responsibility Pattern vs. State Pattern</p>
</blockquote>
<p><img src="/images/design-pattern/state/state016.svg" alt="state016"></p>
<p>以 class diagram 角度，Chain of Responsibility 與 State Pattern 完全一樣。</p>
<blockquote>
<p>學 Design Pattern 不能以 class diagram 的角度去思考，而要以他要解決什麼問題來思考</p>
</blockquote>
<h3 id="Similarity">Similarity</h3><ul>
<li>解決 <code>nested if</code> 難以維護</li>
<li>都是將 <code>if</code> 改用 object 表示</li>
</ul>
<h3 id="Difference">Difference</h3><ul>
<li>CoR 特別適用於一連串的 <code>判斷檢查</code>；State 特別適用於 method 功能隨 field 改變</li>
<li>CoR 內仍然會有 <code>if</code>；State 內無 <code>if</code></li>
<li>CoR 由 <code>外部</code> 決定下一個 handler；State 由 <code>內部</code> 決定下一個 state</li>
<li>State 會搭配 state diagam 描述 state 的切換</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>並不是所有的 <code>if</code> 都該使用 State Pattern，當 method 功能會隨 field 改變時特別適用，如複雜的 GUI，button 可能根據不同情境有不同功能</li>
<li>Chain of Responsibility 與 State Pattern，從 class diagram 角度，兩者完全一樣，但適用時機與語意是不同的，尤其 Chain of Responsibility 是由外部決定 <code>if</code> 順序，但 State Pattern 是由內部決定 <code>if</code> 順序</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52State" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 OOP 實現 Finite State Machine]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 macOS 與 Docker 共享目錄 ?]]></title>
    <link href="http://oomusou.io/docker/mount-host-dir/"/>
    <id>http://oomusou.io/docker/mount-host-dir/</id>
    <published>2018-03-08T12:23:43.000Z</published>
    <updated>2018-03-03T15:32:27.666Z</updated>
    <content type="html"><![CDATA[<p>當開發環境都 Docker 化，最常遇到的問題就是開發環境該如何與測試環境分離，如 IDE 裝在 macOS，如 WebStorm / Rider / VS Code，且 code 也放在 macOS，但實際 build code 或跑測試，卻是在 container 內，因此勢必要將 macOS 的目錄與 container 共享。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)</p>
<h2 id="參數_-v">參數 -v</h2><hr>
<p>由於每個人要分享的目錄都不一樣，所以不能將共享目錄寫在 <code>Dockerfile</code>，而必須在使用 <code>docker run</code> 建立 container 加上 <code>-v</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyJenkinsCore -<span class="tag">p</span> <span class="number">8080</span>:<span class="number">8080</span> -<span class="tag">p</span> <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home -v /Users/oomusou/Code:/var/<span class="tag">code</span>   oomusou/jenkins-core</span><br></pre></td></tr></table></figure>
<p>以上為例</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">v /<span class="constant">Users</span>/oomusou/<span class="constant">Code</span><span class="symbol">:/var/code</span></span></span><br></pre></td></tr></table></figure>
<p>所有程式都放在 macOS 的 <code>/Users/oomusou/Code</code>，我們希望對應到 container 內的 <code>/var/code</code>，只要 <code>/Users/oomusou/Code</code> 有任何修改，在 container 內都看得到。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>一個很小的參數，但實務上卻非常有用</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓開發環境與測試環境分離]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何為 Slack 設定 Jenkins 通知 ?]]></title>
    <link href="http://oomusou.io/slack/jenkins/"/>
    <id>http://oomusou.io/slack/jenkins/</id>
    <published>2018-03-07T12:23:43.000Z</published>
    <updated>2018-03-03T15:13:19.299Z</updated>
    <content type="html"><![CDATA[<p>當 Jenkins 的 job 執行失敗時，我們希望在 Slack 的 channel 能收到通知，如此可避免所有訊息都透過 Email，只有真正與人相關的訊息才使用 Email，讓 Slack 成為持續整合的訊息中心。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>Jenkins 2.89.4<br>Slack 3.0.5</p>
<h2 id="設定_Slack">設定 Slack</h2><hr>
<h3 id="新增_Channel">新增 Channel</h3><p><img src="/images/jenkins/netcore-slack/slack013.png" alt="slack013"></p>
<ol>
<li>按下 <code>Channels</code> 右側的 <code>+</code> 新增 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack014.png" alt="slack014"></p>
<ol>
<li><strong>Privacy</strong> : 設定為 <code>Public</code> 或 <code>Private</code> channel</li>
<li><strong>Name</strong> : 設定 channel 名稱</li>
<li><strong>Purpose</strong> : channel 的功能描述，可以不輸入</li>
<li><strong>Send invites to</strong> : 設定 channel 成員，可以稍後再設定</li>
<li>按 <code>Create Channel</code> 開始建立 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack015.png" alt="slack015"></p>
<ol>
<li>按 <code>Got It!</code> 進入 channel</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack016.png" alt="slack016"></p>
<ol>
<li>正式進入 channel，將來 Jenkins 訊息會傳進此 channel</li>
</ol>
<h3 id="新增_Notification">新增 Notification</h3><p><img src="/images/jenkins/netcore-slack/slack017.png" alt="slack017"></p>
<ol>
<li>選擇右上方的 <code>option</code></li>
<li>選擇 <code>Add an app</code></li>
</ol>
<h3 id="新增_Jenkins_App">新增 Jenkins App</h3><p><img src="/images/jenkins/netcore-slack/slack018.png" alt="slack018"></p>
<p>Slack 將開啟瀏覽器</p>
<ol>
<li>稍微往下捲輸入 <code>Jenkins</code></li>
<li>選擇 <code>Jenkins CI</code></li>
</ol>
<h3 id="新增_Configuration">新增 Configuration</h3><p><img src="/images/jenkins/netcore-slack/slack019.png" alt="slack019"></p>
<ol>
<li>按 <code>Add Configuration</code> 加入 Jenkins CI</li>
</ol>
<h3 id="新增_Integration">新增 Integration</h3><p><img src="/images/jenkins/netcore-slack/slack020.png" alt="slack020"></p>
<ol>
<li>按 <code>Add Bitbucket Integration</code> 正式加入整合 Jenkins</li>
</ol>
<h3 id="Slack_設定完成">Slack 設定完成</h3><p><img src="/images/jenkins/netcore-slack/slack021.png" alt="slack021"></p>
<ol>
<li>介紹 Jenkins 設定流程</li>
</ol>
<blockquote>
<p>Slack 部分已經設定完成，接下來是 Jenkins 的設定</p>
<p>Slack 網頁先不要關閉，稍後會用到</p>
</blockquote>
<h2 id="設定_Jenkins">設定 Jenkins</h2><hr>
<h3 id="Manage_Jenkins">Manage Jenkins</h3><p><img src="/images/jenkins/netcore-slack/slack022.png" alt="slack022"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Manage Plugins</code></li>
</ol>
<h3 id="安裝_Slack_Plugin">安裝 Slack Plugin</h3><p><img src="/images/jenkins/netcore-slack/slack023.png" alt="slack023"></p>
<ol>
<li>選擇 <code>Avaliable</code> tab</li>
<li>選擇 <code>Slack Notification Plugin</code></li>
<li>按 <code>Download now and Install after restart</code></li>
</ol>
<h3 id="新增_Webhook">新增 Webhook</h3><p><img src="/images/jenkins/netcore-slack/slack024.png" alt="slack024"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Configure System</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack025.png" alt="slack025"></p>
<p>在 <code>Global Slack Notifier Settings</code> 下設定</p>
<ol>
<li><strong>Base URL</strong> : 貼一段 Slack 所提供的 URL</li>
<li><strong>Integration Token</strong> : 貼一段 Slack 所提供的 token</li>
</ol>
<blockquote>
<p>Q : 要貼什麼 Base URL 與 token 呢 ?</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack026.png" alt="slack026"></p>
<p>回到 Slack 最後的網頁往下捲到 <code>Step 3</code></p>
<ol>
<li>將 <code>Base URL</code> 與 <code>Integration Token</code> 複製貼上</li>
</ol>
<p>最後按 <code>Save</code> 存檔。</p>
<h3 id="設定_Job">設定 Job</h3><p><img src="/images/jenkins/netcore-slack/slack027.png" alt="slack027"></p>
<ol>
<li>選擇要發 Slack 通知的 job</li>
<li>按 <code>Configure</code> 設定</li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack028.png" alt="slack028"></p>
<p>在 Jenkins 執行完 <code>build</code> 動作後，無論成功或失敗，將結果通知 Slack</p>
<ol>
<li>選擇 <code>Post-build Actions</code></li>
<li>選擇 <code>Add post-build action</code></li>
<li>選擇 <code>Slack Notification</code></li>
</ol>
<p><img src="/images/jenkins/netcore-slack/slack029.png" alt="slack029"></p>
<p>選擇希望 Jenkins 通知 Slack 的動作 :</p>
<ol>
<li>選擇 <code>Notify Failure</code>、 <code>Notify Success</code> 與 <code>Notify Unstable</code></li>
</ol>
<blockquote>
<p>建議不用選擇太多 action，<code>success</code> 確認 Jenkins 還活著，<code>Failure</code> 與 <code>Unstable</code> 確認 CI 失敗即可</p>
</blockquote>
<p><img src="/images/jenkins/netcore-slack/slack030.png" alt="slack030"></p>
<p>新增一個 Git commit，就可發現 Slack 收到 Jenkins 測試成功 <code>綠燈</code> 的訊息。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Slack 提供了一個不錯的 CI 訊息平台，讓訊息從 Email 解放</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓 Slack 成為 CI 的訊息中心]]>
    
    </summary>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
      <category term="Slack" scheme="http://oomusou.io/tags/Slack/"/>
    
  </entry>
  
</feed>
