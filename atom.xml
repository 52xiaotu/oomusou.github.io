<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2018-04-06T05:21:52.204Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[深入探討 F# 之 List]]></title>
    <link href="http://oomusou.io/fsharp/list/"/>
    <id>http://oomusou.io/fsharp/list/</id>
    <published>2018-04-05T12:23:43.000Z</published>
    <updated>2018-04-06T05:21:52.204Z</updated>
    <content type="html"><![CDATA[<p>F# 除了使用 .NET Framework 所提供的型別外，自己還定義了不少適合 FP 的型別，其中最常用的就是 <code>List</code>，但這與 C# 的 <code>List&lt;T&gt;</code> 不同，反而類似 C# 的 <code>ImmutableList&lt;T&gt;</code>。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>JetBrains Rider 2017.3.1<br>F# 4.1</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>List</p>
<p>將相同型別的 value 整合成單一 value，且每個 element 必須為 immutable</p>
</blockquote>
<p>簡單來說，F# 的 List 就是 linked list 資料結構，為了實現 FP 的 Immutability，每個 element 建立後就不可再修改。</p>
<h2 id="建立_List">建立 List</h2><hr>
<h3 id="List_Literal">List Literal</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span> ]</span><br><span class="line"></span><br><span class="line">myList</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// [1; 2; 3]</span></span><br></pre></td></tr></table></figure>
<p>List 使用 <code>[]</code> 中括號表示，element 之間以 <code>;</code> 隔開。</p>
<p><img src="/images/fsharp/list/list000.png" alt="list000"></p>
<ol>
<li>List 天生就是泛型，不過並不需要如 C# 宣告泛型型別 <code>List&lt;int&gt;</code>，Type Inference 會自動推導出 <code>int list</code>。</li>
</ol>
<blockquote>
<p>F# 的型別都是寫在後面，不過 List 例外，element 型別寫在 list 前面</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [</span><br><span class="line">    <span class="number">1</span> <span class="comment">// Number one</span></span><br><span class="line">    <span class="number">2</span> <span class="comment">// Number two</span></span><br><span class="line">    <span class="number">3</span> <span class="comment">// Number three</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">myList</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// [1; 2; 3;]</span></span><br></pre></td></tr></table></figure>
<p>List 也可以使用換行的方式，此時可以不用加 <code>;</code> 隔開，適用於 element 量較多時，或需要在 element 加上註解時。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myControlList : Control list = [ <span class="keyword">new</span> Button(); <span class="keyword">new</span> CheckBox() ]</span><br></pre></td></tr></table></figure>
<p>List 的 element 必須相同型別，若 element 是物件時，則有例外。基於 <code>里氏替換原則</code>，若 element 的型別為 <code>父類別</code> 或 <code>interface</code> 時，則 element 允許基於相同 <code>父類別</code> 或 <code>interface</code> 的物件。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list123 = []</span><br></pre></td></tr></table></figure>
<p>空 list 則以 <code>[]</code> 表示。</p>
<h3 id="List_Range">List Range</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [ <span class="number">1</span> .. <span class="number">10</span> ]</span><br><span class="line"></span><br><span class="line">myList</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]</span></span><br></pre></td></tr></table></figure>
<p>若 list 的資料有規律性，則不必全部列出，可使用 <code>..</code>，只要列出頭跟尾即可。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [ <span class="number">1</span> .. <span class="number">2</span> .. <span class="number">10</span> ]</span><br><span class="line"></span><br><span class="line">myList</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// [1; 3; 5; 7; 9]</span></span><br></pre></td></tr></table></figure>
<p>若 list 資料為 <code>等差級數</code>，則可在 <code>..</code> 與 <code>..</code> 之間加上 step value，其中 step value 也可以是 <code>負數</code>。</p>
<h3 id="List_Comprehension">List Comprehension</h3><p>若資料的變化性更大，已經無法單純使用 List Range 描述，則可使用更進階的 List Comprehension 表示。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">yield</span> i * i</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">myList</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]</span></span><br></pre></td></tr></table></figure>
<p>直接將 <code>for ... in … do</code> 寫在 <code>[]</code> 之內，<code>yield</code> 的 expression 即為 element。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> -&gt; i * i]</span><br><span class="line"></span><br><span class="line">myList</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]</span></span><br></pre></td></tr></table></figure>
<p>亦可將 <code>do yield</code> 省略，直接將 <code>for ... in ... -&gt;</code> 寫在 <code>[]</code> 內，將 expression 寫在 <code>-&gt;</code> 之後。</p>
<blockquote>
<p>對於簡單的 expression，建議使用 <code>for ... in ... -&gt;</code> 語法較精簡，若還需更複雜的描述，則必須使用 <code>for ... in ... do yield</code></p>
</blockquote>
<h2 id="List_Operator">List Operator</h2><hr>
<h3 id="::_Operator">:: Operator</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList1 = [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span> ]</span><br><span class="line"><span class="keyword">let</span> myList2 = <span class="number">0</span> :: myList1</span><br><span class="line"></span><br><span class="line">myList2</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// [0; 1; 2; 3]</span></span><br></pre></td></tr></table></figure>
<p>將 value 加到 <code>:</code> 之前， 將加到 list 最前面。</p>
<h3 id="@_Operator">@ Operator</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList1 = [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span> ]</span><br><span class="line"><span class="keyword">let</span> myList2 = [ <span class="number">4</span>; <span class="number">5</span>; <span class="number">6</span> ]</span><br><span class="line"><span class="keyword">let</span> myList3 = myList1 @ myList2</span><br><span class="line"></span><br><span class="line">myList3</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// [1; 2; 3; 4; 5; 6]</span></span><br></pre></td></tr></table></figure>
<p><code>@</code> 將兩個 list 合併為一個 list。</p>
<h2 id="Property">Property</h2><hr>
<p>List 本身提供了不少 property 可用。</p>
<h3 id="Head">Head</h3><blockquote>
<p>獲得 List 第 1 個 element。</p>
<p><code>&#39;T</code></p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [ <span class="number">1</span> .. <span class="number">3</span> ]</span><br><span class="line"></span><br><span class="line">printf <span class="string">"%d"</span> myList.Head</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h3 id="Tail">Tail</h3><blockquote>
<p>獲得第 1 個 element 除外，剩下的 list</p>
<p><code>&#39;T list</code></p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [ <span class="number">1</span> .. <span class="number">3</span> ]</span><br><span class="line"></span><br><span class="line">myList.Tail</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// [2; 3]</span></span><br></pre></td></tr></table></figure>
<p>就算 Tail 只剩下 1 個 element，仍然是 1 個 element 的 list。</p>
<h3 id="isEmpty">isEmpty</h3><blockquote>
<p>判斷 list 是否為空</p>
<p><code>bool</code></p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [ <span class="number">1</span> .. <span class="number">2</span> ]</span><br><span class="line"></span><br><span class="line">printf <span class="string">"%b"</span> myList.IsEmpty</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="Item">Item</h3><blockquote>
<p>獲得指定 index 的 element 的值</p>
<p><code>&#39;T</code></p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [ <span class="number">1</span> .. <span class="number">3</span> ]</span><br><span class="line"></span><br><span class="line">printf <span class="string">"%d"</span> (myList.Item <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>List 的 index 為 zero-based。</p>
<h3 id="Length">Length</h3><blockquote>
<p>獲得 list 的 element 個數</p>
<p><code>int</code></p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [ <span class="number">1</span> .. <span class="number">3</span> ]</span><br><span class="line"></span><br><span class="line">printf <span class="string">"%d"</span> myList.Length</span><br></pre></td></tr></table></figure>
<h2 id="Static_Method">Static Method</h2><hr>
<h3 id="List-Cons">List.Cons</h3><blockquote>
<p>將 value 加到 list 最前面，產生新的 list，相當於 <code>::</code> operator</p>
<p><code>head: &#39;T * tail: &#39;T list -&gt; &#39;T list</code></p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list1 = [ <span class="number">1</span> .. <span class="number">3</span> ]</span><br><span class="line"></span><br><span class="line">List.Cons (<span class="number">0</span>, list1)</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [0; 1; 2; 3]</span></span><br></pre></td></tr></table></figure>
<p><code>List.Cons()</code> 傳入為一 tuple，第 1 個 element 為 value，第 2 個 element 為 list。</p>
<h3 id="List-Empty">List.Empty</h3><blockquote>
<p>根據 list type 回傳一個 empty list</p>
<p><code>&#39;T list</code></p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">myListType</span> </span>= int list</span><br><span class="line"></span><br><span class="line">myListType.Empty</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Q : List.Empty 與 List.empty 有何差異？</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List.empty&lt;int&gt;</span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"><span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<p><strong>相同</strong></p>
<ul>
<li>均回傳 empty list</li>
</ul>
<p><strong>相異</strong></p>
<ul>
<li><code>List.Empty</code> 為 <code>List</code> type 的 static method；<code>List.empty()</code> 定義在 List module</li>
<li><code>List.Empty</code> 須先定義 type；<code>List.empty()</code> 可由泛型直接指定 element type</li>
</ul>
<h2 id="Recursive_Function">Recursive Function</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> sum list =</span><br><span class="line">   <span class="keyword">match</span> list <span class="keyword">with</span></span><br><span class="line">   | head :: tail -&gt; head + sum tail</span><br><span class="line">   | [] -&gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[ <span class="number">1</span> .. <span class="number">3</span> ]</span><br><span class="line">|&gt; sum</span><br><span class="line">|&gt; printf <span class="string">"%d"</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p>List 在配合 recursive function 時，在 Pattern Matching 常搭配 <code>head :: tail</code>，直接將 list 拆成兩半，然後將 <code>tail</code> 傳入 recursive function 繼續運算。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>List 為 F# 最常用的 collection，概念雖然不難，但有一些 F# 獨特的語法，還是得花一點時間熟悉</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="external">Microsoft Docs</a>, <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/lists" target="_blank" rel="external">Lists</a><br><a href="https://en.wikibooks.org/" target="_blank" rel="external">Wikibooks</a>, <a href="https://en.wikibooks.org/wiki/F_Sharp_Programming/Lists" target="_blank" rel="external">F Sharp Programming/Lists</a><br><a href="https://blogs.msdn.microsoft.com/chrsmith/author/chrsmith/" target="_blank" rel="external">Chris Smith</a>, <a href="https://blogs.msdn.microsoft.com/chrsmith/2008/07/10/mastering-f-lists/" target="_blank" rel="external">Mastering F# Lists</a><br><a href="http://www.oreilly.com/pub/au/3667" target="_blank" rel="external">Chris Smith</a>, <a href="http://shop.oreilly.com/product/0636920024033.do" target="_blank" rel="external">Pramming F# 3.0 2nd</a></p>
]]></content>
    <summary type="html">
    <![CDATA[探討 List 的各種語法]]>
    
    </summary>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何動態切換 Service？]]></title>
    <link href="http://oomusou.io/angular/multi-provider/"/>
    <id>http://oomusou.io/angular/multi-provider/</id>
    <published>2018-04-04T13:23:43.000Z</published>
    <updated>2018-04-04T13:27:38.707Z</updated>
    <content type="html"><![CDATA[<p>Angular 提供 DI，讓我們能以依賴注入的方式將 servie 注入，若我們無法在 compile-time 就決定要注入的 service，一直要到 run-time 才能決定，我們該如何在 run-time 動態切換 service 呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>WebStorm 2018.1<br>Node.js 8.9.4<br>Angular CLI 1.7.3<br>Angular 5.2.8</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/angular/multi-provider/di001.png" alt="di001"></p>
<p>User 使用下拉選單選擇 service。</p>
<p><img src="/images/angular/multi-provider/di000.png" alt="di000"></p>
<p>共有 <code>AWS</code>、<code>Azure</code> 與 <code>GCP</code> 三個雲端服務可供選擇，但無論選擇哪個 service，都只能在 run-time 決定，而無法在 compile-time 決定，此時 DI 該注入哪一個 service 呢？</p>
<h2 id="Task">Task</h2><hr>
<p>根據 user 的需求，動態切換 service。</p>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/angular/multi-provider/di002.svg" alt="di002"></p>
<ul>
<li><strong>AppComponent</strong>：Angular 的 component</li>
<li><strong>ServiceFactory</strong>：負責將 user 選擇的 service 傳回，使用 DI 注入進 component</li>
<li><strong>ServiceInterface</strong>：所有 service 共同的 interface</li>
<li><strong>AWSService</strong>：負責 <code>AWS</code> 功能的 service</li>
<li><strong>AzureService</strong>：負責 <code>Azure</code> 功能的 service</li>
<li><strong>GCPService</strong>：負責 <code>GCP</code> 功能的 service</li>
</ul>
<h2 id="Implementation">Implementation</h2><hr>
<p><strong>app.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> (<span class="attribute">change</span>)=<span class="value">"onChange()"</span> #<span class="attribute">mySelect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> *<span class="attribute">ngFor</span>=<span class="value">"let service of services"</span> [<span class="attribute">value</span>]=<span class="value">"service.name"</span>&gt;</span>&#123;&#123; service.name &#125;&#125;<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 HTML 提供 <code>&lt;select&gt;</code> 選擇 service，結果會顯示在 <code>message</code>。</p>
<h3 id="AppComponent">AppComponent</h3><p><img src="/images/angular/multi-provider/di003.svg" alt="di003"></p>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ElementRef, ViewChild &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Service &#125; from <span class="string">'./models/service.model'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceInterface &#125; from <span class="string">'./interfaces/service.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceFactory &#125; from <span class="string">'./services/service.factory'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceEnum &#125; from <span class="string">'./enums/service.enum'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  services: Service[] = [</span><br><span class="line">    &#123; name: ServiceEnum.NULL &#125;,</span><br><span class="line">    &#123; name: ServiceEnum.AWS &#125;,</span><br><span class="line">    &#123; name: ServiceEnum.Azure &#125;,</span><br><span class="line">    &#123; name: ServiceEnum.GCP &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  message = <span class="string">'Please select service'</span>;</span><br><span class="line"></span><br><span class="line">  @ViewChild(<span class="string">'mySelect'</span>)</span><br><span class="line">  <span class="keyword">private</span> mySelect: ElementRef;</span><br><span class="line">  <span class="keyword">private</span> service: ServiceInterface;</span><br><span class="line"></span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private serviceFactory: ServiceFactory) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  onChange() &#123;</span><br><span class="line">    <span class="keyword">const</span> serviceName = <span class="keyword">this</span>.mySelect.nativeElement.value;</span><br><span class="line">    <span class="keyword">this</span>.service = <span class="keyword">this</span>.serviceFactory.createService(serviceName);</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.service.getMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>24 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> service: ServiceInterface;</span><br></pre></td></tr></table></figure>
<p>重點在 <code>service</code> 無法由 compile-time 決定，要由 user 在 run-time 選擇，因此 constructor 要 DI 注入什麼則面臨挑戰。</p>
<p>26 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(private serviceFactory: ServiceFactory) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>既然無法在 compile-time 決定要注入什麼 service，那就改注入 <code>ServiceFactory</code>，由 <code>不變</code> 的 <code>ServiceFactory</code> 幫我們決定 <code>變動</code> 的 service。</p>
<p>30 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.service = <span class="keyword">this</span>.serviceFactory.createService(serviceName);</span><br><span class="line"><span class="keyword">this</span>.message = <span class="keyword">this</span>.service.getMessage();</span><br></pre></td></tr></table></figure>
<p>由 <code>ServiceFactory.createService()</code> 根據 user 在 run-time 所選擇的 service 名稱，回傳正確的 service。</p>
<blockquote>
<p><code>AppComponent</code> 改注入 <code>ServiceFactory</code> 後，最少 <code>AppComponent</code> 已經符合 <code>開放封閉原則</code>，將來無論新增任何 service，<code>AppComponent</code>都不用再做任何修改</p>
</blockquote>
<h3 id="ServiceFactory">ServiceFactory</h3><p><img src="/images/angular/multi-provider/di004.svg" alt="di004"></p>
<p><strong>service.factory.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ServiceInterface &#125; from <span class="string">'../interfaces/service.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceToken &#125; from <span class="string">'../tokens/service.token'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Inject, Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceEnum &#125; from <span class="string">'../enums/service.enum'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ServiceFactory &#123;</span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(@Inject(ServiceToken) private services: ServiceInterface[]) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  createService(name: ServiceEnum): ServiceInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.services</span><br><span class="line">               .filter(item =&gt; item.getName() === name)[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 8 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor"><span class="keyword">constructor</span>(@Inject(ServiceToken) private services: ServiceInterface[]) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將符合 <code>ServiceInterface</code> 的所有物件都注入，注意 <code>services</code> 的型別是  <code>ServiceInterface[]</code>。</p>
<p>該如何一次注入所有實現 <code>ServiceInterface</code> 的 service 呢？會在 <code>AppModule</code> 動手腳，稍後會說明。</p>
<p>11 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">createService(name: ServiceEnum): ServiceInterface &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.services</span><br><span class="line">               .filter(item =&gt; item.getName() === name)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為 <code>services</code> 包含所有的 service，使用 <code>filter()</code> 找到符合 user 選擇的 service 並回傳。</p>
<h3 id="ServiceInterface">ServiceInterface</h3><p><img src="/images/angular/multi-provider/di005.svg" alt="di005"></p>
<p><strong>service.interface.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ServiceEnum &#125; from <span class="string">'../enums/service.enum'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="interface"><span class="keyword">interface</span> ServiceInterface </span>&#123;</span><br><span class="line">  getName(): ServiceEnum;</span><br><span class="line">  getMessage(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有 service 共同遵守的 interface，共有 <code>getName()</code> 與 <code>getMessage()</code> 兩個 method。</p>
<h3 id="AWSService">AWSService</h3><p><img src="/images/angular/multi-provider/di006.svg" alt="di006"></p>
<p><strong>aws.service.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceInterface &#125; from <span class="string">'../interfaces/service.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceEnum &#125; from <span class="string">'../enums/service.enum'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AWSService <span class="keyword">implements</span> ServiceInterface &#123;</span><br><span class="line">  getName(): ServiceEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> ServiceEnum.AWS;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'You have selected AWS service'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>AWSService</code> 實現 <code>ServiceInterface</code> 所定義的 method。</p>
<h3 id="AzureService">AzureService</h3><p><img src="/images/angular/multi-provider/di007.svg" alt="di007"></p>
<p><strong>azure.service.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceInterface &#125; from <span class="string">'../interfaces/service.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceEnum &#125; from <span class="string">'../enums/service.enum'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AzureService <span class="keyword">implements</span> ServiceInterface &#123;</span><br><span class="line">  getName(): ServiceEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> ServiceEnum.Azure;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'You have selected Azure service'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>AzureService</code> 實現 <code>ServiceInterface</code> 所定義的 method。</p>
<h3 id="GCPService">GCPService</h3><p><img src="/images/angular/multi-provider/di008.svg" alt="di008"></p>
<p><strong>gcp.service.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceInterface &#125; from <span class="string">'../interfaces/service.interface'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceEnum &#125; from <span class="string">'../enums/service.enum'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> GcpService <span class="keyword">implements</span> ServiceInterface &#123;</span><br><span class="line">  getName(): ServiceEnum &#123;</span><br><span class="line">    <span class="keyword">return</span> ServiceEnum.GCP;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'You have selected GCP service'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>GcpService</code> 實現 <code>ServiceInterface</code> 所定義的 method。</p>
<h3 id="AppModule">AppModule</h3><p><strong>app.module.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AWSService &#125; from <span class="string">'./services/aws.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceToken &#125; from <span class="string">'./tokens/service.token'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AzureService &#125; from <span class="string">'./services/azure.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; GcpService &#125; from <span class="string">'./services/gcp.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ServiceFactory &#125; from <span class="string">'./services/service.factory'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NullService &#125; from <span class="string">'./services/null.service'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    ServiceFactory,</span><br><span class="line">    &#123; provide: ServiceToken, useClass: NullService, multi: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123; provide: ServiceToken, useClass: AWSService, multi: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123; provide: ServiceToken, useClass: AzureService, multi: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123; provide: ServiceToken, useClass: GcpService, multi: <span class="literal">true</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; provide: ServiceToken, useClass: NullService, multi: <span class="literal">true</span>&#125;,</span><br><span class="line">&#123; provide: ServiceToken, useClass: AWSService, multi: <span class="literal">true</span>&#125;,</span><br><span class="line">&#123; provide: ServiceToken, useClass: AzureService, multi: <span class="literal">true</span>&#125;,</span><br><span class="line">&#123; provide: ServiceToken, useClass: GcpService, multi: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<p>該如何讓符合 <code>ServiceInterface</code> 的 service 在 <code>ServiceFactory</code> 一次全部注入呢 ? 關鍵就在 <code>AppModule</code> 的 provider 加上 <code>multi: true</code>，則所有相同 interface 的 service 將以 array 的方式一次全部注入。</p>
<h2 id="Summary">Summary</h2><hr>
<ul>
<li><code>AppComponent</code> 由原本注入 service 改注入 <code>ServiceFactory</code></li>
<li>由 <code>ServiceFactory</code> 將所有相同 interface 的 service 全部注入</li>
<li>由 <code>ServiceFactory.CreateService()</code> 決定要 <code>filter()</code> 哪個 service 給 client</li>
<li>將來若有新的 service 新增，只需繼續根據 <code>ServiceInterface</code> 新增 service，並在 <code>AppModule</code> 補上 provider，其他程式碼都不必修改，符合 <code>開放封閉原則</code> 的要求</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文的做法，與原本動態 DI 注入的理想還有段距離，但藉由在相同 token 的 multi provider，讓相同 interface 的所有 service 都能一起注入在 <code>ServiceFactory</code>，這樣最少 component 符合 <code>開放封閉原則</code>，將來維護也方便</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52DynamicDI" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Multi Provider]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 F# 之 Tuple]]></title>
    <link href="http://oomusou.io/fsharp/tuple/"/>
    <id>http://oomusou.io/fsharp/tuple/</id>
    <published>2018-04-04T12:23:43.000Z</published>
    <updated>2018-04-04T06:32:07.242Z</updated>
    <content type="html"><![CDATA[<p><code>Tuple</code> 是 FP 語言常見的型別，且 C# 7.0 也開始有 <code>Tuple</code>，讓我們藉由 F# 學習該如何活用 <code>Tuple</code>。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>JetBrains Rider 2017.3.1<br>F# 4.1</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Tuple</p>
<p>將不同型別的 value 整合成單一 value</p>
</blockquote>
<p>在將不同型別整合成單一型別，F# 提供了 3 種方式：</p>
<ol>
<li><p>Tuple</p>
</li>
<li><p>Record</p>
</li>
<li><p>Union</p>
</li>
</ol>
<p>其中 <code>Tuple</code> 與 <code>Record</code> 提供類似 AND 的方式將不同型別加以整合，而 <code>Union</code> 則提供類似 OR 的方式將不同型別加以整合。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 F# 的 Union，詳細請參考 <a href="http://0.0.0.0:4000/fsharp/union/" target="_blank" rel="external">深入探討 F# 之 Discriminated Union</a></span></span></span></p>
<p><code>Record</code> 與 <code>Tuple</code> 的差異在於 <code>Record</code> 為 named type，須事先定義型別，而 <code>Tuple</code> 則為  unmamed type，可直接使用，Type Inference 會幫我們推導出 <code>Tuple</code> 型別。</p>
<h2 id="建立_Tuple">建立 Tuple</h2><hr>
<h3 id="相同型別">相同型別</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dinner = (<span class="string">"green eggs"</span>, <span class="string">"ham"</span>)</span><br></pre></td></tr></table></figure>
<p>將 <code>green eggs</code> 與 <code>ham</code> 兩個 string 整合成一個 <code>dinner</code> tuple。</p>
<p><img src="/images/fsharp/tuple/tuple000.png" alt="uple00"></p>
<p>Type Inference 自動推導出 <code>dinner</code> tuple 為 <code>string * string</code>。</p>
<p><code>Tuple</code> 型別表示法，是以 <code>*</code> 串接各型別，因為 <code>Tuple</code> 概念是 AND，所以使用 <code>*</code>。</p>
<h3 id="不同型別">不同型別</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dinner = (<span class="string">"green eggs"</span>, <span class="number">16</span>);</span><br></pre></td></tr></table></figure>
<p>若只是將  tuple 用在相同型別，則顯示不出  tuple 的威力，相同型別大可使用 <code>Array</code> 或 <code>List</code> ，tuple  讓我們可以將 <code>不同型別</code> 包在同一個  tuple。</p>
<p><img src="/images/fsharp/tuple/tuple001.png" alt="uple00"></p>
<p>Type Inference 自動推導出 <code>dinner</code> tuple 為 <code>string * int</code>。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nested = (<span class="number">1</span>, (<span class="number">2.0</span>, <span class="number">3</span>M), (<span class="number">4</span>L, <span class="string">"5"</span>, '<span class="number">6</span>'))</span><br></pre></td></tr></table></figure>
<p>甚至也可以巢狀的方式使用 tuple。</p>
<h2 id="分解_Tuple">分解 Tuple</h2><hr>
<p>Tuple 將不同 value 整合單一 tuple 後，馬上會遇到另外一個問題：</p>
<blockquote>
<p>Q：如何將單一 tuple 分解成 value？</p>
</blockquote>
<p>F# 提供 3 種方式：</p>
<ul>
<li><code>fst()</code> 與 <code>snd()</code></li>
<li>Let Binding</li>
<li>Pattern Matching</li>
</ul>
<h3 id="fst()_與_snd()">fst() 與 snd()</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = (<span class="string">"John"</span>, <span class="string">"Smith"</span>)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"%s"</span> (fst students)</span><br><span class="line">printfn <span class="string">"%s"</span> (snd students)</span><br></pre></td></tr></table></figure>
<p>若只是兩個 element 的 tuple，可使用 <code>fst()</code> 與 <code>snd()</code> function 分解 tuple。</p>
<blockquote>
<p>沒有 <code>trd()</code>，但可自行建立 <code>let trd (_, _, z) = z</code></p>
</blockquote>
<h3 id="Let_Binding">Let Binding</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = (<span class="string">"John"</span>, <span class="string">"Smith"</span>, <span class="string">"Jessie"</span>)</span><br><span class="line"><span class="keyword">let</span> student1, student2, student3 = students</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"%s, %s, %s"</span> student1 student2 student3</span><br></pre></td></tr></table></figure>
<p>直接使用 <code>let</code>，會自動將 tuple 分解到各別 value，也沒 element 數限制。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = (<span class="string">"John"</span>, <span class="string">"Smith"</span>, <span class="string">"Jessie"</span>)</span><br><span class="line"><span class="keyword">let</span> student1, student2, _ = students</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"%s, %s"</span> student1 student2</span><br></pre></td></tr></table></figure>
<p>若只需部分 element，可使用 <code>_</code> 忽略之。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = (<span class="string">"John"</span>, <span class="string">"Smith"</span>, <span class="string">"Jessie"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> print (student1, student2, student3) = </span><br><span class="line">    printfn <span class="string">"%s %s %s"</span> student1 student2 student3</span><br><span class="line">    </span><br><span class="line">students</span><br><span class="line">|&gt; print</span><br></pre></td></tr></table></figure>
<p>當 tuple 傳進 function 參數時，可直接分解成 value。</p>
<h3 id="Pattern_Matching">Pattern Matching</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = (<span class="string">"John"</span>, <span class="string">"Smith"</span>, <span class="string">"Jessie"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> print students = </span><br><span class="line">    <span class="keyword">match</span> students <span class="keyword">with</span></span><br><span class="line">    | (student1, student2, student3) -&gt; printfn <span class="string">"%s %s %s"</span> student1 student2 student3</span><br><span class="line">    </span><br><span class="line">students</span><br><span class="line">|&gt; print</span><br></pre></td></tr></table></figure>
<p>亦可使用 Pattern Matching 對 tuple 加以分解。</p>
<h2 id="活用_Tuple">活用 Tuple</h2><hr>
<h3 id="將_Tuple_當成參數">將 Tuple 當成參數</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add (x, y, z) = x + y + z</span><br><span class="line">    </span><br><span class="line">values</span><br><span class="line">|&gt; add</span><br><span class="line">|&gt; printfn <span class="string">"%d"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9</span></span><br></pre></td></tr></table></figure>
<p><code>values</code> 為 tuple，而 <code>add()</code> 為 <code>int * int * int -&gt; int</code>。</p>
<p>當 <code>values</code> 傳進 <code>add()</code> 時，會自動分解成 <code>x</code> 、 <code>y</code> 與 <code>z</code>。</p>
<blockquote>
<p>Tuple vs. Partial Function Application</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add1 x y z = x + y + z</span><br><span class="line"><span class="keyword">let</span> add2 (x, y, z) = x + y + z</span><br></pre></td></tr></table></figure>
<p>雖然都是 <code>x + y + z</code>，但 <code>add1()</code> 與 <code>add2()</code> 意義完全不同。</p>
<p><code>add1()</code> 為 <code>int -&gt; int -&gt; int -&gt; int</code>。</p>
<p><code>add2()</code> 為 <code>int * int * int -&gt; int</code>。</p>
<p><code>add1()</code> 可使用 Partial Function Application 方式使用，也就是若只傳一個參數 <code>int</code>，將回傳 <code>int -&gt; int -&gt; int</code> function，若傳入兩個參數 <code>int</code>，將回傳 <code>init -&gt; int</code> function。</p>
<p><code>add2()</code> 則必須一次傳入整個 tuple，不能只傳 <code>部分參數</code>。</p>
<blockquote>
<p>Ｑ：我該使用 Tuple 或  Partial Function Application 呢？</p>
</blockquote>
<ul>
<li>完全視 <code>設計考量</code> 與 <code>語意</code></li>
<li>Partial Function Application 使用上會比 Tuple 靈活</li>
<li>若你不希望被當成 Partial Function Application 使用，則使用 Tuple。</li>
</ul>
<h3 id="將_Tuple_當成回傳值">將 Tuple 當成回傳值</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> divRem a b =</span><br><span class="line">   <span class="keyword">let</span> x = a / b</span><br><span class="line">   <span class="keyword">let</span> y = a % b</span><br><span class="line">   (x, y)</span><br></pre></td></tr></table></figure>
<p>有些 function 會希望一次回傳多個值，如 <code>兩數相除</code>，會希望同時傳回 <code>商數</code> 與 <code>餘數</code>。</p>
<p>傳統程式語言我們會回傳 <code>Array</code> 或 <code>List</code>，但有相同型別的限制；在 OOP 我們會回傳 <code>Object</code>，但必須事先建立 class；但在 FP 我們可回傳 <code>Tuple</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Tuple 不用事先定義型別，可以直接使用，特別適合 function 只使用一次的 <code>參數</code> 或 <code>回傳值</code> 型別</li>
<li>在 OOP，若我們想將 <code>多個參數</code> 合併成 <code>單一參數</code>，或將 <code>多回傳值</code> 合併成 <code>單一回傳值</code>，我們必須使用 <code>Object</code>，但常常糾結是否該特別開一個 class 型別；但在 FP，我們可以隨時使用 tuple，也能享受 compile 強型別的檢查</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="external">Microsoft Docs</a>, <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/tuples" target="_blank" rel="external">Tuples</a><br><a href="https://fsharpforfunandprofit.com/" target="_blank" rel="external">F# for fun and profit</a>, <a href="https://fsharpforfunandprofit.com/posts/tuples/" target="_blank" rel="external">Tuples</a><br><a href="http://www.oreilly.com/pub/au/3667" target="_blank" rel="external">Chris Smith</a>, <a href="http://shop.oreilly.com/product/0636920024033.do" target="_blank" rel="external">Pramming F# 3.0 2nd</a></p>
]]></content>
    <summary type="html">
    <![CDATA[學習 FP 如何使用 Tuple]]>
    
    </summary>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 SonarQube 檢查 Angular 專案？]]></title>
    <link href="http://oomusou.io/sonarqube/angular/"/>
    <id>http://oomusou.io/sonarqube/angular/</id>
    <published>2018-04-03T13:23:43.000Z</published>
    <updated>2018-04-04T06:08:51.900Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 是一套 <code>程式碼品質檢查工具</code>，可以幫我們檢查 code 的 bugs、 vulenrability、code smell 與 duplication，也屬於 <code>持續整合</code> 重要的一環。</p>
<p>SonarQube 已經內建 SonarTS，可以直接對 TypeScript 進行檢查，本文將以 Angular 為例，並搭配 Jenkins 自動執行 SonarQube，將結果通知 Slack。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>SonarQube 6.7.2 LTS<br>Jenkins 2.107.1<br>Slack 3.0.5<br>Angular 5.2.9</p>
<h2 id="GitHub">GitHub</h2><hr>
<p>將 Angular 專案放到 GitHub。</p>
<p><img src="/images/sonarqube/angular/slack000.png" alt="lack00"></p>
<ol>
<li>本文將 Angular 專案放在 <code>https://github.com/oomusou/NG52JenkinsSonarQubeSlack</code></li>
</ol>
<blockquote>
<p>當然也可以將 git repository 放在不同的 git server，如 Bitbucket</p>
</blockquote>
<h2 id="SonarQube">SonarQube</h2><hr>
<p><strong>安裝 SonarQube</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update</span><br><span class="line">$ <span class="keyword">brew </span>install sonarqube</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew 安裝 SonarQube。</p>
<p><img src="/images/sonarqube/angular/slack001.png" alt="lack00"></p>
<ol>
<li>輸入 <code>brew install sonarqube</code> 安裝</li>
<li>若想在每次 Mac 重開機就自動執行 SonarQube，輸入 <code>brew services start sonarqube</code></li>
<li>若想自行啟動 SonarQube，輸入 <code>sonar console</code></li>
</ol>
<p><strong>啟動 SonarConsole</strong><br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sonar <span class="built_in">console</span></span><br></pre></td></tr></table></figure></p>
<p>使用 <code>sonar console</code> 自行啟動 SonarQube。</p>
<p><img src="/images/sonarqube/angular/slack002.png" alt="lack00"></p>
<ol>
<li>輸入 <code>sonar console</code> 自行啟動 SonarQube</li>
</ol>
<p><strong>測試 SonarQube</strong></p>
<p><img src="/images/sonarqube/angular/slack003.png" alt="lack00"></p>
<ol>
<li>輸入 <code>localhost:9000</code>，若看到 SonarQube 首頁，則表示安裝成功</li>
<li>右上角 <code>Log in</code> 可登入管理設定 SonarQube，預設為 <code>admin/admin</code></li>
</ol>
<h2 id="SonarQube_Scanner">SonarQube Scanner</h2><hr>
<p>SonarQube 雖然已經包含 SonarTS，但必須靠 SonarQube Scanner 才能執行，預設 SonarQube 並沒有包含 Scanner，必須自行安裝。</p>
<p><strong>下載 Scanner</strong></p>
<p><img src="/images/sonarqube/angular/slack004.png" alt="hp00"></p>
<p>到 <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="external">Analyzing with SonarQube Scanner</a> 下載 Scanner，選擇 <code>Mac OS X 64 bit</code> 下載。</p>
<p><img src="/images/sonarqube/angular/slack005.png" alt="lack00"></p>
<p>下載後為一 <code>zip</code> 壓縮檔，解壓縮後可安裝在任何目錄。</p>
<p><img src="/images/sonarqube/angular/slack006.png" alt="lack00"></p>
<ol>
<li>選擇 home directory</li>
<li>將 <code>sonar-scanner-3.1.0.1141-macosx</code> 放在 home directory 下</li>
</ol>
<p><strong>設定 Server</strong></p>
<p><strong>sonar-scanner.properties</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#----- Default SonarQube server</span><br><span class="line">sonar<span class="class">.host</span><span class="class">.url</span>=http:<span class="comment">//localhost:9000</span></span><br></pre></td></tr></table></figure>
<p>設定 SonarQube server 位址，並將 <code>#</code> 註解拿掉。</p>
<p><img src="/images/sonarqube/angular/slack007.png" alt="lack00"></p>
<ol>
<li><code>sonar-scanner.properties</code> 位於 <code>sonar-scanner-3.1.0.1141-macosx/conf/</code> 目錄下</li>
</ol>
<p><strong>測試 Scanner</strong></p>
<p>將 SonarQube Scanner 加到 system path。</p>
<p><strong>.zshrc</strong><br><img src="/images/sonarqube/angular/slack008.png" alt="lack00"></p>
<ol>
<li>將 <code>~/sonar-scanner-3.1.0.1141-macosx/bin</code> 目錄加到 system path</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ sonar-scanner -Dsonar.projectKey=Angular52 -Dsonar.sources=. -Dsonar.projectName=Angular52 -Dsonar.projectVersion=<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>sonar-scanner</code> 對 Laravel 專案進行檢查。</p>
<ul>
<li><strong>-D</strong> : 對 SonarQube 的 property 進行設定</li>
<li><strong>sonar.projectKey</strong>：SonarQube 對專案的 key，內部將以此 key 作為辨別，必須唯一</li>
<li><strong>sonar.sources</strong>：SonarQube 要檢查的目錄，因為已經在專案目錄下，<code>.</code> 即為 <code>目前目錄</code></li>
<li><strong>sonar.projectName</strong>：在 SonarQube 網頁上顯示的名稱</li>
<li><strong>sonar.projectVersion</strong>：在 SonarQube 網頁上顯示的版本編號</li>
</ul>
<p><img src="/images/sonarqube/angular/slack009.png" alt="lack00"></p>
<ol>
<li>在專案目錄下輸入 <code>sonar-scanner</code> 檢查 TypeScript</li>
</ol>
<p><img src="/images/sonarqube/angular/slack010.png" alt="lack01"></p>
<ol>
<li>若能看到 <code>EXECUTION SUCCESS</code>，則表示 SonarQube Scanner 安裝成功</li>
</ol>
<p><img src="/images/sonarqube/angular/slack011.png" alt="lack01"></p>
<p>進入 SonarQube 網頁，就可看到 <code>Angular52</code> 專案已經出現 SonarQube。</p>
<p>到目前為止，SonarQube 對 TypeScript 的檢查已經完成，就算只將 SonarQube 裝在本機，也對 TypeScript 程式碼品質的檢查有很大的幫助。</p>
<p>若每次 SonarQube 檢查完，都能將結果送到 Slack，讓 Slack 成為實質的 <code>持續整合</code> 中心，那就太好了。</p>
<blockquote>
<p>Q：Angular 專案有 <code>node_modules</code> 目錄，不需如 Lavavel 專案去排除 <code>vendor</code> 目錄嗎？</p>
</blockquote>
<p><img src="/images/sonarqube/angular/slack050.png" alt="lack05"></p>
<p><strong><em>Administration -&gt; TypeScript</em></strong></p>
<p>預設已經排除了 <code>node_modules</code>，所以不須在 <code>sonar-scanner</code> 下特別指定。</p>
<h2 id="Slack">Slack</h2><hr>
<p><strong>新增 Channel</strong></p>
<p><img src="/images/sonarqube/angular/slack012.png" alt="lack01"></p>
<ol>
<li>按下 <code>Channels</code> 右側的 <code>+</code> 新增 channel</li>
</ol>
<p><img src="/images/sonarqube/angular/slack013.png" alt="lack01"></p>
<ol>
<li><strong>Privacy</strong> : 設定為 <code>Public</code> 或 <code>Private</code> channel</li>
<li><strong>Name</strong> : 設定 channel 名稱</li>
<li><strong>Purpose</strong> : channel 的功能描述，可以不輸入</li>
<li><strong>Send invites to</strong> : 設定 channel 成員，可以稍後再設定</li>
<li>按 <code>Create Channel</code> 開始建立 channel</li>
</ol>
<p><img src="/images/sonarqube/angular/slack014.png" alt="lack01"></p>
<ol>
<li>按 <code>Got It!</code> 進入 channel</li>
</ol>
<p><img src="/images/sonarqube/angular/slack015.png" alt="lack01"></p>
<ol>
<li>正式進入 channel，將來 SonarQube 訊息會傳進此 channel</li>
</ol>
<p><strong>新增 Notification</strong></p>
<p><img src="/images/sonarqube/angular/slack016.png" alt="lack01"></p>
<ol>
<li>選擇右上方的 <code>option</code></li>
<li>選擇 <code>Add an app</code></li>
</ol>
<p><strong>新增 Incoming WebHooks</strong></p>
<p><img src="/images/sonarqube/angular/slack017.png" alt="lack01"></p>
<p>Slack 將開啟瀏覽器</p>
<ol>
<li>稍微往下捲輸入 <code>webhook</code></li>
<li>選擇 <code>Incoming WebHooks</code></li>
</ol>
<p><strong>新增 Configuration</strong></p>
<p><img src="/images/sonarqube/angular/slack018.png" alt="lack01"></p>
<ol>
<li>按 <code>Add Configuration</code> 加入 Jenkins CI</li>
</ol>
<p><strong>新增 Integration</strong></p>
<p><img src="/images/sonarqube/angular/slack019.png" alt="lack01"></p>
<ol>
<li>按 <code>Add Incoming WebHooks Integration</code> 正式加入整合</li>
</ol>
<p><strong>Slack 設定完成</strong></p>
<p><img src="/images/sonarqube/angular/slack020.png" alt="lack02"></p>
<ol>
<li>介紹 SonarQube 設定流程</li>
</ol>
<blockquote>
<p>Slack 部分已經設定完成，接下來是 SonarQube 的設定</p>
<p>Slack 網頁先不要關閉，稍後會用到</p>
</blockquote>
<h2 id="SonarQube_Slack_Notifier">SonarQube Slack Notifier</h2><hr>
<p>SonarQube 預設並沒有辦法直接對 Slack 發出 notification，必須另外安裝 <a href="https://github.com/kogitant/sonar-slack-notifier-plugin" target="_blank" rel="external">CKS Sonar Slack Notifier Plugin</a>。</p>
<p><strong>下載 Plugin</strong></p>
<p><img src="/images/sonarqube/angular/slack021.png" alt="lack02"></p>
<p><strong>安裝 Plugin</strong></p>
<p><img src="/images/sonarqube/angular/slack022.png" alt="lack02"></p>
<p>將 <code>cks-slack-notifier-2.1.2.jar</code> 複製到 <code>/usr/local/Cellar/sonarqube/7.0/libexec/extensions/plugins</code> 目錄下。</p>
<blockquote>
<p>因為 Homebrew 會將 app 安裝在 <code>/usr/local/Cellar/</code> 目錄下</p>
</blockquote>
<p><strong>設定 Plugin</strong></p>
<p><img src="/images/sonarqube/angular/slack023.png" alt="lack02"></p>
<p>重新啟動 SonarQube：</p>
<p><strong><em>Administration -&gt; Slack</em></strong></p>
<ol>
<li>在 <code>Administration</code> 下會發現多了 <code>Slack</code></li>
<li>選擇 <code>Slack</code></li>
<li><strong>Slack web integration hook</strong>：設定 <code>Slack web integration hook</code></li>
<li><strong>Plugin enabled</strong>：<code>enable</code></li>
</ol>
<blockquote>
<p>Q： <code>Slack web integration hook</code> 該填什麼呢？</p>
</blockquote>
<p><img src="/images/sonarqube/angular/slack024.png" alt="lack02"></p>
<p>回到 Slack 最後的網頁往下捲到 <code>Webhook URL</code></p>
<ol>
<li>將 <code>Webhook URL</code> 的一長串 URL 複製，貼到 SonarQube 的 <code>Slack web integration hook</code></li>
</ol>
<p>最後按 <code>Save</code> 存檔。</p>
<p><strong>設定 Project 與 Channel</strong></p>
<p>雖然已經設定了 SonarQube 的 Webhook URL，但還要繼續設定 project 與所對應的 Slack channel，才會正式開啟 notification。</p>
<p><img src="/images/sonarqube/angular/slack025.png" alt="lack02"></p>
<ol>
<li><strong>Project Key</strong>： 設定 SonarQube 的 project key</li>
<li><strong>Slack channel</strong>：設定所要通知 Slack channel</li>
</ol>
<p>最後按 <code>Save</code> 存檔。</p>
<p><strong>測試 Plugin</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ sonar-scanner -Dsonar.projectKey=Angular52 -Dsonar.sources=. -Dsonar.projectName=Angular52 -Dsonar.projectVersion=<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>重新執行 <code>sonar-scanner</code>。</p>
<p><img src="/images/sonarqube/angular/slack027.png" alt="lack02"></p>
<ol>
<li>重新在專案目錄下輸入 <code>sonar-scanner</code> 檢查 TypeScript</li>
</ol>
<p><img src="/images/sonarqube/angular/slack026.png" alt="lack02"></p>
<ol>
<li>Slack 會收到 SonarQube 檢查的結果</li>
</ol>
<p>實務上 SonarQube 還會與其他 CI server 合作，接下來將以 Jenkins 為例，介紹如何以 Jenkins 自動化 SonarQube。</p>
<h2 id="Jenkins">Jenkins</h2><hr>
<p><strong>安裝 Jenkins</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install jenkins-lts</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew 安裝 Jenkins。</p>
<p><img src="/images/sonarqube/angular/slack028.png" alt="lack02"></p>
<ol>
<li>輸入 <code>brew install jenkins-lts</code> 安裝</li>
<li>若想在每次 Mac 重開機就自動執行 Jenkins，輸入 <code>brew services start jenkins-lts</code></li>
<li>若想自行啟動 Jenkins，輸入 <code>jenkins-lts</code></li>
</ol>
<p><strong>啟動 Jenkins</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>jenkins-lts</span><br></pre></td></tr></table></figure>
<p>使用 <code>jenkins-lts</code> 自行啟動 Jenkins。</p>
<p><img src="/images/sonarqube/angular/slack029.png" alt="lack02"></p>
<p><strong>Unlock Jenkins</strong></p>
<p><img src="/images/sonarqube/angular/slack030.png" alt="lack03"></p>
<ol>
<li>輸入 <code>localhost:8080</code>，看到 Unlock Jenkins，開始設定 Jenkins</li>
<li>預設密碼放在 <code>./jenkins/secrets/initialAdminPassword</code></li>
</ol>
<p><strong>Customize Jenkins</strong></p>
<p><img src="/images/sonarqube/angular/slack031.png" alt="lack03"></p>
<ol>
<li>選擇 <code>Install suggested plugins</code> 即可</li>
</ol>
<p><strong>Getting Started</strong><br><img src="/images/sonarqube/angular/slack032.png" alt="lack03"></p>
<p>安裝 default plugin 中。</p>
<p><strong>Create Admin User</strong></p>
<p><img src="/images/sonarqube/angular/slack033.png" alt="lack03"></p>
<ol>
<li>建立管理者帳號</li>
</ol>
<p><strong>Jenkins is Ready</strong></p>
<p><img src="/images/sonarqube/angular/slack034.png" alt="lack03"></p>
<ol>
<li>Jenkins 安裝完成，按 <code>Start using jenkins</code> 開始使用 Jenkins</li>
</ol>
<p><strong>Welcome to Jenkins</strong></p>
<p><img src="/images/sonarqube/angular/slack035.png" alt="lack03"></p>
<ol>
<li>進入 Jenkins 管理介面，如此 Jenkins 已經設定成功</li>
</ol>
<h2 id="SonarQube_Scanner_for_Jenkins">SonarQube Scanner for Jenkins</h2><hr>
<p>要讓 Jenkins 能自動執行 SonarQube Scanner，必須另外安裝 plugin。</p>
<p><strong>安裝 SonarQube Scanner for Jenkins</strong></p>
<p><img src="/images/sonarqube/angular/slack036.png" alt="lack03"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Manage Plugins</code></li>
</ol>
<p><img src="/images/sonarqube/angular/slack037.png" alt="lack03"></p>
<ol>
<li>選擇 <code>SonarQube Scanner</code></li>
<li>按 <code>Download now and install after restart</code></li>
</ol>
<p><img src="/images/sonarqube/angular/slack038.png" alt="lack03"></p>
<p>安裝 plugin 中。</p>
<ol>
<li>將 <code>Restart Jenkins when installation is complete and no jobs are running</code> 打勾</li>
</ol>
<p><strong>設定 SonarQube 環境變數</strong></p>
<p><img src="/images/sonarqube/angular/slack039.png" alt="lack03"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Configure System</code></li>
</ol>
<p><img src="/images/sonarqube/angular/slack040.png" alt="lack04"></p>
<ol>
<li>找到 <code>SonarQube servers</code> 區段</li>
<li>將 <code>Enable injection of SonarQube server configuration as build environment variables</code> 打勾</li>
<li>設定 SonarQube server 名稱與網址</li>
</ol>
<p>最後按 <code>Apply</code> 與 <code>Save</code> 儲存設定。</p>
<p><strong>設定 SonarQube Scanner 環境變數</strong></p>
<p><img src="/images/sonarqube/angular/slack041.png" alt="lack04"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Global Tool Configuration</code></li>
</ol>
<p><img src="/images/sonarqube/angular/slack042.png" alt="lack04"></p>
<ol>
<li>找到 <code>SonarQube Scanner</code> 區段</li>
<li>設定 SonarQube Scanner 名稱</li>
</ol>
<p>最後按 <code>Apply</code> 與 <code>Save</code> 儲存設定。</p>
<h2 id="Jenkins_Job">Jenkins Job</h2><hr>
<p><strong>Source Code Management</strong></p>
<p><img src="/images/sonarqube/angular/slack043.png" alt="lack04"></p>
<ol>
<li>選擇 Job，按左側 <code>Configure</code></li>
</ol>
<p><img src="/images/sonarqube/angular/slack044.png" alt="lack04"></p>
<ol>
<li>找到 <code>Source Code Management</code> 區段</li>
<li>將 Git 的 <code>Repository URL</code> 設定到 <code>https://github.com/oomusou/NG52JenkinsSonarQubeSlack</code></li>
</ol>
<p><strong>Build</strong></p>
<p><img src="/images/sonarqube/angular/slack045.png" alt="lack04"></p>
<ol>
<li>找到 <code>Build</code> 區段</li>
<li>在 <code>Add build step</code> 選擇 <code>Execute SonarQube Scanner</code></li>
</ol>
<p><img src="/images/sonarqube/angular/slack046.png" alt="lack04"></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sonar.projectKey=Angular52</span><br><span class="line">sonar.sources=. </span><br><span class="line">sonar.projectName=Angular52 </span><br><span class="line">sonar.projectVersion=<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>在 <code>Analysis properties</code> 加上以上設定。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ sonar-scanner -Dsonar.projectKey=Angular52 -Dsonar.sources=. -Dsonar.projectName=Angular52 -Dsonar.projectVersion=<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>還記得之前曾經下過以上指令嗎？就是將這些 SonarQube property 設定在 Jenkins，改由 Jenkins 幫我們傳。</p>
<p><img src="/images/sonarqube/angular/slack047.png" alt="lack04"></p>
<ol>
<li>按左側 <code>Build Now</code> 執行 Job</li>
<li>執行成功後會出現 <code>OK</code> 與 <code>Success</code>。</li>
</ol>
<p><img src="/images/sonarqube/angular/slack048.png" alt="lack04"></p>
<p>剛剛 Jenkins 執行的 Project 出現在 SonarQube 上。</p>
<p><img src="/images/sonarqube/angular/slack049.png" alt="lack04"></p>
<ol>
<li>Slack 也再次收到 SonarQube 檢查的結果</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>SonarQube 已經內建 SonarTS，也可以用來檢查 TypeScript 與 Angular</li>
<li>就算不將 SonarQube 安裝在 server，安裝在本機也能有效的檢查 TypeScript 程式碼品質</li>
<li>SonarQube 也能將檢查結果推送到 Slack</li>
<li>藉由 Jenkins 幫忙，我們就可以自動化執行 SonarQube</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG52JenkinsSonarQubeSlack" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.sonarqube.org" target="_blank" rel="external">SonarQube</a>, <a href="https://www.sonarqube.org/downloads/" target="_blank" rel="external">SonarQube Downloads</a><br><a href="https://docs.sonarqube.org/" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="external">Analyzing with SonarQube Scanner</a><br><a href="https://docs.sonarqube.org/" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins" target="_blank" rel="external">Analying with SonarQube Scanner for Jenkins</a><br><a href="https://jenkins.io/" target="_blank" rel="external">Jenkins</a>, <a href="https://plugins.jenkins.io/sonar" target="_blank" rel="external">SonarQube Scanner</a><br><a href="https://github.com/kogitant" target="_blank" rel="external">Antti Koivisto</a>, <a href="https://github.com/kogitant/sonar-slack-notifier-plugin" target="_blank" rel="external">CKS Sonar Slack Notifier Plugin</a></p>
]]></content>
    <summary type="html">
    <![CDATA[持續檢查 TypeScript 程式碼品質]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
      <category term="Slack" scheme="http://oomusou.io/tags/Slack/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入淺出 F# 之 Partial Function Application]]></title>
    <link href="http://oomusou.io/fsharp/partial-function-application/"/>
    <id>http://oomusou.io/fsharp/partial-function-application/</id>
    <published>2018-04-03T12:23:43.000Z</published>
    <updated>2018-04-03T02:55:22.082Z</updated>
    <content type="html"><![CDATA[<p>FP 既然強調 Higher Order Function，就會希望 argument 以 function 傳入，因此就會有 function 能夠傳回 function 的需求，除了回傳 Anonymous Function 或 Lambda Expression 外，F# 更提供了 Partial Function Application ，讓程式碼更優雅。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>JetBrains Rider 2017.3.1<br>F# 4.1</p>
<h2 id="Lambda_Expression">Lambda Expression</h2><hr>
<p>舉一個最簡單的例子</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1.</span><span class="number">.5</span>]</span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> i -&gt; printfn <span class="string">"%d"</span> i)</span><br></pre></td></tr></table></figure>
<p>將 <code>1</code> 到 <code>5</code> 的 <code>List</code> 全部印出來。</p>
<p><img src="/images/fsharp/partial/partial000.png" alt="artial00"></p>
<p><code>List.iter()</code> 的 argument 要求 <code>&#39;T -&gt; unit</code> 的 function。</p>
<p>在沒有提供 Partial Function Application 的程式語言，我們會傳進 Anonymous function 或 Lambda Expression。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fun</span> i -&gt; printfn <span class="string">"%d"</span> i</span><br></pre></td></tr></table></figure>
<p>這種寫法中規中矩，儘管語法不太一樣，在一般語言都看得到。</p>
<h2 id="Partial_Function_Application">Partial Function Application</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1.</span><span class="number">.5</span>]</span><br><span class="line">|&gt; List.iter (printfn <span class="string">"%d"</span>)</span><br></pre></td></tr></table></figure>
<p>既然 <code>List.iter()</code> 的 argument 要求 <code>&#39;T -&gt; unit</code> 的 function，我們只要能產生 <code>T -&gt; unit</code> 就符合 <code>List.iter()</code> 的需求。</p>
<p><code>printfn()</code> 的 singnature 為 <code>string -&gt; &#39;T -&gt; unit</code>，他的意思是：</p>
<ul>
<li>當傳入兩個參數為 <code>string</code> 與 <code>&#39;T</code> 時，回傳值為 <code>unit</code></li>
<li>當傳入一個 參數為 <code>string</code> 時，回傳值回 <code>T -&gt; unit</code></li>
</ul>
<p><code>List.iter()</code> 要的正是 <code>&#39;T -&gt; unit</code>，所以我們只要傳入一個參數即可。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printfn <span class="string">"%d"</span></span><br></pre></td></tr></table></figure>
<p>這種寫法是不是比 Lambda Expression 更優雅呢？</p>
<h2 id="Summary">Summary</h2><hr>
<ul>
<li>在多參數的 function，只要提供 <code>部分參數</code>，就會回傳一個新的 function，而不必自己建立 Anonymous Function 或 Lambda Expression。</li>
<li>在多參數的 function，其型別是以 <code>-&gt;</code> 隔開，如 <code>string -&gt; &#39;T -&gt; unit</code>，而不是 <code>string, &#39;T -&gt; unit</code>，因為 F# 的 function 可隨時提供 <code>部分參數</code>，而回傳新的 function，如只提供 <code>string</code>，就會回傳 <code>&#39;T -&gt; unit</code>，這也是為什麼 F# 在每個參數間以 <code>-&gt;</code> 隔開，而非 <code>,</code></li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Partial Function Application 並不是 F# 的獨門絕技，只要是 FP 語言都會有，算是 FP 語言的基本要求，但在一般語言如 C#、JavaScript 卻看不到，只能使用 Lambda Expression / Anonymous Function / Arrow Function 來處理，但 Partial Function Application 提供了更優雅的方式</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[更優雅的方式產生 function]]>
    
    </summary>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 SonarQube 檢查 .NET Core 專案？]]></title>
    <link href="http://oomusou.io/sonarqube/netcore/"/>
    <id>http://oomusou.io/sonarqube/netcore/</id>
    <published>2018-04-02T12:23:43.000Z</published>
    <updated>2018-04-03T06:48:49.216Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 是一套 <code>程式碼品質檢查工具</code>，可以幫我們檢查 code 的 bugs、 vulenrability、code smell 與 duplication，也屬於 <code>持續整合</code> 重要的一環。</p>
<p>SonarQube 已經內建 SonarC#，可以直接對 C# 進行檢查，本文將以 .NET Core 為例，並搭配 Jenkins 自動執行 SonarQube，將結果通知 Slack。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>SonarQube 6.7.2 LTS<br>Jenkins 2.107.1<br>Slack 3.0.5<br>.NET Core 2.0.6</p>
<h2 id="GitHub">GitHub</h2><hr>
<p>將 .NET Core 專案放到 GitHub。</p>
<p><img src="/images/sonarqube/slack/slack000.png" alt="lack00"></p>
<ol>
<li>本文將 .NET Core 專案放在 <code>https://github.com/oomusou/Core2JenkinsSonarQubeSlack</code></li>
</ol>
<blockquote>
<p>當然也可以將 git repository 放在不同的 git server，如 Bitbucket</p>
</blockquote>
<h2 id="SonarQube">SonarQube</h2><hr>
<p><strong>安裝 SonarQube</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update</span><br><span class="line">$ <span class="keyword">brew </span>install sonarqube</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew 安裝 SonarQube。</p>
<p><img src="/images/sonarqube/slack/slack001.png" alt="lack00"></p>
<ol>
<li>輸入 <code>brew install sonarqube</code> 安裝</li>
<li>若想在每次 Mac 重開機就自動執行 SonarQube，輸入 <code>brew services start sonarqube</code></li>
<li>若想自行啟動 SonarQube，輸入 <code>sonar console</code></li>
</ol>
<p><strong>啟動 SonarConsole</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sonar <span class="built_in">console</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>sonar console</code> 自行啟動 SonarQube。</p>
<p><img src="/images/sonarqube/slack/slack002.png" alt="lack00"></p>
<ol>
<li>輸入 <code>sonar console</code> 自行啟動 SonarQube</li>
</ol>
<p><strong>測試 SonarQube</strong></p>
<p><img src="/images/sonarqube/slack/slack003.png" alt="lack00"></p>
<ol>
<li>輸入 <code>localhost:9000</code>，若看到 SonarQube 首頁，則表示安裝成功</li>
<li>右上角 <code>Log in</code> 可登入管理設定 SonarQube，預設為 <code>admin/admin</code></li>
</ol>
<h2 id="SonarQube_Scanner">SonarQube Scanner</h2><hr>
<p>SonarQube 雖然已經包含 SonarC#，但必須靠 SonarQube Scanner 才能執行，預設 SonarQube 並沒有包含 Scanner，必須自行安裝。</p>
<p><strong>下載 Scanner</strong></p>
<p><img src="/images/sonarqube/slack/slack004.png" alt="hp00"></p>
<p>到 <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="external">Analyzing with SonarQube Scanner</a> 下載 Scanner，選擇 <code>Mac OS X 64 bit</code> 下載。</p>
<p><img src="/images/sonarqube/slack/slack005.png" alt="lack00"></p>
<p>下載後為一 <code>zip</code> 壓縮檔，解壓縮後可安裝在任何目錄。</p>
<p><img src="/images/sonarqube/slack/slack006.png" alt="lack00"></p>
<ol>
<li>選擇 home directory</li>
<li>將 <code>sonar-scanner-3.1.0.1141-macosx</code> 放在 home directory 下</li>
</ol>
<p><strong>設定 Server</strong></p>
<p><strong>sonar-scanner.properties</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#----- Default SonarQube server</span><br><span class="line">sonar<span class="class">.host</span><span class="class">.url</span>=http:<span class="comment">//localhost:9000</span></span><br></pre></td></tr></table></figure>
<p>設定 SonarQube server 位址，並將 <code>#</code> 註解拿掉。</p>
<p><img src="/images/sonarqube/slack/slack007.png" alt="lack00"></p>
<ol>
<li><code>sonar-scanner.properties</code> 位於 <code>sonar-scanner-3.1.0.1141-macosx/conf/</code> 目錄下</li>
</ol>
<p><strong>測試 Scanner</strong></p>
<p>將 SonarQube Scanner 加到 system path。</p>
<p><strong>.zshrc</strong><br><img src="/images/sonarqube/slack/slack008.png" alt="lack00"></p>
<ol>
<li>將 <code>~/sonar-scanner-3.1.0.1141-macosx/bin</code> 目錄加到 system path</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ sonar-scanner -Dsonar.projectKey=NETCore2 -Dsonar.sources=. -Dsonar.projectName=NETCore2 -Dsonar.projectVersion=<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>sonar-scanner</code> 對 Laravel 專案進行檢查。</p>
<ul>
<li><strong>-D</strong> : 對 SonarQube 的 property 進行設定</li>
<li><strong>sonar.projectKey</strong>：SonarQube 對專案的 key，內部將以此 key 作為辨別，必須唯一</li>
<li><strong>sonar.sources</strong>：SonarQube 要檢查的目錄，因為已經在專案目錄下，<code>.</code> 即為 <code>目前目錄</code></li>
<li><strong>sonar.projectName</strong>：在 SonarQube 網頁上顯示的名稱</li>
<li><strong>sonar.projectVersion</strong>：在 SonarQube 網頁上顯示的版本編號</li>
</ul>
<p><img src="/images/sonarqube/slack/slack009.png" alt="lack00"></p>
<ol>
<li>在專案目錄下輸入 <code>sonar-scanner</code> 檢查 C#</li>
</ol>
<p><img src="/images/sonarqube/slack/slack010.png" alt="lack01"></p>
<ol>
<li>若能看到 <code>EXECUTION SUCCESS</code>，則表示 SonarQube Scanner 安裝成功</li>
</ol>
<p><img src="/images/sonarqube/slack/slack011.png" alt="lack01"></p>
<p>進入 SonarQube 網頁，就可看到 <code>NETCore2</code> 專案已經出現 SonarQube。</p>
<p>到目前為止，SonarQube 對 C# 的檢查已經完成，就算只將 SonarQube 裝在本機，也對 C# 程式碼品質的檢查有很大的幫助。</p>
<p>若每次 SonarQube 檢查完，都能將結果送到 Slack，讓 Slack 成為實質的 <code>持續整合</code> 中心，那就太好了。</p>
<h2 id="Slack">Slack</h2><hr>
<p><strong>新增 Channel</strong></p>
<p><img src="/images/sonarqube/slack/slack012.png" alt="lack01"></p>
<ol>
<li>按下 <code>Channels</code> 右側的 <code>+</code> 新增 channel</li>
</ol>
<p><img src="/images/sonarqube/slack/slack013.png" alt="lack01"></p>
<ol>
<li><strong>Privacy</strong> : 設定為 <code>Public</code> 或 <code>Private</code> channel</li>
<li><strong>Name</strong> : 設定 channel 名稱</li>
<li><strong>Purpose</strong> : channel 的功能描述，可以不輸入</li>
<li><strong>Send invites to</strong> : 設定 channel 成員，可以稍後再設定</li>
<li>按 <code>Create Channel</code> 開始建立 channel</li>
</ol>
<p><img src="/images/sonarqube/slack/slack014.png" alt="lack01"></p>
<ol>
<li>按 <code>Got It!</code> 進入 channel</li>
</ol>
<p><img src="/images/sonarqube/slack/slack015.png" alt="lack01"></p>
<ol>
<li>正式進入 channel，將來 SonarQube 訊息會傳進此 channel</li>
</ol>
<p><strong>新增 Notification</strong></p>
<p><img src="/images/sonarqube/slack/slack016.png" alt="lack01"></p>
<ol>
<li>選擇右上方的 <code>option</code></li>
<li>選擇 <code>Add an app</code></li>
</ol>
<p><strong>新增 Incoming WebHooks</strong></p>
<p><img src="/images/sonarqube/slack/slack017.png" alt="lack01"></p>
<p>Slack 將開啟瀏覽器</p>
<ol>
<li>稍微往下捲輸入 <code>webhook</code></li>
<li>選擇 <code>Incoming WebHooks</code></li>
</ol>
<p><strong>新增 Configuration</strong></p>
<p><img src="/images/sonarqube/slack/slack018.png" alt="lack01"></p>
<ol>
<li>按 <code>Add Configuration</code> 加入 Jenkins CI</li>
</ol>
<p><strong>新增 Integration</strong></p>
<p><img src="/images/sonarqube/slack/slack019.png" alt="lack01"></p>
<ol>
<li>按 <code>Add Incoming WebHooks Integration</code> 正式加入整合</li>
</ol>
<p><strong>Slack 設定完成</strong></p>
<p><img src="/images/sonarqube/slack/slack020.png" alt="lack02"></p>
<ol>
<li>介紹 SonarQube 設定流程</li>
</ol>
<blockquote>
<p>Slack 部分已經設定完成，接下來是 SonarQube 的設定</p>
<p>Slack 網頁先不要關閉，稍後會用到</p>
</blockquote>
<h2 id="SonarQube_Slack_Notifier">SonarQube Slack Notifier</h2><hr>
<p>SonarQube 預設並沒有辦法直接對 Slack 發出 notification，必須另外安裝 <a href="https://github.com/kogitant/sonar-slack-notifier-plugin" target="_blank" rel="external">CKS Sonar Slack Notifier Plugin</a>。</p>
<p><strong>下載 Plugin</strong></p>
<p><img src="/images/sonarqube/slack/slack021.png" alt="lack02"></p>
<p><strong>安裝 Plugin</strong></p>
<p><img src="/images/sonarqube/slack/slack022.png" alt="lack02"></p>
<p>將 <code>cks-slack-notifier-2.1.2.jar</code> 複製到 <code>/usr/local/Cellar/sonarqube/7.0/libexec/extensions/plugins</code> 目錄下。</p>
<blockquote>
<p>因為 Homebrew 會將 app 安裝在 <code>/usr/local/Cellar/</code> 目錄下</p>
</blockquote>
<p><strong>設定 Plugin</strong></p>
<p><img src="/images/sonarqube/slack/slack023.png" alt="lack02"></p>
<p>重新啟動 SonarQube：</p>
<ol>
<li>在 <code>Administration</code> 下會發現多了 <code>Slack</code></li>
<li>選擇 <code>Slack</code></li>
<li><strong>Slack web integration hook</strong>：設定 <code>Slack web integration hook</code></li>
<li><strong>Plugin enabled</strong>：<code>enable</code></li>
</ol>
<blockquote>
<p>Q： <code>Slack web integration hook</code> 該填什麼呢？</p>
</blockquote>
<p><img src="/images/sonarqube/slack/slack024.png" alt="lack02"></p>
<p>回到 Slack 最後的網頁往下捲到 <code>Webhook URL</code></p>
<ol>
<li>將 <code>Webhook URL</code> 的一長串 URL 複製，貼到 SonarQube 的 <code>Slack web integration hook</code></li>
</ol>
<p>最後按 <code>Save</code> 存檔。</p>
<p><strong>設定 Project 與 Channel</strong></p>
<p>雖然已經設定了 SonarQube 的 Webhook URL，但還要繼續設定 project 與所對應的 Slack channel，才會正式開啟 notification。</p>
<p><img src="/images/sonarqube/slack/slack025.png" alt="lack02"></p>
<ol>
<li><strong>Project Key</strong>： 設定 SonarQube 的 project key</li>
<li><strong>Slack channel</strong>：設定所要通知 Slack channel</li>
</ol>
<p>最後按 <code>Save</code> 存檔。</p>
<p><strong>測試 Plugin</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ sonar-scanner -Dsonar.projectKey=NETCore2 -Dsonar.sources=. -Dsonar.projectName=NETCore2 -Dsonar.projectVersion=<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>重新執行 <code>sonar-scanner</code>。</p>
<p><img src="/images/sonarqube/slack/slack027.png" alt="lack02"></p>
<ol>
<li>重新在專案目錄下輸入 <code>sonar-scanner</code> 檢查 C#</li>
</ol>
<p><img src="/images/sonarqube/slack/slack026.png" alt="lack02"></p>
<ol>
<li>Slack 會收到 SonarQube 檢查的結果</li>
</ol>
<p>實務上 SonarQube 還會與其他 CI server 合作，接下來將以 Jenkins 為例，介紹如何以 Jenkins 自動化 SonarQube。</p>
<h2 id="Jenkins">Jenkins</h2><hr>
<p><strong>安裝 Jenkins</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install jenkins-lts</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew 安裝 Jenkins。</p>
<p><img src="/images/sonarqube/slack/slack028.png" alt="lack02"></p>
<ol>
<li>輸入 <code>brew install jenkins-lts</code> 安裝</li>
<li>若想在每次 Mac 重開機就自動執行 Jenkins，輸入 <code>brew services start jenkins-lts</code></li>
<li>若想自行啟動 Jenkins，輸入 <code>jenkins-lts</code></li>
</ol>
<p><strong>啟動 Jenkins</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>jenkins-lts</span><br></pre></td></tr></table></figure>
<p>使用 <code>jenkins-lts</code> 自行啟動 Jenkins。</p>
<p><img src="/images/sonarqube/slack/slack029.png" alt="lack02"></p>
<p><strong>Unlock Jenkins</strong></p>
<p><img src="/images/sonarqube/slack/slack030.png" alt="lack03"></p>
<ol>
<li>輸入 <code>localhost:8080</code>，看到 Unlock Jenkins，開始設定 Jenkins</li>
<li>預設密碼放在 <code>./jenkins/secrets/initialAdminPassword</code></li>
</ol>
<p><strong>Customize Jenkins</strong></p>
<p><img src="/images/sonarqube/slack/slack031.png" alt="lack03"></p>
<ol>
<li>選擇 <code>Install suggested plugins</code> 即可</li>
</ol>
<p><strong>Getting Started</strong></p>
<p><img src="/images/sonarqube/slack/slack032.png" alt="lack03"></p>
<p>安裝 default plugin 中。</p>
<p><strong>Create Admin User</strong></p>
<p><img src="/images/sonarqube/slack/slack033.png" alt="lack03"></p>
<ol>
<li>建立管理者帳號</li>
</ol>
<p><strong>Jenkins is Ready</strong></p>
<p><img src="/images/sonarqube/slack/slack034.png" alt="lack03"></p>
<ol>
<li>Jenkins 安裝完成，按 <code>Start using jenkins</code> 開始使用 Jenkins</li>
</ol>
<p><strong>Welcome to Jenkins</strong></p>
<p><img src="/images/sonarqube/slack/slack035.png" alt="lack03"></p>
<ol>
<li>進入 Jenkins 管理介面，如此 Jenkins 已經設定成功</li>
</ol>
<h2 id="SonarQube_Scanner_for_Jenkins">SonarQube Scanner for Jenkins</h2><hr>
<p>要讓 Jenkins 能自動執行 SonarQube Scanner，必須另外安裝 plugin。</p>
<p><strong>安裝 SonarQube Scanner for Jenkins</strong></p>
<p><img src="/images/sonarqube/slack/slack036.png" alt="lack03"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Manage Plugins</code></li>
</ol>
<p><img src="/images/sonarqube/slack/slack037.png" alt="lack03"></p>
<ol>
<li>選擇 <code>SonarQube Scanner</code></li>
<li>按 <code>Download now and install after restart</code></li>
</ol>
<p><img src="/images/sonarqube/slack/slack038.png" alt="lack03"></p>
<p>安裝 plugin 中。</p>
<ol>
<li>將 <code>Restart Jenkins when installation is complete and no jobs are running</code> 打勾</li>
</ol>
<p><strong>設定 SonarQube 環境變數</strong></p>
<p><img src="/images/sonarqube/slack/slack039.png" alt="lack03"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Configure System</code></li>
</ol>
<p><img src="/images/sonarqube/slack/slack040.png" alt="lack04"></p>
<ol>
<li>找到 <code>SonarQube servers</code> 區段</li>
<li>將 <code>Enable injection of SonarQube server configuration as build environment variables</code> 打勾</li>
<li>設定 SonarQube server 名稱與網址</li>
</ol>
<p>最後按 <code>Apply</code> 與 <code>Save</code> 儲存設定。</p>
<p><strong>設定 SonarQube Scanner 環境變數</strong></p>
<p><img src="/images/sonarqube/slack/slack041.png" alt="lack04"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Global Tool Configuration</code></li>
</ol>
<p><img src="/images/sonarqube/slack/slack042.png" alt="lack04"></p>
<ol>
<li>找到 <code>SonarQube Scanner</code> 區段</li>
<li>設定 SonarQube Scanner 名稱</li>
</ol>
<p>最後按 <code>Apply</code> 與 <code>Save</code> 儲存設定。</p>
<h2 id="Jenkins_Job">Jenkins Job</h2><hr>
<p><strong>Source Code Management</strong></p>
<p><img src="/images/sonarqube/slack/slack043.png" alt="lack04"></p>
<ol>
<li>選擇 Job，按左側 <code>Configure</code></li>
</ol>
<p><img src="/images/sonarqube/slack/slack044.png" alt="lack04"></p>
<ol>
<li>找到 <code>Source Code Management</code> 區段</li>
<li>將 Git 的 <code>Repository URL</code> 設定到 <code>https://github.com/oomusou/Core2JenkinsSonarQubeSlack</code></li>
</ol>
<p><strong>Build</strong></p>
<p><img src="/images/sonarqube/slack/slack045.png" alt="lack04"></p>
<ol>
<li>找到 <code>Build</code> 區段</li>
<li>在 <code>Add build step</code> 選擇 <code>Execute SonarQube Scanner</code></li>
</ol>
<p><img src="/images/sonarqube/slack/slack046.png" alt="lack04"></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sonar.projectKey=NETCore2</span><br><span class="line">sonar.sources=.</span><br><span class="line">sonar.projectName=NETCore2</span><br><span class="line">sonar.projectVersion=<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>在 <code>Analysis properties</code> 加上以上設定。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ sonar-scanner -Dsonar.projectKey=NETCore2 -Dsonar.sources=. -Dsonar.projectName=NETCore2 -Dsonar.projectVersion=<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>還記得之前曾經下過以上指令嗎？就是將這些 SonarQube property 設定在 Jenkins，改由 Jenkins 幫我們傳。</p>
<p><img src="/images/sonarqube/slack/slack047.png" alt="lack04"></p>
<ol>
<li>按左側 <code>Build Now</code> 執行 Job</li>
<li>執行成功後會出現 <code>OK</code> 與 <code>Success</code>。</li>
</ol>
<p><img src="/images/sonarqube/slack/slack048.png" alt="lack04"></p>
<p>剛剛 Jenkins 執行的 Project 出現在 SonarQube 上。</p>
<p><img src="/images/sonarqube/slack/slack049.png" alt="lack04"></p>
<ol>
<li>Slack 也再次收到 SonarQube 檢查的結果</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>SonarQube 已經內建 SonarC#，也可以用來檢查 C# 與 .NET Core</li>
<li>就算不將 SonarQube 安裝在 server，安裝在本機也能有效的檢查 C# 程式碼品質</li>
<li>SonarQube 也能將檢查結果推送到 Slack</li>
<li>藉由 Jenkins 幫忙，我們就可以自動化執行 SonarQube</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Core2JenkinsSonarQubeSlack" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.sonarqube.org" target="_blank" rel="external">SonarQube</a>, <a href="https://www.sonarqube.org/downloads/" target="_blank" rel="external">SonarQube Downloads</a><br><a href="https://docs.sonarqube.org/" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="external">Analyzing with SonarQube Scanner</a><br><a href="https://docs.sonarqube.org/" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins" target="_blank" rel="external">Analying with SonarQube Scanner for Jenkins</a><br><a href="https://jenkins.io/" target="_blank" rel="external">Jenkins</a>, <a href="https://plugins.jenkins.io/sonar" target="_blank" rel="external">SonarQube Scanner</a><br><a href="https://github.com/kogitant" target="_blank" rel="external">Antti Koivisto</a>, <a href="https://github.com/kogitant/sonar-slack-notifier-plugin" target="_blank" rel="external">CKS Sonar Slack Notifier Plugin</a></p>
]]></content>
    <summary type="html">
    <![CDATA[持續檢查 C# 程式碼品質]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="C#" scheme="http://oomusou.io/tags/C/"/>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
      <category term="Slack" scheme="http://oomusou.io/tags/Slack/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入淺出 F# 之 Unit 與 Ignore]]></title>
    <link href="http://oomusou.io/fsharp/unit-ignore/"/>
    <id>http://oomusou.io/fsharp/unit-ignore/</id>
    <published>2018-04-01T12:23:43.000Z</published>
    <updated>2018-04-03T02:57:31.197Z</updated>
    <content type="html"><![CDATA[<p>F# 是 FP，強調 function 都要有 input 值，也要有 return 值，若 function 真的沒有 input 值，也沒有 return 值，在 F# 該如何表示呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>JetBrains Rider 2017.3.1<br>F# 4.1</p>
<h2 id="Unit_與_()">Unit 與 ()</h2><hr>
<p>FP 的思考來自於數學函數，認為 function 都要有 <code>定義域</code> 與 <code>對應域</code>，如 <code>y = f(x)</code>，也就是 input  <code>x</code> 的型別就是 <code>定義域</code>，而 return  <code>y</code> 的型別就是 <code>對應域</code>。</p>
<p>但在電腦語言的 function，可能沒有 input 值，也可能沒有 return 值，這就與數學 function 不同，針對這種需求，F# 特別設計出新的型別 <code>unit</code>，其值只有一個 <code>()</code>。</p>
<h2 id="無_return">無 return</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> print msg = printfn <span class="string">"%s"</span> msg</span><br><span class="line"></span><br><span class="line">print <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p><code>print()</code> 為 function，其內容只有 <code>printfn()</code> 印出 <code>msg</code>，這就是典型 I/O 類的 side effect，但沒有 return 值。</p>
<p><img src="/images/fsharp/unit-ignore/unit000.png" alt="nit00"></p>
<p>若觀察 <code>print()</code> 的型別，其為 <code>string -&gt; unit</code> ，也就是若沒 return 值，Type Inference 會推導為 <code>unit</code>。</p>
<blockquote>
<p>Q : 所以 <code>unit</code> 不就 C# 的 <code>void</code>？</p>
</blockquote>
<p>若以無 return 值的 function 觀點，<code>unit</code> 相當於 <code>void</code> 沒錯，但 <code>unit</code> 還有其他用途。</p>
<h2 id="無_input">無 input</h2><hr>
<p>若想要建立 <code>input()</code> ，但不用傳入任何值，就可以印出 <code>Hello World</code>。</p>
<p>直覺會這樣寫：</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> print = printfn <span class="string">"%s"</span> <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p>但別忘了 F# 強調是 Function Value，也就是 function 也視為是一種 value，因此都使用 <code>let</code> 。</p>
<p><img src="/images/fsharp/unit-ignore/unit001.png" alt="nit00"></p>
<p>Type Inference 推導為 <code>unit</code>，是 <code>unit</code> 型別的 value，而不是 function。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> print () = printfn <span class="string">"%s"</span> <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p>正確寫法應該使用 <code>()</code> 代表其無 input 值，但其 <code>定義域</code> 為 <code>()</code> ，也就是 <code>unit</code> type。</p>
<p><img src="/images/fsharp/unit-ignore/unit002.png" alt="nit00"></p>
<p>Type Inference 推導的 <code>print</code> 為 <code>unit -&gt; unit</code>，是 <code>unit -&gt; unit</code> 型別的 function，而不是 value。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> print () = printfn <span class="string">"%s"</span> <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line">print ()</span><br></pre></td></tr></table></figure>
<p>呼叫 <code>prinf()</code> 時，也要明確傳入 <code>()</code> 代表 no input。</p>
<p><img src="/images/fsharp/unit-ignore/unit004.png" alt="nit00"></p>
<h2 id="有_return_但不想用">有 return 但不想用</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum x y  = x + y</span><br><span class="line"></span><br><span class="line">sum <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>明明 <code>sum()</code> 有 return <code>x + y</code>，但呼叫 <code>sum()</code> 時卻沒處理 return 值，compiler 編譯後會抱怨。</p>
<p><img src="/images/fsharp/unit-ignore/unit003.png" alt="nit00"></p>
<p>有兩種解法：</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum x y  = x + y</span><br><span class="line"><span class="keyword">let</span> result = sum <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>明確將 <code>sum()</code> 結果 binding 到 <code>result</code> value，這是 FP 最標準做法。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum x y = x + y</span><br><span class="line">sum <span class="number">2</span> <span class="number">3</span> |&gt; ignore</span><br></pre></td></tr></table></figure>
<p>將 <code>sum()</code> 結果 pipeline 到 <code>ignore()</code>，則 compiler 就不會抱怨。</p>
<blockquote>
<p>實務上若真的不想處理 function 的結果，建議使用 <code>ignore()</code></p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>FP 嚴格遵守數學 function 定義，但電腦 function 卻可能沒有 input 也沒有 return，因此 F# 特別設計出 <code>unit</code> 與 <code>()</code>，這樣就與數學的 <code>定義域</code> 與 <code>對應域</code> 的觀念相通</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="external">Microsoft Docs</a>, <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/unit-type" target="_blank" rel="external">Unit Type</a><br><a href="https://dev.to/josegonz321" target="_blank" rel="external">Jose Gonzales</a>, <a href="https://dev.to/josegonz321/whats-the-unit-type-in-fsharp" target="_blank" rel="external">What’s the Unit Type in F#?</a><br><a href="https://stackoverflow.com/" target="_blank" rel="external">Stack overflow</a>, <a href="https://stackoverflow.com/questions/17870937/what-does-this-notation-mean/17872004#17872004" target="_blank" rel="external">What does this () notation mean?</a><br><a href="http://www.oreilly.com/pub/au/3667" target="_blank" rel="external">Chris Smith</a>, <a href="http://shop.oreilly.com/product/0636920024033.do" target="_blank" rel="external">Pramming F# 3.0 2nd</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓電腦 function 與數學 function 觀念相同]]>
    
    </summary>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 SonarQube 檢查 PHP 專案？]]></title>
    <link href="http://oomusou.io/sonarqube/php/"/>
    <id>http://oomusou.io/sonarqube/php/</id>
    <published>2018-03-31T12:23:43.000Z</published>
    <updated>2018-04-03T06:48:42.776Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 是一套 <code>程式碼品質檢查工具</code>，可以幫我們檢查 code 的 bugs、 vulenrability、code smell 與 duplication，也屬於 <code>持續整合</code> 重要的一環。</p>
<p>SonarQube 已經內建 SonarPHP，可以直接對 PHP 進行檢查，本文將以 Laravel 為例，並搭配 Jenkins 自動執行 SonarQube。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>SonarQube 6.7.2 LTS<br>SonarPHP 2.1.3<br>SonarQube Scanner 3.1<br>Jenkins 2.107.1<br>SonarQube Scanner for Jenkins 2.6.1<br>PHP 7.1.14<br>Laravel 5.6.14</p>
<h2 id="GitHub">GitHub</h2><hr>
<p>將 Laravel 專案放到 GitHub。</p>
<p><img src="/images/sonarqube/php/php015.png" alt="hp01"></p>
<ol>
<li>本文將 Laravel 專案放在 <code>https://github.com/oomusou/Laravel56Demo</code></li>
</ol>
<blockquote>
<p>當然也可以將 git repository 放在不同的 git server，如 Bitbucket</p>
</blockquote>
<h2 id="SonarQube">SonarQube</h2><hr>
<p><strong>安裝 SonarQube</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update</span><br><span class="line">$ <span class="keyword">brew </span>install sonarqube</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew 安裝 SonarQube。</p>
<p><img src="/images/sonarqube/php/php016.png" alt="hp01"></p>
<ol>
<li>輸入 <code>brew install sonarqube</code> 安裝</li>
<li>若想在每次 Mac 重開機就自動執行 SonarQube，輸入 <code>brew services start sonarqube</code></li>
<li>若想自行啟動 SonarQube，輸入 <code>sonar console</code></li>
</ol>
<p><strong>啟動 SonarQube</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sonar <span class="built_in">console</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>sonar console</code> 自行啟動 SonarQube。</p>
<p><img src="/images/sonarqube/php/php025.png" alt="hp02"></p>
<ol>
<li>輸入 <code>sonar console</code> 自行啟動 SonarQube</li>
</ol>
<p><strong>測試 SonarQube</strong></p>
<p><img src="/images/sonarqube/php/php017.png" alt="hp01"></p>
<ol>
<li>輸入 <code>localhost:9000</code>，若看到 SonarQube 首頁，則表示安裝成功</li>
<li>右上角 <code>Log in</code> 可登入管理設定 SonarQube，預設為 <code>admin/admin</code></li>
</ol>
<h2 id="SonarQube_Scanner">SonarQube Scanner</h2><hr>
<p>SonarQube 雖然已經包含 SonarPHP，但必須靠 SonarQube Scanner 才能執行，預設 SonarQube 並沒有包含 Scanner，必須自行安裝。</p>
<p><strong>下載 Scanner</strong></p>
<p><img src="/images/sonarqube/php/php000.png" alt="hp00"></p>
<p>到 <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="external">Analyzing with SonarQube Scanner</a> 下載 Scanner，選擇 <code>Mac OS X 64 bit</code> 下載。</p>
<p><img src="/images/sonarqube/php/php018.png" alt="hp01"></p>
<p>下載後為一 <code>zip</code> 壓縮檔，解壓縮後可安裝在任何目錄。</p>
<p><img src="/images/sonarqube/php/php019.png" alt="hp01"></p>
<ol>
<li>選擇 home directory</li>
<li>將 <code>sonar-scanner-3.1.0.1141-macosx</code> 放在 home directory 下</li>
</ol>
<p><strong>設定 Server</strong></p>
<p><strong>sonar-scanner.properties</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#----- Default SonarQube server</span><br><span class="line">sonar<span class="class">.host</span><span class="class">.url</span>=http:<span class="comment">//localhost:9000</span></span><br></pre></td></tr></table></figure>
<p>設定 SonarQube server 位址，並將 <code>#</code> 註解拿掉。</p>
<p><img src="/images/sonarqube/php/php020.png" alt="hp02"></p>
<ol>
<li><code>sonar-scanner.properties</code> 位於 <code>sonar-scanner-3.1.0.1141-macosx/conf/</code> 目錄下</li>
</ol>
<p><strong>測試 Scanner</strong></p>
<p>將 SonarQube Scanner 加到 system path。</p>
<p><strong>.zshrc</strong></p>
<p><img src="/images/sonarqube/php/php022.png" alt="hp02"></p>
<ol>
<li>將 <code>~/sonar-scanner-3.1.0.1141-macosx/bin</code> 目錄加到 system path</li>
</ol>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ sonar-scanner -Dsonar.projectKey=Laravel56 -Dsonar.sources=. -Dsonar.projectName=Laravel56 -Dsonar.projectVersion=1.0 -Dsonar.exclusions=vendor/<span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>sonar-scanner</code> 對 Laravel 專案進行檢查。</p>
<ul>
<li><strong>-D</strong> : 對 SonarQube 的 property 進行設定</li>
<li><strong>sonar.projectKey</strong>：SonarQube 對專案的 key，內部將以此 key 作為辨別，必須唯一</li>
<li><strong>sonar.sources</strong>：SonarQube 要檢查的目錄，因為已經在專案目錄下，<code>.</code> 即為 <code>目前目錄</code></li>
<li><strong>sonar.projectName</strong>：在 SonarQube 網頁上顯示的名稱</li>
<li><strong>sonar.projectVersion</strong>：在 SonarQube 網頁上顯示的版本編號</li>
<li><strong>sonar.exclusions</strong>：不受 SonarQube 檢查的目錄，如 PHP 套件的放在 <code>vendor</code> 目錄下，實務上我們不會想讓 SonarQube 去檢查 package 的程式碼品質，所以會加以排除</li>
</ul>
<blockquote>
<p>SonarQube 預設也會檢查 JavaScript，若你有 JavaScript 的套件目錄不想檢查，也可以設定在 <code>sonar.exclusions</code></p>
</blockquote>
<p><img src="/images/sonarqube/php/php023.png" alt="hp02"></p>
<ol>
<li>在專案目錄下輸入 <code>sonar-scanner</code> 檢查 PHP</li>
</ol>
<p><img src="/images/sonarqube/php/php024.png" alt="hp02"></p>
<ol>
<li>若能看到 <code>EXECUTION SUCCESS</code>，則表示 SonarQube Scanner 安裝成功</li>
</ol>
<p><img src="/images/sonarqube/php/php001.png" alt="hp00"></p>
<p>進入 SonarQube 網頁，就可看到 <code>Laravel56</code> 專案已經出現 SonarQube。</p>
<p>到目前為止，SonarQube 對 PHP 的檢查已經完成，就算只將 SonarQube 裝在本機，也對 PHP 程式碼品質的檢查有很大的幫助。</p>
<p>實務上 SonarQube 還會與其他 CI server 合作，接下來將以 Jenkins 為例，介紹如何以 Jenkins 自動化 SonarQube。</p>
<h2 id="Jenkins">Jenkins</h2><hr>
<p><strong>安裝 Jenkins</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install jenkins-lts</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew 安裝 Jenkins。</p>
<p><img src="/images/sonarqube/php/php021.png" alt="hp02"></p>
<ol>
<li>輸入 <code>brew install jenkins-lts</code> 安裝</li>
<li>若想在每次 Mac 重開機就自動執行 Jenkins，輸入 <code>brew services start jenkins-lts</code></li>
<li>若想自行啟動 Jenkins，輸入 <code>jenkins-lts</code></li>
</ol>
<p><strong>啟動 Jenkins</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>jenkins-lts</span><br></pre></td></tr></table></figure>
<p>使用 <code>jenkins-lts</code> 自行啟動 Jenkins。</p>
<p><img src="/images/sonarqube/php/php026.png" alt="hp02"></p>
<p><strong>Unlock Jenkins</strong></p>
<p><img src="/images/sonarqube/php/php028.png" alt="hp02"></p>
<ol>
<li>輸入 <code>localhost:8080</code>，看到 Unlock Jenkins，開始設定 Jenkins</li>
<li>預設密碼放在 <code>./jenkins/secrets/initialAdminPassword</code></li>
</ol>
<p><strong>Customize Jenkins</strong></p>
<p><img src="/images/sonarqube/php/php029.png" alt="hp02"></p>
<ol>
<li>選擇 <code>Install suggested plugins</code> 即可</li>
</ol>
<p><strong>Getting Started</strong></p>
<p><img src="/images/sonarqube/php/php030.png" alt="hp03"></p>
<p>安裝 default plugin 中。</p>
<p><strong>Create Admin User</strong></p>
<p><img src="/images/sonarqube/php/php031.png" alt="hp03"></p>
<ol>
<li>建立管理者帳號。</li>
</ol>
<p><strong>Jenkins is Ready</strong></p>
<p><img src="/images/sonarqube/php/php032.png" alt="hp03"></p>
<ol>
<li>Jenkins 安裝完成，按 <code>Start using jenkins</code> 開始使用 Jenkins</li>
</ol>
<p><strong>Welcome to Jenkins</strong></p>
<p><img src="/images/sonarqube/php/php033.png" alt="hp03"></p>
<ol>
<li>Jenkins 安裝完成，按 <code>Start using jenkins</code> 開始使用 Jenkins</li>
</ol>
<h2 id="SonarQube_Scanner_for_Jenkins">SonarQube Scanner for Jenkins</h2><hr>
<p>要讓 Jenkins 能自動執行 SonarQube Scanner，必須另外安裝 plugin。</p>
<p><strong>安裝 SonarQube Scanner for Jenkins</strong></p>
<p><img src="/images/sonarqube/php/php011.png" alt="hp01"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Manage Plugins</code></li>
</ol>
<p><img src="/images/sonarqube/php/php002.png" alt="hp00"></p>
<ol>
<li>選擇 <code>SonarQube Scanner</code></li>
<li>按 <code>Download now and install after restart</code></li>
</ol>
<p><img src="/images/sonarqube/php/php003.png" alt="hp00"></p>
<p>安裝 plugin 中。</p>
<ol>
<li>將 <code>Restart Jenkins when installation is complete and no jobs are running</code> 打勾</li>
</ol>
<p><strong>設定 SonarQube 環境變數</strong></p>
<p><img src="/images/sonarqube/php/php006.png" alt="hp00"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Configure System</code></li>
</ol>
<p><img src="/images/sonarqube/php/php005.png" alt="hp00"></p>
<ol>
<li>找到 <code>SonarQube servers</code> 區段</li>
<li>將 <code>Enable injection of SonarQube server configuration as build environment variables</code> 打勾</li>
<li>設定 SonarQube server 名稱與網址</li>
</ol>
<p>最後按 <code>Apply</code> 與 <code>Save</code> 儲存設定。</p>
<p><strong>設定 SonarQube Scanner 環境變數</strong></p>
<p><img src="/images/sonarqube/php/php009.png" alt="hp00"></p>
<ol>
<li>左側選擇 <code>Manage Jenkins</code></li>
<li>右側選擇 <code>Global Tool Configuration</code></li>
</ol>
<p><img src="/images/sonarqube/php/php008.png" alt="hp00"></p>
<ol>
<li>找到 <code>SonarQube Scanner</code> 區段</li>
<li>設定 SonarQube Scanner 名稱</li>
</ol>
<p>最後按 <code>Apply</code> 與 <code>Save</code> 儲存設定。</p>
<h2 id="Jenkins_Job">Jenkins Job</h2><hr>
<p><strong>Source Code Management</strong></p>
<p><img src="/images/sonarqube/php/php007.png" alt="hp00"></p>
<ol>
<li>選擇 Job，按左側 <code>Configure</code></li>
</ol>
<p><img src="/images/sonarqube/php/php027.png" alt="hp02"></p>
<ol>
<li>找到 <code>Source Code Management</code> 區段</li>
<li>將 Git 的 <code>Repository URL</code> 設定到 <code>http://github.com/oomusou/Laravel56Demo</code></li>
</ol>
<p><strong>Build</strong><br><img src="/images/sonarqube/php/php004.png" alt="hp00"></p>
<ol>
<li>找到 <code>Build</code> 區段</li>
<li>在 <code>Add build step</code> 選擇 <code>Execute SonarQube Scanner</code></li>
</ol>
<p><img src="/images/sonarqube/php/php010.png" alt="hp01"></p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sonar.projectKey=Laravel56 </span><br><span class="line">sonar.sources=. </span><br><span class="line">sonar.projectName=Laravel56 </span><br><span class="line">sonar.projectVersion=1.0 </span><br><span class="line">sonar.exclusions=vendor/<span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></table></figure>
<p>在 <code>Analysis properties</code> 加上以上設定。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ sonar-scanner -Dsonar.projectKey=Laravel56 -Dsonar.sources=. -Dsonar.projectName=Laravel56 -Dsonar.projectVersion=1.0 -Dsonar.exclusions=vendor/<span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></table></figure>
<p>還記得之前曾經下過以上指令嗎？就是將這些 SonarQube property 設定在 Jenkins，改由 Jenkins 幫我們傳。</p>
<p><img src="/images/sonarqube/php/php013.png" alt="hp01"></p>
<ol>
<li>按左側 <code>Build Now</code> 執行 Job</li>
</ol>
<p><img src="/images/sonarqube/php/php012.png" alt="hp01"></p>
<p>執行成功後會出現 <code>OK</code> 與 <code>Success</code>。</p>
<p><img src="/images/sonarqube/php/php014.png" alt="hp01"></p>
<p>也會看到剛剛 Jenkins 執行的 Project 出現在 SonarQube 上。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>SonarQube 已經內建 SonarPHP，也可以用來檢查 PHP</li>
<li>就算不將 SonarQube 安裝在 server，安裝在本機也能有效的檢查 PHP 程式碼品質</li>
<li>藉由 Jenkins 幫忙，我們就可以自動化執行 SonarQube</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel56Demo" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.sonarqube.org" target="_blank" rel="external">SonarQube</a>, <a href="https://www.sonarqube.org/downloads/" target="_blank" rel="external">SonarQube Downloads</a><br><a href="https://docs.sonarqube.org/" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/display/PLUG/SonarPHP" target="_blank" rel="external">SonarPHP</a><br><a href="https://docs.sonarqube.org/" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="external">Analyzing with SonarQube Scanner</a><br><a href="https://docs.sonarqube.org/" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins" target="_blank" rel="external">Analying with SonarQube Scanner for Jenkins</a><br><a href="https://jenkins.io/" target="_blank" rel="external">Jenkins</a>, <a href="https://plugins.jenkins.io/sonar" target="_blank" rel="external">SonarQube Scanner</a></p>
]]></content>
    <summary type="html">
    <![CDATA[SonarQube 現在也能用在 PHP]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 F# 實現 Decorator Pattern？]]></title>
    <link href="http://oomusou.io/fsharp/decorator/"/>
    <id>http://oomusou.io/fsharp/decorator/</id>
    <published>2018-03-30T12:23:43.000Z</published>
    <updated>2018-04-01T11:41:44.110Z</updated>
    <content type="html"><![CDATA[<p>Decorator Pattern 是 OOP 中著名的 Design Pattern，尤其可在不改變 interface 的前提下，動態對原有物件增加功能，F# 既然是 Function First Language，就讓我們以 function 的角度重新實現 Decorator Pattern。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>JetBrains Rider 2017.3.1<br>F# 4.1</p>
<h2 id="User_Story">User Story</h2><hr>
<p>假設你在處理訂單，訂單的折扣方式有兩種</p>
<ul>
<li>超過 1000 元，則 <code>全館八折</code> 再 <code>滿千送百</code></li>
<li>不到 1000 元，則 <code>全館八折</code></li>
</ul>
<h2 id="Task">Task</h2><hr>
<p>直接使用 FP 的思維完成需求。</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Decorator Pattern</p>
<p>在不改變原有 interface 的前提下，動態增加原有的功能</p>
</blockquote>
<p><img src="/images/fsharp/decorator/decorator000.svg" alt="ecorator00"></p>
<p>首先思考 Decorator Pattern 的本質：</p>
<ol>
<li>Component 與 decorator 之間的 interface 必須相同</li>
<li>Component 可自由組合 decorator</li>
</ol>
<p>只要能達到這兩個目標，就算完成了 Decorator Pattern。</p>
<h2 id="OOP_思考方式">OOP 思考方式</h2><hr>
<ul>
<li>為了讓 component 與 decorator 的 interface 要相同，所以必須訂出共同的 interface</li>
<li>由於 decorator 必須包含原本 component 功能，因此 decorator 必須以 state 方式保存原本 component</li>
<li>由於各 decorator 都必須透過 constructor 保存原本 component，因此將共用 constructor 抽出來由 <code>AbstractDecorator</code> 實作<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 OOP 的 Decorator 實作，詳細請參考 <a href="http://oomusou.io/design-pattern/decorator/">如何使用 C# 實現 Decorator Pattern ?</a></span></span></span></li>
</ul>
<h2 id="FP_思考方式">FP 思考方式</h2><hr>
<ul>
<li>Component 與 decorator 都是 function，不用事先定義 interface，反正只要 interface 不同，在 Pattern Matching 一定會編譯錯誤</li>
<li>Component 與 decorator 都是 function，既然 interface 都相同，只要使用 Function Composition 產生新的 function 即可</li>
</ul>
<h2 id="Implementation">Implementation</h2><hr>
<p><strong>PriceDecorator.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> OrderLibrary</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> PriceDecorator =  </span><br><span class="line">    <span class="keyword">let</span> discountPrice price = price * <span class="number">0.8</span></span><br><span class="line">    <span class="keyword">let</span> rebatePrice price = price - <span class="number">100.0</span></span><br></pre></td></tr></table></figure>
<p>以 <code>discountPrice()</code> 表示 <code>全館八折</code>。</p>
<p>以 <code>rebatePrice()</code> 表示 <code>滿千送百</code>。</p>
<p>由於 component 與 decorator 基本上都是 <code>double -&gt; double</code> 的型別，可以廣義視為 decorator 放在同一 module。</p>
<p><strong>OrderService.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> OrderLibrary</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> PriceDecorator</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> OrderService =</span><br><span class="line">    <span class="keyword">let</span> getPrice price = </span><br><span class="line">        <span class="keyword">match</span> price &gt; <span class="number">1000.0</span> <span class="keyword">with</span></span><br><span class="line">        | <span class="keyword">true</span> -&gt; (discountPrice &gt;&gt; rebatePrice) price</span><br><span class="line">        | <span class="keyword">false</span> -&gt; discountPrice price</span><br></pre></td></tr></table></figure>
<p>根據商業邏輯：</p>
<blockquote>
<p>超過 1000 元，則 <code>全館八折</code> 再 <code>滿千送百</code></p>
</blockquote>
<p>因此將 <code>discountPrice()</code> 與 <code>rebatePrice()</code> 以 <code>&gt;&gt;</code> compose 成一個新的 function，就相當於 <code>全館八折</code> 再 <code>滿千送百</code></p>
<blockquote>
<p>在 FP 只要使用 Compose Function，就相當於 OOP 的 Decorator Pattern，在 F# 只需 <code>&gt;&gt;</code>，但 C# 卻要 interface 與 abstract class 的搭配才能實現</p>
</blockquote>
<p><strong>Program.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> OrderLibrary</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="number">1200.0</span></span><br><span class="line">    |&gt; OrderService.getPrice</span><br><span class="line">    |&gt; printfn <span class="string">"%f"</span></span><br><span class="line">    </span><br><span class="line">    <span class="number">800.0</span></span><br><span class="line">    |&gt; OrderService.getPrice</span><br><span class="line">    |&gt; printfn <span class="string">"%f"</span></span><br><span class="line">        </span><br><span class="line">    <span class="number">0</span> <span class="comment">// return an integer exit code</span></span><br></pre></td></tr></table></figure>
<p>將各種 price 以 Pipeline 方式傳給 <code>OrderService.getPrice()</code> 計算，並將結果傳給 <code>printfn()</code> 顯示。</p>
<h2 id="Summary">Summary</h2><hr>
<p>回想 Decorator Pattern 的本質：</p>
<ol>
<li>Component 與 decorator 之間的 interface 必須相同</li>
<li>Component 可自由組合 decorator</li>
</ol>
<p>由於 component 與 decorator 的 interface 相同，可以廣義視為 decorator，雖然沒有特別定義 interface，但 <code>discountPrice()</code> 與 <code>rebatePrice()</code> 的 signature 都是 <code>double -&gt; double</code>，若 function 的 signature 不同，在 Pattern Matching 就會編譯錯誤，與原本 Decorator Pattern 定義 interface 的本質相同。</p>
<p>原本 OOP 的 Decorator Pattern 可以透過 <code>new</code> 自由組合 decorator object，但 FP 可透過 <code>&gt;&gt;</code> 自由組合 decorator function，與原本 Decorator Pattern 的自由組合 decorator 本質相同。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Decorator Pattern 本質就是 object 的組合，但 object 的組合沒 function 簡單直覺，所以才需要搭配 interface 與 abstract class，但若純 function，只要使用 Function Composition 即可簡單完成</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/FSharpCore2OrderDecorator" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以 FP 重新思考 Decorator Pattern]]>
    
    </summary>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 SonarQube？]]></title>
    <link href="http://oomusou.io/sonarqube/docker/"/>
    <id>http://oomusou.io/sonarqube/docker/</id>
    <published>2018-03-29T13:23:43.000Z</published>
    <updated>2018-03-29T14:14:33.325Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 是一套 <code>程式碼品質檢查工具</code>，可以幫我們檢查 code 的 bugs、 vulenrability、code smell 與 duplication，也屬於 <code>持續整合</code> 重要的一環，亦可使用 Docker 安裝，將來管理會更加容易。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 18.03.0-ce-mac59 (23608)<br>SonarQube 6.7.2 (build 37468)</p>
<h2 id="下載_Docker_Image">下載 Docker Image</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name sonarqube -p <span class="number">9000</span>:<span class="number">9000</span> -p <span class="number">9092</span>:<span class="number">9092</span> sonarqube:lts</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 下載 image 並建立 container 並執行之。</p>
<ul>
<li><strong>-d</strong>：<code>d</code> etach，建立 container 後，就脫離目前 process</li>
<li><strong>–name</strong>：替 container 取一個人能夠識別的名字</li>
<li><strong>-p</strong>：Docker 外部與 SonarQube內部所對應的 port，其中左邊為外部 Docker 的 port，右邊為 SonarQube 內部的 port</li>
<li><p><strong>sonarqube:lts</strong>：SonarQube 的 LTS 版本，目前為 <code>6.7.2</code></p>
<p>若要下載最新版 SonarQube，可使用以下指令：</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name sonarqube -p <span class="number">9000</span>:<span class="number">9000</span> -p <span class="number">9092</span>:<span class="number">9092</span> sonarqube</span><br></pre></td></tr></table></figure>
<p>不指定為 LTS 版，則下載最新版 SonarQube。</p>
<p><img src="/images/sonarqube/docker/docker000.png" alt="ocker00"></p>
<ol>
<li>輸入 <code>docker run …</code> 下載 SonarQube 的 docker image，並建立 container 執行之</li>
</ol>
<p><img src="/images/sonarqube/docker/docker001.png" alt="ocker00"></p>
<p>輸入 <code>localhost:9000</code>，若看到 SonarQube 首頁，則表示安裝成功。</p>
<h2 id="啟動_SonarQube">啟動 SonarQube</h2><hr>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">start</span> sonarqube</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker start</code> 啟動 SonarQube container。</p>
<p><img src="/images/sonarqube/docker/docker003.png" alt="ocker00"></p>
<ol>
<li>輸入 <code>docker start sonarqube</code> 啟動 SonarQube container</li>
</ol>
<h2 id="停止_SonarQube">停止 SonarQube</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker stop sonarqube</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker stop</code> 停止 SonarQube container。</p>
<p><img src="/images/sonarqube/docker/docker002.png" alt="ocker00"></p>
<ol>
<li>輸入 <code>docker stop sonarqube</code> 停止 sonarqube container</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>雖然在 macOS 安裝原生的 SonarQube 並不難，但使用 Docker 安裝 SonarQube 更簡單，且管理更方便</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 Docker 安裝 SonarQube 更簡單]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 macOS 安裝 SonarQube ?]]></title>
    <link href="http://oomusou.io/sonarqube/macos-setup/"/>
    <id>http://oomusou.io/sonarqube/macos-setup/</id>
    <published>2018-03-29T12:23:43.000Z</published>
    <updated>2018-03-29T10:23:45.199Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 是一套 <code>程式碼品質檢查工具</code>，可以幫我們檢查 code 的 bugs、 vulenrability、code smell 與 duplication，也屬於 <code>持續整合</code> 重要的一環。它是一套以 Java 開發的工具，在 macOS 安裝很簡單，不使用 <code>pkg</code> 格式，所以不用擔心移除問題，只需解壓縮即可執行。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Java SE 1.8.0_112<br>SonarQube 6.7.2 LTS</p>
<h2 id="Download">Download</h2><hr>
<p><img src="/images/sonarqube/macos-setup/mac000.png" alt="ac00"></p>
<p>到  <a href="https://www.sonarqube.org/downloads/" target="_blank" rel="external">SonarQube 官網</a> 下載，因為由 Java 開發，所以不分系統版本。</p>
<p><img src="/images/sonarqube/macos-setup/mac001.png" alt="ac00"></p>
<p>下載後為一 <code>zip</code> 格式檔案。</p>
<h2 id="Installation">Installation</h2><hr>
<p><img src="/images/sonarqube/macos-setup/mac002.png" alt="ac00"></p>
<p>將下載的 <code>zip</code> 檔案解開，可安裝在任意目錄，目前安裝在 home directory 的 <code>sonarqube-6.7.2</code>。</p>
<h2 id="啟動_SonarQube">啟動 SonarQube</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./sonar<span class="class">.sh</span> start</span><br></pre></td></tr></table></figure>
<p>使用 <code>sonar.sh start</code> 啟動 SonarQube。</p>
<p><img src="/images/sonarqube/macos-setup/mac004.png" alt="ac00"></p>
<ol>
<li>將目錄切到 <code>sonarqube-6.7.2/bin/macosx-universal-64</code></li>
<li>輸入  <code>./sonar.sh start</code> 啟動 SonarQube</li>
</ol>
<p><img src="/images/sonarqube/macos-setup/mac003.png" alt="ac00"></p>
<p>輸入 <code>localhost:9000</code>，若看到 SonarQube 首頁，則表示安裝成功。</p>
<h2 id="結束_SonarQube">結束 SonarQube</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./sonar<span class="class">.sh</span> stop</span><br></pre></td></tr></table></figure>
<p>使用 <code>sonar.sh stop</code> 結束 SonarQube。</p>
<p><img src="/images/sonarqube/macos-setup/mac005.png" alt="ac00"></p>
<ol>
<li>將目錄切到 <code>sonarqube-6.7.2/bin/macosx-universal-64</code></li>
<li>輸入  <code>./sonar.sh stop</code> 結束 SonarQube</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>雖然 SonarQube 主要是安裝在 Linux server 上，但透過安裝在 macOS，我們也可以在本機測試 SonarQube</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[直接在 macOS 執行 SonarQube]]>
    
    </summary>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 C# 實現 Decorator Pattern ?]]></title>
    <link href="http://oomusou.io/design-pattern/decorator/"/>
    <id>http://oomusou.io/design-pattern/decorator/</id>
    <published>2018-03-28T12:23:43.000Z</published>
    <updated>2018-03-29T05:16:36.121Z</updated>
    <content type="html"><![CDATA[<p>Decorator Pattern 是 OOP 中著名的 Design Pattern，尤其可在不改變 interface 的前提下，動態對原有物件增加功能，隨著 FP 逐漸受到重視，Decorator Pattern 在實作上也有了新的面貌。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>JetBrains Rider 2017.3.1<br>C# 7.2</p>
<h2 id="User_Story">User Story</h2><hr>
<p>假設你在處理訂單，訂單的折扣方式有兩種</p>
<ul>
<li>超過 1000 元，則 <code>全館八折</code> 再 <code>滿千送百</code></li>
<li>不到 1000 元，則 <code>全館八折</code></li>
</ul>
<h2 id="Task">Task</h2><hr>
<p>先使用一般 <code>if else</code> 寫法完全需求，最後再分別以 OOP 與 FP 手法重構成 Decorator Pattern。</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Decorator Pattern</p>
<p>在不改變原有 interface 的前提下，動態增加原有的功能</p>
</blockquote>
<p><img src="/images/design-pattern/decorator/decorator001.svg" alt="ecorator00"></p>
<ul>
<li><strong>Client</strong>：<code>Context</code> 的 user，實務上可能是 component 或 controller</li>
<li><strong>Context</strong>：提供 client 呼叫的 class，實務上可能是 service</li>
<li><strong>ComponentInterface</strong>：定義 <code>ConcreteComponent</code> 與 <code>ConcreteDecorator</code> 的共同 interface，只有 <code>Operation()</code> </li>
<li><strong>AbstractDecorator</strong>：負責處理 <code>ConcreteDecorator</code> 間共用的 constructor</li>
<li><strong>ConcreteDecorator</strong>：實際要 decorate 的功能</li>
</ul>
<p><strong>適用時機</strong></p>
<ul>
<li>在不改變原有 interface 的前提下，動態增加原有的功能</li>
<li>Decorator 的功能常會排列組合變動</li>
</ul>
<p><strong>優點</strong></p>
<ul>
<li>無論怎麼增加新功能，interface 都不會改變</li>
<li>可以隨意的組合 decorator，方便維護</li>
</ul>
<p><strong>缺點</strong></p>
<ul>
<li>若 decorator 過多，容易造成 decorator class 數量爆炸</li>
</ul>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/design-pattern/decorator/decorator002.svg" alt="ecorator00"></p>
<ul>
<li><code>OrderService</code> 相當於 <code>Context</code></li>
<li><code>PriceInterface</code> 相當於 <code>ComponentInterface</code>，定義 <code>DiscountComponent</code> 與 <code>RebateDecorator</code> 的共同 interface</li>
<li><code>DiscountComponent</code> 相當於 <code>ConcreteComponent</code>，實作 <code>全館八折</code> 功能</li>
<li><code>AbstractDecorator</code> 實作 <code>ConcreteComponent</code> 間共用的 constructor</li>
<li><code>RebateDecorator</code> 相當於 <code>ConcreteDecorator</code>，實作 <code>滿千送百</code> 功能</li>
</ul>
<h2 id="Implementation">Implementation</h2><hr>
<p><img src="/images/design-pattern/decorator/decorator003.svg" alt="ecorator00"></p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> OrderLibrary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> orderService = <span class="keyword">new</span> OrderService();</span><br><span class="line">            <span class="keyword">var</span> originalPrice = <span class="number">1200</span>;</span><br><span class="line">            <span class="keyword">var</span> realPrice = orderService.GetPrice(originalPrice);</span><br><span class="line">            Console.WriteLine(<span class="string">"Original price:&#123;0&#125;, Real price:&#123;1&#125;"</span>, originalPrice, realPrice);</span><br><span class="line"></span><br><span class="line">            originalPrice = <span class="number">800</span>;</span><br><span class="line">            realPrice = orderService.GetPrice(originalPrice);</span><br><span class="line">            Console.WriteLine(<span class="string">"Original price:&#123;0&#125;, Real price:&#123;1&#125;"</span>, originalPrice, realPrice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> orderService = <span class="keyword">new</span> OrderService();</span><br><span class="line"><span class="keyword">var</span> originalPrice = <span class="number">1200</span>;</span><br><span class="line"><span class="keyword">var</span> realPrice = orderService.GetPrice(originalPrice);</span><br></pre></td></tr></table></figure>
<p>將商業邏輯都寫在 <code>OrderService</code>，當 <code>originalPrice</code> 傳入 <code>GetPrice()</code> 後，應回傳 <code>滿千送百</code> 或 <code>全館八折</code> 後的 <code>realPrice</code>。</p>
<h3 id="If_Else">If Else</h3><p><img src="/images/design-pattern/decorator/decorator004.svg" alt="ecorator00"></p>
<p><strong>OrderService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (price &lt; <span class="number">1000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> price * <span class="number">0.8</span> - <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>if else</code> 很直覺的寫出程式碼，在不同 price 條件下，會有不同的計算 price 商業邏輯。</p>
<p>在以上的程式碼我們發現了幾件事情：</p>
<ul>
<li>無論任何價錢都是 <code>全館八折</code>，所以 <code>price * 0.8</code> 已經重複</li>
<li><code>- 100</code> 只有發生在 <code>超過 1000</code></li>
</ul>
<p>事實上在電子商務領域，所有的促銷折扣都可能根據需求而排列組合動態調整，目前看起來 <code>全館八折</code> 算是基本，但 <code>滿千送百</code> 算是附加上去的促銷折扣，且隨時可能調整。</p>
<p>對於 <code>滿千送百</code>來說，算是由 <code>全館八折</code> 附加上去的，因此我們可以將 <code>滿千送百</code> 看成是 <code>全館八折</code> 的 decorator，也就是在原有的 <code>全館八折</code> 的基礎下，附加 <code>滿千送百</code> 的功能，這就是 Decorator Pattern。</p>
<h3 id="Unit_Test">Unit Test</h3><p>在重構之前，必須要有測試保護，才能確保沒把原本的商業邏輯重構壞，因此我們先準備好 <code>OrderService</code> 的 Unit Test，確保每個 <code>if else</code> 的 path 都有測到。</p>
<p><strong>UnitTest1.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary.Tests</span></span><br><span class="line">&#123;</span><br><span class="line">    [TestClass]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitTest1</span></span><br><span class="line">    &#123;</span><br><span class="line">        [TestMethod]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 當價錢為<span class="number">1200</span>打八折再送百後為<span class="number">860</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Arrange</span></span><br><span class="line">            <span class="keyword">var</span> target = <span class="keyword">new</span> OrderService();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Act</span></span><br><span class="line">            <span class="keyword">var</span> actual = target.GetPrice(<span class="number">1200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Assert</span></span><br><span class="line">            <span class="keyword">var</span> expected = <span class="number">860</span>;</span><br><span class="line">            Assert.AreEqual(expected, actual);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [TestMethod]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 當價錢為<span class="number">800</span>送百後為<span class="number">640</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Arrange</span></span><br><span class="line">            <span class="keyword">var</span> target = <span class="keyword">new</span> OrderService();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Act</span></span><br><span class="line">            <span class="keyword">var</span> actual = target.GetPrice(<span class="number">800</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Assert</span></span><br><span class="line">            <span class="keyword">var</span> expected = <span class="number">640</span>;</span><br><span class="line">            Assert.AreEqual(expected, actual);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於本文重點不是在講 Unit Test，因此就不浪費篇幅解釋以上程式碼。</p>
<p><img src="/images/design-pattern/decorator/decorator000.png" alt="ecorator00"></p>
<h3 id="Decorator_Pattern">Decorator Pattern</h3><p><strong>PriceInterface</strong></p>
<p><img src="/images/design-pattern/decorator/decorator005.svg" alt="ecorator00"></p>
<p><strong>PriceInterface.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">PriceInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">calculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>PriceInterface</code> 必須有 <code>CalculatePrice()</code>，將來其他 component 與 decorator 必須遵守此 interface。</p>
<p><strong>DiscountComponent</strong></p>
<p><img src="/images/design-pattern/decorator/decorator006.svg" alt="ecorator00"></p>
<p><strong>DiscountComponent.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DiscountComponent</span> : <span class="title">PriceInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遵守 <code>PriceInterface</code> 下的 <code>DiscountComponent</code>，實現 <code>全館八折</code>。</p>
<p><strong>AbstractDecorator</strong></p>
<p><img src="/images/design-pattern/decorator/decorator007.svg" alt="ecorator00"></p>
<p><strong>AbstractDecorator.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractDecorator</span>: <span class="title">PriceInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> PriceInterface _component;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">AbstractDecorator</span>(<span class="params">PriceInterface component</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _component = component;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractDecorator</span>: <span class="title">PriceInterface</span></span><br></pre></td></tr></table></figure>
<p><code>Decorator</code> 也要遵守 <code>PriceInterface</code>，因此對 client 而言，無論是 <code>DiscountComponent</code> 或 <code>RebateDecorator</code> ，都視為 <code>PriceInterface</code> 物件，這樣 client 就可以在 interface 沒有變動的前提下，替 component 增加 decorator 功能，符合 <code>開放封閉原則</code> 要求。</p>
<p>第 5 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> PriceInterface _component;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractDecorator</span>(<span class="params">PriceInterface component</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    _component = component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有 decorator 必須由其 constructor 傳入 component 或 decorator，但因為這兩個 class 都是實作 <code>PriceInterface</code>， 可以抽象化視為 <code>PriceInterface</code> 型別物件。</p>
<p>由於每個 decorator 都會使用相同的 constructor 處理 <code>PriceInterface</code> 型別物件，所以特別抽出來寫在 <code>AbstractDecorator</code>。</p>
<blockquote>
<p>Decorator Pattern 之所以會特別有 <code>AbstractDecorator</code> 設計，主要也是要避免各 decorator 的 constructor 程式碼重複問題</p>
</blockquote>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span>;</span><br></pre></td></tr></table></figure>
<p><code>caluculatePrice()</code> 為 <code>PriceInterface</code> 所定義，因為各 <code>Decorator</code> 會有自己的 <code>calculatePrice()</code> 方式，因此不需由 <code>AbstractDecorator</code> 實作，宣告為 <code>abstract</code> 即可，交由 <code>ConcreateDecorator</code> 自行實作。</p>
<p><strong>RebateDecorator</strong></p>
<p><img src="/images/design-pattern/decorator/decorator008.svg" alt="rchitectur"></p>
<p><strong>RebateDecorator.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RebateDecorator</span>: <span class="title">AbstractDecorator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RebateDecorator</span>(<span class="params">PriceInterface component</span>) : <span class="title">base</span>(<span class="params">component</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _component.calculatePrice(price) - <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RebateDecorator</span>: <span class="title">AbstractDecorator</span></span><br></pre></td></tr></table></figure>
<p>因為 <code>AbstractDecorator</code> 已經幫我們處理共用 constructor 部分，因此要繼承 <code>AbstractDecorator</code>，但別忘了 <code>AbstractDecorator</code> 也是實作 <code>PriceInterface</code>，根據 <code>里式替換原則</code>，因此 <code>RebateDecorator</code> 也還是 <code>PriceInterface</code> 型別。</p>
<p>第 5 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RebateDecorator</span>(<span class="params">PriceInterface component</span>) : <span class="title">base</span>(<span class="params">component</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當 component 或 decorator 透過 constructor 傳入時，再透過 <code>base</code> 傳入 <code>AbstractDecorator</code> 的 constructor，因為共用的 constructor 已經抽到 <code>AbstractDecorator</code> 了。</p>
<p>第 9 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _component.calculatePrice(price) - <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>真正實現 <code>滿千送百</code> 部分，但別忘 <code>滿千送百</code> 是 decorator，是依附在 <code>全館八折</code> 下，因此必須先執行 <code>_component.calculatePrice(price)</code>，也就是先計算 <code>全館八折</code> 後，再 <code>-100</code> 實現 <code>滿千送百</code>。</p>
<p><strong>OrderService</strong></p>
<p><img src="/images/design-pattern/decorator/decorator004.svg" alt="ecorator00"></p>
<p><strong>OrderService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (price &lt; <span class="number">1000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PriceInterface discountComponent = <span class="keyword">new</span> DiscountComponent();</span><br><span class="line">                <span class="keyword">return</span> discountComponent.CalculatePrice(price);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                PriceInterface discountComponent = <span class="keyword">new</span> DiscountComponent();</span><br><span class="line">                PriceInterface rebateDecorator = <span class="keyword">new</span> RebateDecorator(discountComponent);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> rebateDecorator.CalculatePrice(price);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PriceInterface discountComponent = <span class="keyword">new</span> DiscountComponent();</span><br><span class="line"><span class="keyword">return</span> discountComponent.CalculatePrice(price);</span><br></pre></td></tr></table></figure>
<p>計算 <code>全館八折</code>。</p>
<p>建立 <code>DiscountComponent</code> 物件，並執行 <code>CalculatePrice()</code> 計算。</p>
<p>值得注意 <code>discountComponent</code> 的型別為 <code>PriceInterface</code>。</p>
<blockquote>
<p>Q : <code>PriceInterface</code> 可用 <code>var</code> 取代嗎？</p>
</blockquote>
<p>這裏 <code>var</code> 會將 <code>discountComponent</code> 推導為 <code>DiscountComponent</code> 型別，雖然不會執行錯誤，但 intention 不對。</p>
<p>因為這裡所要表現的就是 <code>ConcreteComponent</code> 與 <code>ConcreteDecorator</code> 都是相同的 <code>ComponentInterface</code>，也就是物件導向的 <code>多型</code>，但卻被 <code>var</code> 的 Type Inference 推導為 <code>PriceInterface</code>，與我們預期不合。</p>
<blockquote>
<p><code>var</code> 適合用在 primitive type，如 (<code>int</code>、<code>string</code> …)，或具體的 <code>class</code> type，這些都能被 Type Inference 所正確推導，但不適合用在使用 <code>interface</code> 與 <code>abstract class</code> 展現<code>多型</code> 時，就算執行不會錯，但 intention 與 <code>語意</code> 不佳</p>
</blockquote>
<p>14 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PriceInterface discountComponent = <span class="keyword">new</span> DiscountComponent();</span><br><span class="line">PriceInterface rebateDecorator = <span class="keyword">new</span> RebateDecorator(discountComponent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rebateDecorator.CalculatePrice(price);</span><br></pre></td></tr></table></figure>
<p>計算 <code>全館八折</code> + <code>滿千送百</code>。</p>
<p>先建立 <code>DiscountComponent</code>，此為 <code>全館八折</code>。</p>
<p>再建立 <code>RebateDecorator</code>，並將 <code>DiscountComponent</code> 傳入，此為以 <code>全館八折</code> 為基底，再附加 <code>滿千送百</code> 計算。</p>
<p>值得注意的是無論怎麼 decorate，最後都還是 <code>PriceInterface</code> 型別，因此可使用相同的 <code>CalculatePrice()</code> 繼續計算。</p>
<blockquote>
<p>Decorator Pattern 可貴之處就在於沒破壞原本 interface，就能增加新功能，如可以將 component  與經過 decorator 裝飾過的物件都放在 <code>List</code> 內，因為 interface 都相同，所以型別也相同，可抽象化廣義是為 <code>同型別</code> 物件加以操作，符合 <code>開放封閉原則</code> 要求</p>
</blockquote>
<h3 id="Dependency_Injection">Dependency Injection</h3><p>很多 Design Pattern 都是以 constructor 作為傳入 <code>初始值</code>，在 Decorator Pattern 也不例外，直接將 component 或 decorator 傳入 <code>ConcreteDecorator</code>。</p>
<p>但在目前 DI 的世界則面臨挑戰，Decorator Pattern 不再適合使用 constructor 傳入任何物件，而必須將 constructor 讓給 DI。</p>
<p><img src="/images/design-pattern/decorator/decorator009.svg" alt="ecorator00"></p>
<p>新增 <code>DecoratorInterface</code>描述 <code>Decorator()</code>，<code>AbstractDecorator</code> 必須同時實現 <code>PriceInterface</code> 與  <code>DecoratorInterface</code> 兩個 interface。</p>
<p><strong>DecoratorInterface</strong></p>
<p><img src="/images/design-pattern/decorator/decorator010.svg" alt="ecorator01"></p>
<p><strong>DecoratorInterface.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">DecoratorInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">PriceInterface <span class="title">Decorate</span>(<span class="params">PriceInterface component</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>DecoratorInterface</code> 必須有 <code>Decorate()</code>，將來其他 decorator 必須遵守此 interface。</p>
<p>原本 Decorator Pattern 是透過 constructor 傳入原有物件，現在要改透過 <code>Decorate()</code>。</p>
<p>值得注意的是 <code>Decorate()</code> 的 input 為 <code>PriceInterface</code> 型別，回傳也是 <code>PriceInterface</code> 型別，也就是經過 decorate 的物件，仍然有相同的 interface，不會改變型別，可順便做 fluent interface 操作。</p>
<blockquote>
<p>Q : 為什麼不在 <code>PriceInterface</code> 新增 <code>Decorate()</code> 即可，還要新增 <code>DecorateInterface</code>？</p>
</blockquote>
<p>由於 <code>DiscountComponent</code> 與 <code>RebateDecorator</code> 共用 <code>PriceInterface</code>，且 <code>Decorate()</code> 主要是為了 decorator 所用，加在 <code>PriceInterface</code> 會造成 <code>DiscountComponent</code> 有 <code>Decorate()</code> 的空實作，這違反了 <code>介面隔離原則</code> ，所以必須另外開新的 interface。</p>
<p><strong>AbstractDecorator</strong></p>
<p><img src="/images/design-pattern/decorator/decorator011.svg" alt="ecorator01"></p>
<p><strong>AbstractDecorator.cs</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">namespace OrderLibrary</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class AbstractDecorator: PriceInterface, DecoratorInterface</span><br><span class="line">    &#123;</span><br><span class="line">        protected PriceInterface _component;</span><br><span class="line"></span><br><span class="line">        public PriceInterface Decorate(PriceInterface component)</span><br><span class="line">        &#123;</span><br><span class="line">            _component = component;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        public abstract double calculatePrice(double price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractDecorator: PriceInterface, DecoratorInterface</span><br></pre></td></tr></table></figure>
<p><code>AbstractDecorator</code> 除了必須實作原有的 <code>PriceInterface</code> 外，為了解決 DI 問題，還必須同時實作 <code>DecoratorInterface</code>。</p>
<p>第 5 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> PriceInterface _component;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> PriceInterface <span class="title">Decorate</span>(<span class="params">PriceInterface component</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    _component = component;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>PriceInterface</code> 物件由原本的 constructor 傳入，改透過 <code>Decorate()</code> 傳入，最後傳回 <code>this</code>，可順便做 fluent interface 操作。</p>
<p><strong>RebateDecorator</strong></p>
<p><img src="/images/design-pattern/decorator/decorator012.svg" alt="ecorator01"></p>
<p><strong>RebateDecorator.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RebateDecorator</span>: <span class="title">AbstractDecorator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">calculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _component.calculatePrice(price) - <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為已經改由 <code>Decorate()</code> 傳入物件，將原有的 constructor 刪除。</p>
<p><strong>OrderService</strong></p>
<p><img src="/images/design-pattern/decorator/decorator013.svg" alt="ecorator01"></p>
<p><strong>OrderService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (price &lt; <span class="number">1000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PriceInterface discountComponent = <span class="keyword">new</span> DiscountComponent();</span><br><span class="line">                <span class="keyword">return</span> discountComponent.calculatePrice(price);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                PriceInterface discountComponent = <span class="keyword">new</span> DiscountComponent();</span><br><span class="line">                <span class="keyword">var</span> rebateDecorator = <span class="keyword">new</span> RebateDecorator().Decorate(discountComponent);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> rebateDecorator.calculatePrice(price);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>16 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PriceInterface discountComponent = <span class="keyword">new</span> DiscountComponent();</span><br><span class="line"><span class="keyword">var</span> rebateDecorator = <span class="keyword">new</span> RebateDecorator().Decorate(discountComponent);</span><br><span class="line">                </span><br><span class="line"><span class="keyword">return</span> rebateDecorator.calculatePrice(price);</span><br></pre></td></tr></table></figure>
<p>原本 <code>DiccountComponent</code> 是由 <code>RebateDecorator</code> 的 constructor 傳入，現在改由 <code>Decorate()</code> 傳入。</p>
<h3 id="Delegate">Delegate</h3><p>從 Decorator Pattern，我們看到了 OOP 幾個缺點：</p>
<ul>
<li>原本簡單的 <code>if ... else</code> 被拆成很多檔案，導致 class 爆炸</li>
<li><code>ComponentInterface</code>、<code>DecoratorInterface</code>、<code>AbstractDecorator</code> 等新增的 class 與需求無關，算是因為使用 Decorator Pattern 所產生的額外 class</li>
<li><code>interface</code> 雖然有制定 spec 與 compiler 編譯檢查的優點，但是只有一個 method 的 interface，是否有有開 <code>interface</code> 的需要？</li>
</ul>
<p>雖然 <code>PriceInterface</code> 定義了 <code>CalculatePrice()</code>，但整個 <code>interface</code> 只有一個 method，顯然使用 <code>interface</code> 有殺雞用牛刀之嫌，此時可將 <code>interface</code> 退化成 <code>delegate</code>。</p>
<p><img src="/images/design-pattern/decorator/decorator014.svg" alt="ecorator01"></p>
<p><strong>PriceDelegate</strong></p>
<p><img src="/images/design-pattern/decorator/decorator015.svg" alt="ecorator01"></p>
<p><strong>PriceDelegate.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">double</span> <span class="title">PriceDelegate</span>(<span class="params"><span class="keyword">double</span> price</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>PriceDelegate</code> delegate，其 signature 為 <code>double =&gt; double</code>，也就是 input 為 <code>double</code>，return 為 <code>double</code>。</p>
<blockquote>
<p>實務上 Decorator Pattern 通常只有一個 method，所以就很適合將 interface 退化成 delegate</p>
</blockquote>
<p><strong>PriceComponent</strong></p>
<p><img src="/images/design-pattern/decorator/decorator016.svg" alt="ecorator01"></p>
<p><strong>PriceComponent.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PriceComponent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">CalculateDiscountPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>從 <code>DiscountComponent</code> 退化成 <code>PriceComponent</code>，將 <code>CalculatePrice()</code> 改成 <code>CalculateDiscountPrice()</code>。</p>
<p>將每個 <code>ConcreteComponent</code> 改用 function 表示，也由於當 pure function 用，此時使用 static 即可。</p>
<p><strong>PriceDecorator</strong></p>
<p><img src="/images/design-pattern/decorator/decorator017.svg" alt="ecorator01"></p>
<p><strong>PriceDecorator.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PriceDecorator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PriceDelegate <span class="title">CalculateRebatePrice</span>(<span class="params">PriceDelegate originalFn</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price =&gt; orginalFn(price) - <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將每個 decorator 以 function 表示，此時改用 static function 即可。</p>
<p><code>orginalFn</code> 即為原本的 function，<code>CalculateRebatePrice()</code> 則為 Higher Order Function。</p>
<p><code>CalculateRebatePrice()</code> 回傳的是 <code>PriceDelegate</code>，所以要 return Lambda。</p>
<blockquote>
<p>一般來說，OOP 都建議不要使用 <code>static</code>，但這裡是例外，此時是將 class 當成 module 看待，<code>static function</code> 是當成 FP 的 <code>pure function</code> 使用，也就是這種 class 將沒有 field，也不使用 OOP 的 <code>繼承</code> 與 <code>組合</code>。</p>
</blockquote>
<p><strong>OrderService</strong></p>
<p><img src="/images/design-pattern/decorator/decorator018.svg" alt="ecorator01"></p>
<p><strong>OrderService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (price &lt; <span class="number">1000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PriceDelegate calculateDiscountPrice = PriceComponent.CalculateDiscountPrice; </span><br><span class="line">                <span class="keyword">return</span> calculateDiscountPrice(price);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                PriceDelegate calculateDiscountPrice = PriceComponent.CalculateDiscountPrice;</span><br><span class="line">                PriceDelegate calculateRebatePrice = PriceDecorator.CalculateRebatePrice(calculateDiscountPrice);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> calculateRebatePrice(price);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PriceDelegate calculateDiscountPrice = PriceComponent.CalculateDiscountPrice;</span><br><span class="line">PriceDelegate calculateRebatePrice = PriceDecorator.CalculateRebatePrice(calculateDiscountPrice);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> calculateRebatePrice(price);</span><br></pre></td></tr></table></figure>
<ul>
<li>在 OOP 是 <code>ConcreteComponent</code> 與 <code>ConcreteDecorator</code>  的型別都是 <code>ComponentInterface</code> </li>
<li>在 FP 化之後，<code>CalculateDiscountPrice()</code>  與 <code>CalculateRebatePrice()</code> 的型別都是 <code>PriceDelegate</code> </li>
</ul>
<p>將原來的 <code>CalculateDiscountPrice</code> 傳入 <code>CalculateRebatePrice()</code> 後，就相當於以 <code>CalculateRebatePrice()</code> 去 decorate 原來的 <code>CalculateDiscountPrice()</code>。</p>
<blockquote>
<p>我們可以發現 OOP 的 Decorator Pattern，對於 FP 本質來說只是 Higher Order Function  的應用；將 function 傳入 Higher Order Function，就相當於以 Higher Order Function 加以 decorate。</p>
</blockquote>
<h3 id="Func">Func<t></t></h3><p>雖然 <code>PriceDelegate</code> 定義 function 的 spec 的理念很不錯，若 <code>delegate</code> 只使用一遍，真的需要開一個檔案建立 <code>delegate</code> 嗎 ?</p>
<p><img src="/images/design-pattern/decorator/decorator019.svg" alt="ecorator01"></p>
<p>將 <code>PriceDelegate</code> 刪除。</p>
<p><strong>PriceDecorator</strong></p>
<p><img src="/images/design-pattern/decorator/decorator020.svg" alt="ecorator01"></p>
<p><strong>PriceDecorator.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PriceDecorator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; CalculateRebatePrice(Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; fn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> price =&gt; fn(price) - <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接以 <code>Func&lt;double, double&gt;</code> 取代 <code>PriceDelegate</code>，其餘不變。</p>
<p><strong>OrderService</strong></p>
<p><img src="/images/design-pattern/decorator/decorator021.svg" alt="ecorator01"></p>
<p><strong>OrderService.ts</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (price &lt; <span class="number">1000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; calculateDiscountPrice = PriceComponent.CalculateDiscountPrice; </span><br><span class="line">                <span class="keyword">return</span> calculateDiscountPrice(price);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; calculateDiscountPrice = PriceComponent.CalculateDiscountPrice;</span><br><span class="line">                Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; calculateRebatePrice = PriceDecorator.CalculateRebatePrice(calculateDiscountPrice);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> calculateRebatePrice(price);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接以 <code>Func&lt;double, double&gt;</code> 取代 <code>PriceDelegate</code>，其餘不變。</p>
<blockquote>
<p>我們可以發現 FP 化的 Decorator Pattern，基本上已經沒有 interface，所有的 <code>ConcreteComponent</code> 都簡化成 <code>PriceComponent</code>；而所有的 <code>ConcreteComponent</code> 都簡化成 <code>PriceDecorator</code>，而且也沒用到什麼高深的技巧，就只有 FP 的基本招式：Higher Order Function。</p>
<p>也就是 function 的組合遠比 object 組合容易，因此並不需要動用到 interface 與 abstract class 等複雜的機制。</p>
</blockquote>
<h2 id="Summary">Summary</h2><hr>
<p>以 SOLID 角度重新審視經過 FP 二次重構後的 Decorator Pattern：</p>
<ul>
<li><strong>單一職責原則</strong>：將所有的 decorator function 統一整理在 <code>PriceDecorator</code>，符合 SRP</li>
<li><strong>開放封閉原則</strong>：將來若有新的 decorator function，只要統一加在 <code>PriceDecorator</code> 即可，符合 OCP</li>
<li><strong>里氏替換原則</strong>：因為沒用到繼承，所以沒有違反 LSP 問題</li>
<li><strong>最小知識原則</strong>：decorator function 並沒有暴露到 client，符合 LKP</li>
<li><strong>介面隔離原則</strong>：因為從 <code>interface</code> 退化成 <code>delegate</code>，FP 天生符合 ISP</li>
<li><strong>依賴反轉原則</strong>：service 與 decorator 之間的耦合僅限於 <code>delegate</code> 與 <code>Func&lt;T&gt;</code>，而不是直接耦合與特定 function，符合 DIP</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Decorator 本質就是 object 的組合，但 object 的組合沒 function 簡單直覺，所以需要搭配 interface 與 abstract class，但若純 function，只要使用 Higher Order Function 即可簡單完成</li>
<li>FP 的出現，讓 Design Pattern 的實踐方式，不再只有 OOP 一途，可視實際需求決定該使用 OOP 或 FP</li>
<li>OOP 讓我們以 <code>抽象設計</code> 的角度看系統，但 FP 讓我們以 <code>簡化設計</code> 的角度看系統，實務上建議以 OOP 做第一階段的重構，再輔以 FP 做第二階段的重構，可解決 OOP 容易 Over Design 的問題</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Core2OrderDecorator" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 FP 將有不同的實現方式]]>
    
    </summary>
    
      <category term="C#" scheme="http://oomusou.io/tags/C/"/>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何將 Class Library 從 .NET Framework 移植到 .NET Core ?]]></title>
    <link href="http://oomusou.io/netcore/porting/"/>
    <id>http://oomusou.io/netcore/porting/</id>
    <published>2018-03-26T12:23:43.000Z</published>
    <updated>2018-03-26T05:10:42.333Z</updated>
    <content type="html"><![CDATA[<p>在實務上可能遇到有些自己寫的 class library，或在 GitHub 上 class library，原本跑在 .NET Framework 上，需要自己 porting 到 .NET Core。本文實際以一個 GitHub 上的 class library 為例，一步一步從 .NET Framework 移植到 .NET Core。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>VS Code 1.21.1</p>
<h2 id="User_Story">User Story</h2><hr>
<p><img src="/images/netcore/porting/porting000.png" alt="orting00"></p>
<p><a href="https://github.com/NMZivkovic" target="_blank" rel="external">Nikola Zivkovic</a> 提供一個類神經網路的 class library：<a href="https://github.com/NMZivkovic/SimpleNeuralNetworkInCSharp" target="_blank" rel="external">Simple Neural Network in C#</a>，但只能跑在 .NET Framework 4.6.1。</p>
<h2 id="Task">Task</h2><hr>
<p>該 class library 原本只能跑在 .NET Framework，現在我們即將以此 repository 為練習，一步一步從 .NET Framework 移植到 .NET Core。</p>
<h2 id="下載_Repository">下載 Repository</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/</span><span class="constant">NMZivkovic/SimpleNeuralNetworkInCSharp</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>git clone</code> 將整個 repository clone 下來。</p>
<p><img src="/images/netcore/porting/porting001.png" alt="orting00"></p>
<ol>
<li>將整個 repository clone 下來</li>
<li>在 <code>SimpleNeuralNetworkInCSharp</code> 目錄下有：<ul>
<li><strong>NeuralNetworkCSharp.sln</strong>：整個 repository 的 solution 檔</li>
<li><strong>NeuralNetworkCSharp</strong>：class library 的 project</li>
<li><strong>NeuralNetworkCSharpTests</strong>：class library 的 unit test project</li>
</ul>
</li>
</ol>
<blockquote>
<p>雖然我們不知道此 repository 在做什麼，不過由於它自帶 Unit Test，我們的目的就是讓所有的 Unit Test 在 .NET Core 下都 <code>綠燈</code> 通過測試</p>
</blockquote>
<h2 id="重建_NeuralNetworkCSharp">重建 NeuralNetworkCSharp</h2><hr>
<p>因為 .NET Core 對 <code>csproj</code> 的 XML 格式有改，我們就不直接從 .NET Framework 的 <code>csproj</code> 升級上來，而是選擇建立新的 <code>csproj</code>，再將所有 C# 檔案複製過來。</p>
<h3 id="建立_MyClassLib">建立 MyClassLib</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> classlib -o MyClassLib</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new classlib</code> 建立新的 class library 專案。</p>
<p><img src="/images/netcore/porting/porting002.png" alt="orting00"></p>
<ol>
<li>輸入 <code>dotnet new classlib -o MyClassLib</code> 建立 <code>MyClassLib</code> 專案。</li>
</ol>
<h3 id="複製_cs_檔案">複製 cs 檔案</h3><p><img src="/images/netcore/porting/porting004.png" alt="orting00"></p>
<p>將原來 <code>NeuralNetworkCSharp</code> 專案下的檔案複製到 <code>MyClassLib</code>，除了 <code>csproj</code>  不要複製外，其他檔案全部複製。</p>
<p><img src="/images/netcore/porting/porting005.png" alt="orting00"></p>
<ol>
<li>將複製的檔案貼到 <code>MyClassLib</code> 目錄下</li>
<li>將原本的 <code>Class1.cs</code> 刪除</li>
</ol>
<h3 id="編譯專案">編譯專案</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyClassLib</span> $ <span class="keyword">dotnet</span> build</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯 <code>MyClassLib</code>。</p>
<p><img src="/images/netcore/porting/porting006.png" alt="orting00"></p>
<ol>
<li>輸入 <code>dotnet build</code> 編譯專案</li>
<li>出現 <code>Duplicate attribute</code> 錯誤</li>
</ol>
<blockquote>
<p>原本 <code>Properties/Assembly.Info</code> 的一些 attribute 設定，目前已經由 .NET Core 自行設定，因此才會出現 duplicate</p>
</blockquote>
<p><strong>Properties/AssemblyInfo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">[assembly: InternalsVisibleTo(<span class="string">"MyTest"</span>)]</span><br></pre></td></tr></table></figure>
<p>將其他 <code>assembly</code> 全部刪除，只留下 <code>InternalsVisibleTo()</code>，並改成 <code>MyTest</code>。</p>
<blockquote>
<p>因為 <code>MyClassLib</code> 的一些 class 使用了 <code>internal properties</code>，根據 C# 規定，只有相同 assembly 才能存取 <code>internal</code>，但 <code>MyTest</code> 因為不同 assembly，會造成單元測試失敗，故特別設定 <code>InternalsVisibleTo()</code>，讓 <code>MyTest</code> 可以存取 <code>MyClassLib</code> 的 <code>internal properties</code></p>
</blockquote>
<p><img src="/images/netcore/porting/porting007.png" alt="orting00"></p>
<ol>
<li>重新輸入 <code>dotnet build</code> 編譯</li>
<li>編譯成功</li>
</ol>
<h2 id="重建_NeuralNetworkCSharpTests">重建 NeuralNetworkCSharpTests</h2><hr>
<p>將使用類似 TDD 方式，依照錯誤訊息逐一解決。</p>
<h3 id="建立_MyTest">建立 MyTest</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> mstest -o MyTest</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new mstest</code> 建立新的 Unit Test 專案。</p>
<p><img src="/images/netcore/porting/porting003.png" alt="orting00"></p>
<ol>
<li>輸入 <code>dotnet new mstest -o MyTest</code> 建立 <code>MyTest</code> 專案。</li>
</ol>
<h3 id="複製_cs_檔案-1">複製 cs 檔案</h3><p><img src="/images/netcore/porting/porting008.png" alt="orting00"></p>
<p>將原來 <code>NeuralNetworkCSharpTests</code> 專案下的檔案複製到 <code>MyTest</code>，除了 <code>csproj</code>  不要複製外，其他檔案全部複製。</p>
<p><img src="/images/netcore/porting/porting009.png" alt="orting00"></p>
<ol>
<li>將複製的檔案貼到 <code>MyTest</code> 目錄下</li>
<li>將原本的 <code>UnitTest1.cs</code> 刪除</li>
</ol>
<h3 id="執行單元測試">執行單元測試</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyTest $ dotnet <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet test</code> 執行單元測試。</p>
<p><img src="/images/netcore/porting/porting010.png" alt="orting01"></p>
<ol>
<li>輸入 <code>dotnet test</code> 執行單元測試</li>
<li>一樣出現 <code>Duplicate attribute</code> 錯誤</li>
</ol>
<p><img src="/images/netcore/porting/porting011.png" alt="orting01"></p>
<p>將 <code>Properties/AssemblyInfo.cs</code> 所有內容刪除。</p>
<p><img src="/images/netcore/porting/porting012.png" alt="orting01"></p>
<ol>
<li>在次執行 <code>dotnet test</code></li>
<li>出現找不到 <code>Moq</code> namespace 錯誤訊息</li>
</ol>
<blockquote>
<p><code>Moq</code> 為 .NET 著名的 Mock package，需另外安裝</p>
</blockquote>
<h3 id="安裝_Package">安裝 Package</h3><p><img src="/images/netcore/porting/porting013.png" alt="orting01"></p>
<p>在 NuGet 找的到 Moq，也有 .NET Core 版本。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyTest $ dotnet <span class="built_in">add</span> <span class="keyword">package</span> moq</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet add package</code> 安裝 Moq。</p>
<p><img src="/images/netcore/porting/porting014.png" alt="orting01"></p>
<ol>
<li>輸入 <code>dotnet add package moq</code> 安裝 Moq</li>
<li>按 <code>Restore</code> 執行 <code>dotnet restore</code></li>
</ol>
<p><img src="/images/netcore/porting/porting015.png" alt="orting01"></p>
<ol>
<li>在次執行 <code>dotnet test</code></li>
<li>出現找不到 <code>NeuralNetworkCSharp</code> namespace 錯誤訊息</li>
</ol>
<blockquote>
<p><code>MyTest</code> 要測試 <code>MyClassLib</code>，但目前尚未對  <code>MyClassLib</code> 加入 project reference</p>
</blockquote>
<h3 id="加入_Project_Reference">加入 Project Reference</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyTest $ dotnet <span class="keyword">add</span> <span class="keyword">reference</span> ../MyClassLib/MyClassLib.csproj</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet add reference</code> 將 <code>MyClassLib</code> 加入 project reference。</p>
<p><img src="/images/netcore/porting/porting016.png" alt="orting01"></p>
<ol>
<li>輸入 <code>dotnet add reference ../MyClassLib/MyClassLib.csproj</code> 對 <code>MyClassLib</code> 加入 project reference</li>
</ol>
<p><img src="/images/netcore/porting/porting017.png" alt="orting01"></p>
<ol>
<li>再次輸入 <code>dotnet test</code></li>
<li>通過 24 個單元測試</li>
</ol>
<blockquote>
<p>其中一個單元測試 skipped，是因為 test code 自己下 [igonre] 不測試，與我們無關</p>
</blockquote>
<p>如此我們就順利將  <a href="https://github.com/NMZivkovic/SimpleNeuralNetworkInCSharp" target="_blank" rel="external">Simple Neural Network in C#</a> 由 .NET Framework 移植到 .NET Core 了。</p>
<h2 id="Summary">Summary</h2><hr>
<p>要將 .NET Framework 的 class library 移植到 .NET Core，會有以下步驟：</p>
<ol>
<li>建立新 project</li>
<li>將 <code>*.cs</code> 複製過來</li>
<li><code>dotnet build</code> 會有錯誤訊息<ul>
<li>將 <code>AssemblyInfo.cs</code> 的 attribute 拿掉</li>
<li>安裝缺少的 package</li>
<li>新增必要的 project reference</li>
</ul>
</li>
<li>直到 <code>dotnet test</code> 通過全部測試案例</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>並不是所有 .NET Framework 的 class library 都能移植到 .NET Core，因為目前 .NET Core 只實做了約一半的 .NET Framework API，且不是所有的 package 都有 .NET Core 版本</li>
<li>類似 TDD 方式，先執行 <code>dotnet build</code> 與 <code>dotnet test</code>，由解決錯誤訊息而逐步完成移植</li>
<li>實務上建議先對原本的 class library 補上 Unit Test，再以移植後 Unit Test 全部 <code>綠燈</code> 作為移植成功的依據</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Core2Porting" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/NMZivkovic" target="_blank" rel="external">Nikola Zivkovic</a>, <a href="https://github.com/NMZivkovic/SimpleNeuralNetworkInCSharp" target="_blank" rel="external">Simple Neural Network in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓原本的 Class Library 也能跨平台]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入淺出 F# 之 Option]]></title>
    <link href="http://oomusou.io/fsharp/option/"/>
    <id>http://oomusou.io/fsharp/option/</id>
    <published>2018-03-25T12:23:43.000Z</published>
    <updated>2018-04-03T02:57:17.870Z</updated>
    <content type="html"><![CDATA[<p>當我們要根據使用者輸入的 <code>OrderId</code> 到資料庫搜尋 <code>訂單資料</code>，若找的到就回傳該筆訂單，若搜尋不到呢？一般而言有兩種處理方式，傳回 <code>null</code> 或拋出 exception，但實務上常會因為忘記處理 <code>null</code> 或 exception，而在 run-time 得到 <code>NullReferenceException</code>，這種常見的錯誤，是否能在 compile-time 獲得解決呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>C# 7.2<br>F# 4.1</p>
<h2 id="Null">Null</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order = Order.GetById(<span class="number">10</span>);</span><br><span class="line">Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, order.Name));</span><br></pre></td></tr></table></figure>
<p><code>getById()</code> 會根據 user 輸入的 <code>OrderId</code>，到資料庫搜尋 <code>訂單資料</code>，junior 常會這樣寫程式。</p>
<p>這樣的寫法乍看之下沒問題，但 code review 時一定會被 sernior 問：</p>
<blockquote>
<p>Q：若找不到訂單資料而回傳 <code>null</code> 該怎麼辦？</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order = Order.GetById(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (order == <span class="keyword">null</span>) </span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"No orders found."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, order.Name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Junior 會乖乖的補上 <code>null</code> 判斷，如此才不會在 run-time 得到 <code>NullReferenceException</code>。</p>
<p>若使用 <code>null</code> 代表 <code>找不到資料</code>，會有幾個問題：</p>
<ol>
<li>必須額外加上 <code>null</code> 判斷，否則在 run-time 會得到 <code>NullReferenceException</code></li>
<li>因為 <code>null</code> 也是 <code>Order</code> 型別，所以 compiler 對於 <code>null</code> 檢查無能為力，只能靠 developer 自己的細心，或靠 unit test 的 coverage 完整加以保護</li>
<li>每個 function 都可能傳回 <code>null</code>，是否每個 function 都必須判斷 <code>null</code>？如此 code 會變得很髒</li>
</ol>
<h2 id="Exception">Exception</h2><hr>
<blockquote>
<p>Q：<code>null</code> 的確不好，所以若找不到訂單資料就拋 exception 不就好了？</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> order = Order.GetById(<span class="number">10</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, order.Name));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (OrderNotFoundException e)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"No orders found."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Exception 雖然比 <code>null</code> 好，但依然有些問題：</p>
<ol>
<li><code>getById()</code> 回傳 <code>Order</code> 型別，你該如何得知到底該處理 <code>null</code> 還是要處理 exception？靠文件還是要靠團隊共識？</li>
<li>若 developer 忘記處理 exception，compiler 也無能為力，只能靠 developer 自己的細心，或靠 unit test 的 coverage 完整加以保護</li>
<li>每個 function 都可能傳回 exception，是否每個 function 都必須處理 exception？<code>try catch</code> 寫法其實也好不到哪裡，一樣會把 code 弄髒</li>
</ol>
<h2 id="Option">Option</h2><hr>
<p>FP 語言對 <code>null</code> 與 exception 提出了另外一種解決方案，在 OCaml 與 F# 有 <code>Option</code> 型別，在 Haskell 有 <code>Maybe</code> 型別，讓我們可以在 compile-time 就能處理，也不會把 code 弄髒。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Order</span> </span>= &#123;</span><br><span class="line">    Id: int</span><br><span class="line">    Name: string</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> getById id = Some &#123; Id = <span class="number">10</span>; Name = <span class="string">"Sam"</span> &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">let</span> order = getById <span class="number">10</span></span><br><span class="line">    <span class="keyword">match</span> order <span class="keyword">with</span></span><br><span class="line">    | Some order -&gt; printfn <span class="string">"%s"</span> order.Name</span><br><span class="line">    | None       -&gt; printfn <span class="string">"No orders found."</span>    </span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span> <span class="comment">// return an integer exit code</span></span><br></pre></td></tr></table></figure>
<p>由於 <code>getById()</code> 可能傳回 <code>訂單資料</code>，也可能找不到資料，因此回傳的就不是 <code>Order</code> 型別，也不是 <code>null</code>，而是另外一個 <code>Order option</code> 型別，也就是 <code>Option&lt;Order&gt;</code>。</p>
<p>再搭配 Pattern Matching 對 <code>Option</code> 做處理，即可同時對 <code>找到訂單資料</code> 與 <code>找不到訂單資料</code> 進行處理。</p>
<p><img src="/images/fsharp/option/option000.png" alt="ption00"></p>
<p><code>getById()</code> 回傳的型別不再是 <code>Order</code> 型別 ，而是 <code>Order option</code> 型別，這是個 <code>Option</code> 型別。</p>
<blockquote>
<p>Q：什麼是 <code>Option</code> 型別呢 ?</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Option</span>&lt;<span class="title">'a</span>&gt; </span>=</span><br><span class="line">    | Some <span class="keyword">of</span> <span class="attribute">'a</span></span><br><span class="line">    | None</span><br></pre></td></tr></table></figure>
<p><code>Option</code> 事實上就是 <code>Union</code> 型別，只是已經是先定義好  <code>Some</code> 與 <code>None</code> 兩個 case。</p>
<p>重點是 <code>null</code> 是 <code>Order</code> 型別，但 <code>None</code> 不是 <code>Order</code> 型別，而是 <code>Option</code> 型別。</p>
<blockquote>
<p>Q : <code>Option</code> 型別對於寫程式有什麼幫助？</p>
</blockquote>
<p>之前因為 <code>null</code> 屬於 <code>Order</code> 型別，也無法確定 <code>getById()</code> 是否拋出 exception 而造成困擾，但若確認 <code>getById()</code> 回傳的是 <code>Option</code> 而不是  <code>Order</code> 型別，則 client 就有心理準備，知道要怎麼處理 <code>Option</code>，不需靠文件也不需靠團隊共識。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> order = Order.getById <span class="number">10</span></span><br><span class="line">printfn <span class="string">"%s"</span> order.Name</span><br></pre></td></tr></table></figure>
<p>就算 junior 寫出這樣的程式碼，不用等 senior 來 code review，compiler 已經編譯錯誤，因為 <code>order</code> 為 <code>Option</code> 型別，不是 <code>Order</code> 型別，因此無法直接由 <code>order.Name</code> 取值。</p>
<p><img src="/images/fsharp/option/option001.png" alt="ption00"></p>
<p>因為 <code>order</code> 不是 <code>Order</code> 型別，所以沒有 <code>Name</code> 可取，在 Intellisense 階段就已經提出警告。</p>
<p>為了要從 <code>Option</code> 取值，就一定得搭配 Pattern Matching。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> order <span class="keyword">with</span></span><br><span class="line">| Some order -&gt; printfn <span class="string">"%s"</span> order.Name</span><br><span class="line">| None       -&gt; printfn <span class="string">"No orders found."</span></span><br></pre></td></tr></table></figure>
<p>透過 Pattern Match 的 Some 將 <code>order</code> 取出來。</p>
<p><img src="/images/fsharp/option/option002.png" alt="ption00"></p>
<p>若在 Pattern Matching 只寫了 <code>Some</code>，忘記寫 <code>None</code> ，compiler 也會提出警告。</p>
<h2 id="Summary">Summary</h2><hr>
<p><code>Option</code> 型別具有以下優點</p>
<ol>
<li>透過 <code>Option</code> 型別，client 可以明確得知該 function 可能傳回資料，也可能不傳回資料，因此會有明確因應對策，而不像 <code>null</code> 與 exception 那樣</li>
<li>由於 <code>Option</code> 型別不等於原本資料型別，因此 junior 無法直接對 Option 取值而造成 <code>NullReferenceException</code></li>
<li>一定得用 Pattern Matching 處裡 <code>Option</code> 型別，若忘記使用 Pattern Matching 或 case 不夠完整，compiler 會在 compile-time 就加以警告，不會有忘記處理 <code>Option</code> 的問題</li>
<li>Pattern Matching 遠比 <code>null checking</code> 與 <code>exception handling</code> 優雅，也不會把 code 弄髒</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>好的程式語言是在 compile-time 就幫我們找到錯誤，而不是要自己寫程式在 run-time 處理</li>
<li><code>null</code> 與 exception 除了常常忘記處理而造成 <code>NullReferenceException</code>， 也很容易將 code 弄髒；但 <code>Option</code> + Pattern Matching 則可透過 compiler 幫我們檢查，code 也比較優雅</li>
<li>JavaScript 已經有 <code>Option</code> 型別草案，希望能儘早成為 JavaScript 標準</li>
</ul>
<h2 id="Reference">Reference</h2><p><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="external">Microsoft Docs</a>, <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/options" target="_blank" rel="external">Options</a><br><a href="https://fsharpforfunandprofit.com/" target="_blank" rel="external">F# for fun and profit</a>, <a href="https://fsharpforfunandprofit.com/posts/the-option-type/" target="_blank" rel="external">The Option type</a><br><a href="https://twitter.com/David_Raab" target="_blank" rel="external">David Raad</a>, <a href="http://sidburn.github.io/blog/2016/03/20/null-is-evil" target="_blank" rel="external">null is Evil</a><br><a href="https://twitter.com/David_Raab" target="_blank" rel="external">David Raad</a>, <a href="http://sidburn.github.io/blog/2016/03/25/exceptions-are-evil" target="_blank" rel="external">Exceptions are Evil</a><br><a href="https://twitter.com/David_Raab" target="_blank" rel="external">David Raad</a>, <a href="http://sidburn.github.io/blog/2016/04/11/optionals" target="_blank" rel="external">Optionals</a><br><a href="https://twitter.com/David_Raab" target="_blank" rel="external">David Raad</a>, <a href="http://sidburn.github.io/blog/2016/05/11/option-module" target="_blank" rel="external">The Option Module</a></p>
]]></content>
    <summary type="html">
    <![CDATA[比 null 與 exception 更優雅的處理方式]]>
    
    </summary>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 F# 實現 Strategy Pattern ?]]></title>
    <link href="http://oomusou.io/fsharp/strategy/"/>
    <id>http://oomusou.io/fsharp/strategy/</id>
    <published>2018-03-23T12:23:43.000Z</published>
    <updated>2018-03-28T13:06:49.752Z</updated>
    <content type="html"><![CDATA[<p>Strategy Pattern 是 OOP 中最著名的 Design Pattern，幾乎可以說是 OOP 中 『解耦合』最經典的應用，F# 既然是 Function First Language，就讓我們以 function 的角度重新思考什麼是 『解耦合』。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>JetBrains Rider 2017.3.1<br>F# 4.1</p>
<h2 id="User_Story">User Story</h2><hr>
<p>假設你在處理訂單，訂單的折扣方式有兩種</p>
<ul>
<li>超過 1000 元，則 <code>滿千送百</code></li>
<li>不到 1000 元，則 <code>全館8折</code></li>
</ul>
<h2 id="Task">Task</h2><hr>
<p>直接使用 FP 的思維完成需求。</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Strategy Pattern</p>
<p>將不同演算法抽象化成相同 interface，讓高階模組與實際演算法解耦合，而彼此僅相依於 interface，進而可動態切換演算法</p>
</blockquote>
<p><img src="/images/fsharp/strategy/strategy000.svg" alt="trategy00"></p>
<p>首先思考 Strategy Pattern 的本質：</p>
<ol>
<li><code>Strategy</code> 必須與 <code>Context</code> 解耦合</li>
<li><code>Strategy</code> 必須能動態切換</li>
</ol>
<p>只要能達到這兩個目標，就算完成了 Strategy Pattern。</p>
<h2 id="OOP_思考方式">OOP 思考方式</h2><hr>
<p>OOP 強調是 data 與 function 合一，認為什麼都是物件，所以 strategy 也是物件。</p>
<p>要將不同的 strategy <code>抽象化</code> 看成相同的物件，才能使用 <code>多型</code> 操作，所以要設計 <code>interface</code> 訂定 <code>抽象化</code> 的標準。</p>
<p>也就是 OOP 是將焦點放在 <code>不同的部分</code>，進而將 <code>不同的部分</code> 抽象化成 Inteface。</p>
<h2 id="FP_思考方式">FP 思考方式</h2><hr>
<p>FP 強調是 data 與 function 分開，data 有 Type System，function 有 Higher Order Function、Function Composition，因為 strategy 只是功能，所以是 function。</p>
<p>要將相同的部分抽出為 Higher Order Function，不同 strategy 抽成獨立 funciton，再將 strategy 以參數的方式傳入 Higher Order Function。</p>
<p>也就是 FP 是將焦點放在 <code>相同的部分</code>，進而將 <code>相同的部分</code> 抽成 Higher Order Function。</p>
<h2 id="Implemetation">Implemetation</h2><hr>
<p><strong>Strategy.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> OrderLibrary</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> PriceStrategy =</span><br><span class="line">    <span class="keyword">let</span> rebateStrategy price = price - <span class="number">100.0</span></span><br><span class="line">    <span class="keyword">let</span> discountStrategy discount price = price * discount * <span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>將 <code>買千送百</code> 以 <code>rebateStrategy()</code> 表示。</p>
<p>將 <code>全館8折</code> 以 <code>discountStrategy()</code> 表示。</p>
<p>特別注意 <code>rebateStrategy()</code> 與 <code>discountStrategy()</code> 的 singnature 並不一樣，傳統 OOP 在使用 Strategy Pattern 時，必須先定義 strategy interface，但只要遇到 strategy 間 signature 不同時就很困擾，甚至要動用 Adapter Pattern。</p>
<p>但因為 FP 沒有 interface 概念，所以不需要為不同的 strategy <code>抽象化</code> 成相同 interface，故也沒有 interface 很難開的困擾。</p>
<p><strong>OrderService.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> OrderLibrary</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> OrderService =</span><br><span class="line">    <span class="keyword">let</span> strategyFactory price = </span><br><span class="line">        <span class="keyword">match</span> (price &gt; <span class="number">1000.0</span>) <span class="keyword">with</span></span><br><span class="line">        | <span class="keyword">true</span>  -&gt; PriceStrategy.rebateStrategy</span><br><span class="line">        | <span class="keyword">false</span> -&gt; PriceStrategy.discountStrategy <span class="number">0.8</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> getPrice price =</span><br><span class="line">        price</span><br><span class="line">        |&gt; strategyFactory price</span><br></pre></td></tr></table></figure>
<p>第 4 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strategyFactory price = </span><br><span class="line">    <span class="keyword">match</span> (price &gt; <span class="number">1000.0</span>) <span class="keyword">with</span></span><br><span class="line">    | <span class="keyword">true</span>  -&gt; PriceStrategy.rebateStrategy</span><br><span class="line">    | <span class="keyword">false</span> -&gt; PriceStrategy.discountStrategy <span class="number">0.8</span></span><br></pre></td></tr></table></figure>
<p>既然有不同的 strategy，就會有選擇 strategy 的邏輯，所以 factory 少不了，只是從 OOP 的 factory class 退化成 factory function。</p>
<p>Strategy 的選擇，使用 FP 的 Pattern Matching 最適合，根據不同的條件回傳不同的 function。</p>
<p><img src="/images/fsharp/strategy/strategy001.png" alt="trategy00"></p>
<p>F# 雖然不用寫型別，但對於型別檢查依然非常嚴格，<code>strategyFactory()</code> 被 Type Inference 推導為 <code>float -&gt; (float -&gt; float)</code>，也就是我們必須回傳一個 <code>float -&gt; float</code> 的 function。</p>
<p>在 C# 我們必須明確使用 <code>delegate</code> 或 <code>Func&lt;float, float&gt;</code> 定義 strategy 的 signature，但在 F# 都省了，因此程式碼變得非常精簡，兼具強型別語言與弱型別語言的優點。</p>
<p>但 <code>rebateStrategy()</code> 與 <code>discountStrategy()</code> 的 signature 畢竟不一樣，因此在使用 Pattern Matching 時，必須先將  <code>float -&gt; float</code> 整理好，因爲 F# 支援 Currying，<code>discountStrategy 0.8</code> 會自動回傳 <code>float -&gt; float</code> 的 function，如此將符合 Pattern Matching 對型別的要求。</p>
<blockquote>
<p>FP 不用 interface，不代表沒有型別要求，透過 Currying，可以解決 OOP 因為需求不同難開 interface 的老問題，只要在最後 signature 一樣即可，並不要求設計 function 時都要有相同的 signature，可使用 Currying 逐步完成 signature 要求</p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getPrice price =</span><br><span class="line">    price</span><br><span class="line">    |&gt; strategyFactory price</span><br></pre></td></tr></table></figure>
<p>將 price 以 Pipeline 方式傳給對的 strategy 計算，其中 <code>strategyFactory price</code> 將傳回對的 strategy。</p>
<p><strong>Program.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> OrderLibrary</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="number">1200.0</span></span><br><span class="line">    |&gt; OrderService.getPrice</span><br><span class="line">    |&gt; printfn <span class="string">"%f"</span></span><br><span class="line"></span><br><span class="line">    <span class="number">800.0</span></span><br><span class="line">    |&gt; OrderService.getPrice</span><br><span class="line">    |&gt; printfn <span class="string">"%f"</span></span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span> <span class="comment">// return an integer exit code</span></span><br></pre></td></tr></table></figure>
<p>將各種 price 以 Pipeline 方式傳給 <code>OrderService.getPrice()</code> 計算，並將結果傳給 <code>printfn()</code> 顯示。</p>
<h2 id="Summary">Summary</h2><hr>
<p>回想 Strategy Pattern 的本質：</p>
<ol>
<li><code>Strategy</code> 必須與 <code>Context</code> 解耦合</li>
<li><code>Strategy</code> 必須能動態切換</li>
</ol>
<p>FP 雖然沒有定義 interface，但 strategy 已經與 context 實質解耦合，strategy 都必須嚴格遵守 <code>float -&gt; float</code> 的 signature，任何 <code>float -&gt; float</code> 的 function 都可視為 strategy。</p>
<p>只要遵守 <code>float -&gt; float</code> 的 strategy，就能被 Pattern Matching 動態切換。</p>
<p>所以 FP 版的 Strategy Pattern 雖然沒有 interface 也沒有 <code>多型</code>，但本質與 OOP 是相同的。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>不用很糾結一定要使用 interface 與 <code>多型</code>，重點在於 <code>解耦合</code> 與 <code>動態切換</code>，FP 使用 Higher Order Function 與 Pattern Matching 也能達成相同的目標</li>
<li>FP 的 Higher Order Function，可以實現 <code>DRY</code> 原則，FP 設計時要將焦點放在 <code>相同的部分</code>，抽出 Higher Order Function 後，再透過 Function Composition 組合成新的 function</li>
<li>FP 的 Pattern Matching，可以實現 OOP 的 <code>多型</code>，藉此達到 <code>動態切換</code> 需求</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/FSharpCore2OrderStrategy" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以 FP 的角度思考解耦合]]>
    
    </summary>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 .NET Core 之 Type Forwarding]]></title>
    <link href="http://oomusou.io/netcore/type-forwarding/"/>
    <id>http://oomusou.io/netcore/type-forwarding/</id>
    <published>2018-03-22T12:23:43.000Z</published>
    <updated>2018-03-22T09:47:52.805Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 能跨平台看似很神奇，事實上底層所使用的技術為 Type Forwarding，說穿了就是 Proxy Pattern 的應用。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>JetBrains Rider 2017.3.1<br>Visual Studio 2017 15.6.2</p>
<h2 id="Definition">Definition</h2><hr>
<p>Client 在不改變 assembly reference 狀態下，就可使用其他 assembly 所提供的 class。</p>
<p><img src="/images/netcore/type-forwarding/type007.svg" alt="ype00"></p>
<p>.NET App 會直接與 <code>Assembly A</code> 耦合，僅能使用 <code>Assembly A</code> 的 <code>MyClass</code>。</p>
<p><img src="/images/netcore/type-forwarding/type008.svg" alt="ype00"></p>
<p>.NET App 依然只與 <code>Assembly A</code> 耦合，但卻能夠透過 Type Forwarding 使用 <code>Assembly B</code> 的 <code>MyClass</code>。</p>
<h2 id="實戰_Type_Forwarding">實戰 Type Forwarding</h2><hr>
<h3 id="建立_ClassLibrary1">建立 ClassLibrary1</h3><p><strong>Class1.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Sum</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>ClassLibrary1</code> assembly 建立 <code>Class1.Sum()</code>。</p>
<h3 id="建立_ConsoleApp">建立 ConsoleApp</h3><p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> object1 = <span class="keyword">new</span> Class1();</span><br><span class="line">            <span class="keyword">var</span> result = object1.Sum(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>ConsoleApp</code> 使用 <code>ClassLibrary1</code> 的 <code>Class1.Sum()</code>。</p>
<p><img src="/images/netcore/type-forwarding/type000.png" alt="ype00"></p>
<ol>
<li>目前只有 <code>ClassLibrary1</code> 與 <code>ConsoleApp</code></li>
<li>執行結果為 <code>2</code></li>
<li><code>ConsoleApp</code> 的 project reference 只有 <code>ClassLibrary1</code></li>
</ol>
<h3 id="建立_ClassLibrary2">建立 ClassLibrary2</h3><p><strong>Class1.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Sum</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>ClassLibrary1</code> 的 <code>Class1.cs</code> 全部程式碼搬到 <code>ClassLibrary2</code>。</p>
<h3 id="ClassLibrary1_使用_Type_Forwarding">ClassLibrary1 使用 Type Forwarding</h3><p><strong>Class1.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"></span><br><span class="line">[assembly:TypeForwardedTo(<span class="keyword">typeof</span>(ClassLibrary1.Class1))]</span><br></pre></td></tr></table></figure>
<p>因為 <code>ClassLibrary1</code> 的 <code>Class1.cs</code> 程式碼已經搬到 <code>ClassLibrary2</code>，將原本 <code>ClassLibrary1</code> 的 <code>Class1.cs</code> 加上 Type Forwarding。</p>
<p>當 <code>ConsoleApp</code> 使用 <code>ClassLibrary1</code> assembly 的 <code>ClassLibrary1.Class1</code> 時，會自動 Type Forwarding 到 <code>ClassLibrary2</code> assembly 的 <code>ClassLibrary1.Class1</code> 。</p>
<p>Rebuild 整個 solution 的 3 個 project 並執行。</p>
<p><img src="/images/netcore/type-forwarding/type001.png" alt="ype00"></p>
<ol>
<li>目前有 <code>ClassLibrary1</code> 、<code>ClassLibrary2</code> 與 <code>ConsoleApp</code></li>
<li>執行結果依然為 <code>2</code></li>
<li>原本 <code>ConsoleApp</code> 的 project reference 只有 <code>ClassLibrary1</code>，因為 Type Forwarding，所以現在也有了 <code>ClassLibrary2</code></li>
</ol>
<blockquote>
<p>我們並沒有對 <code>ConsoleApp</code> 將 <code>ClassLibrary2</code> 加入 project reference，而是因為 Type Forwarding</p>
</blockquote>
<h2 id="觀察_netstandard_Assembly">觀察 netstandard Assembly</h2><hr>
<p>Metapackage 與 .NET Standard 談了這麼多，是否感覺很抽象呢 ? 讓我們以反組譯 <code>netstandard</code> Assembly 來理解其中的黑魔法。</p>
<p>使用 Visual Studio 2017 開啟 solution。</p>
<p><img src="/images/netcore/type-forwarding/type002.png" alt="ype00"></p>
<p><strong><em>View -&gt; Object Browser</em></strong> 開啟 Object Browser，可以讓我們看到整個 solution 所用到的 assembly。</p>
<ol>
<li>展開 <code>ClassLibrary1</code>，看不到任何 namespace 與 class，因為我們已經在 <code>ClassLibrary1</code> 使用 Type Forwarding。</li>
<li>展開 <code>ClassLibrary2</code>，我們看到了 <code>ClassLibrary1</code> namespace 與 <code>Class1</code> class。</li>
</ol>
<blockquote>
<p>若 assembly 使用了 Type Forwarding，使用 Object Browser 將看不到該 assembly 任何實作的 namespace 與 class</p>
</blockquote>
<p><img src="/images/netcore/type-forwarding/type003.png" alt="ype00"></p>
<ol>
<li>點擊 <code>mscorlib</code> 與 <code>netstandard</code> 兩個 assembly ，亦發現沒有任何實作的 namespace 與 class，其中 <code>mscorlib</code> 就是 <code>Microsoft.NETCore.App</code>，而 <code>netstandard</code> 就是 <code>NETStandard.Library</code></li>
<li>顯示 <code>netstandard</code> assembly 的實際路徑</li>
</ol>
<blockquote>
<p>由於 <code>mscorlib</code> 與 <code>netstandard</code> 都沒有任何實作，根據 <code>ClassLibrary1</code> 的經驗推測，很可能也是用了 Type Forwarding </p>
</blockquote>
<p><img src="/images/netcore/type-forwarding/type004.png" alt="ype00"></p>
<p>使用 ILSpy 反組譯 <code>netstandard</code> assembly，我們可以發現真的沒有任何實作，但大量使用了 Type Forwarding。</p>
<p>在傳統 .NET Framework 世界裡，我們是直接參考 .NET Framework 內某個 assembly 的 class，也因此與 Windows 平台的 assembly 的 class 耦合。</p>
<p>但在 .NET Core 世界裡，我們改參考 .NET Standard，再由 .NET Standard 透過 Type Forwarding 方式參考實際 host 的 assembly 的 class，若 host  是 macOS，則參考 macOS 上的 assembly 的 class，若 host 是 Linux，則參考 Linux 上的 assembly 的 class。</p>
<blockquote>
<p>因為 client 只與有 Type Forwarding 的 .NET Standard 耦合，而沒與特定平台的 class 耦合，所以 .NET Core 能達到跨平台，在不同 host os 下，不用編譯就可以自動找到正確的 class</p>
</blockquote>
<h2 id="Proxy_Pattern">Proxy Pattern</h2><hr>
<blockquote>
<p>Proxy Pattern</p>
<p>Client 為了避免與實際物件耦合，改透過相同 interface 的 <code>白手套</code> proxy 耦合，再由 proxy 負責與實際物件溝通</p>
</blockquote>
<p><img src="/images/netcore/type-forwarding/type005.svg" alt="ype00"></p>
<p><code>Client</code> 實際上要使用 <code>RealSubject</code>，但為了將 <code>RealSubject</code> 與 <code>Client</code> 解耦合，<code>Client</code> 只與相同 interface 的 <code>Proxy</code> 耦合，再由白手套 <code>Proxy</code> 使用 <code>RealSubject</code>。</p>
<p><strong>.NET Standard</strong></p>
<p><img src="/images/netcore/type-forwarding/type006.svg" alt="ype00"></p>
<p><code>Client</code> 實際上要使用各平台的 <code>.NET Core SDK</code>，但為了將各平台的 <code>.NET Core SDK</code> 與 <code>Client</code> 解耦合，<code>Client</code> 只與一樣遵守 .NET Standard 的 <code>netstandard</code> 耦合，再由白手套 <code>netstandard</code> 透過 Type Forwarding 使用各平台的 <code>.NET Core SDK</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Metapackage 與 .NET Standard 不是什麼黑魔法，只是一個使用 Type Forwarding 的 DLL</li>
<li>我們只要跟 .NET Standard 耦合即可，它會使用 Type Forwarding 幫我們使用各平台實際的 class</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/TypeForwarding" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="external">Microsoft Docs</a>, <a href="https://docs.microsoft.com/en-us/dotnet/framework/app-domains/type-forwarding-in-the-common-language-runtime" target="_blank" rel="external">Type Fowarding in the Common Language Runtime</a></p>
]]></content>
    <summary type="html">
    <![CDATA[解開 .NET Core 跨平台的黑魔法]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[.NET Core 之 Metapackage 簡介]]></title>
    <link href="http://oomusou.io/netcore/metapackage/"/>
    <id>http://oomusou.io/netcore/metapackage/</id>
    <published>2018-03-21T13:23:43.000Z</published>
    <updated>2018-03-23T07:43:01.747Z</updated>
    <content type="html"><![CDATA[<p>Metapackage 為 .NET Core 2.0 所提出，目的在簡化對 package 的管理。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101 </p>
<h2 id="NuGet">NuGet</h2><hr>
<ul>
<li><strong>.NET Framework</strong> : 將所有 class 包在 <code>一整包</code> .NET Framework 內</li>
<li><strong>.NET Core</strong> : 將 class 拆分成 <code>小包</code> 的 NuGet package</li>
</ul>
<blockquote>
<p>.NET Core 從以前 <code>一整包</code> framework 轉型成 <code>package-based framework</code>，也就是整個 framework 改由 package 所構成</p>
<p>簡單的說，以前 .NET Framework 是一個 framework 包含很多 DLL；而 .NET Core 是一個 DLL 就一個 package，你可以自行根據專案需求選用你用的 DLL</p>
<p>這也與目前主流 framework  思維相同，如 Angular、Laravel 都可以看到類似的設計</p>
</blockquote>
<p><strong>優點</strong></p>
<ul>
<li><strong>Package 更新速度快</strong>：若 package 有 bug，可單獨發行更新版本，不用等 framework 統一發行 patch 版本</li>
<li><strong>選擇特定 OS 與 CPU 的 package</strong> : 若有特殊需求，需使對特定 OS 與 CPU 版本最佳化的 package</li>
<li><strong>可選擇只更新部分 package 版本</strong>：若 package 有 bug，可選擇只更新某 package，而不用被 framework patch 逼得要更新其他 package</li>
<li><strong>可選擇自己需要的 package</strong> : 若你只寫 ASP.NET，其實並不需要 Windows Form、Web Form、WPF 或 UWP 的 package，只需下載 ASP.NET 相關的 package 即可</li>
</ul>
<p><strong>缺點</strong></p>
<ul>
<li><strong>不同 Package 間可能有相容性問題</strong>：由於 package 各自發佈，沒經過與其他 package 的整合測試，有可能遇到 package 彼此相衝</li>
<li><strong>Package 拆得太細，導致加入困難</strong>：.NET Core 由於 package 都最小化，隨便寫一個專案就可能要自己加入一堆 package</li>
</ul>
<p>針對這兩個缺點，.NET Core 2.0 提出了 Metapackage 概念。</p>
<h2 id="Metapackage">Metapackage</h2><hr>
<p>.NET Core 包含了以下幾個主要 Metapackage：</p>
<ul>
<li><strong>NETStandard.Library</strong>：包含 .NET Standard 所定義 API 的全部 package</li>
<li><strong>Microsoft.NETCore.App</strong>：包含 .NET Core 所需要 API 的全部 package，也包含 .NET Standard，但沒有包含全部的 .NET Standard 的 package</li>
<li><strong>Microsoft.AspNetCore.All</strong>：包含 ASP.NET 所需要 API 的全部 package，包括 <code>Microsoft.NETCore.App</code>，與其他與 ASP.NET 相關的 package。</li>
</ul>
<p>專案只要加入了 Metapackage，就相當於加了 pakcage 懶人包，會自動幫你加入其他相關的 package。</p>
<p>除此之外，Microsoft 既然發行了 Metapckage，就會確保 Metapackage 所發行的版本中，各 package 的相容性已經過測試。</p>
<blockquote>
<p>若你獨立更新 package 版本，可能會有 package 相容性問題，但若更新 Metapackage，則經過 Microsoft 測試，會挑選擇彼此相容的 package 版本</p>
</blockquote>
<h2 id="Microsoft-AspNetCore-All">Microsoft.AspNetCore.All</h2><hr>
<p>實際體驗一下有 Metapackage 與沒有 Metapackage 的差異：</p>
<h3 id="-NET_Core_1-1">.NET Core 1.1</h3><p><strong>MyMVC.csproj</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Project</span> <span class="attribute">Sdk</span>=<span class="value">"Microsoft.NET.Sdk.Web"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">TargetFramework</span>&gt;</span>netcoreapp1.1<span class="tag">&lt;/<span class="title">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">PackageReference</span> <span class="attribute">Include</span>=<span class="value">"Microsoft.AspNetCore"</span> <span class="attribute">Version</span>=<span class="value">"1.1.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">PackageReference</span> <span class="attribute">Include</span>=<span class="value">"Microsoft.AspNetCore.Mvc"</span> <span class="attribute">Version</span>=<span class="value">"1.1.2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">PackageReference</span> <span class="attribute">Include</span>=<span class="value">"Microsoft.AspNetCore.StaticFiles"</span> <span class="attribute">Version</span>=<span class="value">"1.1.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">PackageReference</span> <span class="attribute">Include</span>=<span class="value">"Microsoft.Extensions.Logging.Debug"</span> <span class="attribute">Version</span>=<span class="value">"1.1.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">PackageReference</span> <span class="attribute">Include</span>=<span class="value">"Microsoft.VisualStudio.Web.BrowserLink"</span> <span class="attribute">Version</span>=<span class="value">"1.1.0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>預設只安裝了 4 個 package，若你用到了其他 package，需要自行加入。</p>
<h3 id="-NET_Core_2-0">.NET Core 2.0</h3><p><strong>MyMVC.csproj</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Project</span> <span class="attribute">Sdk</span>=<span class="value">"Microsoft.NET.Sdk.Web"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="title">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">PackageReference</span> <span class="attribute">Include</span>=<span class="value">"Microsoft.AspNetCore.All"</span> <span class="attribute">Version</span>=<span class="value">"2.0.6"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">DotNetCliToolReference</span> <span class="attribute">Include</span>=<span class="value">"Microsoft.VisualStudio.Web.CodeGeneration.Tools"</span> <span class="attribute">Version</span>=<span class="value">"2.0.3"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>預設只安裝 <code>Microsoft.AspNetCore.All</code> Metapackage。</p>
<p><img src="/images/netcore/metapackage/tech000.png" alt="ech00"></p>
<p>但事實上 <code>Microsoft.AspNetCore.All</code> 已經包含了眾多 package。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Metapackage 並不包含實作，只定義了包含哪些 package 與版本，讓我們設計專案時不用一個 package 一個 package 地加入</li>
<li>Metapackage 也確保 package 間經過整合測試，減少 package 之間相容性問題</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="external">Microsoft Docs</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/packages" target="_blank" rel="external">Packages, metapackages and frameworks</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Package 懶人包概念]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 FP 實現 OOP 的 Polymorphism ?]]></title>
    <link href="http://oomusou.io/fsharp/polymorphism/"/>
    <id>http://oomusou.io/fsharp/polymorphism/</id>
    <published>2018-03-21T12:23:43.000Z</published>
    <updated>2018-03-21T13:34:57.860Z</updated>
    <content type="html"><![CDATA[<p>OOP 最自豪的就是 Polymorphism (多型)，若使用 FP，該如何實現這個 OOP 的招牌菜呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>C# 7.2<br>F# 4.1</p>
<h2 id="Shape_Again">Shape Again</h2><hr>
<p>在眾多 OOP 書中，都會看到這個經典 Shape，這是展示 OOP 經典的 Polymorphism 與 Virtual / Override 的經典範例。</p>
<p><img src="/images/fsharp/polymorphism/poly000.svg" alt="oly00"></p>
<ul>
<li><code>Circle</code>、<code>Rectangle</code> 與 <code>Triangle</code> 都抽象化成 <code>Shape</code> 這個 abstract class</li>
<li>因為每個形狀計算面積的公式都不同，因此在 <code>Shape</code> 開 abstract method，再由 <code>Circle</code> 、 <code>Rectangle</code> 與 <code>Triangle</code> 各自實作 <code>Area()</code></li>
<li>最後將 <code>Circle</code>、<code>Rectangle</code> 與 <code>Triangle</code> 都擺進 <code>List</code>，一一的呼叫每個形狀的 <code>Area()</code>，因為 OOP 的 Polymorphism 機制，所以我們不必去判斷 class 型別，自己會執行對的 class 與 method</li>
</ul>
<p>這就是我們熟悉的 Polymorphism。</p>
<p>將分別以 C# 與 F# 實作此需求，體會一下 OOP 與 FP 的差異。</p>
<h2 id="CSharp">CSharp</h2><hr>
<p><strong>Shape.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">Area</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>Shape</code> abstract class，其中 <code>Area()</code> 為 abstract method，因為每個形狀計算面積的公式不同，必須由子類別去實作。</p>
<p><strong>Circle.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">double</span> _radius;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="keyword">double</span> radius</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _radius = radius;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Area</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3.14</span> * _radius * _radius;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Circle</code> 由 constructor 傳入 <code>radius</code>，並 override <code>Area()</code> 計算圓形面積。</p>
<p><strong>Rectangle.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">double</span> _width;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">double</span> _height;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="keyword">double</span> width, <span class="keyword">double</span> height</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _width = width;</span><br><span class="line">            _height = height;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Area</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _width * _height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Rectangle</code> 由 constructor 傳入 <code>width</code> 與 <code>height</code>，並 override <code>Area()</code> 計算矩形面積。</p>
<p><strong>Triangle.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Triangle</span>: <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">double</span> _base;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">double</span> _height;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span>(<span class="params"><span class="keyword">double</span> base_, <span class="keyword">double</span> height</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _base = base_;</span><br><span class="line">            _height = height;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Area</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.5</span> * _base * _height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Triangle</code> 由 constructor 傳入 <code>base</code> 與 <code>height</code>，並 override <code>Area()</code> 計算三角形面積。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            List&lt;Shape&gt; myList = <span class="keyword">new</span> List&lt;Shape&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Circle(<span class="number">10.0</span>),</span><br><span class="line">                <span class="keyword">new</span> Rectangle(<span class="number">2.0</span>, <span class="number">3.0</span>),</span><br><span class="line">                <span class="keyword">new</span> Triangle(<span class="number">4.0</span>, <span class="number">5.0</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> shape <span class="keyword">in</span> myList)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> result = shape.Area();</span><br><span class="line">                Console.WriteLine(<span class="string">"&#123;0:F1&#125;"</span>, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>Circle</code> 、<code>Rectangle</code> 與 <code>Triangle</code> 3 個物件都塞入 <code>List</code>，使用 <code>foreach</code> 執行每個物件的 <code>Area()</code>，不用判斷型別，就自動會執行對的物件，這就是我們熟知的 Polymorphism。</p>
<p><img src="/images/fsharp/polymorphism/poly001.png" alt="oly00"></p>
<p>各自算出各形狀的面積。</p>
<h2 id="FSharp">FSharp</h2><hr>
<p><strong>Program.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Shape</span> </span>= </span><br><span class="line">    | Circle <span class="keyword">of</span> radius: float</span><br><span class="line">    | Rectangle <span class="keyword">of</span> width: float * height: float</span><br><span class="line">    | Triangle <span class="keyword">of</span> base_: float * height: float</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> area shape =</span><br><span class="line">    <span class="keyword">match</span> shape <span class="keyword">with</span> </span><br><span class="line">    | Circle radius -&gt; <span class="number">3.14</span> * radius * radius</span><br><span class="line">    | Rectangle (width, height) -&gt; width * height</span><br><span class="line">    | Triangle (base_, height) -&gt; <span class="number">0.5</span> * base_ * height</span><br><span class="line">    </span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> circle = Circle <span class="number">10.0</span></span><br><span class="line">    <span class="keyword">let</span> rectangle = Rectangle (<span class="number">2.0</span>, <span class="number">3.0</span>)</span><br><span class="line">    <span class="keyword">let</span> triangle = Triangle (<span class="number">4.0</span>, <span class="number">5.0</span>)</span><br><span class="line">    </span><br><span class="line">    [circle; rectangle; triangle]</span><br><span class="line">    |&gt; List.map area</span><br><span class="line">    |&gt; List.iter (printfn <span class="string">"%A"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span> <span class="comment">// return an integer exit code</span></span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Shape</span> </span>= </span><br><span class="line">    | Circle <span class="keyword">of</span> radius: float</span><br><span class="line">    | Rectangle <span class="keyword">of</span> width: float * height: float</span><br><span class="line">    | Triangle <span class="keyword">of</span> base_: float * height: float</span><br></pre></td></tr></table></figure>
<p>定義 <code>Shape</code> union，包含 <code>Circle</code>、<code>Rectangle</code> 與 <code>Triangle</code> 三個 case。</p>
<p>至於三個型別的資料，則直接在 case 後面接 <code>of</code> 表示。</p>
<blockquote>
<p>我們看到 C# 必須使用 <code>abstract class</code> 與 <code>繼承</code>，才能描述 <code>Shape</code> 與 <code>Circle</code>、<code>Rectangle</code> 與 <code>Triangle</code> 之間的抽象關係，但 F# 使用 <code>union</code>只要 4 行即可，而且還是強型別</p>
</blockquote>
<p>第 8 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> area shape =</span><br><span class="line">    <span class="keyword">match</span> shape <span class="keyword">with</span> </span><br><span class="line">    | Circle radius -&gt; <span class="number">3.14</span> * radius * radius</span><br><span class="line">    | Rectangle (width, height) -&gt; width * height</span><br><span class="line">    | Triangle (base_, height) -&gt; <span class="number">0.5</span> * base_ * height</span><br></pre></td></tr></table></figure>
<p>至於 <code>Area()</code> 的多型怎麼辦 ?</p>
<p>只要使用 Pattern Matching 判斷 <code>shape</code> 的型別，各自實作其面積公式即可。</p>
<blockquote>
<p>我們看到 C# 必須使用 virtual / override 機制才能實現 Polymorphism，但 F# 使用 Pattern Matching 只要 5 行即可</p>
</blockquote>
<p>15 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> circle = Circle <span class="number">10.0</span></span><br><span class="line">    <span class="keyword">let</span> rectangle = Rectangle (<span class="number">2.0</span>, <span class="number">3.0</span>)</span><br><span class="line">    <span class="keyword">let</span> triangle = Triangle (<span class="number">4.0</span>, <span class="number">5.0</span>)</span><br><span class="line">    </span><br><span class="line">    [circle; rectangle; triangle]</span><br><span class="line">    |&gt; List.map area</span><br><span class="line">    |&gt; List.iter (printfn <span class="string">"%A"</span>)</span><br></pre></td></tr></table></figure>
<p>不必使用 <code>foreach</code> ，只要以 Pipeline 方式透過 <code>List.map</code> 執行每個物件的 <code>area()</code>，再以 Pipeline 方式透過 <code>List.iter</code> 將計算的結果交給 <code>printfn</code> 顯示。</p>
<blockquote>
<p>C# 雖然也可以使用 LINQ 方式，與 F# 極為類似，不過 LINQ 已經屬於 functional ，不是傳統 OOP 的 imperative </p>
</blockquote>
<p><img src="/images/fsharp/polymorphism/poly002.png" alt="oly00"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>FP 使用 <code>union</code> 即可實作出 OOP 的 <code>繼承</code> 概念</li>
<li>FP 使用 Pattern Matching 即可實作出 OOP 的 <code>virtual/override</code> 概念</li>
<li>OOP 是將 data 與 function 合一，都包在 class 內；FP 是將 data 與 function 分離，data 歸 Type，function 還是 function</li>
<li>F# 的程式碼明顯比 C# 精簡</li>
<li>並不是要比較哪個語言的優劣，只想強調 OOP 與 FP 以不同的思維，都可以實作出 Polymorphism</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 GitHub 上找到：<a href="https://github.com/oomusou/OOPPolymorphism" target="_blank" rel="external">C#</a>、<a href="https://github.com/oomusou/FPPolymorphism" target="_blank" rel="external">F#</a></p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://fsharpforfunandprofit.com/" target="_blank" rel="external">F# for fun and profit</a>, <a href="https://fsharpforfunandprofit.com/posts/key-concepts/" target="_blank" rel="external">Four Key Concepts</a></p>
]]></content>
    <summary type="html">
    <![CDATA[體會 OOP 與 FP 不同的思維]]>
    
    </summary>
    
      <category term="C#" scheme="http://oomusou.io/tags/C/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 C# 實現 Strategy Pattern ?]]></title>
    <link href="http://oomusou.io/design-pattern/strategy/"/>
    <id>http://oomusou.io/design-pattern/strategy/</id>
    <published>2018-03-20T12:23:43.000Z</published>
    <updated>2018-03-29T05:16:23.041Z</updated>
    <content type="html"><![CDATA[<p>Strategy Pattern 是 OOP 中最著名的 Design Pattern，幾乎可以說是 OOP 中使用 <code>interface</code> 最經典的應用，隨著 FP 逐漸受到重視，Strategy Pattern 在實作上也有了新的面貌。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>JetBrains Rider 2017.3.1<br>C# 7.2</p>
<h2 id="User_Story">User Story</h2><hr>
<p>假設你在處理訂單，訂單的折扣方式有兩種</p>
<ul>
<li>不到 1000 元，則 <code>全館八折</code></li>
<li>超過 1000 元，則 <code>滿千送百</code></li>
</ul>
<h2 id="Task">Task</h2><hr>
<p>先使用一般  <code>if else</code> 寫法完全需求，最後再分別以 OOP 與 FP 手法重構成 Strategy Pattern。</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Strategy Pattern</p>
<p>將不同演算法抽象化成相同 interface，讓高階模組與實際演算法解耦合，而彼此僅相依於 interface，進而可動態切換演算法</p>
<p>此為 OOP <code>多型</code> 最典型應用，可以一次看到 <code>單一職責原則</code>、<code>開放封閉原則</code>、<code>依賴反轉原則</code>、、<code>最小知識原則</code></p>
</blockquote>
<p><img src="/images/design-pattern/strategy/strategy016.svg" alt="trategy01"></p>
<ul>
<li><strong>Client</strong> : <code>Context</code> 的 user，實務上可能是 component 或 controller</li>
<li><strong>Context</strong> : 提供 client 呼叫的 class，實務上可能是 service</li>
<li><strong>Strategy</strong> : 定義 <code>ConcreteStrategy</code> 的 interface，只有 <code>Execute()</code>，負責要封裝的演算法邏輯</li>
<li><strong>ConcreteStrategy</strong> :  封裝演算法邏輯</li>
</ul>
<p><strong>適用時機</strong></p>
<ul>
<li>需要使用 <code>if else</code> 在 run-time 切換不同的演算法</li>
</ul>
<p><strong>優點</strong></p>
<ul>
<li>每個演算法使用一個  strategy class，符合 <code>單一職責原則</code></li>
<li>將來若有新的演算法要加入，不用修改 service，而是新增 <code>ConcreStrategy</code>，符合 <code>開放封閉原則</code></li>
<li>Client 與演算法解耦合，兩者都緊相依於 interface，符合 <code>依賴反轉原則</code></li>
<li>Client 不需知道有哪些 strategy，符合 <code>最小知識原則</code></li>
</ul>
<p><strong>缺點</strong></p>
<ul>
<li>若可選擇的演算法過多，容易造成 strategy class 數量爆炸</li>
</ul>
<p>在 GoF 的 Strategy Pattern 中，要求 Client 去 new strategy 傳入 <code>Context</code>。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrage1());</span><br><span class="line"><span class="keyword">var</span> result = context.Request();</span><br></pre></td></tr></table></figure>
<p>但實務上，<code>Context</code> 、<code>Strategy</code>、<code>ConcreteStrategy</code> 都會在 Class Library 內，根據 <code>最小知識原則</code>，client 應該知道越少 class 越好，還要 client 知道 Class Library 有哪些 strategy class 似乎違反 <code>最小知識原則</code>。</p>
<p><strong>實務上作法</strong></p>
<p><img src="/images/design-pattern/strategy/strategy017.svg" alt="trategy01"></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context();</span><br><span class="line"><span class="keyword">var</span> ressult = context.Request(StrategyEnum.ConcreteStrategy1);</span><br></pre></td></tr></table></figure>
<p>Client 不必負責知道 strategy，但會將 <code>enum</code> 開放給 client，client 只需將 <code>enum</code> 傳入 <code>Context</code> 即可。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategy = StrategyFactory.Create(strategyEnum);</span><br><span class="line"><span class="keyword">return</span> strategy.Execute();</span><br></pre></td></tr></table></figure>
<p>至於 <code>Context.Requst()</code> 內部會透過 <code>StrategyFactory.Create()</code> 傳回適當的 strategy。</p>
<p>若真的要由 client 決定 strategy，也可以將 <code>StrategyFactory</code> 開放給 client 使用，最少 client 只要知道 <code>StrategyFactory</code> 即可，而不需知道所有 strategy class，符合 <code>最小知識原則</code> 要求。</p>
<blockquote>
<p>實務上 Strategy Pattern 會與 Factory Pattern 搭配，至於 Factory 是否要暴露給 client，可視需求決定</p>
</blockquote>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/design-pattern/strategy/strategy001.png" alt="trategy00"></p>
<ul>
<li><code>OrderService</code> 相當於 <code>Context</code></li>
<li><code>StrategyFactory</code> 負責根據需求選擇 strategy</li>
<li><code>StrategyInterface</code> 定義個演算法抽象化的 method 名稱</li>
<li><code>RebateStrategy</code> 實作 <code>買千送百</code></li>
<li><code>DiscountStrategy</code> 實作 <code>全館八折</code></li>
</ul>
<h2 id="Implementation">Implementation</h2><hr>
<p><img src="/images/design-pattern/strategy/strategy002.svg" alt="trategy00"></p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> OrderLibrary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> orderService = <span class="keyword">new</span> OrderService();</span><br><span class="line">            <span class="keyword">var</span> originalPrice = <span class="number">1200</span>;</span><br><span class="line">            <span class="keyword">var</span> realPrice = orderService.GetPrice(originalPrice);</span><br><span class="line">            Console.WriteLine(<span class="string">"Original price:&#123;0&#125;, Real price:&#123;1&#125;"</span>, originalPrice, realPrice);</span><br><span class="line"></span><br><span class="line">            originalPrice = <span class="number">800</span>;</span><br><span class="line">            realPrice = orderService.GetPrice(originalPrice);</span><br><span class="line">            Console.WriteLine(<span class="string">"Original price:&#123;0&#125;, Real price:&#123;1&#125;"</span>, originalPrice, realPrice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> orderService = <span class="keyword">new</span> OrderService();</span><br><span class="line"><span class="keyword">var</span> originalPrice = <span class="number">1200</span>;</span><br><span class="line"><span class="keyword">var</span> realPrice = orderService.GetPrice(originalPrice);</span><br></pre></td></tr></table></figure>
<p>將商業邏輯都寫在 <code>OrderService</code>，當 <code>originalPrice</code> 傳入 <code>GetPrice()</code> 後，應回傳 <code>滿千送百</code> 或 <code>全館八折</code> 後的 <code>realPrice</code>。</p>
<h3 id="If_Else">If Else</h3><p><strong>OrderService</strong></p>
<p><img src="/images/design-pattern/strategy/strategy003.svg" alt="trategy00"></p>
<p><strong>OrderService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (price &lt; <span class="number">1000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> price - <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>if else</code> 很直覺的寫出程式碼，在不同 price 條件下，會有不同的計算 price 商業邏輯。</p>
<p>若計算 price 商業邏輯選擇不多，基本上使用 <code>if else</code> 無傷大雅，若選擇很多，使用 <code>if else</code> 的方式就會有以下問題 :</p>
<ul>
<li><code>GetPrice()</code> 含有太多計算 price 商業邏輯，將來不容易維護，違反 <code>單一職責原則</code></li>
<li>將來若要增加 price 商業邏輯，勢必繼續修改 <code>GetPrice()</code> 與 <code>if else</code>，將來不容易違誤，違反 <code>開放封閉原則</code></li>
</ul>
<h3 id="Unit_Test">Unit Test</h3><p>在重構之前，必須要有測試保護，才能確保沒把原本的商業邏輯重構壞，因此我們先準備好 <code>OrderService</code> 的 Unit Test，確保每個 <code>if else</code> 的 path 都有測到。</p>
<p><strong>UnitTest1.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary.Tests</span></span><br><span class="line">&#123;</span><br><span class="line">    [TestClass]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitTest1</span></span><br><span class="line">    &#123;</span><br><span class="line">        [TestMethod]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 當價錢為<span class="number">1200</span>送百後應為<span class="number">1100</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Arrange</span></span><br><span class="line">            <span class="keyword">var</span> target = <span class="keyword">new</span> OrderService();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Act</span></span><br><span class="line">            <span class="keyword">var</span> actual = target.GetPrice(<span class="number">1200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Assert</span></span><br><span class="line">            <span class="keyword">var</span> expected = <span class="number">1100</span>;</span><br><span class="line">            Assert.AreEqual(expected, actual);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [TestMethod]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 當價錢為<span class="number">800</span>打八折後應為<span class="number">640</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Arrange</span></span><br><span class="line">            <span class="keyword">var</span> target = <span class="keyword">new</span> OrderService();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Act</span></span><br><span class="line">            <span class="keyword">var</span> actual = target.GetPrice(<span class="number">800</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Assert</span></span><br><span class="line">            <span class="keyword">var</span> expected = <span class="number">640</span>;</span><br><span class="line">            Assert.AreEqual(expected, actual);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於本文重點不是在講 Unit Test，因此就不浪費篇幅解釋以上程式碼。</p>
<p><img src="/images/design-pattern/strategy/strategy000.png" alt="trategy00"></p>
<h3 id="Strategy_Pattern">Strategy Pattern</h3><p><strong>StrategyInterface</strong></p>
<p><img src="/images/design-pattern/strategy/strategy004.svg" alt="trategy00"></p>
<p><strong>StrategyInterface.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">StrategyInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>StrategyInterface</code> 有 <code>CalculatePrice()</code>，將來其他 strategy 必須遵守此 interface。</p>
<p><strong>RebateStrategy</strong></p>
<p><img src="/images/design-pattern/strategy/strategy005.svg" alt="trategy00"></p>
<p><strong>RebateStrategy.cs</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RebateStrategy</span> : <span class="title">StrategyInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price - <span class="number">100.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>實作 <code>StrategyInterface</code>，實現 <code>買千送百</code> 。</p>
<p><strong>DiscountStrategy</strong></p>
<p><img src="/images/design-pattern/strategy/strategy006.svg" alt="trategy00"></p>
<p><strong>DiscountStrategy.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DiscountStrategy</span> : <span class="title">StrategyInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">0.80</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>實作 <code>StrategyInterface</code>，實現 <code>全館八折</code> 。</p>
<p><strong>StrategyFactory</strong></p>
<p><img src="/images/design-pattern/strategy/strategy007.svg" alt="trategy00"></p>
<p><strong>StrategyFactory.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StrategyFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StrategyInterface <span class="title">Create</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price &lt; <span class="number">1000</span> ? (StrategyInterface) <span class="keyword">new</span> DiscountStrategy() : <span class="keyword">new</span> RebateStrategy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目前有 <code>RebateStrategy</code> 與 <code>DiscountStrategy</code> 兩個 strategy，到底 <code>OrderService.GetPrice()</code> 該選擇拿個 strategy 呢 ?</p>
<p>特別新增 <code>StrategyFactory</code> 專責負責根據不同的 price，選擇不同的 strategy。</p>
<blockquote>
<p>Strategy Pattern 實務上都會搭配 Factory Pattern，由 <code>factory</code>  根據條件選擇適當的 strategy</p>
</blockquote>
<p><strong>OrderService</strong></p>
<p><img src="/images/design-pattern/strategy/strategy008.svg" alt="trategy00"></p>
<p><strong>OrderService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> StrategyFactory.Create(price).calculatePrice(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>OrderService</code> 可輕易的根據 <code>Create(price)</code> 回傳的 strategy，呼叫 <code>calculatePrice()</code>。</p>
<h3 id="Delegate">Delegate</h3><p>從 Strategy Pattern，我們看到了 OOP 幾個缺點：</p>
<ul>
<li>原本簡單的 <code>if ... else</code> 被拆成很多檔案，導致 class 爆炸</li>
<li><code>interface</code> 雖然有制定 spec 與 compiler 編譯檢查的優點，但是只有一個 method 的 interface，是否有有開 <code>interface</code> 的需要？</li>
</ul>
<p>雖然 <code>StrategyInterface</code> 定義了 <code>CalculatePrice()</code>，但整個 <code>interface</code> 只有一個 method，顯然使用 <code>interface</code> 有殺雞用牛刀之嫌，此時可將 <code>interface</code> 退化成 <code>delegate</code>。</p>
<p><img src="/images/design-pattern/strategy/strategy009.svg" alt="trategy00"></p>
<p><strong>CalculatePriceDelegate</strong></p>
<p><img src="/images/design-pattern/strategy/strategy010.svg" alt="trategy01"></p>
<p><strong>CalculatePriceDelegate.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">double</span> <span class="title">CalculatePriceDelegate</span>(<span class="params"><span class="keyword">double</span> price</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義 <code>CalculatePriceDelegate</code> delegate，其 signature 為 <code>double =&gt; double</code>，也就是 input 為 <code>double</code>，return 為 <code>double</code>。</p>
<blockquote>
<p>Q : Delegate 到底是什麼 ?</p>
</blockquote>
<p>Delegate 在 C# 1.0 就已經提出，C 對於 function，只提供了一個 function pointer ，C# 想為 function pointer 提供 type safety 功能，因此提出了 <code>delegate</code>。</p>
<p>簡單的說，<code>delegate</code> 就是 function 的 named type，將 function 取一個 <code>有名稱</code> 的 <code>型別</code>，之後就可以用 delegate 所定義的型別當作 function 的 spec，若 function 不符合 <code>delegate</code> 的 signature，則 compiler 會報錯，達到 type safety 目標。</p>
<p><code>delegate</code> 是 C# 支援 FP 的濫觴，所有的 C# 的 Functional 支援，都是從 <code>delegate</code> 開始。</p>
<blockquote>
<p>實務上 Strategy Pattern 通常只有一個 method，所以就很適合將 interface 退化成 delegate</p>
</blockquote>
<p><strong>PriceStrategy</strong></p>
<p><img src="/images/design-pattern/strategy/strategy011.svg" alt="trategy01"></p>
<p><strong>PriceStrategy.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PriceStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">CalculateRebatePrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price - <span class="number">100.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">CalculateDiscountPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將每個 strategy 以 function 表示，此時改用 static function 即可。</p>
<p>一般來說，OOP 都建議不要使用 <code>static</code>，但這裡是例外，此時是將 class 當成 module 看待，<code>static function</code> 是當成 FP 的 <code>pure function</code> 使用，也就是這種 class 將沒有 field，也不使用 OOP 的 <code>繼承</code> 與 <code>組合</code>。</p>
<p>如此我們就 Strategy Pattern 的 strategy class 爆炸問題解決，無論幾個 strategy，都永遠只有一個 strategy class。</p>
<blockquote>
<p>OOP 將所有的 strategy 都拆成一個 class，很容易因為 strategy 過多，而造成 class 爆炸，這也是 OOP 一直被人詬病的問題之一，FP 將 strategy class 退化成 strategy function，並將所有 strategy 放在同一個 class 內，避免 class 滿天飛</p>
</blockquote>
<p><strong>StrategyFactory</strong></p>
<p><img src="/images/design-pattern/strategy/strategy012.svg" alt="trategy01"></p>
<p><strong>StrategyFactory.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StrategyFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CalculatePriceDelegate <span class="title">Create</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price &lt; <span class="number">1000</span></span><br><span class="line">                ? (CalculatePriceDelegate) PriceStrategy.CalculateDiscountPrice</span><br><span class="line">                : PriceStrategy.CalculateRebatePrice;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>StrategyFactory</code> 的 <code>Create()</code> 從原本回傳 strategy object 改成回傳 strategy function，也就是所有的 function 都必須符合 <code>CalculatePriceDelegate</code> delegate 型別，若違反 <code>delegate</code> ，將會 compiler 錯誤。</p>
<blockquote>
<p>簡單的說，Delegate 就是 function 的 interface 或 function 的 type，這樣 compiler 才能幫我們檢查</p>
</blockquote>
<h3 id="Func">Func<t></t></h3><p>雖然 <code>CalculatePriceDelegate</code> 定義 function 的 spec 的理念很不錯，若 <code>delegate</code> 只使用一遍，真的需要開一個檔案建立 <code>delegate</code> 嗎 ?</p>
<p><strong>StrategyFactory</strong></p>
<p><img src="/images/design-pattern/strategy/strategy012.svg" alt="trategy01"></p>
<p><strong>StrategyFactory.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StrategyFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; Create(<span class="keyword">double</span> price)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> price &lt; <span class="number">1000</span></span><br><span class="line">                ? (Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;) PriceStrategy.CalculateDiscountPrice</span><br><span class="line">                : PriceStrategy.CalculateRebatePrice;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>delegate</code> 退化成 <code>Func&lt;T&gt;</code> ，其中泛型第一個參數為 input 型別，最後一個參數為 return 型別，也就是 <code>Func&lt;double, double&gt;</code> 其實與 <code>delegate double CalculatePriceDelegate(double price);</code> 意義完全相同，只是 <code>Func&lt;T&gt;</code> 沒有型別名稱，而 <code>delegate</code> 有型別名稱而已。</p>
<p>如此我們就將 <code>CalculatePriceDelegate</code> 消滅了。</p>
<blockquote>
<p>Q : Delegate vs. Func<t> vs. Action<t> vs. Predicate<t></t></t></t></p>
</blockquote>
<ul>
<li><strong>Delegate</strong> : C# 1.0，可為 function 定義型別，並且定義型別名稱</li>
<li><strong>Func<t></t></strong> : C# 3.0，可為 function 定義型別，但不用定應型別名稱，適用於有 return 值的 funciton</li>
<li><strong>Action<t></t></strong> : C# 3.0，可為 function 定義型別，但不用定義型別名稱，適用無 return 值 (void) 的 function</li>
<li><strong>Predicate<t></t></strong> : C# 3.0，可為 function 定義型別，但不用定義型別名稱，適用無 return bool 的 function</li>
</ul>
<blockquote>
<p>若 function type 需要重複使用，則建議使用 <code>delegate</code>，並取一個型別名稱</p>
<p>若 function type 只用一次，不需要型別名稱，則建議使用 <code>Func&lt;T&gt;</code> 、 <code>Action&lt;T&gt;</code> 或 <code>Predicate&lt;T&gt;</code>，可視為 anonymous function type 或 unnamed funciton type</p>
</blockquote>
<h3 id="Lambda">Lambda</h3><p><code>StrategyFactory</code> 回傳 strategy function 的理念雖然不錯，若 <code>StrategyFactory</code> 在整個 project 只使用一次而已，是否真的要另外開一個 class ?</p>
<p><img src="/images/design-pattern/strategy/strategy014.svg" alt="trategy01"></p>
<p><strong>OrderService</strong></p>
<p><img src="/images/design-pattern/strategy/strategy015.svg" alt="trategy01"></p>
<p><strong>OrderService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Func&lt;<span class="keyword">double</span>, Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;&gt; CreateStrategy =</span><br><span class="line">                (orignalPrice) =&gt; price &gt; <span class="number">1000</span></span><br><span class="line">                    ? (Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;) PriceStrategy.CalculateRebatePrice</span><br><span class="line">                    : PriceStrategy.CalculateRebatePrice;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> strategy = CreateStrategy(price);</span><br><span class="line">            <span class="keyword">return</span> strategy(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C# 3.0 提出了 Lambda，讓我們可以直接在 function 定義新的 function，而不一定要將 function 建立在 class 內。</p>
<p>直接在 <code>GetPrice()</code> 內定義 <code>CreateStrategy()</code>。</p>
<p><code>Func&lt;&gt;</code> 第一個參數 <code>double</code> 為 <code>CreateStrategy()</code> 的 input 參數型別。</p>
<p>因為 <code>CreateStrategy()</code>  是回傳 <code>Func&lt;double, double&gt;</code> 的 funciton，故第 2 個參數為 <code>Func&lt;double, double&gt;</code>。</p>
<p>如此我們就將 <code>StrategyFactory</code> class 消滅了。</p>
<h3 id="Local_Function">Local Function</h3><p><strong>OrderService</strong></p>
<p><img src="/images/design-pattern/strategy/strategy015.svg" alt="trategy01"></p>
<p><strong>OrderService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OrderLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"><span class="keyword">double</span> price</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; CreateStrategy(<span class="keyword">double</span> originPrice) =&gt; </span><br><span class="line">                originPrice &gt; <span class="number">1000</span></span><br><span class="line">                ? (Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;) PriceStrategy.CalculateRebatePrice</span><br><span class="line">                : PriceStrategy.CalculateDiscountPrice;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> strategy = CreateStrategy(price); </span><br><span class="line">            <span class="keyword">return</span> strategy(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Lambda 雖然讓我們可以在 function 內定義 funtion，但 <code>Func&lt;double, Func&lt;double, double&gt;&gt;</code> 寫法有點恐怖。</p>
<p>C# 7.0 提出了 Local Function，類似宣告 function 的寫法，讓 function 的定義更人性化。</p>
<blockquote>
<p>實務上建議使用 Local Function 取代 Lambda</p>
</blockquote>
<h2 id="Summary">Summary</h2><hr>
<p>以 SOLID 角度重新審視經過 FP 二次重構後的 Strategy Pattern：</p>
<ul>
<li><strong>單一職責原則</strong>：將所有的 strategy 統一整理在 <code>PriceStrategy</code>，符合 SRP</li>
<li><strong>開放封閉原則</strong>：將來若有新的 strategy，只要統一加在 <code>PriceStrategy</code> 即可，符合 OCP</li>
<li><strong>里氏替換原則</strong>：因為沒用到繼承，所以沒有違反 LSP 問題</li>
<li><strong>最小知識原則</strong>：strategy 並沒有暴露到 client，符合 LKP</li>
<li><strong>介面隔離原則</strong>：因為從 <code>interface</code> 退化成 <code>delegate</code>，FP 天生符合 ISP</li>
<li><strong>依賴反轉原則</strong>：service 與 strategy 之間的耦合僅限於 <code>delegate</code> 與 <code>Func&lt;T&gt;</code>，而不是直接耦合與特定 function，符合 DIP</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Strategy Pattern、State Pattern 與 Chain of Responsibility 都是在解決 <code>if else</code> 問題，但 intention 不太一樣</li>
<li>FP 的出現，讓 Design Pattern 的實踐方式，不再只有 OOP 一途，可視實際需求決定該使用 OOP 或 FP</li>
<li>OOP 讓我們以 <code>抽象設計</code> 的角度看系統，但 FP 讓我們以 <code>簡化設計</code> 的角度看系統，實務上建議以 OOP 做第一階段的重構，再輔以 FP 做第二階段的重構，可解決 OOP 容易 Over Design 的問題</li>
<li>C# 1.0 主要是 OOP，C# 2.0 主要是泛型，C# 3.0 之後主要是 FP 部分，如 Lambda、LINQ，C# 也是在 3.0 開始與 Java 分道揚鑣，朝向 OOP + FP 雙 hybrid 語言目標邁進，尤其 C# 7.0 非常明顯，如 Tuple、Descontruction、Pattern Matching、Local Function … 都是 FP 語言很基本的機制</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Core2OrderStrategy" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 FP 將有不同的實現方式]]>
    
    </summary>
    
      <category term="C#" scheme="http://oomusou.io/tags/C/"/>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 TypeScript 之 Generics]]></title>
    <link href="http://oomusou.io/typescript/generics/"/>
    <id>http://oomusou.io/typescript/generics/</id>
    <published>2018-03-18T12:23:43.000Z</published>
    <updated>2018-03-21T06:17:00.095Z</updated>
    <content type="html"><![CDATA[<p><code>泛型</code> 是物件導向 <code>多型</code> 的延伸技術，多型是以 interface 為基礎，在 <code>執行時期</code> 決定適當型別；而泛型則是以 type parameter 為基礎，在 <code>編譯時期</code> 決定適當型別。</p>
<p>泛型也是 TypeScript 的一大特色，預計 ECMAScript 將來也不會採用泛型。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.5</p>
<h2 id="泛型概論">泛型概論</h2><hr>
<p>OOP 就是 <code>繼承</code>、<code>封裝</code> 與 <code>多型</code>，為了支援更多型別，OOP 教我們使用 <code>多型</code>，白話就是抽 <code>interface</code>，但實務上會發現，有很多物件之間根本扯不上什麼關係，很難抽 interface，此時就必須使用 <code>泛型</code>。</p>
<p>泛型並不是什麼新觀念，早在 C++ 就有泛型，後來 C# 2.0 也支援泛型，Java 最後也跟進，而 TypeScript 讓 JavaScript 也能使用泛型。</p>
<blockquote>
<p>多型 : 以 interface 為基礎，將不同型別的物件，抽象化成 interface 型別的物件，但實際上是 <code>多</code> 種 <code>型</code>別的物件。(C++、C#、Java、PHP)</p>
<p>泛型 : 不用抽 interface，以 type parameter 為基礎，透過傳遞型別參數，將各物件抽象化成 <code>T</code> 型別物件，但實際上是 <code>泛</code> 指各種 <code>型</code> 別物件。(C++、C#、Java、TypeScript)</p>
<p>無型 : 因為 <code>無型</code>別，因此可以支援各種型別，但也因為無型別，所以喪失 intellisense 與編譯檢查型別的功能。(JavaScript、PHP)</p>
</blockquote>
<h2 id="TypeScript_Generics">TypeScript Generics</h2><hr>
<p>TypeScript 一共提供 3 種 generics : </p>
<ul>
<li>Generic Function</li>
<li>Generic Interface</li>
<li>Generic Class</li>
</ul>
<h2 id="Generic_Function">Generic Function</h2><hr>
<h3 id="內建型別">內建型別</h3><p>Identity Function</p>
<blockquote>
<p>無論輸入什麼，就輸出什麼</p>
</blockquote>
<p>白話 : 輸入數值就會傳數值；輸入物件就回傳物件；輸入函式就回傳函式。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params">arg: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很簡單的 identity function，為了 <code>number</code> 與 <code>string</code> 就開了 2 個 function，傳入 <code>物件</code> 與傳入 <code>函式</code> 的部分還沒有實作。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>any</code> 就類似 PHP 不使用型別一樣，就表示任何型別都可以當 parameter，return type 也可以是任何型別。</p>
<p>但這種寫法有 <code>2</code> 個缺點 :</p>
<ul>
<li>Parameter 與 return type 都為 <code>any</code>，但不代表是同一個 <code>any</code>，可能 parameter 是 <code>string</code>，而 return type 是 <code>number</code></li>
<li><code>echo()</code> 回傳後的物件喪失了原本的型別，無法得知原本是 <code>number</code> 還是 <code>string</code></li>
</ul>
<blockquote>
<p><code>any</code> 算是某種 <code>泛型</code> 味道，但算是 <code>無型</code>，並不算是個完美的解決方案，它會喪失原本變數的型別。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>echo()</code> 為了支援各種型別，引入泛型觀念，在 function 名稱後加入 <code>&lt;&gt;</code>，此為 type parameter，專門負責傳入 <code>型別參數</code>，有別於 function 的 <code>()</code> ，用來傳遞數值、物件與函式。</p>
<p>因為把型別當成參數後，<code>echo()</code> 就可以支援各種型別，只要呼叫 <code>echo()</code> 多傳入 <code>型別參數</code> 即可，這樣也可確保 parameter 型別為 <code>T</code>，且 return type 為 <code>T</code>。</p>
<blockquote>
<p>並不一定要用 <code>T</code>，因為 <code>T</code>ype，所以慣用 <code>T</code>，第二個泛型常用 <code>U</code>，以此類推。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = echo&lt;<span class="built_in">string</span>&gt;(<span class="string">'Sam'</span>);</span><br></pre></td></tr></table></figure>
<p>呼叫 <code>echo()</code> 時多帶 <code>&lt;string&gt;</code>，就能確保 <code>output</code> 也是 <code>string</code> 型別，而 <code>&lt;&gt;</code> 可以傳進任何型別，因此稱為 <code>泛型</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = echo(<span class="string">'Sam'</span>);</span><br></pre></td></tr></table></figure>
<p>因為 <code>arg: T</code>，TypeScript 會自動根據 <code>Sam</code> 推導出 <code>T</code> 應該為 <code>string</code>。</p>
<p>同理 </p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = echo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>TypeScript 也會自動根據 <code>1</code> 推導出 <code>T</code> 為 <code>number</code>。</p>
<blockquote>
<p>若 <code>T</code> 有在 parameter 裡，TypeScript 會自動根據 argument 推導出 T 的型別，因此使用上不用特別傳入型別參數；若 <code>T</code> 不在 parameter 上，就必須明確在 <code>&lt;&gt;</code> 傳入型別參數。</p>
<p>Generic function 對於使用上並沒有任何負擔，且不會喪失原本變數的型別資訊，是比 <code>any</code> 更好的 <code>泛型</code> 解決方案。</p>
</blockquote>
<h3 id="陣列">陣列</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length); <span class="comment">// error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若希望 parameter 為陣列，當然也可以繼續用 <code>T</code>，不過使用 <code>T</code> 之後，TypeScript 將認為此 parameter 可能為任何型別，若你去使用陣列的 property，如 <code>length</code>，將沒有 intellisense 使用，且編譯也會報錯。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function echo&lt;T&gt;(arg: T[]): T[] &#123;</span><br><span class="line">    console.log(arg.length);</span><br><span class="line">    return arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為 <code>arg</code> 為 <code>T[]</code>，會視為 <code>Array</code>，因此 intellisense 有 <code>length</code>，且編譯也會通過。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: <span class="built_in">Array</span>&lt;T&gt;</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    consoloe.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Array&lt;T&gt;</code> 寫法亦可。</p>
<h2 id="Generic_Interface">Generic Interface</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEcho: &lt;T&gt;(arg: T) =&gt; T = echo;</span><br></pre></td></tr></table></figure>
<p>若要描述 <code>echo&lt;T&gt;()</code> 的型別，使用 <code>&lt;T&gt;(arg: T) =&gt;T</code>，比較特別的是 function 的 return type 改用 <code>=&gt;</code>，而非 <code>:</code>，因為 <code>myEcho</code> 的型別已經用了 <code>:</code>，因此 function 的 return type 改用 arrow function 的 <code>=&gt;</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEcho: &#123;&lt;T&gt;(arg: T): T&#125; = echo;</span><br></pre></td></tr></table></figure>
<p>也可使用 object literal 寫法，因為在 <code>{}</code> 內，此時 return type 可用 <code>:</code>。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> IEcho </span>&#123;</span><br><span class="line">    &lt;T&gt;(arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEcho: IEcho = echo;</span><br></pre></td></tr></table></figure>
<p>也可將 <code>echo&lt;T&gt;()</code> 型別的 object literal 寫法，改用 function interface 表示。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> IEcho&lt;T&gt; </span>&#123;</span><br><span class="line">    (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEcho&lt;<span class="built_in">string</span>&gt;: IEcho = echo;</span><br></pre></td></tr></table></figure>
<p><code>&lt;T&gt;(arg: T): T;</code> 的寫法，<code>T</code> 僅作用於 method，若我們想將 <code>T</code> 作用於整個 interface，會移到 interface 名稱後面。</p>
<blockquote>
<p>Q : 使用 generic interface 時，<code>&lt;T&gt;</code> 該使用在 interface 還是 function ?</p>
</blockquote>
<ul>
<li>若你想由 function 來推倒出 interface 的 <code>T</code>，則將 <code>T</code> 放在 function</li>
<li>若你想由 interface 來決定 <code>T</code>，function 必須遵守，則將 <code>T</code> 放在 interface</li>
<li>各有各的優點，要依實際狀況決定該用哪種方式</li>
</ul>
<h2 id="Generic_Class">Generic Class</h2><hr>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: (x: T, y: T) =&gt; T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>
<p><code>T</code> 定義了 class 內的 property 與 method signature 的型別。</p>
<blockquote>
<p>Generic class 的 <code>T</code> 只能用在 object level，不能用在 class level 的 static 部分。<br>只有 generic function，generic interface 與 generic class，並沒有 generic enums。<br>只有 generic function 可以由 parameter 自動推導出 <code>&lt;T&gt;</code>，generic interface 與 generic class 則必須明確傳入 <code>&lt;T&gt;</code>。</p>
</blockquote>
<h2 id="Generic_Constraint">Generic Constraint</h2><hr>
<h3 id="Extends_Interface">Extends Interface</h3><p>在之前的例子，因為我們需要 <code>arg.length</code> ，因而改用 <code>T[]</code>，若我們要得不是陣列的 <code>length</code> property，而是傳入的 parameter 必須要有 <code>length</code> property 呢 ?</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Lengthwise </span>&#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Lengthwise </span>&#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 object interface，定義 <code>length</code> property。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span></span></span><br></pre></td></tr></table></figure>
<p>一樣使用 <code>&lt;T&gt;</code>，但必須 <code>T extends Lengthwise</code>，表示 <code>T</code> 不再是任意型別，而必須是有實現 <code>Lengthwise</code> interface 的型別，否則 TypeScript 會編譯錯誤。</p>
<blockquote>
<p>Q : <code>Lengthwise</code> 是 interface，<code>T</code> 應該是要 <code>implements</code> interface，怎麼是 <code>extends</code> interface 呢 ?</p>
</blockquote>
<p><code>T</code> 是個 type，TypeScript 也允許 interface 繼承 interface，相當於 property 的組合，因此 <code>T extends Lengthwise</code> 後，<code>T</code> 會多了 <code>length</code> property，因此 <code>arg</code> 一定要有 <code>length</code> property 的才會通過 TypeScript 編譯。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loggingIdentity(<span class="number">3</span>);  <span class="comment">// Error, number doesn't have a .length property</span></span><br></pre></td></tr></table></figure>
<p>用了 generic constraint 之後，傳入 <code>3</code> 會編譯錯誤，因為 <code>number</code> 型別沒有 <code>length</code> property。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loggingIdentity(&#123;length: <span class="number">10</span>, value: <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure>
<p><code>({length: 10, value: 3}</code> 有 <code>lenght</code> property，有符合 <code>Lengthwise</code> 的要求，TypeScript 編譯通過。 </p>
<blockquote>
<p>之前講 interface 時，談到 object literal 當  argument 時，會啟動 excess property checks，也就是 strong typing 檢查，但用在 generic constraint 時，TypeScript 卻只採用 duck typing 檢查。</p>
<p>Q : 為什麼不直接用 interface，卻要用 generic constraint ?</p>
</blockquote>
<p>一開始我也覺得 interface 與 generic constraint 是一樣的，但仔細想想還是不同，若用 interface 改寫 :</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Lengthwise </span>&#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>(<span class="params">arg: Lengthwise</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Parameter 部分沒問題，型別使用 <code>Lengthwise</code> interface 即可。</p>
<p>但 return type 就尷尬了，無法只傳回 <code>Lengthwise</code> interface。</p>
<p>所以還是得靠 <code>&lt;T&gt;</code> 搭配 generic constraint 才會功德圓滿。</p>
<blockquote>
<p>若 return type 與 <code>T</code> 無關時，的確使用 interface 即可。</p>
</blockquote>
<h3 id="Extends_KeyOf">Extends KeyOf</h3><p>Generic constraint 不見的只能根據既有的 interface，還能根據其他 type parameter。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>, d: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">getProperty(x, <span class="string">"a"</span>); <span class="comment">// okay</span></span><br><span class="line">getProperty(x, <span class="string">"m"</span>); <span class="comment">// error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.</span></span><br></pre></td></tr></table></figure>
<p>實務上我們可能希望 function 的第 1 個參數為 object，第 2 個參數為 object 的 key，希望傳回 object 的 value，但要如何確保輸入的 key 一定是 object 的 key 呢 ?</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>)</span></span><br></pre></td></tr></table></figure>
<p><code>T</code> : 傳入物件的泛型。</p>
<p><code>keyof T</code> : 物件的 key。</p>
<p><code>K extends keyof T</code> : <code>K</code> 須為 <code>T</code> 的 key。</p>
<blockquote>
<p>藉由 <code>extends keyof</code> 語法，若輸入的值不是 object 的 key，TypeScript  將會編譯錯誤。</p>
</blockquote>
<h3 id="new():_T">new(): T</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function create&lt;T&gt;(c: new() =&gt; T): T &#123;</span><br><span class="line">    return new c();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Factory method / constructor function 目的在於取代 new 建立物件，因此我們會需要 paramter 傳入 constructor，若想要以泛型描述 constructor，可用 <code>new() =&gt;T</code> 加以描述。</p>
<h2 id="實務上的應用">實務上的應用</h2><hr>
<p>剛剛介紹了泛型的語法，現在介紹實務上該如何使用泛型。</p>
<h3 id="Service_處理不同_Model">Service 處理不同 Model</h3><p>實務上常會遇到 service 的不同 method 處理不同 model，事後卻發現其演算法完全相同，因此想抽成同一個 method 實現 DRY，卻發現因為 model 型別不同而無法 extract method。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFromToSMS</span><span class="params">(SMSMessage <span class="variable">$smsMessage</span>)</span>: <span class="title">SMSMessage</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="variable">$smsMessage</span>-&gt;from = <span class="string">'Senao'</span>;</span><br><span class="line">        ...    </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$smsMessage</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFromToLine</span><span class="params">(LineMessage <span class="variable">$lineMessage</span>)</span>: <span class="title">LineMessage</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="variable">$lineMessage</span>-&gt;from = <span class="string">'Senao'</span>;</span><br><span class="line">        ...  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$lineMessage</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 3 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFromToSMS</span><span class="params">(SMSMessage <span class="variable">$smsMessage</span>)</span>: <span class="title">SMSMessage</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable">$smsMessage</span>-&gt;from = <span class="string">'Senao'</span>;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$smsMessage</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>傳入 <code>SMSMessage</code> model 進 <code>addFromToSMS()</code>，主要目的是將 <code>Senao</code> 指定給 <code>$smsMessag-&gt;from</code> 。</p>
<blockquote>
<p><code>Senao</code> 也可能是由演算法算出的產物，但最終都要指定給 <code>from</code> property，並回傳 <code>SMSMessage</code> model。</p>
</blockquote>
<p>第 10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFromToLine</span>(<span class="params">LineMessage $lineMessage</span>): <span class="title">LineMessage</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	$lineMessage-&gt;from = <span class="string">'Senao'</span>;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $lineMessage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>傳入 <code>LineMessage</code> model 進 <code>addFromToLine()</code> ，主要目的是將 <code>Senao</code> 指定給 <code>$lineMessage</code>。</p>
<blockquote>
<p><code>Senao</code> 也可能是由演算法算出的產物，但最終都要指定給 <code>from</code> property，並回傳 <code>LineMessage</code> model。</p>
</blockquote>
<p>我們可以發現，<code>addFromToSMS()</code> 與 <code>addFromToLine()</code> 基本上演算法相同，要解決的問題也相同，只因為傳入 parameter 的型別與傳回的 return type 不同，因此被逼要用兩個 method 處理。</p>
<p>因為演算法相同，我們希望只使用一個 method 就能解決。</p>
<p>在 PHP，可能有 <code>2</code> 種解法 :</p>
<ul>
<li>放棄 Type Hint</li>
<li>將共用部分抽 Interface</li>
</ul>
<p><strong>放棄 Type Hint</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFromToMessage</span><span class="params">(<span class="variable">$smsMessage</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="variable">$smsMessage</span>-&gt;from = <span class="string">'Senao'</span>;</span><br><span class="line">        ...</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$smsMessage</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然因為 type hint 而拆成兩個 method，那乾脆回歸 PHP 最原始寫法 : <code>完全放棄 type hint</code>，這樣 <code>SMSMessage</code> 與 <code>LineMessage</code> 兩種型別的物件都可以傳入。</p>
<blockquote>
<p>這也是最多人在 PHP 處理的方式。</p>
</blockquote>
<p>但這種方式也有幾個缺點 :</p>
<ul>
<li>因為 <code>$smsMessage</code> 沒有任何型別描述，因此 <code>$smsMessage</code> 也喪失了 intellisense</li>
<li>維護程式的人無法得知 <code>$smsMessage</code> 是什麼型別，只能 trace code 根據前後文去得知其型別</li>
<li>沒有描述 return type，因此接受 <code>addFromToMessage()</code> 的物件也喪失 intellisense</li>
</ul>
<p><strong>將共用部分抽 Interface</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessageFrom</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string*/</span></span><br><span class="line">    <span class="keyword">public</span> from;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSMessage</span> <span class="keyword">implements</span> <span class="title">IMessageFrom</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ...  </span><br><span class="line">    <span class="keyword">public</span> from;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineMessage</span> <span class="keyword">implements</span> <span class="title">IMessageFrom</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ...    </span><br><span class="line">    <span class="keyword">public</span> from;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFromToMessage</span><span class="params">(IMessageFrom <span class="variable">$smsMessage</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="variable">$smsMessage</span>-&gt;from = <span class="string">'Senao'</span>;</span><br><span class="line">        ...</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$smsMessage</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessageFrom</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string*/</span></span><br><span class="line">    <span class="keyword">public</span> from;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>from</code> 為 <code>SMSMessage</code> 與  <code>LineMessage</code> 共同的部分，我們可以將 <code>from</code> 抽成 <code>IMessageFrom</code>。</p>
<p>第 7 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSMessage</span> <span class="keyword">implements</span> <span class="title">IMessageFrom</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ...  </span><br><span class="line">    <span class="keyword">public</span> from;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineMessage</span> <span class="keyword">implements</span> <span class="title">IMessageFrom</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ...    </span><br><span class="line">    <span class="keyword">public</span> from;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後要求 <code>SMSMessage</code> 與 <code>LineMessage</code> 去 implement <code>IMessageFrom</code>。</p>
<p>23 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFromToMessage</span><span class="params">(IMessageFrom <span class="variable">$smsMessage</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable">$smsMessage</span>-&gt;from = <span class="string">'Senao'</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$smsMessage</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣 <code>addFromToMessage()</code> 的 parameter 就可以加上 <code>IMessageFrom</code> type hint。</p>
<p>這種寫法解決了之前的 2 個問題 :</p>
<ul>
<li>因為 <code>$smsMessage</code> 有了型別描述，因此 <code>$smsMessage</code> 有 intellisense</li>
<li>維護程式的人可以得知 <code>$smsMessage</code> 是什麼型別，不需要 trace code</li>
</ul>
<p>但仍有 1 個問題沒解決 :</p>
<ul>
<li>原本 <code>addFromToSMS()</code> 的回傳型別為 <code>SMSMessage</code>，<code>addFromToLine()</code> 回傳型別為 <code>LineMessage</code>，但現在 return type 仍然無法描述，因此接受 <code>addFromToMessage()</code> 的物件仍然喪失 intellisense</li>
</ul>
<blockquote>
<p>若有了 generics，就可以完美解決這個問題</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> IMessageFrom </span>&#123;</span><br><span class="line">    from: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NotificationService &#123;</span><br><span class="line">    addFromToMessage&lt;T extends IMessageFrom&gt;(smsMessage: T): T &#123;</span><br><span class="line">        ...</span><br><span class="line">        smsMessage.from = <span class="string">'Senao'</span>;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> smsMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> IMessageFrom </span>&#123;</span><br><span class="line">  from: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一樣使用 interface 描述要有 <code>from</code> property。</p>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addFromToMessage&lt;T extends IMessageFrom&gt;(smsMessage: T): T &#123;</span><br><span class="line">    ...</span><br><span class="line">    smsMessage.from = <span class="string">'Senao'</span>;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> smsMessage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addFromToMessage&lt;T&gt;(smsMessage: T): T</span><br></pre></td></tr></table></figure>
<p><code>smsMessage</code> 的型別改用 <code>T</code> 表示，且 return type 也為 <code>T</code>。</p>
<p>這解決了之前 2 種方式的 <code>addFromToMessage()</code> 無法描述 return type 的問題，目前 return type 為 <code>T</code>，與傳入 parameter 的型別相同。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addFromToMessage&lt;T extends IMessageFrom&gt;(smsMessage: T): T</span><br></pre></td></tr></table></figure>
<p>但 <code>T</code> 為任何型別，並無法保證 <code>from</code> property 一定存在，因此在 type parameter 加上 <code>&lt;T extends IMessageFrom&gt;</code> (Generic Constraint)，確保 <code>T</code> 一定要有 <code>IMessageFrom</code> interface，否則 TypeScript 會編譯失敗。</p>
<p>如此 return type 與 interface 問題皆可解決。</p>
<blockquote>
<p><code>T extends interface</code> 讓我們實現 <code>有限制的泛型</code>，<code>T</code> 不再是任意型別，而是要有實現 interface 的特定型別。</p>
</blockquote>
<h3 id="Array_處理不同_Model">Array 處理不同 Model</h3><p>實務上會使用 array 放不同 model，但缺發現 method 回傳後，已經喪失原本 array 內物件的型別。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sortMessages</span><span class="params">(array <span class="variable">$messages</span>)</span>: <span class="title">array</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sortMessages()</code> 負責對 model 陣列做排序，由於 <code>$messages</code> 只宣告為 <code>array</code> 型別，因此使用上</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sortMessages(<span class="variable">$smsMessages</span>);</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sortMessages(<span class="variable">$lineMessages</span>);</span><br></pre></td></tr></table></figure>
<p>皆可以傳入。</p>
<p>儘管在 array 內處理不同 model，但最少都在同一個 <code>sortMessages()</code> 裡面，已經有泛型的味道。</p>
<p>但這樣寫有 <code>2</code> 個問題 :</p>
<ul>
<li><code>array</code> 是一個概括性的型別，我們無法得知 array 內放的是 <code>SMSMessage</code> 或是 <code>LineMessage</code> 型別。</li>
<li>回傳的 <code>array</code> 也是個概括型別，接受 <code>sortMessages()</code> 的回傳物件，只能知道是個 array，但不知道內部是什麼物件，如 <code>foreach()</code> 時，就無法對內部物件做 intellisense。</li>
</ul>
<p><code>1</code> 的問題還好，因為 <code>sortMessages()</code> 主要是針對 array 做排序，因此不會使用到 array 內部物件的 intellisense，但 <code>2</code> 的問題比較嚴重。</p>
<blockquote>
<p>若有了 generics，就可以完美解決這個問題</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> NotificationService &#123;</span><br><span class="line">    sortMessages&lt;T&gt;(messages: T[]): T[] &#123;</span><br><span class="line">        ...    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>T</code> 代表任意型別，<code>T[]</code> 為任意型別的陣列，且 return type <code>T[]</code> 亦為任意型別的陣列。</p>
<p>這種寫法解決了原本的問題 :</p>
<ul>
<li><code>messages</code> 不再只是概括性的 <code>array</code> 型別，而是明確的 <code>T[]</code> 型別，其中 <code>T</code> 就是傳入的 model 型別。</li>
<li>回傳的也不再是概括的 <code>array</code> 型別，而是明確的 <code>T[]</code>，<code>sortMessages()</code> 的接受者可以明確地得知其型別為 <code>T</code>，TypeScript 編譯器會自動將 <code>T</code> 以 model 的型別取代，因此 <code>foreach</code> 可順利抓到物件的型別。</li>
</ul>
<blockquote>
<p>對於 array 這種 container 類型的型別，我們不必只是宣告空洞的 <code>array</code> 型別而已，而是真正以 array 的內容來宣告型別。</p>
</blockquote>
<h3 id="Repository_處理不同_Model">Repository 處理不同 Model</h3><p>Repository 負責處理資料庫邏輯，實務上會發現有些 method 在所有的 repository 都會出現，因此會想定義 abstract repository，其他 repository 則繼承此 abstract repository。</p>
<blockquote>
<p>這裡的 model 指的是 .NET 的 entity，以 ORM 來描述 table 的一筆資料，而 CodeIgniter 的 model 則類似於 repository。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> 注入的model */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 根據 key 找單一筆資料 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">(int <span class="variable">$id</span>, <span class="variable">$columns</span> = [<span class="string">'*'</span>])</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** 回傳全部資料 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">all</span><span class="params">(<span class="variable">$columns</span> = [<span class="string">'*'</span>])</span>: <span class="title">array</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        ... </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 新增資料 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(array <span class="variable">$data</span>)</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 修改資料 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(array <span class="variable">$data</span>)</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 刪除資料 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">(int <span class="variable">$id</span>)</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepository</span> <span class="keyword">extends</span> <span class="title">AbstractRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> __construct(Order <span class="variable">$order</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這種架構 <code>OrderRepository</code> 繼承了 <code>AbstractRepository</code>，因此 <code>OrderRepository</code> 就有了 <code>AbstractRepository</code> 的 <code>find()</code> 、<code>all()</code> 、<code>create()</code> 、<code>update()</code> 與 <code>delete()</code> 功能，這些都是每個 repository 都會有的 method。</p>
<p>這種架構看似很好，但仔細去看 <code>AbstractRepository</code>，仍有一些問題 :</p>
<p>第 3 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> 注入的model */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$model</span>;</span><br></pre></td></tr></table></figure>
<p><code>$model</code> 因為可能是各種型別，所以無法宣告型別，不過目前 PHP 還無法對 field 下 type hint。</p>
<p>第 6 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 根據 key 找單一筆資料 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">(int <span class="variable">$id</span>, <span class="variable">$columns</span> = [<span class="string">'*'</span>])</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>find()</code> 理論上應該回傳 model 型別，但為了支援各種 model，只好選擇不用 return type，但也因此 <code>find()</code> 的接受物件喪失了 intellisense。</p>
<p>12 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 回傳全部資料 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">all</span><span class="params">(<span class="variable">$columns</span> = [<span class="string">'*'</span>])</span>: <span class="title">array</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>all()</code> 會傳回多筆資料，return type 使用了 <code>array</code> 這種概括型別，但 <code>all()</code>  的接受物件將喪失 array 內物件的 intellisense。</p>
<p>18 行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 新增資料 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(array <span class="variable">$data</span>)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改資料 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(array <span class="variable">$data</span>)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>create()</code> 與 <code>update()</code> 為了讓各種 model 的 repository 都能套用，因而退守改用 <code>array</code> 這種概括型別，理論上應該將 model 型別的 <code>物件</code> 傳入較佳。</p>
<blockquote>
<p>Array 的缺點</p>
<ul>
<li>Array 是個概括型別，使用了之後，array 內部的物件都會喪失 intellisense</li>
<li>Array 與 null 很像，只要在底層用了 array 或 null，如 repository，就會逼得 service 與 controller 也繼續用 array 或 null</li>
</ul>
<p>若有了 generics，就可以完美解決這個問題</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">abstract class AbstractRepository&lt;T&gt; &#123;</span><br><span class="line">    /** 注入的model */</span><br><span class="line">    protected model: T;</span><br><span class="line"></span><br><span class="line">    /** 根據 key 找單一筆資料 */</span><br><span class="line">    find(id: number, columns = ['*']): T &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /** 回傳全部資料 */</span><br><span class="line">    function all(columns = ['*']): T[] &#123;</span><br><span class="line">        ... </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 新增資料 */</span><br><span class="line">    create(data: T) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 修改資料 */</span><br><span class="line">    update(data: T) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 刪除資料 */</span><br><span class="line">    delete(id: number) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OrderRepository extends AbstractRepository&lt;Order&gt; &#123;</span><br><span class="line">    constructor(protected order: Order) &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 注入的model */</span></span><br><span class="line"><span class="keyword">protected</span> model: T;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>model</code> 為泛型 <code>T</code>。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 根據 key 找單一筆資料 */</span></span><br><span class="line">find(id: <span class="built_in">number</span>, columns = [<span class="string">'*'</span>]): T &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>find()</code> 的 return type 也有了 model 的明確型別，為泛型 <code>T</code>。</p>
<p>10 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 回傳全部資料 */</span></span><br><span class="line">all(columns = [<span class="string">'*'</span>]): T[] &#123;</span><br><span class="line">    ...     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>all()</code> 的 return type 由 <code>T[]</code> 取代 <code>array</code>，有了 model 的明確的型別。 </p>
<p>16 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 新增資料 */</span></span><br><span class="line">create(data: T) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改資料 */</span></span><br><span class="line">update(data: T) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>create()</code> 與 <code>update()</code> 的 parameter 由 <code>array</code> 改成 <code>T</code>，有了 model 的明確型別。</p>
<p>31 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> OrderRepository extends AbstractRepository&lt;Order&gt; &#123;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(protected order: Order) </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在繼承 <code>AbstractRepository</code> 時，把 <code>Order</code> 的 type parameter 明確帶入，因此 <code>AbstractRepository</code> 的 <code>T</code> 都是 <code>Order</code> model。</p>
<blockquote>
<p>改用泛型後，Repository 的型別可由 type parameter 指定，不再為了支援各種 model 而放棄 type hint 或改用 array。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>C# 也有 generics，因此學習 TypeScript 的 generics 觀念，完全可用在 C#。</li>
<li>因為 interface 是在執行階段切換，所以又稱為 <code>動態多型</code>，而 generics 是在編譯階段切換，又稱為 <code>靜態多型</code>。</li>
<li>因為 generics 是在編譯階段處理，所以執行效率會比 interface 高。</li>
<li><code>&lt;T&gt;</code> 要放在 function 還是要放在 class 或 interface 都有它的優缺點，要看實際狀況決定。</li>
<li>泛型讓我們在寫程式時，能以支援各種型別來思考，但使用上又能享受強型別的 intellisense 與編譯時期檢查，非常好用。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, <a href="https://www.typescriptlang.org/docs/handbook/generics.html" target="_blank" rel="external">Handbook : Generics</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Generics 是 TypeScript 一大特色]]>
    
    </summary>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
</feed>
