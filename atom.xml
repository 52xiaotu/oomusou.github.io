<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2016-10-05T03:45:04.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何修改 PhpStorm 預設的 Class Template?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-class-template/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-class-template/</id>
    <published>2016-10-05T12:23:43.000Z</published>
    <updated>2016-10-05T03:45:04.000Z</updated>
    <content type="html"><![CDATA[<p>當使用 PhpStorm 建立 class 時，預設會產生 <code>Created by PhpStorm</code> 的註解，並包含<strong>作者</strong>、<strong>日期</strong>、<strong>時間</strong>等資訊，有的人喜歡，有的人不喜歡，若你不希望每次建立 class 時都有這個檔頭，可以自行修改；除此之外，在 PHP 7 為了讓強行別檢查發揮作用，我們會在一開始 <code>declare(strict_types = 1);</code>，這也可以直接設定在 class template，以後只要建立新的 class，都會自動加上宣告。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p><img src="/images/phpstorm/phpstorm-class-template/template000.png" alt=""></p>
<p>預設在 PhpStorm 建立 class 時，都會在檔頭加上 <code>Created by PhpStorm</code> 的註解，很多人建立 class 後的第一件事情，就是去刪除這些註解，事實上我們可以透過修改 PhpStorm 的 class template，移除這些設定。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>PhpStorm 2016.2.1</p>
<h2 id="移除註解">移除註解</h2><hr>
<p><img src="/images/phpstorm/phpstorm-class-template/template001.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; File and Code Templates -&gt; PHP Class</em></strong></p>
<p>我們發現每個 class template 都有 <code>#parse(&quot;PHP File Header.php&quot;)</code>。</p>
<p><img src="/images/phpstorm/phpstorm-class-template/template002.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; File and Code Templates -&gt; includes -&gt; PHP File Header</em></strong></p>
<p>切換到 <code>includes</code> 的 <code>PHP File Header</code>，我們可以看到預設的註解就是在此，若你不喜歡這些註解，可以全部刪除後存檔。</p>
<h2 id="宣告_Strict_Type">宣告 Strict Type</h2><hr>
<p>PHP 7 增加了 scalar type hint 與 return type，不過為了相容於過去 PHP 弱型別傳統，預設並沒有啟動型別檢查，必須自己加上 <code>declare(strict_type = 1)</code> 之後，PHP 與 PhpStorm 的 Code Inspection 才會根據 type hint 與 return type 檢查型別。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 PhpStorm 的 Code Inspection，詳細請參考<a href="/phpstorm/phpstorm-code-inspection/">如何在 PhpStorm 使用 Code Inspection?</a></span></span></span></p>
<p>目前 PHP 7 並沒有提供全域的 <code>php.ini</code> 設定，必須自己在每個 <code>.php</code> 加上設定，很麻煩也容易忘記，若能設定在 class template 內，則以後新增 class 都會有 <code>declare(strict_type = 1)</code>。</p>
<p><img src="/images/phpstorm/phpstorm-class-template/template003.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; File and Code Templates -&gt; includes -&gt; PHP File Header</em></strong></p>
<p>刪除預設註解後，改加上 <code>declare(strict_type = 1)</code>。</p>
<p><img src="/images/phpstorm/phpstorm-class-template/template004.png" alt=""></p>
<p>以後新增 class，預設註解不見了，且自動加上 <code>declare(strict_type = 1)</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>除了移除預設註解與宣告 <code>strict types</code> 外，如一些需靠 <code>Laravel artisan</code> 建立的 controller、unit test …，事實上也可以新增一個 template，直接使用 PhpStorm 來新增。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/file-and-code-templates.html" target="_blank" rel="external">File and Code Templates</a></p>
]]></content>
    <summary type="html">
    <![CDATA[將惱人的預設檔頭拿掉，並加上 PHP 7 所需要 strict types 宣告]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對 Laravel 進行驗收測試?]]></title>
    <link href="http://oomusou.io/selenium/selenium-phpunit/"/>
    <id>http://oomusou.io/selenium/selenium-phpunit/</id>
    <published>2016-09-27T12:23:43.000Z</published>
    <updated>2016-10-03T02:08:46.000Z</updated>
    <content type="html"><![CDATA[<p>Laravel 在 5.1 之後，提供了<strong>應用程式測試</strong> (<a href="https://laravel.com/docs/master/application-testing" target="_blank" rel="external">Application Testing</a>)，讓我們不用開啟瀏覽器，就可以直接對 route、controller 與 blade 進行驗收測試，且執行速度非常快，但也因為沒有開啟瀏覽器，所以無法對 JavaScript 進行測試，若搭配了 Selenium，配合我們熟悉的 PHPUnit，就能對驗收測試加以自動化。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>Laravel 的 Application Testing 非常好用，API 語意清楚，且提供 fluent 方式串接，不過 Seleinum WebDriver 提供的又是另外一套 API 方式，若能將 Application Testing 與 Acceptance Testing 整合成相同的 API，那就太棒了。</p>
<h2 id="Version">Version</h2><hr>
<p>macOS Sierra 10.12<br>Java 1.8.0_91-b14<br>PHP 7.0.8<br>Laravel 5.3.10<br>PhpStorm 2016.2.1<br>PHPUnit 5.5.5<br>phpunit-selenium 3.0.2<br>Selenium Standalone Server 2.53.1<br>FireFox 46.0.1</p>
<h2 id="測試種類簡介">測試種類簡介</h2><hr>
<h2 id="應用程式測試">應用程式測試</h2><hr>
<h2 id="驗收測試">驗收測試</h2><hr>
<h2 id="PHPUnit">PHPUnit</h2><hr>
<h2 id="Selenium">Selenium</h2><hr>
<h2 id="設定應用程式測試環境">設定應用程式測試環境</h2><hr>
<h2 id="設定驗收測試環境">設定驗收測試環境</h2><hr>
<h3 id="phpunit-selenium">phpunit-selenium</h3><p><a href="https://packagist.org/packages/phpunit/phpunit-selenium" target="_blank" rel="external">phpunit/phpunit-selenium</a> 是由 <a href="https://github.com/sebastianbergmann/phpunit" target="_blank" rel="external">PHPUnit</a> 所提供的 Selenium WebDriver，讓我們可以在 PHP 直接對瀏覽器 GUI 做控制，並使用 PHPUnit 做 assertion，目前僅支援 Selenium Server 2.x。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require phpunit/phpunit-selenium --dev</span><br></pre></td></tr></table></figure>
<p>在專案目錄下由 Composer 安裝 <code>phpunit/phpunit-selenium</code>，由於這是開發用的套件，請加上 <code>--dev</code> 參數。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium005.png" alt=""></p>
<h3 id="Selenium_Server">Selenium Server</h3><p>我們必須透過 Selenium 幫我們對瀏覽器下指令，因此必須先安裝 <a href="http://www.seleniumhq.org/download/" target="_blank" rel="external">Selenium Server</a>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium000.png" alt=""></p>
<p>目前 3.0 尚在 beta，且 <code>phpunit/phpunit-selenium</code> 目前僅支援 Selenium 2.x，所以選擇 <a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="external">previous release</a> 安裝以前的版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium001.png" alt=""></p>
<p>選擇 <code>2.53</code>，這是 Selenium 2.x 的最後版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium002.png" alt=""></p>
<p>下載 <code>selenium-server-standalone-2.53.1.jar</code>，這是 <code>2.53</code> 的最後一個版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium003.png" alt=""></p>
<p>將 <code>selenium-server-standalone-2.53.1.jar</code> 複製到 Laravel 專案的根目錄下。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ java -jar selenium-server-standalone-2.53.1.jar</span><br></pre></td></tr></table></figure>
<p>Selenium 由 Java 所開發，必須由 Java 啟動。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium004.png" alt=""></p>
<p>啟動 Selenium  Server，若看到 <code>Selenium Server is up and running</code>，則表示 Selenium 已經正常啟動。</p>
<h3 id="FireFox">FireFox</h3><p>Selenium 預設支援 FireFox，且與 FireFox 版本息息相關，目前 Selenium Server<code>2.53</code> 支援的是 FireFox <code>46</code>，若你裝的是 FireFox 最新版，將無法由 <code>phpunit/phpunit-selenium</code> 控制 FireFox，必須先暫時移除 FireFox 最新版，安裝 FireFox <code>46</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium006.png" alt=""></p>
<p>到 <a href="https://ftp.mozilla.org/pub/firefox/releases/" target="_blank" rel="external">https://ftp.mozilla.org/pub/firefox/releases/</a> 下載之前的 FireFox 版本，選擇 <code>46.0.1</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium007.png" alt=""></p>
<p>選擇 <code>mac</code> 版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium008.png" alt=""></p>
<p>選擇 <code>en-US</code> 版本。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium009.png" alt=""></p>
<p>下載 <code>Firefox 46.0.1.dmg</code>。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium010.png" alt=""></p>
<p>由於 FireFox 在安裝後會自動更新到最新版，這會使得 <code>phpunit/phpunit-selenium</code> 無法正常執行，所以在安裝 FireFox 前，務必先將網路斷開，避免 FireFox 自動更新。</p>
<p>之後依照一般 macOS App 安裝方式安裝 FireFox。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium011.png" alt=""></p>
<p><strong><em>Firfox -&gt; Preference</em></strong><br>安裝完 Firefox 後，開啟 preference 設定。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium012.png" alt=""></p>
<p><strong><em>Advanced -&gt; Update</em></strong></p>
<p>特別設定避免 Firefox 自動更新。</p>
<ul>
<li>選擇 <code>Never check for update (not recommended security risk)</code></li>
<li>不要選擇 <code>Automatically update : Search Engines</code>。</li>
</ul>
<p><img src="/images/selenium/selenium-phpunit/selenium013.png" alt=""></p>
<p><strong><em>Firefox -&gt; About Firefox</em></strong></p>
<p>連接網路，並重新啟動 Firefox，確認版本為 <code>46.0.1</code>，且 Firefox 不再自動更新。</p>
<h3 id="第一次執行驗收測試">第一次執行驗收測試</h3><p>當 phpunit-selenium、Selenium Server 與 Firefox 都裝好後，我們就可以來對 Laravel 的預設首頁做驗收測試，確認環境是否已經都設定成功。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve</span><br></pre></td></tr></table></figure>
<p>啟動 PHP 內建的 web server。</p>
<p><img src="/images/selenium/selenium-phpunit/selenium014.png" alt=""></p>
<p>會將 Laravel 預設首頁開在 <code>http://localhost:8000/</code>。</p>
<p><strong>SeleniumTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/325d35d15c8f6b0c31d0a6eb46f7ba24bacdc0dd" target="_blank" rel="external">單元測試 : 建立 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/SeleniumTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowser(<span class="string">'firefox'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://localhost:8000'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testTitle</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;url(<span class="string">'http://localhost:8000'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'Laravel'</span>, <span class="variable">$this</span>-&gt;title());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這是 <a href="https://phpunit.de/manual/3.7/en/selenium.html" target="_blank" rel="external">Chapter 17.PHPUnit and Selenium</a> 所提供的範例程式，用來對網頁做最簡單的驗收測試。</p>
<p>第 1 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleniumTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Selenium2TestCase</span></span></span><br></pre></td></tr></table></figure></p>
<p>並不是繼承 Laravel 所提供的 <code>TestCase</code>，而是改繼承 <code>phpunit/phpunit-selenium</code> 所提供的 <code>PHPUnit_Extensions_Selenium2TestCase</code>。</p>
<p>第 3 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowser(<span class="string">'firefox'</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;setBrowserUrl(<span class="string">'http://localhost:8000'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在每一次測試都會執行的 <code>setUp()</code>，將每次測試都要執行的設定寫在這裡。</p>
<ul>
<li>使用 <code>setBrowser()</code> 設定要啟動的瀏覽器，</li>
<li>使用 <code>setBrowserUrl()</code> 設定要測試網站首頁 url。</li>
</ul>
<p>第 9 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testTitle</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;url(<span class="string">'http://localhost:8000'</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'Laravel'</span>, <span class="variable">$this</span>-&gt;title());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Laravel 預設首頁的 title 為 <code>Laravel</code>，我們想測試 title 是否正確。</p>
<ul>
<li>使用 <code>url()</code> 設定要測試的 url。</li>
<li>使用 PHPUnit 的 <code>assertEquals()</code> 測試網頁的 title 是否為 <code>Laravel</code>。</li>
</ul>
<p><img src="/images/selenium/selenium-phpunit/selenium015.png" alt=""></p>
<p>在 PhpStorm 內執行 <code>testTitle()</code>，會發現 Firefox 開啟後立即結束，若能看到 <span class="label label-success">綠燈</span>，表示 phpunit-selenium、Selenium Server 與 Firefox 都已經安裝成功。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Taylor Otwell, <a href="https://laravel.com/docs/master/application-testing" target="_blank" rel="external">Laravel Application Testing</a><br>Sebastian Bergmann, <a href="https://github.com/sebastianbergmann/phpunit" target="_blank" rel="external">PHPUnit</a><br>Sebastian Bergmann, <a href="https://packagist.org/packages/phpunit/phpunit-selenium" target="_blank" rel="external">phpunit/phpunit-selenium</a><br><a href="http://www.seleniumhq.org/download/" target="_blank" rel="external">Selenium Server</a></p>
]]></content>
    <summary type="html">
    <![CDATA[PHPUnit 搭配 Selenium 之後，就能實際對 GUI 做驗收測試，也能測試 JavaScript。]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="Selenium" scheme="http://oomusou.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Azure 使用 Laravel + Blob Storage?]]></title>
    <link href="http://oomusou.io/azure/azure-blob-storage/"/>
    <id>http://oomusou.io/azure/azure-blob-storage/</id>
    <published>2016-08-13T12:23:43.000Z</published>
    <updated>2016-08-16T07:08:26.000Z</updated>
    <content type="html"><![CDATA[<p>除了關聯式資料庫外，實務上我們常需要將<strong>文字檔</strong>或<strong>二進位檔</strong> (圖片檔或影音檔) 上傳到雲端，並提供下載，此時我們可以使用 Azure 的 Blob Storage 儲存這類型的檔案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.43<br>PhpStorm 2016.2</p>
<h2 id="Blob_Storage_簡介">Blob Storage 簡介</h2><hr>
<ul>
<li>在雲端中儲存檔案的服務，可儲存任何類型的檔案，包含文字檔與二進位檔。</li>
<li>全球任何地方都可透過 HTTP 或 HTTPS 來存取這些資料。您可以使用 Blob Storage 向全球公開資料，或私下儲存應用程式資料。</li>
</ul>
<h2 id="Blob_Storage_應用">Blob Storage 應用</h2><hr>
<ul>
<li>瀏覽器所需的圖片或文件。</li>
<li>檔案的分散式存取。</li>
<li>視訊和音訊的串流傳輸。</li>
<li>檔案備份、歸檔。</li>
</ul>
<h2 id="Blob_Storage_概念">Blob Storage 概念</h2><hr>
<p><img src="/images/azure/azure-blob-storage/blob018.jpg" alt=""></p>
<ul>
<li><strong>Account</strong><ul>
<li>需透過 Account 存取 Container 與 Blob。</li>
</ul>
</li>
<li><strong>Container</strong><ul>
<li>放置 Blob 的地方，類似檔案的<strong>資料夾</strong>。</li>
<li>必須以<strong>小寫</strong>命名。</li>
</ul>
</li>
<li><strong>Blob</strong><ul>
<li>任何類型的檔案。</li>
</ul>
</li>
</ul>
<h2 id="建立_Azure_Storage_Account">建立 Azure Storage Account</h2><hr>
<p>要使用 Azure Blob Storage，首先必須登入 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>，建立 storage account 。</p>
<p><img src="/images/azure/azure-blob-storage/blob001.png" alt=""></p>
<p><strong><em>New -&gt; Data + Storage -&gt; Storage account</em></strong></p>
<p><img src="/images/azure/azure-blob-storage/blob002.png" alt=""></p>
<ul>
<li><strong>Name</strong> : 輸入 storage account 名稱。</li>
<li><strong>Resource Manager</strong> : 選擇 <code>Resource manager</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>關於 <code>Resource manager</code> 與 <code>classic</code> 的差異，詳細請參考 Tom FitzMacken, <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-deployment-model/" target="_blank" rel="external">Azure Resource Manager vs. classic deployment: Understand deployment models and the state of your resources</a></span></span></span></li>
<li><strong>Account Kind</strong> : 選擇 <code>Blob storage</code>。</li>
<li><strong>Replication</strong> : 選擇最基本的 <code>Locally-redundant storage (LRS)</code> 即可。</li>
<li><strong>Access Tier</strong> : 選擇 <code>Hot</code>。</li>
</ul>
<div class="alert alert-info"><i class="fa fa-info"></i>  Replication 快速整理</div>
<ul>
<li>Azure 會自動為 storage account 的資料進行 replication，確保資料的持久性與高可用性。</li>
<li><p>提供了 4 種 replication 機制 :<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於 replication，詳細請參考 Tamra Myers, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-redundancy/#locally-redundant-storage" target="_blank" rel="external">Azure Storage replication</a></span></span></span></p>
<ol>
<li><strong>Locally Redundant Storage (LRS)</strong> : 提供本機備援。</li>
<li><strong>Zone-redundant Storage (ZRS)</strong> : 提供區域備援。</li>
<li><strong>Geo-redundant Storage (GRS)</strong> : 提供異地備援。</li>
<li><strong>Read-access Geo-redundant Storage (RA-GRS)</strong> : 提供讀取權限的異地備援。</li>
</ol>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Replication</th>
<th style="text-align:center">LRS</th>
<th style="text-align:center">ZRS</th>
<th style="text-align:center">GRS</th>
<th style="text-align:center">RA-GRS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">可跨多個設備複寫</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:left">可從次要位置及主要位置讀取資料</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:left">可在不同的節點上維護的資料副本數量</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
</tr>
</tbody>
</table>
<div class="alert alert-info"><i class="fa fa-info"></i>  Access Tier 快速整理</div>
<p>預設為 <code>Hot</code>。</p>
<p><strong>用途</strong></p>
<ul>
<li><strong>Hot</strong> : 適合經常讀、寫的檔案，例如 : 圖檔、文件等。</li>
<li><strong>Cool</strong> : 適合備份檔案，或不常使用之檔案。</li>
</ul>
<p><strong>價格</strong></p>
<ul>
<li><strong>Hot</strong> : 儲存空間費用較高、存取與交易成本較低。</li>
<li><strong>Cool</strong> : 儲存空間費用較低、存取與交易成本較高。</li>
</ul>
<p><img src="/images/azure/azure-blob-storage/blob003.png" alt=""></p>
<ul>
<li><strong>Resource Group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
<li><strong>Location</strong> : 選擇離我們最近的 <code>East Asia</code>。</li>
</ul>
<p>按 <code>Create</code> 開始建立 storage account。</p>
<p><img src="/images/azure/azure-blob-storage/blob004.png" alt=""></p>
<p>成功建立 storage account 後，可以在儀表板看到。</p>
<h2 id="安裝_Azure_SDK_for_PHP">安裝 Azure SDK for PHP</h2><hr>
<p>Azure 提供了 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a>，讓我們可以在 PHP 輕鬆地使用 Azure 服務，由於使用了 Composer 管理套件，所以不單 Laravel 可使用，其他 PHP framework 也可以使用。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/efde1a2fbfa266f483e46b668beb93de2099390a" target="_blank" rel="external">安裝 Azure SDK for PHP</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require microsoft/windowsazure</span><br></pre></td></tr></table></figure>
<p><img src="/images/azure/azure-blob-storage/blob000.png" alt=""></p>
<h2 id="建立_Azure_Storage_連接字串">建立 Azure Storage 連接字串</h2><hr>
<p>剛剛雖然在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 建立了 storage account，但 Laravel 還是不知道該如何連上 Azure Storage，我們還必須在 Laravel 建立連接字串，才能存取 Container 與 Blob。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey]</span><br></pre></td></tr></table></figure>
<p>Azure Storage 連接字串的格式需包含幾個部分 :</p>
<ul>
<li><strong>DefaultEndpointsProtocol</strong> : 選擇 <code>http</code> 或 <code>https</code>。</li>
<li><strong>AccountName</strong> : Azure Storage account 名稱。</li>
<li><strong>AccountKey</strong> : Azure Storage account 的 key。</li>
</ul>
<div class="alert alert-info"><i class="fa fa-info"></i>  AccountName 與 AccountKey 該填什麼呢?</div>
<p><img src="/images/azure/azure-blob-storage/blob005.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Access Keys</em></strong></p>
<p><img src="/images/azure/azure-blob-storage/blob006.png" alt=""></p>
<ul>
<li><code>Storage account name</code> 即為連接字串的 <code>AccountName</code>。</li>
<li><code>key1</code> 即為連接字串的 <code>AccountKey</code>。</li>
</ul>
<p><img src="/images/azure/azure-blob-storage/blob007.png" alt=""></p>
<p>在 Laravel 的 <code>.env</code> 建立以 <code>AZURE_STORAGE</code> 為 key 的連接字串。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/9f84f40aef236c30d16beb8f37311b646a1b02c1" target="_blank" rel="external">建立 Azure Storage 連接字串</a></span></span></span></p>
<h2 id="建立_Container">建立 Container</h2><hr>
<p>以 TDD 方式使用 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a>。</p>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/325d35d15c8f6b0c31d0a6eb46f7ba24bacdc0dd" target="_blank" rel="external">單元測試 : 建立 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Container</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 5 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 <code>AzureBlobService</code> 建立待測試的 <code>$target</code> 物件。</p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Container</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>createContainer()</code>，傳入 Container 名稱。</li>
<li><strong>Assert</strong> : 期望建立 Container 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/10905247074a251dc711573af1287b11310a72f0" target="_blank" rel="external">建立 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立 Container</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * AzureBlobService constructor.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 <code>env()</code> 讀取剛剛在 <code>.env</code> 建立的 <code>AZURE_STORAGE</code> 連接字串。</p>
<p>由 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a> 所提供的 <code>ServiceBuilder::getInstance()</code> 的 <code>createBlobService()</code> 在本機建立 <code>$blobProxy</code> 物件，傳入 Azure Storage 連接字串。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 建立 Container</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;createContainer(<span class="variable">$containerName</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>createContainer()</code> 建立 Container。</p>
<p>若 Container 建立失敗 (如重複建立 Container )，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob008.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，建立 Container 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob009.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 也能看到剛剛所建立的 Container。</p>
<h2 id="建立_Blob">建立 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/0b913cd4c94a98a84c4d7a362fcabdcfb62389fd" target="_blank" rel="external">單元測試 : 建立 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">        <span class="variable">$content</span> = fopen(<span class="keyword">__DIR__</span> . <span class="string">'/blob.txt'</span>, <span class="string">'r'</span>);</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 建立<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">    <span class="variable">$content</span> = fopen(<span class="keyword">__DIR__</span> . <span class="string">'/blob.txt'</span>, <span class="string">'r'</span>);</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;createBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>createBlob()</code>，傳入 Container 名稱、Blob 名稱與上傳物件。</li>
<li><strong>Assert</strong> : 期望建立 Blob 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/c9345c5b913c082588e55fe080b2bf8f0c545d17" target="_blank" rel="external">建立 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@param</span> string $blobName</span><br><span class="line">     * <span class="doctag">@param</span> $content</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>, <span class="variable">$content</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;createBlockBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 建立 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@param</span> string $blobName</span><br><span class="line"> * <span class="doctag">@param</span> $content</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>, <span class="variable">$content</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;createBlockBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>, <span class="variable">$content</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>createBlockBlob()</code> 建立 Blob。</p>
<p>若 Blob 建立失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob010.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，建立 Container 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob011.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 也能看到剛剛所建立的 Blob。</p>
<h2 id="顯示所有_Blob">顯示所有 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/43cf30577d4f981439b24c1c57be268fba270067" target="_blank" rel="external">單元測試 : 顯示所有 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;listAllBlobs(<span class="variable">$containerName</span>)-&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'name'</span> =&gt; <span class="string">'myblob'</span>, <span class="string">'url'</span>  =&gt; <span class="string">'https://laravel52blobstorage.blob.core.windows.net/mycontainer/myblob'</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;listAllBlobs(<span class="variable">$containerName</span>)-&gt;all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = [</span><br><span class="line">        [<span class="string">'name'</span> =&gt; <span class="string">'myblob'</span>, <span class="string">'url'</span>  =&gt; <span class="string">'https://laravel52blobstorage.blob.core.windows.net/mycontainer/myblob'</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>listAllBlobs()</code>，傳入 Container 名稱。</li>
<li><strong>Assert</strong> : 建立期望回傳的的陣列做 assertion。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/ec3b356bc8f55d5b1a8bf0b2d25f667aa126b257" target="_blank" rel="external">顯示所有 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 列出 Container 的所有 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listAllBlobs</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> ListBlobsResult $blobLists */</span></span><br><span class="line">            <span class="variable">$blobLists</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;listBlobs(<span class="variable">$containerName</span>);</span><br><span class="line">            <span class="variable">$blobs</span> = <span class="variable">$blobLists</span>-&gt;getBlobs();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> collect(<span class="variable">$blobs</span>)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(Blob <span class="variable">$blob</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    <span class="string">'name'</span> =&gt; <span class="variable">$blob</span>-&gt;getName(),</span><br><span class="line">                    <span class="string">'url'</span>  =&gt; <span class="variable">$blob</span>-&gt;getUrl(),</span><br><span class="line">                ];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> collect([]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 列出 Container 的所有 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@return</span> Collection</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listAllBlobs</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">Collection</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> ListBlobsResult $blobLists */</span></span><br><span class="line">        <span class="variable">$blobLists</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;listBlobs(<span class="variable">$containerName</span>);</span><br><span class="line">        <span class="variable">$blobs</span> = <span class="variable">$blobLists</span>-&gt;getBlobs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> collect(<span class="variable">$blobs</span>)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(Blob <span class="variable">$blob</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="variable">$blob</span>-&gt;getName(),</span><br><span class="line">                <span class="string">'url'</span>  =&gt; <span class="variable">$blob</span>-&gt;getUrl(),</span><br><span class="line">            ];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> collect([]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>listBlobs()</code> 取得 <code>$blobLists</code> 物件，在由其 <code>getBlobs()</code> 取得所有 Blob 陣列。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob012.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，顯示所有 Blob 成功。</p>
<h2 id="下載_Blob">下載 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/fe083b525cebe45853cf536f98a0520d1b7f9259" target="_blank" rel="external">單元測試 : 下載 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 下載<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;downloadBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 下載<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;downloadBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>downloadBlob()</code>，傳入 Container 名稱與 Blob 名稱。</li>
<li><strong>Assert</strong> : 期望下載 Blob 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/ee55a135ee2ec1b0e319707674c8f2cf79893790" target="_blank" rel="external">下載 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下載 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@param</span> string $blobName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> GetBlobResult $blob */</span></span><br><span class="line">            <span class="variable">$blob</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;getBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">            fpassthru(<span class="variable">$blob</span>-&gt;getContentStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 下載 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@param</span> string $blobName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> GetBlobResult $blob */</span></span><br><span class="line">        <span class="variable">$blob</span> = <span class="variable">$this</span>-&gt;blobProxy-&gt;getBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">        fpassthru(<span class="variable">$blob</span>-&gt;getContentStream());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>getBlob()</code> 取得 <code>$blob</code> 物件，在由其 <code>getContentStream()</code> 以串流資源形式取得 Blob。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob013.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，並顯示文字檔內容為 <code>Hello Azure Blob</code>。</p>
<h2 id="刪除_Blob">刪除 Blob</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/90c6bdd5fcddae4c9c31eb06bc2c704f7f22d555" target="_blank" rel="external">單元測試 : 刪除 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Blob</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Blob</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$blobName</span> = <span class="string">'myblob'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>deleteBlob()</code>，傳入 Container 名稱與 Blob 名稱。</li>
<li><strong>Assert</strong> : 期望刪除 Blob 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/1ca521fece2d59b672f2edfd536a48954d02befc" target="_blank" rel="external">刪除 Blob</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除 Blob</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@param</span> string $blobName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除 Blob</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@param</span> string $blobName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteBlob</span><span class="params">(string <span class="variable">$containerName</span>, string <span class="variable">$blobName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteBlob(<span class="variable">$containerName</span>, <span class="variable">$blobName</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>deleteBlob()</code> 刪除 Blob。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob014.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，刪除 Blob 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob015.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 已經看不到任何 Blob。</p>
<h2 id="刪除_Container">刪除 Container</h2><hr>
<p><strong>AzureBlobServiceUnitTest.php</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/ffd04ac8890c76c1313c537e22391b0474422d89" target="_blank" rel="external">單元測試 : 刪除 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/AzureBlobServiceUnitTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">AzureBlobService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobServiceUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AzureBlobService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(AzureBlobService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Container</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 刪除<span class="title">Container</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$containerName</span> = <span class="string">'mycontainer'</span>;</span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="keyword">true</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>Arrange</strong> : 由於不需要 mock 與假資料，所以 <code>arrange</code> 部分暫時從缺。</li>
<li><strong>Act</strong> : 建立待測 method <code>deleteContainer()</code>，傳入 Container 名稱。</li>
<li><strong>Assert</strong> : 期望刪除 Container 成功傳回 <code>true</code>。</li>
</ul>
<p><strong>AzureBlobService.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo/commit/9e49ce014487beb0b8df96e7e92019103c38eeb6" target="_blank" rel="external">刪除 Container</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/AzureBlobService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Blob</span>\<span class="title">Internal</span>\<span class="title">IBlob</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MicrosoftAzure</span>\<span class="title">Storage</span>\<span class="title">Common</span>\<span class="title">ServiceException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">WindowsAzure</span>\<span class="title">Common</span>\<span class="title">ServicesBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AzureBlobService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storageConnectionString</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> IBlob */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blobProxy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AzureBlobService constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;storageConnectionString = env(<span class="string">'AZURE_STORAGE'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy = ServicesBuilder::getInstance()-&gt;createBlobService(<span class="variable">$this</span>-&gt;storageConnectionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除 Container</span><br><span class="line">     * <span class="doctag">@param</span> string $containerName</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 刪除 Container</span><br><span class="line"> * <span class="doctag">@param</span> string $containerName</span><br><span class="line"> * <span class="doctag">@return</span> bool</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteContainer</span><span class="params">(string <span class="variable">$containerName</span>)</span> : <span class="title">bool</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;blobProxy-&gt;deleteContainer(<span class="variable">$containerName</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException <span class="variable">$exception</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$exception</span>-&gt;getCode() . <span class="string">':'</span> . <span class="variable">$exception</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 <code>$blobProxy</code> 物件的 <code>deleteContainer()</code> 刪除 Container。</p>
<p>若 Blob 取得失敗，將丟出 <code>ServiceException</code>。</p>
<p><img src="/images/azure/azure-blob-storage/blob016.png" alt=""></p>
<p>測試 <span class="label label-success">綠燈</span>，刪除 Container 成功。</p>
<p><img src="/images/azure/azure-blob-storage/blob017.png" alt=""></p>
<p>在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 已經看不到任何 Container。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 提供了 Blob Storage，讓我們可以方便地儲存文字檔或二進位檔。</li>
<li>Azure 還提供了 <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a>，使用了 Composer 的套件管理方式，只要簡單的 <code>composer require</code> 後即可立即使用，且不限於 Laravel，其他 PHP framework 也可以使用。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureBlobStorage_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Microsoft Azure, <a href="https://github.com/Azure/azure-sdk-for-php" target="_blank" rel="external">Azure SDK for PHP</a></li>
<li>Microsoft Azure, <a href="https://azure.microsoft.com/en-us/develop/php/" target="_blank" rel="external">PHP Develop Center</a></li>
<li>Robert McMurray, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-php-how-to-use-blobs/" target="_blank" rel="external">How to use blob storage from PHP</a></li>
<li>Robin Shahan, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-create-storage-account/#create-a-storage-account" target="_blank" rel="external">About Azure storage accounts</a></li>
<li>Tamra Myers, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-manage-access-to-resources/" target="_blank" rel="external">Manage anonymous read access to containers and blobs</a></li>
<li>Tom FitzMacken, <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-deployment-model/" target="_blank" rel="external">Azure Resource Manager vs. classic deployment: Understand deployment models and the state of your resources</a></li>
<li>Tamra Myers, <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-redundancy/#locally-redundant-storage" target="_blank" rel="external">Azure Storage replication</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[利用 Azure SDK for PHP 使用 Azure 服務]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解決安裝 IDE Helper 造成 Laravel 在 Azure 部署失敗?]]></title>
    <link href="http://oomusou.io/azure/azure-ide-helper/"/>
    <id>http://oomusou.io/azure/azure-ide-helper/</id>
    <published>2016-08-06T12:23:43.000Z</published>
    <updated>2016-08-06T14:24:27.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/barryvdh/laravel-ide-helper" target="_blank" rel="external">Laravel IDE Helper</a> 解決了 PhpStorm 無法對 Facade 做 code completion 的問題，，為使用 Laravel 與 PhpStorm 必裝的套件，但安裝方式的差異，可能造成 Laravel 在 Azure 無法部署成功。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>因為 IDE Helper 為<strong>開發用</strong>套件，在<a href="/phpstorm/phpstorm-ide-helper/">如何在 PhpStorm 活用 PHPDoc?</a> 一文中，建議大家將 IDE Helper 安裝在 <code>require-dev</code>，事實上開發用套件都應該使用這種方式安裝，不過 IDE Helper 在 Azure 部署時卻遇到困難。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>已經在本機順利安裝 IDE Helper 的 Laravel 專案，部署到 Azure 後，出現部署失敗的錯誤。</p>
<p><img src="/images/azure/azure-ide-helper/ide000.png" alt=""></p>
<p><strong><em>Settings -&gt; Publishing -&gt; Development source</em></strong></p>
<p><img src="/images/azure/azure-ide-helper/ide001.png" alt=""></p>
<p>部署出現 <code>Failed</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide002.png" alt=""></p>
<p>繼續往下按 <code>View Log</code>，按錯誤訊息。</p>
<p><img src="/images/azure/azure-ide-helper/ide003.png" alt=""></p>
<p>錯誤訊息出現在 <code>composer install</code> 之後，在執行 <code>php artisan optimize</code> 時，出現找不到 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code> 的錯誤。</p>
<h2 id="Root_Cause">Root Cause</h2><hr>
<p><img src="/images/azure/azure-ide-helper/ide008.png" alt=""></p>
<p>觀察 <code>composer.json</code>，會發現當 Azure 在執行完 <code>composer install</code> 後，會觸發 <code>post-install-cmd</code> 事件，並執行 <code>php artisan optimize</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide007.png" alt=""></p>
<p>一旦執行 <code>php artisan optimize</code>，就會執行 <code>config/app.php</code> 的所有 service provider，當然包括我們安裝 IDE Helper 新增的 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide004.png" alt=""></p>
<p>實際由 PhpStorm 的 Remote Host 連到 Azure，會發現 Laravel 專案只出現在 <code>repository</code> 目錄下，而沒在 <code>wwwroot</code> 目錄下，事實上 Laravel 整個專案應該放在 <code>wwwroot</code> 目錄下，這表示在 Azure 的部署並沒有成功。</p>
<p><img src="/images/azure/azure-ide-helper/ide005.png" alt=""></p>
<p>我們再比較本機的 <code>vendor</code> 目錄與 Azure 的 <code>repository</code> 下的 <code>vendor</code> 目錄，會發現 Azure 的 <code>vendor</code> 目錄並沒有 IDE Helper 所需的 <code>barryvdh</code> 目錄。</p>
<p>而 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code> 這個 service provider 正是放在 <code>vendor/barryvdh</code> 目錄下。</p>
<p><img src="/images/azure/azure-ide-helper/ide006.png" alt=""></p>
<p>打開本機的 <code>composer.json</code>，我們發現 <code>barryvdh/laravel-ide-helper</code> 是放在 <code>require-dev</code>，也就是說，Azure 在部署時，是下 <code>composer install --no-dev</code>，因此才沒將 <code>barryvdh</code> 安裝在 <code>vendor</code> 目錄下。</p>
<h2 id="Solution">Solution</h2><hr>
<p><img src="/images/azure/azure-ide-helper/ide009.png" alt=""></p>
<p>在 <code>composer.json</code> 中，將 <code>barryvdh/laravel-ide-helper&quot;: &quot;^2.2&quot;</code> 從 <code>require-dev</code> 改到 <code>require</code>。</p>
<p>雖然本機已經有 <code>vendor/barryvdh</code>，但別忘了 <code>composer install</code> 吃的是 <code>composer.lock</code>，所以我們必須重新執行 <code>composer update</code> 來更新 <code>composer.lock</code>。</p>
<p><img src="/images/azure/azure-ide-helper/ide010.png" alt=""></p>
<p><code>composer update</code> 執行完後，會發現 <code>_ide_helper.php</code>、<code>composer.json</code> 與 <code>composer.lock</code> 三個檔案被變更，須重新寫入 git repository。</p>
<p>直接在 PhpStorm 的 <code>Version Control</code> 按 <code>Commit Changes</code> 即可。</p>
<p><img src="/images/azure/azure-ide-helper/ide011.png" alt=""></p>
<p>輸入 commit message 之後，直接按 <code>Commit and Push</code> 一併 push 到 GitHub。</p>
<p><img src="/images/azure/azure-ide-helper/ide012.png" alt=""></p>
<p>按 <code>Push</code> 直接送進 GitHub。</p>
<p><img src="/images/azure/azure-ide-helper/ide013.png" alt=""></p>
<p>上傳至 GitHub 成功。</p>
<p><img src="/images/azure/azure-ide-helper/ide014.png" alt=""></p>
<p>再次觀察 Azure 的部署訊息，這次就成功了。</p>
<p><img src="/images/azure/azure-ide-helper/ide015.png" alt=""></p>
<p>由 PhpStorm 的 Remote Host 去觀察 Azure，<code>wwwroot</code> 目錄下的確有完整的 Laravel 專案，表示 Azure 已經成功部署。</p>
<p><img src="/images/azure/azure-ide-helper/ide016.png" alt=""></p>
<p>再觀察 <code>vendor</code> 目錄的確多了 <code>barryvdh</code>，因此 <code>php artisan optimize</code> 時，可以順利找到 <code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 會自動下 <code>composer install --no-dev</code>，因此只會安裝 <code>require</code> 的套件，不會安裝 <code>requre-dev</code> 的套件。</li>
<li>開發用的套件，理論上安裝在 <code>require-dev</code> 即可，除非該套件會用到 service provider，就必須改安裝在 <code>require</code>，否則會造成 Azure 部署失敗。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureMySQL_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[將 IDE Helper 安裝在 require-dev 將造成 Azure 部署失敗]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Azure 使用 Laravel + MySQL?]]></title>
    <link href="http://oomusou.io/azure/azure-phpstorm-mysql/"/>
    <id>http://oomusou.io/azure/azure-phpstorm-mysql/</id>
    <published>2016-08-02T12:23:43.000Z</published>
    <updated>2016-08-14T02:09:50.000Z</updated>
    <content type="html"><![CDATA[<p>Azure 除了可以跑 PHP 與 Laravel 外，更可以跑我們喜愛的 MySQL 資料庫。本文將實際在 Azure 建立 MySQL 資料庫，透過 <code>.env</code> 的設定，讓 Laravel 可以連上 MySQL，並透過 PhpStorm 直接管理 Azure 雲端的 MySQL 資料庫。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>在 <a href="/azure/azure-phpstorm-deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure</a> 一文中，我們已經可以順利在 Azure 跑 PHP 7.0 與 Laravel，唯一就是 MySQL 還沒連上，本文將以前一篇為基礎，繼續設定 MySQL 部分。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p>請參考 <a href="/azure/azure-phpstorm-deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure</a>，將本機的 Laravel 專案部署到 Azure。</p>
<h2 id="在_Azure_建立_MySQL_資料庫">在 Azure 建立 MySQL 資料庫</h2><hr>
<p>登入 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>，在 Azure 建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql000.png" alt=""></p>
<p><strong><em>New -&gt; Data + Analytics</em></strong>，選擇 <code>See all</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql001.png" alt=""></p>
<p>在 <code>Data services</code> 下選擇 <code>More</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql002.png" alt=""></p>
<p>選擇 <code>ClearDB</code> 的 <code>MySQL Database</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql003.png" alt=""></p>
<p>按 <code>Create</code> 建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql004.png" alt=""></p>
<ul>
<li><strong>Database Name</strong> : 輸入資料庫名稱。</li>
<li><strong>Resource group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
<li><strong>Location</strong> : 選擇離我們最近的 <code>East Asia</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql005.png" alt=""></p>
<ul>
<li><strong>Pricing Tier</strong> : 選擇免費的 <code>Mercury</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql006.png" alt=""></p>
<ul>
<li><strong>Legal Terms</strong> : 確認是 <code>0.00 TWD/month</code>，按 <code>Purchase</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql007.png" alt=""></p>
<p>建議將 <code>Pin to dashboard</code> 打勾，方便我們管理。</p>
<p>按 <code>Create</code> 開始建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql008.png" alt=""></p>
<p>MySQL 資料庫建立完成，會顯示 <code>Healthy</code>。</p>
<h2 id="設定本機_-env">設定本機 .env</h2><hr>
<p>MySQL 資料庫建立完成後，馬上來測試資料庫是否建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql009.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Properties</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql010.png" alt=""></p>
<p>注意其 <code>HOSTNAME</code>、<code>PORT</code>、<code>USERNAME</code>、<code>PASSWORD</code> 與 <code>CONNECTION STRING</code> 欄位。</p>
<p>其中 <code>CONNECTION STRING</code> 的 <code>Database</code>，即為我們剛剛建立的資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql011.png" alt=""></p>
<p>將本機 <code>.env</code> 的設定與 Azure 的設定一致。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql012.png" alt=""></p>
<p>執行 <code>php artisan migrate</code>，若能成功執行 migration，表示 MySQL 資料庫已經順利建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql016.png" alt=""></p>
<p>執行 seeding，將預設資料寫入 Azure 的 MySQL 資料庫。</p>
<h2 id="設定_PhpStorm_Database">設定 PhpStorm Database</h2><hr>
<p>目前為止，我們已經將資料 seeding 到 Azure 的 MySQL，不過還無法確定資料是否真的已經寫入成功，因此要設定 PhpStorm 的 Database 工具連到 Azure 查看資料。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql013.png" alt=""></p>
<p>點選右側的 <code>Database</code>，按 <code>+</code> 新增資料庫連線。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql014.png" alt=""></p>
<p><strong><em>Data Source -&gt; MySQL</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql015.png" alt=""></p>
<p>將之前的 Azure 的 <code>Host</code>、<code>Database</code>、<code>User</code> 與 <code>Password</code> 設定填過來。</p>
<p>按 <code>Test Connection</code> 測試是否可連線成功。</p>
<p>若第一次在 PhpStorm 連接 MySQL，需安裝 MySQL 的 Java driver。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql017.png" alt=""></p>
<p>PhpStorm 的 Database 工具可以看到 Azure MySQL 上所有的 table，也能看到 <code>posts</code> 上剛剛 seeding 的三筆資料。</p>
<h2 id="設定_Azure_-env">設定 Azure .env</h2><p>資料已經上 Azure 的 MySQL了，不過在 Azure 上的 Laravel 還不認識我們剛剛建立的 MySQL 資料庫。</p>
<p>Laravel 雖然提供了 <code>.env</code>，可以設定些敏感資訊，如資料庫連線。但預設 <code>.gitignore</code> 有排除 <code>.env</code>，所以並沒有上 GitHub，因此也不會上 Azure。</p>
<p>我們須在 Azure 的 <code>Application settings</code> 設定資料庫連線資訊。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql019.png" alt=""></p>
<p>選擇我們的 Laravel Web App。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql020.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Application Settings</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql021.png" alt=""></p>
<p>建立 <code>DB_CONNECTION</code>、<code>DB_HOST</code>、<code>DB_DATABASE</code>、<code>DB_USERNAME</code> 與 <code>DB_PASSWORD</code> 這些 key，並將 <code>.env</code> 的這些值設定在這裡。</p>
<h2 id="在_Azure_執行_Laravel">在 Azure 執行 Laravel</h2><hr>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql018.png" alt=""></p>
<p>Azure 上的 Laravel 已經能順利讀取到 Azure 上的 MySQL 了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 雖然沒有原生支援 MySQL，但透過 ClearDB 所提供的 MySQL 服務，我們依然可以在 Azure 上使用 PHP + Laravel + MySQL。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureMySQL_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Cephas Lin, <a href="https://azure.microsoft.com/en-us/documentation/articles/store-php-create-mysql-database/" target="_blank" rel="external">Create and connect to a MySQL database in Azure</a></li>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+SQL+Database+in+PhpStorm" target="_blank" rel="external">Working with Windows Azure SQL Database in PhpStorm</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 Azure 一樣可以使用我們喜愛的 MySQL]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="MySQL" scheme="http://oomusou.io/tags/MySQL/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 部署 Laravel 到 Azure?]]></title>
    <link href="http://oomusou.io/azure/azure-phpstorm-deploy/"/>
    <id>http://oomusou.io/azure/azure-phpstorm-deploy/</id>
    <published>2016-08-01T12:23:43.000Z</published>
    <updated>2016-08-14T15:56:29.000Z</updated>
    <content type="html"><![CDATA[<p>Azure 是微軟的雲端平台，也可以跑 PHP 與 Laravel，本文將以 PhpStorm 為工具，與 GitHub 結合，將來程式有任何變更，只要 push 到 GitHub，就會自動更新到 Azure，還可透過 PhpStorm 內建的工具管理 Azure。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure000.png" alt=""></p>
<p>啟動 PhpStorm，選擇 <code>Create New Project</code> 建立新專案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure001.png" alt=""></p>
<ul>
<li><strong>專案類型</strong> :  <code>Composer Project</code>。</li>
<li><strong>Location</strong> : Laravel 專案路徑與專案名稱</li>
<li><strong>composer.phar</strong> : 選擇 <code>Use existing composer.phar</code>，輸入 <code>/usr/local/bin/composer</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>選擇 <code>Download composer.phar from getcomposer.org</code> 亦可，這種方式在 OS X 本機並不需要事先安裝 Composer，PhpStorm 會自動將 Composer 下載到目錄專案跟目錄下，唯此種方式安裝 package 將無法使用到 cache，必須從網路上下載，安裝時間較長，所以實務上建議使用 <code>Use existing composer.phar</code>。</span></span></span></li>
<li><strong>Filter packages</strong> : 輸入 <code>laravel/laravel</code>，此為 Laravel 專案的 package 名稱。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure002.png" alt=""></p>
<p>將畫面向下卷，還有其他設定。</p>
<ul>
<li><strong>Version to install</strong> : 選擇 Laravel 版本，<code>&lt;default&gt;</code> 為 Laravel 最新版本。</li>
<li><strong>Path to PHP executable</strong> : 指定 PHP 執行檔路徑，主要為了執行 Composer。</li>
<li><strong>Command line parameters</strong> : Composer 參數，輸入 <code>prefer-dist</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure003.png" alt=""></p>
<p>建立 Laravel 專案中，由於 Composer 需解析 package 相依性，需要一些時間。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve</span><br></pre></td></tr></table></figure>
<p><img src="/images/azure/azure-phpstorm-deploy/azure004.png" alt=""></p>
<p>執行 PHP 內建 Http Server。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure005.png" alt=""></p>
<p>Laravel 已經順利在 OS X 本機執行。</p>
<h2 id="建立_Local_Git_Repository">建立 Local Git Repository</h2><hr>
<p>實務上開發 Laravel 會搭配 Git 做版本控制，先在本機建立 local repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure006.png" alt=""></p>
<p><strong><em>VCS -&gt; Import ino Version Control -&gt; Create Git Repository</em></strong></p>
<p>建立 Git repository。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>相當於 <code>git init</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure007.png" alt=""></p>
<p>選擇 local repository 目錄，也就是目前專案目錄。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure008.png" alt=""></p>
<p>下方出現 <code>Version Control</code>，並顯示有檔案尚未受 Git 管理，按 <code>browse</code> 顯示檔案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure009.png" alt=""></p>
<p>選擇專案目錄，按 <code>+</code> (Add to VCS) 將檔案加入 stage。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>相當於 <code>git add .</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure010.png" alt=""></p>
<p>綠色檔案為加入 stage 的檔案，按 <code>VCS</code> (Commit Changes)。<br><img src="/images/azure/azure-phpstorm-deploy/azure011.png" alt=""></p>
<ul>
<li>不要選擇 <code>Perform code analysis</code>。</li>
<li><strong>Commit Message</strong> : Initial commit。</li>
</ul>
<p>按 <code>Commit</code> 寫檔案寫入 local repository。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>相當於 <code>git commit -m &quot;Initial commit&quot;</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure012.png" alt=""></p>
<p>Commit 成功後，下方會顯示 <code>xx files committed : initial commit</code>。</p>
<h2 id="建立_Remote_GitHub_Repository">建立 Remote GitHub Repository</h2><hr>
<p>將 local repository 上傳至 GitHub 建立 remote repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure017.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Version Control -&gt; GitHub</em></strong></p>
<p>設定 GitHub 帳號。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure013.png" alt=""></p>
<p><strong><em>VCS -&gt; Import into Version Control -&gt; Share Project on GitHub</em></strong></p>
<p>將專案發佈到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure014.png" alt=""></p>
<p>預設會使用專案名稱為 remote GitHub repository 名稱。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure015.png" alt=""></p>
<p>在 GitHub 建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure016.png" alt=""></p>
<p>在 GitHub 已經看到剛剛上傳的專案。</p>
<h2 id="建立_Azure_Web_App">建立 Azure Web App</h2><hr>
<p>之前都在 PhpStorm 操作，現在開始要在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 操作了。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure018.png" alt=""></p>
<p><strong><em>New -&gt; Web + Mobile -&gt; Web App</em></strong></p>
<p>在 Azure 建立 Web App。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure019.png" alt=""></p>
<ul>
<li><strong>App name</strong> : 將來可以使用網址 <code>https://appname.azurewebsites.net</code> 連過來。</li>
<li><strong>Resource Group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
</ul>
<p>按 <code>App Service plan/location</code> 繼續設定。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure020.png" alt=""></p>
<p>預設的 App Service plan 是在美國，並不適合我們，我們應該選離我們最近的主機，所以選擇 <code>Create New</code> 建立新的 App Service plan。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure021.png" alt=""></p>
<ul>
<li><strong>App Service plan</strong> : 替 App Service plan 選個名稱。</li>
<li><strong>Location</strong> : 選擇主機位置，離我們最近的是 <code>East Asia</code>，位在香港。</li>
<li><strong>Pricing tier</strong> : 預設為 <code>D1 Shared</code>，需要收費，由於我們只是測試用，可以選擇 <code>0</code> 元的方案。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure022.png" alt=""></p>
<p>預設只會顯示 <code>Recommended</code> 方案，按 <code>View all</code> 顯示全部方案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure023.png" alt=""></p>
<p>選擇 <code>0</code> 元的 <code>F1 Free</code> 方案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure024.png" alt=""></p>
<p>Pricing tier 改成 <code>F1 Free</code>，按 <code>OK</code> 繼續。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure025.png" alt=""></p>
<p>App Service plan/location 改成我們想要的 <code>Laravel (East Asia)</code>。</p>
<p>建議將 <code>Pin to dashboard</code> 打勾，方便我們管理。</p>
<p>按 <code>Create</code> 開始建立 Web App。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure026.png" alt=""></p>
<p>Azure 正在建立 Web App 中，需要一點時間。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure027.png" alt=""></p>
<p>Web App 建立完成，會顯示 <code>Running</code>。</p>
<h2 id="設定_PHP_版本">設定 PHP 版本</h2><hr>
<p>Web App 預設的版本為 PHP 5.4，無法執行 Laravel，必須另外設定。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure028.png" alt=""></p>
<p>選擇剛剛建立的 <code>Laravel52PhpStormAzure</code> Web App。</p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure029.png" alt=""></p>
<ul>
<li><strong>PHP version</strong> : 選擇 <code>5.6</code> 或 <code>7.0</code>。</li>
</ul>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="安裝_Composer">安裝 Composer</h2><hr>
<p>Laravel 預設的 <code>.gitignore</code> 有排除 <code>vendor</code> 目錄，使得上傳到 GitHub 不包含 <code>vendor</code> ，所以將來 Azure 從 GitHub 所抓下來的檔也沒有 <code>vendor</code> 目錄。</p>
<p>這使得 Azure 要自己下 <code>composer install</code> 安裝 <code>vendor</code> 下的 package，因此必須另外在 Azure 安裝 Composer。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure030.png" alt=""></p>
<p><strong><em>Tools -&gt; Develop -&gt; Extensions</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure031.png" alt=""></p>
<p>按 <code>Add</code> 新增 extension。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure032.png" alt=""></p>
<p>選 <code>Choose Extension</code> 與 <code>Composer</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure033.png" alt=""></p>
<p>成功安裝 Composer。</p>
<h2 id="設定_Deployment_Source">設定 Deployment Source</h2><hr>
<p>設定 Azure 從 GitHub 抓資料，只要有任何 push 到 GitHub，Azure 都會自動更新。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure034.png" alt=""></p>
<p><strong><em>Setting -&gt; Publishing -&gt; Deployment source</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure035.png" alt=""></p>
<p> <strong><em>Choose Source -&gt; GitHub</em></strong></p>
<p>Azure 支援多種 deployment source，本文以 GitHub 為例。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure036.png" alt=""></p>
<p>選擇 GitHub 上的 <code>project</code> 與 <code>branch</code>。</p>
<p>按 <code>OK</code> 後，開始第一次從 GitHub 部署到 Azure。</p>
<p>由於第一次部署，<code>composer install</code> 要重新安裝 <code>vendor</code> 目錄，需要一點時間。</p>
<h2 id="設定_Remote_Host">設定 Remote Host</h2><hr>
<p>設定 Web App 一定得設定虛擬目錄，但是之前的部署皆由 Azure 自動完成，到底 Azure 將我們的專案下載到什麼目錄下呢?</p>
<p>讓我們再回到 PhpStorm。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure037.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Build, Execution Development -&gt; Deployment</em></strong></p>
<p>按 <code>+</code> 新增。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure038.png" alt=""></p>
<p>輸入自訂 server 名稱，選擇 type 為 <code>FTP</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure039.png" alt=""></p>
<p>需要輸入 <code>FTP host</code>、<code>User name</code> 與 <code>Web server root url</code>。</p>
<p>但此時我們還不知道該輸入什麼。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure040.png" alt=""></p>
<p>回到 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>。</p>
<p><strong><em>Settings -&gt; General -&gt; Properties</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure044.png" alt=""></p>
<ul>
<li><code>URL</code> 為 <code>Web server root url</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure041.png" alt=""></p>
<ul>
<li><code>FTP/DEPLOYMENT USER</code> 為 <code>User name</code>。</li>
<li><code>FTP HOST NAME</code> 為 <code>FTP host</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure042.png" alt=""></p>
<p>再回到 PhpStorm，將 <code>FTP host</code>、<code>User name</code> 與 <code>Web server root url</code> 補上。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  FTP host 不包含 <strong>ftp://</strong></div>
<p><img src="/images/azure/azure-phpstorm-deploy/azure043.png" alt=""></p>
<p><strong><em>Tools -&gt; Deployment -&gt; Browse Remote Host</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure045.png" alt=""></p>
<p>由 <code>Remote Host</code> 視窗，我們發現 Laravel 專案是放在 <code>site/wwwroot</code> 底下，所以 virtual root 應該設定在 <code>site/wwwroot/public</code>。</p>
<h2 id="設定_Virtual_Root">設定 Virtual Root</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure046.png" alt=""></p>
<p>再回到 <a href="http://protal.azure.com" target="_blank" rel="external">Azure portal</a>。</p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure047.png" alt=""></p>
<p>在 <code>Virtual application and directories</code> 下，將 virtual root 改成 <code>site\wwwroot\public</code>。</p>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="設定_-env">設定 .env</h2><hr>
<p>Laravel 提供了 <code>.env</code>，可以設定些敏感資訊，如資料庫連線。預設 <code>.gitignore</code>有排除 <code>.env</code>，所以並沒有上 GitHub，因此也不會上 Azure。</p>
<p>但 <code>.env</code> 的 <code>APP_KEY</code> 又是 Laravel 執行時所必要資訊，必須加以補上。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure046.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure048.png" alt=""></p>
<p>將本機的 <code>.env</code> 的 <code>APP_KEY</code> 內容加以複製。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure049.png" alt=""></p>
<p>在 <code>App settings</code> 下新增 <code>APP_KEY</code>，將 <code>.env</code> 的 <code>APP_KEY</code> 值貼上。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>實務上 <code>.env</code> 的設定，都可以改設定在 Azure 的 <code>App settings</code>。</span></span></span></p>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="第一次在_Azure_執行_Laravel">第一次在 Azure 執行 Laravel</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure050.png" alt=""></p>
<p>點擊 <code>URL</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure051.png" alt=""></p>
<p>在 Azure 的網址上正確執行 Laravel。</p>
<h2 id="修改並_Push_到_GitHub">修改並 Push 到 GitHub</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure052.png" alt=""></p>
<p>將 <code>welcome.blade.php</code> 加以修改，由 <code>Laravel 5</code> 改成 <code>Hello Laravel</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure053.png" alt=""></p>
<p>點擊下方的 <code>Version control</code> 標籤，按 <code>VCS</code> 將此次變更加以 commit。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure054.png" alt=""></p>
<p>填入 commit message 後，按 <code>Commit and Push</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure055.png" alt=""></p>
<p>按 <code>Push</code> 將直接 push 到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure056.png" alt=""></p>
<p>Push 到 GitHub 成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure057.png" alt=""></p>
<p>Azure 會自動從 GitHub 更新。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文以 GitHub 為例，實務上你可以搭配你習慣的版本控制系統。</li>
<li>透過 <a href="http://protal.azure.com" target="_blank" rel="external">Azure portal</a> 與 PhpStorm，您不需要下任何一行指令，就可以經鬆的將 Laravel 部署到 Azure。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzure_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Cephas Lin, <a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-web-php-get-started/" target="_blank" rel="external">Create, configure, and deploy a PHP web app to Azure</a></li>
<li>Robert McMurray, <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-php-configure/" target="_blank" rel="external">Configure PHP in Azure App Service Web Apps</a></li>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+from+within+PhpStorm" target="_blank" rel="external">Working with Windows Azure from within PhpStorm</a></li>
<li>KevinAtStout, <a href="https://www.youtube.com/watch?v=48moauj0KtE" target="_blank" rel="external">Connecting PhpStorm to Your Azure Web Server</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用有效率的工具部署 Laravel]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://oomusou.io/tags/GitHub/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Code Generation?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-code-generation/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-code-generation/</id>
    <published>2016-07-28T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>實務上開發專案時，有一些程式碼會不斷的出現，這時可靠 PhpStorm 的 Code Generation 幫我們產生這些 code snippet，除此之外，我們也可以將自己的 code snippet 加入 Live Template，可加快發開速度，並減少 typo。<br><a id="more"></a></p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="Namespace">Namespace</h2><hr>
<p>Laravel 5 的 <code>app</code> 目錄下都遵循 PSR-4，也就是每個在 <code>app</code> 目錄下的 class 都要有 namespace，且 Laravel 與 package 都有自己的 namespace，實務上我們不可能記得了這麼長的 namespace，Code Generation 可以幫我們自動引入相對應的 namespace，若 namespace 名稱相同，會讓我們用選的。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen009.png" alt=""></p>
<p><code>return</code> type 為 <code>Collection</code>，這是 Laravel 擴充的型別，輸入 <code>Col</code> 之後，Code Completion 會顯示 <code>Collection</code>，後面為其完整的 namespace。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen010.png" alt=""></p>
<p>Code Generation 自動幫我們 <code>use</code> 了正確的 namespace，不用我們操心。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen011.png" alt=""></p>
<p><code>Post</code> 出現反白，Code Inspection 抱怨找不到 <code>Post</code> class。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen012.png" alt=""></p>
<p>將滑鼠游標放在反白的 <code>Post</code> 上，按熱鍵 &#8997; + &#8617;，選擇 <code>Import class</code>。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/e9e14ebc547c7a805d78b4c880c6112172aaa31e" target="_blank" rel="external">PostRepository 自動 use namespace</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen013.png" alt=""></p>
<p>Code Generation 自動幫我們 <code>use</code> 了 model 的 namespace，不用我們操心。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen014.png" alt=""></p>
<p>實務上我們常常只會維護程式碼，但不會去維護 namespace，造成沒用到的 namespace 越來越多。</p>
<p>如我們將 <code>return Post::all()</code> 刪除後，因為沒使用到 <code>Post</code>，所以在 PhpStorm 的 <code>use App\Post</code> 會反灰警告你此 namspace 目前沒人使用。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/79745623c4cbc82c7759e30d4cb8bdcda4cc8890" target="_blank" rel="external">PostRepository 自動刪除沒用的 namespace</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen015.png" alt=""></p>
<p>按熱鍵 &#8963; + &#8997; + O，PhpStorm 會自動幫你將沒用到的 namespace 刪除。</p>
<h2 id="Constructor">Constructor</h2><hr>
<p>使用<strong>依賴注入</strong>後，必須建立 constructor 並注入相依物件，在每天的開發過程中需要不斷發生，Code Generation 可以幫我們自動完成 constructor injection。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen000.png" alt=""></p>
<p>按熱鍵 &#8963; + N，出現 <code>Generate</code> 選單，選擇 <code>Constructor...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen001.png" alt=""></p>
<p>在 constructor 參數列輸入要依賴注入的 class 名稱，輸入前幾個字母即可，Code Completion 會啟動讓你挑選 class 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen002.png" alt=""></p>
<p>Code Generation 自動幫我們 <code>use</code> 了 <code>PostRepository</code> 的 namespace。</p>
<p>輸入 <code>$</code>，Code Completion 會自動顯示建議的參數名稱，選擇你喜歡的命名方式。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen003.png" alt=""></p>
<p>Code Inspection 會出現警告，因為還沒產生 constructor 的 PHPDoc。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen004.png" alt=""></p>
<p>按熱鍵 &#8997; + &#8617;，選擇 <code>Update PHPDoc Comment</code>，由 PhpStorm 來幫我們產生 PHPDoc。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen005.png" alt=""></p>
<p>PhpStorm 自動幫我們產生 PHPDoc。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen006.png" alt=""></p>
<p>繼續按熱鍵 &#8997; + &#8617;，選擇 <code>Initialize fields</code>，由 PhpStorm 來幫我們產生其他程式碼。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen007.png" alt=""></p>
<p>選擇要由 Code Generation 要產生 field 的程式碼。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/blob/master/app/Services/PostService.php" target="_blank" rel="external">新增 PostService</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen008.png" alt=""></p>
<p>Code Generation 一氣呵成幫我們產生了 field，在 constructor 產生了指定 field 相對應的程式碼，另外也 <code>use</code> 相對應的 namespace。</p>
<h2 id="Getter/Setter">Getter/Setter</h2><hr>
<p>實務上常常需要對 private field 加上 getter 與 setter，如<strong>重構</strong>的 <strong>Self Encapculate Field</strong> 也會用到，Code Generation 可以幫我們自動產生 getter 與 setter。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen016.png" alt=""></p>
<p>新建立一個 <code>$postId</code> field，按熱鍵 &#8997; + &#8617;，會出現各種 getter 與 setter 產生方式。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/d4da6261ee4bed2d0bf916d6ffd22b1c5c364237" target="_blank" rel="external">支援 PHP 7 type hint 與 return type 的 getter 與 setter</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen017.png" alt=""></p>
<p>若選擇 <code>Add getter and setter</code>，Code Generation 會幫我們自動產生支援 PHP 7 type hint 與 return type 的 getter 與 setter。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/d27d4e15a740666c9ad0f1be71048c91970da567" target="_blank" rel="external">支援 fluent setter</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen018.png" alt=""></p>
<p>若選擇 <code>Add fluent setter</code>，Code Generation 甚至會幫我們自動產生 fluent 風格的 setter。</p>
<h2 id="Implement_Method">Implement Method</h2><hr>
<p>在物件導向中，實踐抽象化最重要的就是 interface，所以常常有 implement interface 的需求，Code Generation 提供兩種方式讓我們快速實作 interface。</p>
<p><strong>SMSInterface.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/42fcc908afef8c8d937ff84d1fd1ae981e882b30" target="_blank" rel="external">新增 SMSInterface</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen019.png" alt=""></p>
<p>定義了 <code>SMSInterface</code>，準備對簡訊的發送加以抽象化。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen020.png" alt=""></p>
<p>建立了 <code>AzureSMSService</code>，實作 <code>SMSInterface</code>，Code Inspection 馬上提出 <code>尚未實作 SMSInterface</code> 警告。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen021.png" alt=""></p>
<p>按熱鍵 &#8997; + &#8617;，選擇 <code>Add method stubs</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen022.png" alt=""></p>
<p>Code Generation 會自動幫我們根據 interface 產生了 method 框架，連 PHPDoc 也會幫我們產生。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen023.png" alt=""></p>
<p>另外一種方式，按熱鍵 &#8963; + I，出現 <code>Choose methods to implement</code> 視窗，選擇你要 implement 的 method。</p>
<p><strong>AzureSMSService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/9db85e766750a619ba89ce75987b3d3d718f0503" target="_blank" rel="external">自動實現 interface 的 method</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen022.png" alt=""></p>
<h2 id="Override_Method">Override Method</h2><hr>
<p>繼承是實現物件導向抽象化的另一種方式，當子類別可 override 父類別的 method。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen024.png" alt=""></p>
<p><code>AzurePostService</code> 繼承了 <code>PostService</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen025.png" alt=""></p>
<p>若我們想 override 父類別 <code>PostService</code> 的 <code>showTitle()</code>，可按熱鍵 &#8963; + O，出現 <code>Choose method to override</code> 視窗，選擇你要 override 的 method。</p>
<p><strong>AzurePostService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/0766384172f9df83539dfb17600e401b2ff96686" target="_blank" rel="external">自動複寫 class 的 method</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen026.png" alt=""></p>
<p>Code Generation 會自動幫我們根據父類別產生 method 框架，連 PHPDoc 也會幫我們產生。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  AzurePostService 去繼承 PostService 可能不是實務上使用繼承的一個好例子，這裡只是為了示範 Code Generation 的功能，實務上應該為了抽象化的多型來使用繼承，並遵守 SOLID 原則的<strong>里氏替換</strong>原則，而不是為了 code reuse 去使用繼承。</div>
<h2 id="Postfix_Completion">Postfix Completion</h2><hr>
<p>很羨慕 fluent API 的好用嗎? Postfix Completion 讓我們可以類似 fluent API 的方式寫 PHP。</p>
<h3 id="not">not</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen039.png" alt=""></p>
<p>輸入 <code>$title.not</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen040.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>!</code> 區塊。</p>
<h3 id="par">par</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen041.png" alt=""></p>
<p>輸入 <code>$title.par</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen042.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>( )</code> 區塊。</p>
<h3 id="if">if</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen029.png" alt=""></p>
<p>輸入 <code>$title.if</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen030.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if ( )</code> 區塊。</p>
<h3 id="else">else</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen031.png" alt=""></p>
<p>輸入 <code>$title.else</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen032.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if (! )</code> 區塊。</p>
<h3 id="fe">fe</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen033.png" alt=""></p>
<p>輸入 <code>$title.fe</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen034.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>foreach( )</code> 區塊。</p>
<h3 id="null">null</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen035.png" alt=""></p>
<p>輸入 <code>$title.null</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen036.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if ( === null)</code> 區塊。</p>
<h3 id="nn">nn</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen037.png" alt=""></p>
<p>輸入 <code>$title.nn</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen038.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if ( !== null)</code> 區塊。</p>
<h3 id="return">return</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen043.png" alt=""></p>
<p>輸入 <code>$title.return</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen044.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>return</code>。</p>
<h3 id="echo">echo</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen027.png" alt=""></p>
<p>輸入 <code>$title.echo</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen028.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>echo $title;</code>。</p>
<h3 id="var_dump">var_dump</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen045.png" alt=""></p>
<p>輸入 <code>$title.var_dump</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen046.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>var_dump()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen047.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; General -&gt; Postfix Completion</em></strong></p>
<p>在 <strong><em>Preferences</em></strong> 設定底下，可以看到所有 PhpStorm 支援的 Postfix Completion，包含 JavaScript 與 PHP。</p>
<p>可惜 Postfix Completion 無法擴充，就只能用 PhpStorm 所提供的 postfix。</p>
<h2 id="Live_Template">Live Template</h2><hr>
<p>除了 Postfix Completion 外，PhpStorm 另外提供 Live Template，這是可以自行擴充的。</p>
<h3 id="fore">fore</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen049.png" alt=""></p>
<p>輸入 <code>fore</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen050.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>foreach( )</code> 區塊。</p>
<h3 id="forek">forek</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen051.png" alt=""></p>
<p>輸入 <code>forek</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen052.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>foreach( )</code> 區塊，並包含 key 與 value。</p>
<h3 id="thr">thr</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen053.png" alt=""></p>
<p>輸入 <code>thr</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen054.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>throw new</code> 區塊。</p>
<h3 id="prif">prif</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen055.png" alt=""></p>
<p>輸入 <code>prif</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen056.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>private function</code> 區塊。</p>
<h3 id="prof">prof</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen057.png" alt=""></p>
<p>輸入 <code>prof</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen058.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>protected function</code> 區塊。</p>
<h3 id="pubf">pubf</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen059.png" alt=""></p>
<p>輸入 <code>pubf</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen060.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>public function</code> 區塊。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen048.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; Live Templates</em></strong></p>
<p>在 <strong><em>Preferences</em></strong> 設定底下，可以看到所有 PhpStorm 支援的 Live Template，還包含各種其通語言，甚至包含 Angular 2。</p>
<h2 id="自訂_Live_Template">自訂 Live Template</h2><hr>
<p>你也可以自己將常用的 code snippet，存成自己的 Live Template。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen061.png" alt=""></p>
<p>如在寫單元測試時，<code>$this-&gt;assertEquals()</code> 常常使用，所以我們想將它存成 Live Template。</p>
<p>選擇你的 code snippet，<strong><em>Tools-&gt; Save as Live Template</em></strong>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen062.png" alt=""></p>
<p>輸入你自己的想要的縮寫，並在滑鼠游標停止處加上 <code>$END$</code>，將來 PhpStorm 會將游標停在此方便你輸入。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen063.png" alt=""></p>
<p>輸入 <code>pubf</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen064.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>$this-&gt;assertEquals()</code>，並將游標放在 <code>( )</code> 中，方便你後續輸入。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Post Completion 無法自行擴充，不過 Live Template 可以自行擴充。</li>
<li>Post Completion 與 Live Template 有些是重複的，可視需求決定用哪一種，只要能提高開發效率即可。</li>
<li>要善用工具改善開發速度，將時間花在真正需要的地方，Code Generation 讓我們可以打更少的字， 還可以避免 typo。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/generating-code.html" target="_blank" rel="external">Generating Code</a><br>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/live-templates.html" target="_blank" rel="external">Using Postfix Template</a><br>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/live-templates.html" target="_blank" rel="external">Live Template</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓我們打更少的字加快開發速度]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Code Completion?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-code-completion/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-code-completion/</id>
    <published>2016-07-25T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>PHP 進入了物件導向與 framework 時代之後，出現了大量的 namespace、class、interface 與 method，基本上這些東西已經很難用記憶的方式來寫程式，必須靠工具輔助。PhpStorm 的 Code Completion 幫我們處理了大部分的東西，讓我們只要用選的就可以開發程式，一來開發速度變快，二來也可以減少 typo，是 modern PHP 的關鍵。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="Basic_Code_Completion">Basic Code Completion</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code004.png" alt=""></p>
<p>當任何地方需要使用 Code Completion 時，就可以按熱鍵 &#8963; + &#9251;。</p>
<p>如 constructor 要依賴注入時，不知道要注入的 class 名稱，可以按熱鍵 &#8963; + &#9251;，Code Completion 會列出目前 scope 可用的 class 名稱讓你挑選。</p>
<h2 id="Smart_Type_Code_Completion">Smart Type Code Completion</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code005.png" alt=""></p>
<p>當任何地方需要使用 Code Completion 時，且希望 Code Completion 能根據型別自動選擇適當的變數，就可以按熱鍵 &#8963; + &#8679; + &#9251;。</p>
<p>如 <code>getTitle()</code> 需要輸入變數時，不知道要輸入的變數名稱，可以按熱鍵 &#8963; + &#8679; + &#9251;，Smart Type Code Completion 會根據 <code>getType()</code> 的 scalar type hint 或 PHPDoc 的 <code>@param</code> 列出目前 scope 最適合的變數讓你挑選。</p>
<h2 id="Class">Class</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code006.png" alt=""></p>
<p>一般我們都會取將物件變數名稱以 class 名稱的 camelCase 命名，當 <code>new</code> 時，Code Completion 會自動依照變數名稱抓到 class 名稱讓你選擇。</p>
<h2 id="Field">Field</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code007.png" alt=""></p>
<ul>
<li>若是一般 class，Code Completion 可以直接抓到 public field。</li>
<li>若是 model，則必須透過 IDE Helper 幫 model 加上 PHPDoc 註解，Code Completion 才能抓到。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 IDE Helper 的安裝與執行，詳細請參考<a href="/phpstorm/phpstorm-ide-helper/">如何在 PhpStorm 活用 PHPDoc?</a></span></span></span></li>
</ul>
<h2 id="Method">Method</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code000.png" alt=""></p>
<p>PhpStorm 2016.2 之前的 Code Completion，讓你選擇可以選擇 method，並提供參數資訊，老實說這樣已經很好用了。</p>
<p><img src="/images/phpstorm/phpstorm-code-completion/code001.png" alt=""></p>
<p>PhpStorm 2016.2 對於參數的 Code Completion 做了更強的支援，不過預設並沒有啟動。</p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; General -&gt; Smart Keys</em></strong></p>
<ul>
<li>將 <code>Enable smart function parameters completion</code> 打勾。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-code-completion/code002.png" alt=""></p>
<p>以後選擇 method 後，PhpStorm 還會幫你將原 method 的參數名稱複製過來，讓你可以更清楚要填什麼參數。</p>
<p>除此之外，若你使用的 PHP 7 的 type hint，或使用 PHPDoc 的 <code>@param</code> 描述參數型別，PhpStorm 會自動將相同型別的參數列在前面讓你挑選。</p>
<p><img src="/images/phpstorm/phpstorm-code-completion/code003.png" alt=""></p>
<p>按 enter 選擇了變數後，PhpStorm 會自動跳到下一個參數，也讓你用選的。</p>
<h2 id="Collection">Collection</h2><hr>
<p>Collection 並非 PHP 原生型別，是由 Laravel 所擴充，由於其實踐了 <code>ArrayAccess</code> 、 <code>Countable</code> 與 <code>IteratorAggregate</code> interface，因此 <code>Collection</code> 使用起來很像 array，若要描述 <code>Collection</code> 元素的型別，可搭配 PHPDoc。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/33f673dcbde4a935e04364c4ce4d064c9371a3cc" target="_blank" rel="external">PostRepository 新增 getAllPosts()</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code008.png" alt=""></p>
<p><code>getAllPosts()</code> 回傳的是 <code>Collection</code> 型別，若由 PhpStorm 的熱鍵 &#8997; + &#8617;，只會有 <code>@return Collection</code>，如此 <code>foreach</code> 時將無法顯示其元素的 field 與 method，必須加上 <code>|Post[]</code>，表示回傳值除了是 <code>Collection</code> 外，也是 <code>Post</code> 型別的 array。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/70964d9bf2013ebc4b092f0f7699d42f40b26568" target="_blank" rel="external">PostService 新增 showAllPosts()</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code009.png" alt=""></p>
<p>如此在 <code>foreach</code> 時，就可以顯示 <code>$post</code> 的屬性 <code>title</code>。</p>
<h2 id="Service_Container">Service Container</h2><hr>
<p><strong>PostServiceUnitTest.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/3b9d185307e4a64258fd8790439b820b44766931" target="_blank" rel="external">PostServiceUnitTest 使用 app::make()</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code010.png" alt=""></p>
<p>使用 <code>App::make()</code> 或 <code>app()</code> 透過 service container 建立物件時，PhpStorm 也可以抓到該物件的 method。</p>
<h2 id="Controller">Controller</h2><hr>
<p><strong>routes.php</strong><br><img src="/images/phpstorm/phpstorm-code-completion/code011.png" alt=""></p>
<p>在 <code>routes.php</code> 的 <code>uses</code>，可以抓到 controller 與其 method。</p>
<h2 id="Route">Route</h2><hr>
<p><strong>index.blade.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/988652b299d7bb6f2e17e91ca175b58e5f7cb325" target="_blank" rel="external">Blade 有 route 別名</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code012.png" alt=""></p>
<p>Blade 的 <code>route()</code> 可以抓到 <code>routes.php</code> 所定義的 route 別名。</p>
<h2 id="View">View</h2><hr>
<p><strong>PostController.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/ee4f0fc1673c491e176bcf5858ce35afee38e465" target="_blank" rel="external">view() 可抓到 view</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code013.png" alt=""></p>
<p>在 controller 內的 <code>return view()</code> 可以抓到 view 的名稱。</p>
<h2 id="config::get()">config::get()</h2><hr>
<p><strong>PostController.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/a6efc5f5bba41a79eab09abeeb7384c808d06653" target="_blank" rel="external">Config::get() 可抓到設定</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code014.png" alt=""></p>
<p><code>Config::get()</code> 可以抓到 array 的 key 值.</p>
<h2 id="DIR"><strong>DIR</strong></h2><hr>
<p><strong>PostServiceUnitTest.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/3227a9b15a1f441433758becf7e294bbab8a7f4e" target="_blank" rel="external"><strong>DIR</strong> 可抓到目前目錄的檔案</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code015.png" alt=""></p>
<p><code>__DIR__</code> 可抓到目前目錄的檔案，這在寫測試時特別好用，可以將測試案例檔案(如 Excel 檔)放在目前單元測試下，<code>__DIR</code> 會抓到 Excel 檔。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>寫程式重點不是在記憶力，而是在抽象化思考，Code Completion 讓我們從 namespace、class 與 method 解放，將注意力放在解決需求上。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Gary Hockin, <a href="https://blog.jetbrains.com/phpstorm/2016/07/parameter-code-completion-in-phpstorm-2016-2" target="_blank" rel="external">PhpStorm Code Completion in PhpStorm 2016.2</a><br>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/auto-completing-code.html" target="_blank" rel="external">Auto-Completing Code</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓我們忘記 Namespace，Class 與 Method]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Code Inspection?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-code-inspection/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-code-inspection/</id>
    <published>2016-07-24T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>PHP 不需編譯，只要存檔就可執行，優點是很方便，缺點是很多程式語法上的錯誤必須在瀏覽器執行才能發現。PhpStorm 的 Code Inspection 就相當於編譯器，在程式開發階段就可檢查語法上的錯誤，再搭配單元測試檢查邏輯上的錯誤，如此雙重保障，就能提早發現錯誤加以解決，降低除錯成本。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>初學者在使用 PhpStorm 時，第一個不習慣的就是原來在 Sublime Text 很漂亮的程式碼，在 PhpStorm 打開了以後，平白無故多了很多警告，覺得很礙眼。</p>
<p><strong>Authenticate.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/350f66fde6c4a532424670478cf2f5b72fed9ba9" target="_blank" rel="external">將 Authenticate.php 改成 use Auth</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect000.png" alt=""></p>
<p>與 Sublime Text 不同的是 :</p>
<ul>
<li>右上角多了 <span class="label label-warning">咖啡色</span> 的方塊 : 表示 Code Inspection 偵測到錯誤。</li>
<li>scroll bar 多了 <span class="label label-warning">咖啡色</span> 區塊 : 表示錯誤所在的相對位置。</li>
<li><code>Auth::guard()</code>多了反白警告 : 表示錯誤所在的實際位置。 </li>
</ul>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect001.png" alt=""></p>
<p>右上角方塊的顏色，表示各種不同的嚴重層級。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect002.png" alt=""></p>
<p>將滑鼠 hover 到 scroll bar 的顏色區塊上，會顯示錯誤訊息。</p>
<p>可用滑鼠直接點 scroll bar 的顏色區塊，快速跳到有錯誤的程式碼位置，或按熱鍵 F2 前進搜尋錯誤，&#8679; + F2 倒退搜尋錯誤。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect003.png" alt=""></p>
<p>將滑鼠游標放放到反白的 <code>Auth::guard()</code> 上，PhpStorm 顯示 <code>Method guard not found</code>。</p>
<p>主要是因為 <code>Auth</code> 為 Facade，執行上沒有問題，但是 Code Inspection 找不到。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect004.png" alt=""></p>
<p>將 namespace 引用改成 IDE Helper 所提供的 <code>Auth</code> 後，Code Inspection 就可以找到 <code>Auth::guard()</code> 了，右上角會出現 <span class="label label-success">綠色</span> 勾勾，表示通過 Code Inspection 檢查。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>關於使用 IDE Helper 解決 Code Inspection 警告的問題，詳細請參考<a href="/phpstorm/phpstorm-ide-helper/">如何在 PhpStorm 活用 PHPDoc?</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  實務上對於 Laravel 或 package 的程式碼，我不會要求需通過 Code Inspection 檢查，但自己寫的程式碼，都必須通過 Code Inspection 的 <span class="label label-success">綠色</span> 勾勾。</div>
<h2 id="調整_PhpStorm_檢查層級">調整 PhpStorm 檢查層級</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect005.png" alt=""></p>
<p>若你覺得 Code Inspection 檢查太嚴格，希望 PhpStorm 只幫你檢查 PHP 語法就好，可以按右下角的<strong>哨兵</strong>符號，將 Code Inspection level 調到 <code>Syntax</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect006.png" alt=""></p>
<p>調整完 Code Inspection level 後，不用改 <code>use Auth</code>，也可以達到右上角會出現 <span class="label label-success">綠色</span> 勾勾。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  實務上建議除非是 legacy code 真的不容易修正，否則不建議修改 Code Inspection level，畢竟 PhpStorm 所有的檢查都是有意義的，可以讓你及早發現淺在錯誤，避免實際在瀏覽器測試才發現錯誤的窘境。</div>
<h2 id="設定_Code_Inspection">設定 Code Inspection</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect007.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; Inspections</em></strong></p>
<p>假如你不想調整 Code Inspection level，只想將某個你認為不重要的警告拿掉，或降低層級，可以在 PhpStorm 的 preferences 設定。</p>
<p>如之前 <code>Auth::guard()</code> 的錯誤，你也可以直接在讓 <code>undefined method</code> 不要被檢查。</p>
<p>Code Inspection 所有的檢查規則都可以客製化，可以依照你的需求加以設定。</p>
<h2 id="常見_Code_Inspection">常見 Code Inspection</h2><hr>
<h3 id="使用未定義變數">使用未定義變數</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/3d187e1275e77b698b3d5487cc93e409a45511ae" target="_blank" rel="external">使用未定義變數</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect010.png" alt=""></p>
<p>直接使用一個未定義參數，Code Inspection 會加以警告。</p>
<h3 id="Namespace_不存在">Namespace 不存在</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/2855120534815ea7e14f174079a4512b30db5c2e" target="_blank" rel="external">Namespace 不存在</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect011.png" alt=""></p>
<p>Namespace 因為打錯，而引用了一個不存在的 namespace，Code Inspection 會加以警告。</p>
<h3 id="Class_不存在">Class 不存在</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/d73af1cd30f52375c62fcab8416c84f6c611397f" target="_blank" rel="external">Class 不存在</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect012.png" alt=""></p>
<p>依賴注入時 class 名稱打錯，注入了一個不存在的 class，Code Inspection 會加以警告。</p>
<h3 id="Field_不存在">Field 不存在</h3><p><strong>PostIDPO.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/d389f473081f69e088073a5daa9c5c9e26cf3b47" target="_blank" rel="external">重構成 Parameter Object</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect013.png" alt=""></p>
<p>將原 <code>showTitle()</code> 的 <code>$id</code> 與 <code>$default</code> 透過重構的 <code>Introduce to Parameter Object</code> 重構成 <code>PostIDPO</code> class。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/c7a50e8620653797d9041e406d51d2a21ee0e03b" target="_blank" rel="external">Field 不存在</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect014.png" alt=""></p>
<p><code>showTitle()</code> 改傳入 <code>PostIDPO</code> 物件。</p>
<p>若將 <code>id</code> 打錯成 <code>ip</code>，使用了一個不存在的 field，Code Inspection 會加以警告。</p>
<h3 id="Method_不存在">Method 不存在</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/4862ffd79ac52e74a245010760662932839fb68d" target="_blank" rel="external">Method 不存在</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect015.png" alt=""></p>
<p>若將 method 名稱打錯，呼叫一個物件不存在的 method，Code Inspection 會加以警告。</p>
<h3 id="參數型別檢查">參數型別檢查</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/blob/master/app/Services/PostService.php" target="_blank" rel="external">新增 PostService</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect008.png" alt=""></p>
<p>在 <code>showTitle()</code> 的參數與回傳值都使用了 PHP 7 的 scalar type hint。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/blob/master/tests/PostServiceTest.php" target="_blank" rel="external">新增 PostServiceTest</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect009.png" alt=""></p>
<p>若加上了 <code>declare(strict_type = 1);</code>，只要傳入的參數型別不對，Code Inspection 會提出警告。</p>
<h3 id="Case_忘了加_break">Case 忘了加 break</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/4c015e7c250e0db86916f15789ae216745554ecb" target="_blank" rel="external">Case 忘了加上 break</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect016.png" alt=""></p>
<p>PHP 語法上允許 <code>switch case</code> 不加上 <code>break</code> 的寫法，但大多時候是忘了加上 <code>break</code>，而造成邏輯上的錯誤，Code Inspection 會提出警告，可是需求決定是否該加上 <code>break</code>。</p>
<h3 id="沒有_PHPDoc">沒有 PHPDoc</h3><p><img src="/images/phpstorm/phpstorm-code-inspection/inspect017.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; Inspections -&gt; PHPDoc</em></strong></p>
<p>PhpStorm 預設並沒有將 <code>Missing PHPDoc comment</code> 打勾，但實務上建議將此選項打勾。</p>
<p>PHP 7 因為有完整 type hint 與 return type，所以 PHPDoc 重要性不如以往，但 PHP 7 之前，則必須靠 PHPDoc 描述型別，PhpStorm 的 Code Inspection 才能發揮威力，所以建議開啟。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect018.png" alt=""></p>
<p><code>showTitle()</code> 沒有寫 PHPDoc，Code Inspection 會提出警告。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect019.png" alt=""></p>
<p>要補上 PHPDoc 也很簡單，將滑鼠游標放在 method 名稱上，按熱鍵 &#8997; + &#8617;，選擇 <code>Generate PHPDoc Comment</code> 或 <code>Generate PHPDoc for function</code> 皆可。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/51b7adc049927b19bd87f25bf26116932b61abff" target="_blank" rel="external">加上 PHPDoc</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect020.png" alt=""></p>
<p>PhpStorm 會自動幫你加上 PHPDoc，只要再加上 method 功能的描述即可。</p>
<h2 id="執行_Code_Inpection">執行 Code Inpection</h2><hr>
<p>預設每個開啟的檔案都會自動執行 Code Inspection，此外你也可以自行選擇檔案，讓 Code Inspection 一次檢查多個檔案。</p>
<h3 id="一次檢查多個檔案">一次檢查多個檔案</h3><p><img src="/images/phpstorm/phpstorm-code-inspection/inspect021.png" alt=""></p>
<p>在 project windows 用 &#8984; 與滑鼠選擇多個檔案，按滑鼠右鍵，選擇 <code>Inspect Code...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect022.png" alt=""></p>
<p>選擇 <code>Selected files</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect023.png" alt=""></p>
<p>Code Inspection 最後會顯示有哪些檔案違反了哪些檢查規則。</p>
<h3 id="一次檢查整個專案">一次檢查整個專案</h3><p><img src="/images/phpstorm/phpstorm-code-inspection/inspect024.png" alt=""></p>
<p><strong><em>Code -&gt; Inspect Code…</em></strong></p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect025.png" alt=""></p>
<p>選擇 <code>Whole project</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect026.png" alt=""></p>
<p>Code Inspection 將整個專案做檢查，會檢查出很多警告與錯誤，可視需求決定是否該修正。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>為了使 Code Inspection 沒有出現任何警告，可能會對程式碼產生強迫症，不過提早發現淺在錯誤總是好事，可視自己需求決定是否修正，或者關閉 Code Inspection 某個檢查規則。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/code-inspection.html#phpCodeInspections" target="_blank" rel="external">Code Inspection</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓我們提早發現語法錯誤]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 的 Project Template 建立 Laravel 專案?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-project-template/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-project-template/</id>
    <published>2016-07-23T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>PhpStorm 2016.2 提供一個新功能，可以將專案打包成 project template，以後新建專案時，可以選擇此 template 直接重建專案，如常用的 package 與 codebase 可以先打包好，將來要建立新專案就很方便。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>我在寫部落格範例時，有些東西是必要的，如 IDE Helper，SQLite 環境，PHPUnit 單元測試環境，以前每次寫一個範例，就得重新安裝這些 package 與 codebase，很花時間，有了 project template之後，只要設定一次即可，以後部落格範例都可以套用此 project template，非常方便。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="建立_Project_Template">建立 Project Template</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template000.png" alt=""></p>
<p><strong><em>Tools -&gt;Save Project as Template</em></strong></p>
<p>任何你目前的 Laravel 專案，都可以存成 project template。</p>
<p><img src="/images/phpstorm/phpstorm-project-template/template001.png" alt=""></p>
<p>輸入 project template 名稱，不必與原來 project 名稱相同，只要你方便識別即可。</p>
<h2 id="建立新_Project">建立新 Project</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template002.png" alt=""></p>
<p>選擇 <code>Create New Project</code>。</p>
<p><img src="/images/phpstorm/phpstorm-project-template/template003.png" alt=""></p>
<p>選擇 <code>User-defined</code> 的 <code>Laravel52Blog</code>，這是我們剛剛所建立的 project template。</p>
<p>在 <code>Location</code> 輸入你的專案路徑。</p>
<h2 id="重建_Vendor_目錄">重建 Vendor 目錄</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template004.png" alt=""></p>
<p>如同從 GitHub 下載的 Laravel 專案一樣，<code>vendor</code> 目錄下是空的，你有兩種方法重建 <code>vendor</code> 目錄。</p>
<ul>
<li><strong>composer install</strong> : 根據 <code>composer.lock</code> 重建 <code>vendor</code> 目錄，所有 package 版本會與原 project template 完全一樣。</li>
<li><strong>composer update</strong> : 根據 <code>composer.json</code> 重建 <code>vendor</code> 目錄，所有 package 版本會升級成與原 project template 相容的版本。</li>
</ul>
<p>兩種方式都可以，端看你的需求而定，我的需求是想升級到 Laravel 最新的版本，所以下 <code>composer update</code>。</p>
<p><img src="/images/phpstorm/phpstorm-project-template/template005.png" alt=""></p>
<p><code>composer update</code> 執行完後，<code>vendor</code> 目錄已經補齊。</p>
<h2 id="設定_Excluded_Folders">設定 Excluded Folders</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template006.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Directories</em></strong></p>
<p>若你有設定 <code>Excluded Folders</code>，將所有目錄刪除。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若你由 PhpStorm 幫你建立 Laravel 專案，他會幫你設定 <code>Excluded Folders</code>，若自己由 Composer 建立 Laravel 專案，則不會有此設定。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-project-template/template007.png" alt=""></p>
<p>刪除完後，只留下 <code>Tests</code>、<code>Sources</code> 與 <code>Resource Root</code> 三個目錄設定。</p>
<h2 id="設定_PHP_7">設定 PHP 7</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template008.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP</em></strong></p>
<ul>
<li><strong>PHP language level</strong> : 設定為 <code>7</code>。</li>
<li><strong>Interpreter</strong> : 設定 PHP 7 interpreter 位置。</li>
</ul>
<h2 id="設定_PHPUnit">設定 PHPUnit</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template009.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; PHPUnit</em></strong></p>
<ul>
<li><strong>Use Composer autoloader</strong> : 選擇專案目錄下的 <code>vendor/autoload.php</code>。</li>
<li><strong>Default configuration file</strong> : 選擇專案根目錄下的 <code>phpunit.xml</code>。</li>
</ul>
<h2 id="單元測試">單元測試</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template010.png" alt=""></p>
<p>確認專案已經可以正常執行。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Project template 並不包含原專案的 git repository，也就是你必須重新建立一個新的 git local repository。</li>
<li>透過這種方式，建立新專案時將更為方便，直接套用你常用的 package 與 codebase。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormProjectTemplate_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[將常用的 Package 與 Codebase 打包成 Project Template]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Xdebug on Demand?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-xdebug-on-demand/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-xdebug-on-demand/</id>
    <published>2016-07-18T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>Xdebug 是 PhpStorm debug 的必備工具，但是啟動 Xdebug 又會使 Composer 變慢，實務上很兩難，這個問題在 PhpStorm 2016.2 得到完美解決，平時不用開啟 Xdebug，PhpStorm 會在需要 debug 時才自動啟動 Xdebug，不會影響 Composer 執行速度。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand000.png" alt=""></p>
<p>Composer 在某一個版本以後，只要在 <code>php.ini</code> 有啟動 Xdebug，就會出現以上黃色警告訊息。</p>
<p>主要是 Xdebug 會大幅影響 Composer 解析套件相依時的執行速度，因此不建議你開啟 Xdebug。</p>
<p>在之前並沒好的解法，除非你不使用 Xdebug，但 Xdebug 又是 PhpStorm 的大絕，也只好犧牲 Composer 了。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>MAMP PRO 3.5.2<br>PhpStorm 2016.2</p>
<h2 id="設定_Xdebug_On_Demand">設定 Xdebug On Demand</h2><hr>
<p>本文以 MAMP PRO 為例，在 PhpStorm 設定 Xdebug on Demand。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand001.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP </em></strong></p>
<ul>
<li><strong>PHP Language level</strong> : 選擇 <code>7</code>。</li>
<li><strong>Interpreter</strong> : 按 <code>...</code> 設定 PHP interpreter。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand002.png" alt=""></p>
<p>按 <code>+</code> 新增 PHP interpreter，因為以 MAMP PRO 為例，選擇 <code>Other Local...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand003.png" alt=""></p>
<ul>
<li><strong>Name</strong> : 輸入 <code>PHP 7</code>。</li>
<li><strong>PHP executable</strong> : 選擇 PHP interpreter 所在路徑，以 MAMP PRO 為例，其路徑為 <code>/Applications/MAMP/bin/php/php7.0.8/bin/php</code>。注意此時 <code>php.ini</code> 並沒有啟動 <code>xdebug.so</code>，所以顯示 <code>Debugger: Not installed</code>。</li>
<li><strong>Debugger extension</strong> : 選擇 <code>xdebug.so</code> 所在路徑，以 MAMP PRO 為例，其路徑為 <code>/Applications/MAMP/bin/php/php7.0.8/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so</code>。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand004.png" alt=""></p>
<p>設定好了之後，就可以選擇剛剛設定的 <code>PHP7</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand005.png" alt=""></p>
<p>在單元測試中設定中斷點，按熱鍵 &#8963; + &#8679; + D，程式碼依舊會在中斷點停止，所有變數也可以正常顯示。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand006.png" alt=""></p>
<p>由於沒有在 <code>php.ini</code> 啟動 <code>xdebug.so</code>，Composer 再也不會抱怨 Xdebug 已經啟動，可以全速執行。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Xdebug 與 Composer 一直是無解的問題，透過 PhpStorm 2016.2，我們終於可以兼顧 Xdebug 的便利與 Composer 的速度。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Gary Hockin, <a href="https://blog.jetbrains.com/phpstorm/2016/06/xdebug-on-demand-for-cli-php-scripts-in-phpstorm-2016-2-eap/" target="_blank" rel="external">Xdebug On Demand for CLI PHP Scripts in PhpStorm 2016.2</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[關閉 Xdebug 加速 Composer]]>
    
    </summary>
    
      <category term="MAMP" scheme="http://oomusou.io/tags/MAMP/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="Xdebug" scheme="http://oomusou.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Null Object 模式?]]></title>
    <link href="http://oomusou.io/dp/dp-nullobject/"/>
    <id>http://oomusou.io/dp/dp-nullobject/</id>
    <published>2016-07-15T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>當我們透過 Eloquent 對資料庫抓資料時，由於 <code>where()</code> 的條件可能撈不到資料，導致 <code>first()</code> 傳會 <code>null</code>，若再對 <code>null</code> 物件的欄位屬性做存取，會出現 <code>Trying to get property of non-object</code> 的錯誤訊息，當然有各種方法避開這個錯誤，但比較理想的方式是引入 <code>Null Object</code> 模式。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>實務上我們有個 <code>post</code> table，內有 <code>title</code>、<code>description</code> 與 <code>title</code> 三個欄位，根據需求，我們想要有個 <code>PostService</code> 有個 <code>showTitle()</code> 的 API，只要傳入 <code>post</code> table 的 <code>ID</code>，就會回傳該筆資料的 <code>title</code>。</p>
<p><strong> PostService.php </strong><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  PostRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示 title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getTitle(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>PostService</code> 的 <code>showTitle()</code>，我們會呼叫 <code>PostRepository</code> 的 <code>getTitle()</code> 傳回字串。</p>
<p><strong> PostRepository.php </strong><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳 post.title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>PostRepository</code> 的 <code>getTitle()</code>，我們會直接使用 Eloquent 的 <code>where()</code> 去抓資料，<code>get()</code> 回傳的是 <code>Collection</code>，然後再透過 <code>Collection</code> 的 <code>first()</code> 傳回第一筆 <code>Post</code> model，最後再抓 <code>Post</code> model 的 <code>title</code> 屬性。</p>
<p>目前這種寫法，若 <code>where()</code> 抓得到資料時就不會出錯，但若 <code>where()</code> 抓不到資料，<code>first()</code> 將會傳回 <code>null</code>，再存取其 <code>title</code> 屬性就會出現 <code>Trying to get property of non-object</code> 的錯誤，這是大家常見的錯誤訊息。</p>
<h2 id="常見解決方式">常見解決方式</h2><hr>
<h3 id="判斷_null">判斷 null</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$post</span> = Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">        -&gt;get()</span><br><span class="line">        -&gt;first();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$post</span> != <span class="keyword">null</span>)  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$post</span>-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'no title'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>first()</code> 可能傳回 <code>null</code>，那就在讀取 <code>title</code> 屬性前先判斷 <code>$post</code> 是否為 <code>null</code>，若不是 <code>null</code> 則傳回 <code>title</code>，若為 <code>null</code> 則傳回預設值。</p>
<h3 id="try_catch">try catch</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'no title'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然會出現 <code>Trying to get property of non-object</code> exception，就用 <code>try catch</code> 去攔，若有 exception 就傳回預設值。</p>
<p>這兩種解法雖然都可行，但有個致命傷，違反 <code>Tell, Don&#39;t Ask</code> 原則。</p>
<p>好的 API，應該只負責 tell，也就是告訴 API 我的需求是什麼，然後就傳回我要的資料，而不是 ask API 之後，呼叫端還要再做額外的判斷或加工。</p>
<p>因為只要呼叫端還需要判斷，就有可能因為忘記判斷而造成不可預期的錯誤，這就不是好的 API。</p>
<p>第一個方式必須使用 <code>if else</code> 判斷是否為 <code>null</code>，第二個方式還必須去 <code>try catch</code>，都不算是好的 API，比較理想的方式是只要 <code>return Post::whereId()-&gt;get()-&gt;first()-&gt;title</code> 一次就可以抓到想要的資料，不需要額外判斷。</p>
<h2 id="Null_Object_模式">Null Object 模式</h2><hr>
<blockquote><p>Replace the null value with the null object.</p>
<p>將 null 值替換成 null 物件。</p>
<footer><strong>Martin Fowler</strong><cite>&nbsp;- Refactoring Ch 9.7 Introduce Null Object</cite></footer></blockquote>
<p>Null Object 模式並非出自<a href="http://www.tenlong.com.tw/items/9572054112?item_id=997944" target="_blank" rel="external">設計模式</a>一書，而是出現在<a href="http://www.tenlong.com.tw/items/7115369097?item_id=1009173" target="_blank" rel="external">重構</a>的 Ch 9.7，教大家將 <code>null</code> 值重構成 <code>null</code> 物件，因為只要有 <code>null</code> 值，就必須去 <code>if</code> 判斷是否 <code>null</code>，甚至於去 <code>try catch</code>，這樣的 API 並不好用，而且只要忘記判斷就可能出錯。</p>
<p>什麼是 Null Object 呢? 剛剛會出錯，就是因為我們期望是一個 <code>Post</code> 物件，也有 <code>title</code> 屬性，但因為回傳 <code>null</code> 值，沒有 <code>title</code> 屬性才出錯，既然如此，假如我們也能傳回一個 <code>Post</code> 物件，也有 <code>title</code> 屬性，這樣就不會錯了，這就是 Null Object 概念。</p>
<p>至於 Null Object 的 <code>title</code> 屬性該存放什麼值呢? 這沒有一定的答案，完全看需求端定義，可能需求端認為若找不到資料，傳回空字串即可，也可能傳回<code>no title</code>即可，這些值就是 Null Object 的 <code>title</code> 屬性的值。</p>
<p>我們來將原來的程式碼重構成 Null Object 模式。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo/commit/99aea8c60702e4c1a6bf753689ea3139ad242e2b" target="_blank" rel="external">建立 PostService(使用 Null Object 模式)</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  PostRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示 title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@param</span> string $default</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showTitle</span><span class="params">(int <span class="variable">$id</span>, string <span class="variable">$default</span> = <span class="string">''</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getTitle(<span class="variable">$id</span>, <span class="variable">$default</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>PostService</code> 的 <code>showTitle()</code> 多了第二個參數 <code>$default</code>，預設值為空字串，若需求端想要有自己的預設值，如 <code>no title</code>，可自行傳入。</p>
<p>另外只要呼叫 <code>PostRepository</code> 的 <code>getFirstPost()</code> 即可，不用加入任何 <code>if</code> 判斷或 <code>try catch</code>。</p>
<p><strong> PostRepository.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo/commit/88660f71a28eb5360280b884ceab99641600d4b6" target="_blank" rel="external">建立 PostRepository(使用 Null Object 模式)</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳 post.title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@param</span> string $default</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>, string <span class="variable">$default</span> = <span class="string">''</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;first(<span class="keyword">null</span>, <span class="keyword">new</span> Post([<span class="string">'title'</span> =&gt; <span class="variable">$default</span>]))</span><br><span class="line">            -&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>Collection</code> 的 <code>first()</code> 第一個參數傳入 null，第二個參數傳入一個 <code>Post</code> model，也就是我們的 Null Object，至於 <code>title</code> 該如何定義，則由需求端傳入的參數 <code>$default</code> 決定。</p>
<p>這樣的 <code>first()</code> 寫法的意義為 : 若 <code>where()</code> 找得到資料，則 <code>first()</code> 依照正常方式傳回 <code>Post</code> 物件，若找不到資料，請傳回我們自己的 <code>new Post()</code>，也就是 Null Object。</p>
<p>為什麼 <code>first()</code> 的第一個參數為 <code>null</code> 呢? 在 Laravel 官網並沒有解釋，這要實際看 Laravel 的 source code。</p>
<p><strong> Collection.php </strong><br><figure class="highlight php"><figcaption><span>vendor/laravel/framework/src/illuminate/Support/Collection.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Get the first item from the collection.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span>  callable|null  $callback</span><br><span class="line"> * <span class="doctag">@param</span>  mixed  $default</span><br><span class="line"> * <span class="doctag">@return</span> mixed</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span><span class="params">(callable <span class="variable">$callback</span> = null, <span class="variable">$default</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arr::first(<span class="variable">$this</span>-&gt;items, <span class="variable">$callback</span>, <span class="variable">$default</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>Collection</code> 的 <code>first()</code>，預設可以都不傳任何參數，就會傳回第一個物件。</li>
<li>也可以第一個參數傳進 closure，告訴 <code>Collection</code> 該以何種條件去回傳第一個物件。</li>
<li>也可以第二個參數傳進 <code>$default</code>，當 <code>first()</code> 找不到任何資料時，該回傳什麼預設值。</li>
</ul>
<p>因為 Null Object 就是預設值，所以我們要傳入第二個參數，但第一個參數的 closure 我們不用傳，所以傳一個 <code>null</code> 即可。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo/commit/84ebcd8db360c865bbe8b7e01cc3e0f6818d5de4" target="_blank" rel="external">建立單元測試 PostServiceTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 有資料取<span class="title">title</span>欄位資料<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">3</span>)-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;showTitle(<span class="number">1</span>, <span class="string">'no title'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'title1'</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 無資料的<span class="title">title</span>欄位資料<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">3</span>)-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;showTitle(<span class="number">4</span>, <span class="string">'no title'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'no title'</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/dp/dp-nullobject/nullobject000.png" alt=""></p>
<p>最後補上單元測試，分別測試 <code>where()</code> 找得到資料與找不到資料的測試案例，證明 Null Object 重構成功。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Null Object 模式是實務上常常使用的模式，當程式碼出現需要判斷 <code>null</code> 值，就該考慮重構成 Null Object 模式，這種風格符合物件導向多型的原則，不該因為 <code>null</code> 值而有不同的行為，也符合 <code>Tell, Don&#39;t Ask</code> 原則，可以寫出更好用的 API。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Martin Fowler, <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672" target="_blank" rel="external">Refactoring : Improving the Design of Existing Code</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 Null Object 模式將符合 Tell, don't Ask 原則]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Collection" scheme="http://oomusou.io/tags/Laravel-Collection/"/>
    
      <category term="Laravel Eloquent" scheme="http://oomusou.io/tags/Laravel-Eloquent/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對 Collection 做 Assertion?]]></title>
    <link href="http://oomusou.io/tdd/tdd-collection-assertion/"/>
    <id>http://oomusou.io/tdd/tdd-collection-assertion/</id>
    <published>2016-07-09T12:23:43.000Z</published>
    <updated>2016-08-23T01:08:48.000Z</updated>
    <content type="html"><![CDATA[<p><code>Collection</code> 並非 PHP 原生的型別，是 Laravel 所擴充，因此 PHPUnit 並無法直接對其做 assertion，本文介紹兩種方式，一種是使用 PHPUnit 的 <code>assertArraySubset()</code>，一種是自己寫 collection macro，各有其優缺點，可視需求決定要使用哪種方法。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>實務上天天都有驗證 <code>Collection</code> 的需求，在<a href="/tdd/tdd-repository-testing-mysql/">如何測試 Repository 模式(使用 MySQL)?</a>與<a href="/tdd/tdd-repository-testing-sqlite/">如何測試 Repository 模式(使用 SQLite)?</a> 一文中，對 <code>Collection</code> 都沒有提出系統化的 assertion 方式，本文整理出實務上我最常用的兩種測試手法。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以 <code>Post</code> model 為例，顯示<code>所有文章</code>，並寫單元測試判斷結果是否如預期。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>無論是對 repository 或 service 做單元測試，當其 field 或 method 回傳值為 <code>Collection</code>時，就必須面對如何 assertion 的問題。</p>
<h2 id="使用_assertArraySubset()">使用 assertArraySubset()</h2><hr>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9fa92fbedd7f367b12510dbeee10bdf8020338d9" target="_blank" rel="external">第一種測試方法</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章1<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create([</span><br><span class="line">                <span class="string">'title'</span>       =&gt; <span class="string">"title&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'description'</span> =&gt; <span class="string">"desc&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'content'</span>     =&gt; <span class="string">"content&#123;$value&#125;"</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">            -&gt;displayAllPosts()</span><br><span class="line">            -&gt;toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>12 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line">collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create([</span><br><span class="line">        <span class="string">'title'</span>       =&gt; <span class="string">"title&#123;$value&#125;"</span>,</span><br><span class="line">        <span class="string">'description'</span> =&gt; <span class="string">"desc&#123;$value&#125;"</span>,</span><br><span class="line">        <span class="string">'content'</span>     =&gt; <span class="string">"content&#123;$value&#125;"</span></span><br><span class="line">    ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將假資料透過 <code>Post::create()</code> 新增。</p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">    -&gt;displayAllPosts()</span><br><span class="line">    -&gt;toArray();</span><br></pre></td></tr></table></figure></p>
<p>測試 <code>PostService-&gt;displayAllPosts()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>PostService</code> 與 <code>displayAllPost()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostService</code> 與 <code>displayAllPost()</code>。</span></span></span></p>
<p><code>displayAllPosts()</code> 回傳的是 <code>Collection</code>，但 PHPUnit 無法對 <code>Collection</code> 做 assertion，必須先轉成 array。</p>
<p>26 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">    [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">    [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">    [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"><span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>這裡不能使用 <code>assertEquals()</code>，因為 <code>posts</code> table 還包含 <code>created_at</code> 與 <code>updated_at</code> 兩個欄位，若使用 <code>assertEquals()</code> 一定失敗，必須改用 <code>assertArraySubset()</code>。</p>
<p>也就是說，<code>$expected</code> 並不用包含 <code>Collection</code> 的所有欄位，只要包含你想測試的欄位即可。</p>
<p>剩下的 <code>PostService</code> 與 <code>PostRepository</code> 就以 TDD 的方式建立，在此不再贅述。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>若對剩下的步驟有興趣，詳細請參考 <a href="/phpstorm/phpstorm-refactor-namespace/">如何使用 PhpStorm 重構 Namespace?</a></span></span></span></p>
<h2 id="使用_Collection_Macro">使用 Collection Macro</h2><hr>
<p>使用 <code>assertArraySubset()</code> 雖然可行，但為了配合 <code>Collection-&gt;toArray()</code> 的格式，<code>$expected</code> 必須寫的比較繁瑣，連 key 都要交代，若 <code>Collection</code>只傳會我要驗證欄位的資料給 <code>$actual</code>，且 <code>$expected</code> 也只包含要驗證的資料，那測試程式就非常的簡潔。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/0bc408423156af0c7602a6d4db60bdb1bd8b7b10" target="_blank" rel="external">第二種測試方法</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章2<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create([</span><br><span class="line">                <span class="string">'title'</span>       =&gt; <span class="string">"title&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'description'</span> =&gt; <span class="string">"desc&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'content'</span>     =&gt; <span class="string">"content&#123;$value&#125;"</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">            -&gt;displayAllPosts()</span><br><span class="line">            -&gt;pick([</span><br><span class="line">                <span class="string">'title'</span>,</span><br><span class="line">                <span class="string">'description'</span>,</span><br><span class="line">                <span class="string">'content'</span></span><br><span class="line">            ])</span><br><span class="line">            -&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title1'</span>, <span class="string">'desc1'</span>, <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title2'</span>, <span class="string">'desc2'</span>, <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title3'</span>, <span class="string">'desc3'</span>, <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">    -&gt;displayAllPosts()</span><br><span class="line">    -&gt;pick([</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="string">'description'</span>,</span><br><span class="line">        <span class="string">'content'</span></span><br><span class="line">    ])</span><br><span class="line">    -&gt;all();</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>pick()</code> 從 <code>Collection</code> 只抓回要驗證欄位的資料，只要將<code>欄位名稱</code>以陣列方式傳入 <code>pick()</code> 即可。</p>
<p>但 <code>Collection</code> 並沒有內建 <code>pick()</code>，稍後會自己建立 collection macro。</p>
<p><code>all()</code> 為 <code>Collection</code> 內建 method，將 <code>Collection</code> 轉成陣列。</p>
<p>31 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">    [<span class="string">'title1'</span>, <span class="string">'desc1'</span>, <span class="string">'content1'</span>],</span><br><span class="line">    [<span class="string">'title2'</span>, <span class="string">'desc2'</span>, <span class="string">'content2'</span>],</span><br><span class="line">    [<span class="string">'title3'</span>, <span class="string">'desc3'</span>, <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>因為已經被 <code>pick()</code> 轉成簡單的陣列，且不含 key，可以簡單的使用 <code>assertEquals()</code> 來做 assertion。</p>
<p><strong>AppServiceProvider.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/31983807ab1c69261858d9c1a0217f3a4e3032e5" target="_blank" rel="external">新增 Collection::macro(), pick()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Providers/AppServiceProvider.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Bootstrap any application services.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Register any application services.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Collection::macro(<span class="string">'pick'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> collect(<span class="variable">$this</span>-&gt;items)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> collect(<span class="variable">$columns</span>)</span><br><span class="line">                    -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$column</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable">$value</span>-&gt;<span class="variable">$column</span>;</span><br><span class="line">                    &#125;)-&gt;all();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為 <code>pick()</code> 並非 <code>Collection</code> 內建的 method，因此我們必須自己在 service provider 建立 <code>pick</code> 這個 collection macro。</p>
<p>25 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collection::macro(<span class="string">'pick'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collect(<span class="variable">$this</span>-&gt;items)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> collect(<span class="variable">$columns</span>)</span><br><span class="line">            -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$column</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;<span class="variable">$column</span>;</span><br><span class="line">            &#125;)-&gt;all();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>我們將使用 <code>map()</code> 將 <code>$columns</code> 所要的欄位顯示 <code>map()</code> 回去。</p>
<p>因為 <code>$columns</code> 是陣列，我們要處理的是 <code>$columns</code> 每個元素的值，依此還要再用一層 <code>map()</code>。</p>
<p>重點在於只回傳 <code>$column</code> 欄位的值，因此我們使用 PHP 的變數讀取屬性的方式，以 <code>$value-&gt;$column</code> 的技巧，只回傳所需要欄位的值。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>詳細請參考<a href="/javascript/javascript-variable-property/">如何使用變數讀取 property?</a></span></span></span></p>
<p>因為牽涉到兩層巢狀 closure，所以程式可讀性較差，實務上建議 closure 只寫一層，不要寫兩層以上。</p>
<p>不過因為這段程式碼不需要維護，只要複製貼上到 <code>AppServiceProvider.php</code> 的 <code>register()</code>即可，我們的目的是要用 <code>pick()</code>，讓我們的測試程式更加精簡，不會去維護這段程式碼，因此還可以接受。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 PHPUnit 無法直接對 <code>Collection</code> 做 assertion，<code>assertArraySubset()</code> 算是不滿意但可以接受的方式。</li>
<li><code>pick()</code> 比較接近我理想中對 <code>Collection</code> 的 assertion 方式，但必須使用 collection macro 在 service provider 對 <code>Collection</code> 做擴充，但只要複製貼上即可，以後就可以當成 <code>Collection</code> 原生的 method 使用。</li>
<li>目前 <code>pick()</code> 只支援 <code>Illuminate\Database\Eloquent\Collection</code>，並不支援 <code>Illuminate\Support\Collection</code>，實務上無論是 repository 的單元測試，或是 service 的單元測試或整合測試，多半面對的是從 Eloquent 來的 <code>Collection</code>，也就是 <code>Illuminate\Database\Eloquent\Collection</code>，所以在實務上 <code>pick()</code> 非常好用。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Freek Ven der Herten, <a href="https://murze.be/2015/12/using-collection-macros-in-laravel/" target="_blank" rel="external">Using collection macros in Laravel</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[介紹兩種方法對 Collection 做 Assertion]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Collection" scheme="http://oomusou.io/tags/Laravel-Collection/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 將 new 重構成依賴注入?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactor-di/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactor-di/</id>
    <published>2016-07-08T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>為了可測試性與低耦合，我們會使用<code>依賴注入</code>取代 <code>new</code> 建立物件，對於 legacy code，當然可以使用手動的方式重構，透過 PhpStorm，我們可以使用更簡單的方式將 <code>new</code> 重構成 <code>依賴注入</code>。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>若使用 TDD 方式開發，為了隔離測試，一定會使用依賴注入建立物件，在<a href="/tdd/tdd-di/">深入探討依賴注入</a>一文中曾以可測試性角度探討之，不過在實務上，一直沒有以工具的角度探討如何實踐，本文將使用 PhpStorm，實際將 legacy code 的 <code>new</code> 重構成 <code>依賴注入</code>。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo/commit/b2de0729c2a8188b1f49ee1051d93aa4522cd764" target="_blank" rel="external">建立 PostService()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$postRepository</span> = <span class="keyword">new</span> PostRepository();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$postRepository</span>-&gt;getLatest3Posts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 legacy code，我們常會發現 class 直接在 method 內被 <code>new</code>，以執行結果角度而言是對的，但有以下兩個問題 :</p>
<ol>
<li>由於 <code>PostRepository</code> 在 <code>showLatest3Posts()</code> 內直接被 <code>new</code>，因此無法對 <code>PostRepository</code> 做隔離，導致無法對 <code>PostService</code> 做單元測試。</li>
<li>由於 <code>PostRepository</code> 在 <code>showLatest3Posts()</code> 內直接被 <code>new</code>，導致 <code>PostService</code> 直接相依於 <code>PostRepository</code>，耦合性太高，無法被抽換，違反 SOLID 原則的 <code>開放封閉原則</code>與<code>依賴反轉原則</code>。</li>
</ol>
<p>要解決這兩個問題，又不影響執行結果，最簡單的方式就是將 <code>new</code> <code>重構</code>成<code>依賴注入</code>。</p>
<h2 id="Extract_Field">Extract Field</h2><hr>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di000.png" alt=""></p>
<p>將來要將 <code>$postRepository</code> 重構成 field，使用 constructor injection 方式。</p>
<p>將滑鼠游標放在 <code>$postRepository</code> 變數上，按熱鍵 &#8963; + T，出現 <code>Refactor This</code> 選單，選擇 <code>Extract Field</code>。 </p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di001.png" alt=""></p>
<p>可以重構成兩種方式，因為將使用 constructor injection 來建立物件，不需要 <code>new</code>，因此選擇 <code>$postRepository</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di002.png" alt=""></p>
<p>PhpStorm 會自動使用原來變數名稱為 field 名稱。</p>
<ul>
<li><strong>Initialize in</strong> : 選 <code>Current method</code>。</li>
<li><strong>Visibility</strong> : 選 <code>private</code>。</li>
</ul>
<p>注意 <code>Initialize in</code> 並不是選擇 <code>Class constructor</code>，因為我們要用的是 constructor injection，而不是在 constructor 去 <code>new</code> 一個物件給 field。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di003.png" alt=""></p>
<p>PhpStorm 幫我們加上了 field，這是我們預期的。</p>
<p>但 PhpStorm 一樣是在 method 去 <code>new</code> 產生物件，只是改成 field，這不是我們想要的。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di004.png" alt=""></p>
<p>將 method 內有 <code>new</code> 的一行手動刪除。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di005.png" alt=""></p>
<p>在 field 加上 PHPDoc 描述型別。</p>
<p>在 PhpStorm 要替 field 加上 PHPDoc 很簡單，只要在 field 上面輸入 <code>/**</code>，再按 &#9251; 空白鍵，就會出現 <code>/** @var */</code>。</p>
<p>在 <code>@var</code> 之後輸入型別，輸入 <code>Po</code> 之後就會出現語法提示讓你用挑的。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di006.png" alt=""></p>
<p>在 field 加上型別描述，為 constructor injection 的 type hint </p>
<h2 id="Generate_Constructor">Generate Constructor</h2><p><img src="/images/phpstorm/phpstorm-refactor-di/di007.png" alt=""></p>
<p>按熱鍵 &#8984; + N，出現 <code>Generate</code> 選單，選擇 <code>Constructor</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di008.png" alt=""></p>
<p>選擇你要使用依賴注入的 field。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di009.png" alt=""></p>
<p>PhpStorm 自動幫我們在 constructor 產生依賴注入。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo/commit/682ab1054e279860ffe7ae31cf3ec61ba7e35dfc" target="_blank" rel="external">將 PostService() 重構成依賴注入</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PostRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getLatest3Posts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="單元測試">單元測試</h2><hr>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di010.png" alt=""></p>
<p>馬上跑單元測試，<span class="label label-success">綠燈</span> 打完收工。</p>
<p><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo/commit/a7c05c06d73529d6399a6d0167716561cee09c23" target="_blank" rel="external">單元測試 : 建立 PostServiceTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示最新3筆文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">100</span>)-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = App::make(PostService::class)</span><br><span class="line">            -&gt;showLatest3Posts()</span><br><span class="line">            -&gt;pluck(<span class="string">'id'</span>)</span><br><span class="line">            -&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [<span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>];</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Legacy code 蠻免會使用 <code>new</code> 去建立物件，為了降低耦合度與增加可測試性，勢必改用依賴注入，透過 PhpStorm 的重構，可以快速地將 <code>new</code> 重構成依賴注入，非常方便。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[快速快速將 Legacy Code 重構成依賴注入]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 重構成 Closure?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactor-closure/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactor-closure/</id>
    <published>2016-07-07T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>在實務上，我們常常會遇到將重複程式碼重構成 closure 的需求，PhpStorm 沒辦法直接重構，需透過一些技巧。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>以前一直不知道如何將 closure 用在自己的程式上，一直到看了 <a href="https://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collection</a> 之後，整理了一篇<a href="/php/php-closure-practice/">實務上如何活用 Closure?</a>，不過當時仍然不知道要如何在 PhpStorm 完成，都是手動複製貼上，本文以 PhpStorm 的 <code>Extract Method</code>、<code>Extract Parameter</code> 與 <code>Surround With</code> ，將重複的程式碼重構成 closure。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/e27a224d1a15054f53965d73b8e3b690d0958caf" target="_blank" rel="external">新增 displayAllPost()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若我們發現以下程式碼是重複的，想將其提出成為一個 method<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br></pre></td></tr></table></figure></p>
<p>也就是除了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br></pre></td></tr></table></figure></p>
<p>之外，其他都是重複程式碼，想 <code>Extract Method</code>。</p>
<h2 id="Extract_Method">Extract Method</h2><hr>
<p>PhpStorm 內建的 <code>Extract Method</code> 無法簡單的萃取出這段程式碼，需靠一點技巧。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure000.png" alt=""></p>
<p>先選擇全部程式碼，按熱鍵 &#8963; + T，顯示 <code>Refactor This</code> 選單，選擇 <code>Extract Method</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure001.png" alt=""></p>
<p>輸入我們要重構的新 method 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure002.png" alt=""></p>
<p>PhpStorm 會幫我們選擇的程式碼重構成 <code>loopAllPosts()</code>，並且自動加上 <code>return $this-&gt;loopAllPosts()</code>。</p>
<p>但是這樣還沒完，因為<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br></pre></td></tr></table></figure></p>
<p>並不是我們要的，而是希望由 closure 傳入的，所以我們必須將這段程式碼 <code>Extract Parameter</code>。</p>
<h2 id="Extract_Parameter">Extract Parameter</h2><hr>
<p>不過 PhpStorm 也沒有辦法簡單的的將一段程式碼 <code>Extract Parameter</code>。</p>
<p>還記得國中幾何嗎? 我們常常需要加上<code>輔助線</code>才能證明，我們來替這段程式碼加上輔助線。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure003.png" alt=""></p>
<p>因為 PhpStorm 只能將一個字串或一個數字使用 <code>Extract Parameter</code>，而無法將一段程式碼去 <code>Extract Parameter</code>，因此我們將我們要萃取的程式碼先用<code>單引號</code>括起來，騙 PhpStorm 這是一個<code>字串</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure004.png" alt=""></p>
<p>將滑鼠游標放在<code>假字串</code>內，按熱鍵 &#8963; + T，顯示 <code>Refactor This</code> 選單，選擇 <code>Extract Parameter</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure005.png" alt=""></p>
<p>輸入 paramter 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure006.png" alt=""></p>
<p>PhpStorm 或幫我們將<code>假字串</code>以 <code>$closure</code> 變數取代，並將<code>假字串</code>搬到<code>loopAllPosts()</code>的參數。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure007.png" alt=""></p>
<p>將 <code>$post</code> 傳入 closure，這個 PhpStorm 沒辦法幫我們做，必須手動加上。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure008.png" alt=""></p>
<p>這個<code>假字串</code>很像我們的 closure，但仍然不是，我們需要繼續重構。</p>
<h2 id="Surround_With">Surround With</h2><hr>
<p>一樣重施<code>輔助線</code>技巧，PhpStorm 無法將字串重構成 function，需加上 <code>return</code>，騙 PhpStorm 可以將此段程式碼重構。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure009.png" alt=""></p>
<p>選擇 <code>return</code> 與 <code>假字串</code>，按熱鍵 &#8997; + &#8984; + T，出現 <code>Surround With</code> 對話框，選擇 <code>function</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>選擇部分，可將滑鼠游標放在<code>假字串</code>內，按熱鍵 &#8997; + &#8593; 數次，直到選到你要的部分為止。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure010.png" alt=""></p>
<p>PhpStorm 會幫我們加上 <code>function</code> 關鍵字，已經很接近 closure 了。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure011.png" alt=""></p>
<p>手動將剛剛的<code>輔助線</code>全部刪除，並加上 <code>$post</code> 參數。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure012.png" alt=""></p>
<p>按熱鍵 &#8997; + &#8984; + T，PhpStorm 會將我們將程式重新 format 成漂漂亮亮符合 <code>PSR-2</code> 格式的程式碼。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/fc815ed863aa1b605ed5363d668143c687a40715" target="_blank" rel="external">重構成 Closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;loopAllPosts(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">loopAllPosts</span><span class="params">(Closure <span class="variable">$closure</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">          <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$closure</span>(<span class="variable">$post</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="單元測試">單元測試</h2><hr>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure013.png" alt=""></p>
<p>馬上跑單元測試，<span class="label label-success">綠燈</span> 打完收工。</p>
<p><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/93611680214f43c8f177b86e6159b3342204f75e" target="_blank" rel="external">單元測試 : 顯示所有 Post()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"> </span>&#123;</span><br><span class="line">     <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Post</span><span class="params">()</span></span><br><span class="line">     </span>&#123;</span><br><span class="line">         <span class="comment">/** arrange */</span></span><br><span class="line">         <span class="variable">$expected</span> = <span class="number">10</span>;</span><br><span class="line">         <span class="variable">$target</span> = App::make(PostService::class);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">/** act */</span></span><br><span class="line">         <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;displayAllPosts();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">/** assert */</span></span><br><span class="line">         <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Summary">Summary</h2><hr>
<ol>
<li>將全部程式碼以 <code>Extract Method</code> 提煉成新的 method。</li>
<li>將不同的程式碼加上單引號變成字串，使用 <code>Extract Parameter</code> 提煉參數。</li>
<li>將<code>假字串</code>使用 <code>Surround With</code> 變成 closure。</li>
<li>將<code>輔助線</code>刪除。</li>
<li>跑單元測試確認重構成功。</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm 內建的 <code>Extract Method</code> 與 <code>Extract Parameter</code>，搭配<code>輔助線</code>的小技巧，一樣的可以快速地重構出 closure。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[透過輔助線重構成 Closure]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 將專案發佈到 GitHub?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-github/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-github/</id>
    <published>2016-06-29T04:23:43.000Z</published>
    <updated>2016-08-06T03:14:31.000Z</updated>
    <content type="html"><![CDATA[<p>若要將專案發佈到 GitHub，實務上除了先在本機建立 local git repository 外，還要在 GitHub 建立 remote git repository，然後建立 remote branch，最後才能 push 到 GitHub，這些動作都可以在 PhpStorm 內簡單的完成。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="Motivation">Motivation</h2><hr>
<p>之前要將專案發佈到 GitHub，都是乖乖的下指令，但指令實在記不起來，只能複製貼上，在<a href="/azure/azure_phpstorm_deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure?</a> 一文中，發現 PhpStorm 亦提供完整的圖形介面支援 Git 與 GitHub，讓我們可以使用更直覺的方式完成。</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure000.png" alt=""></p>
<p>啟動 PhpStorm，選擇 <code>Create New Project</code> 建立新專案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure001.png" alt=""></p>
<ul>
<li><strong>專案類型</strong> :  <code>Composer Project</code>。</li>
<li><strong>Location</strong> : Laravel 專案路徑與專案名稱</li>
<li><strong>composer.phar</strong> : 選擇 <code>Use existing composer.phar</code>，輸入 <code>/usr/local/bin/composer</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>選擇 <code>Download composer.phar from getcomposer.org</code> 亦可，這種方式在 OS X 本機並不需要事先安裝 Composer，PhpStorm 會自動將 Composer 下載到目錄專案跟目錄下，唯此種方式安裝 package 將無法使用到 cache，必須從網路上下載，安裝時間較長，所以實務上建議使用 <code>Use existing composer.phar</code>。</span></span></span></li>
<li><strong>Filter packages</strong> : 輸入 <code>laravel/laravel</code>，此為 Laravel 專案的 package 名稱。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure002.png" alt=""></p>
<p>將畫面向下卷，還有其他設定。</p>
<ul>
<li><strong>Version to install</strong> : 選擇 Laravel 版本，<code>&lt;default&gt;</code> 為 Laravel 最新版本。</li>
<li><strong>Path to PHP executable</strong> : 指定 PHP 執行檔路徑，主要為了執行 Composer。</li>
<li><strong>Command line parameters</strong> : Composer 參數，輸入 <code>prefer-dist</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure003.png" alt=""></p>
<p>建立 Laravel 專案中，由於 Composer 需解析 package 相依性，需要一些時間。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure004.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve</span><br></pre></td></tr></table></figure>
<p>執行 PHP 內建 Http Server。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure005.png" alt=""></p>
<p>Laravel 已經順利在 OS X 本機執行。</p>
<h2 id="建立_Local_Git_Repository">建立 Local Git Repository</h2><hr>
<p>實務上開發 Laravel 會搭配 Git 做版本控制，先在本機建立 local repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure006.png" alt=""></p>
<p><strong><em>VCS -&gt; Import ino Version Control -&gt; Create Git Repository</em></strong></p>
<p>建立 Git repository。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>相當於 <code>git init</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure007.png" alt=""></p>
<p>選擇 local repository 目錄，也就是目前專案目錄。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure008.png" alt=""></p>
<p>下方出現 <code>Version Control</code>，並顯示有檔案尚未受 Git 管理，按 <code>browse</code> 顯示檔案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure009.png" alt=""></p>
<p>選擇專案目錄，按 <code>+</code> (Add to VCS) 將檔案加入 stage。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>相當於 <code>git add .</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure010.png" alt=""></p>
<p>綠色檔案為加入 stage 的檔案，按 <code>VCS</code> (Commit Changes)。<br><img src="/images/azure/azure-phpstorm-deploy/azure011.png" alt=""></p>
<ul>
<li>不要選擇 <code>Perform code analysis</code>。</li>
<li><strong>Commit Message</strong> : Initial commit。</li>
</ul>
<p>按 <code>Commit</code> 寫檔案寫入 local repository。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>相當於 <code>git commit -m &quot;Initial commit&quot;</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure012.png" alt=""></p>
<p>Commit 成功後，下方會顯示 <code>xx files committed : initial commit</code>。</p>
<h2 id="建立_Remote_GitHub_Repository">建立 Remote GitHub Repository</h2><hr>
<p>將 local repository 上傳至 GitHub 建立 remote repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure017.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Version Control -&gt; GitHub</em></strong></p>
<p>設定 GitHub 帳號。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure013.png" alt=""></p>
<p><strong><em>VCS -&gt; Import into Version Control -&gt; Share Project on GitHub</em></strong></p>
<p>將專案發佈到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure014.png" alt=""></p>
<p>預設會使用專案名稱為 remote GitHub repository 名稱。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure015.png" alt=""></p>
<p>在 GitHub 建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure016.png" alt=""></p>
<p>在 GitHub 已經看到剛剛上傳的專案。</p>
<h2 id="修改並_Push_到_GitHub">修改並 Push 到 GitHub</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure052.png" alt=""></p>
<p>將 <code>welcome.blade.php</code> 加以修改，由 <code>Laravel 5</code> 改成 <code>Hello Laravel</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure053.png" alt=""></p>
<p>點擊下方的 <code>Version control</code> 標籤，按 <code>VCS</code> 將此次變更加以 commit。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure054.png" alt=""></p>
<p>填入 commit message 後，按 <code>Commit and Push</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure055.png" alt=""></p>
<p>按 <code>Push</code> 將直接 push 到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure056.png" alt=""></p>
<p>Push 到 GitHub 成功。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm 所提供的 Git 與 GitHub 支援或許不夠完整，但對於日常使用足足有餘，可大幅提高開發效率。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzure_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+from+within+PhpStorm" target="_blank" rel="external">Working with Windows Azure from within PhpStorm</a></li>
<li>KevinAtStout, <a href="https://www.youtube.com/watch?v=48moauj0KtE" target="_blank" rel="external">Connecting PhpStorm to Your Azure Web Server</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[直接在 PhpStorm 內 push 到 GitHub]]>
    
    </summary>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://oomusou.io/tags/GitHub/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 對 Collection 除錯?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-collection-debug/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-collection-debug/</id>
    <published>2016-06-19T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>Laravel 的 <code>Collection</code> 在實務上非常好用，除了 Eloquent 直接回傳 <code>Collection</code> 外，還擴充了很多 method，讓我們可以使用 higher order function 與 fluent 風格開發，讓程式可讀性更高。不過 <code>Collection</code> 的除錯就比較麻煩，本文使用 PhpStorm 內建的 <strong>Watches</strong>，讓我們可以在不用修改程式碼的前提下，快速對 <code>Collection</code> 除錯。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="Motivation">Motivation</h2><hr>
<p>在看了 Adam Wathan 的 <a href="http://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collections</a> 之後，發現這種 declarative 式的程式風格，不僅程式碼更精簡，可讀性更高，也符合 SOLID 原則的單一職責，因此開始大量使用 <code>Collection</code> 內建的 method 來寫程式。</p>
<p>但由於是 fluent 風格的程式，因此在 debug 時面臨困難，必須修改程式碼，加上很多暫存變數，設定中斷點後，透過 <strong>Variables</strong> 去觀察暫存變數，等除錯完後，再透過重構的 <code>Inline Variable</code> 去合併變數。</p>
<p>在 Freek Van der Herten 的 <a href="https://murze.be/2016/06/debugging-collections/" target="_blank" rel="external">Debugging collections</a> 一文中，提出了使用了 Collection Macro 配合 <code>dd()</code> 的方式，這種方式就不需要增加暫存變數，只要在要 debug 的 method 之後加上 <code>-&gt;dd()</code> 即可，非常方便。</p>
<p>不過唯一小小的可惜是，這種方式仍然需要去修改程式碼去加上 <code>-&gt;dd()</code>，是否可能在完全不需修改程式碼的前提下，快速對 <code>Collection</code> 除錯呢?</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以 <code>Order</code> model 為例，顯示<code>今天全部訂單金額</code>，並寫單元測試判斷結果是否如預期。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>以 TDD 方式開發，因此必須先寫單元測試。</p>
<p><strong>OrderServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/a74e7cc1327e79f0a47e967d225cbaf5c88197f5" target="_blank" rel="external">單元測試 : 今天全部訂單金額</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/OrderServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">OrderService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 今天全部訂單金額<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** Arrange */</span></span><br><span class="line">        Carbon::setTestNow(Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">        Order::create([</span><br><span class="line">            <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">17</span>),</span><br><span class="line">            <span class="string">'quantity'</span>   =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">'price'</span>      =&gt; <span class="number">100</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        Order::create([</span><br><span class="line">            <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="string">'quantity'</span>   =&gt; <span class="number">2</span>,</span><br><span class="line">            <span class="string">'price'</span>      =&gt; <span class="number">200</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        Order::create([</span><br><span class="line">            <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="string">'quantity'</span>   =&gt; <span class="number">3</span>,</span><br><span class="line">            <span class="string">'price'</span>      =&gt; <span class="number">300</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">1300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(OrderService::class)-&gt;calculateTodayTotalAmount();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>16 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Carbon::setTestNow(Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>));</span><br></pre></td></tr></table></figure></p>
<p>由於需求是<code>今天全部訂單金額</code>，勢必使用 <code>Carbon::now()</code> 回傳今天日期，但 <code>Carbon::now()</code> 回傳的每天的真實日期，並不是個固定值，這將造成測試困難，因此 Carbon 提供了 <code>setTestNow()</code> 讓我們自行設定測試用的日期，讓  <code>Carbon::now()</code> 回傳我們預期的日期，這是寫單元測試常用的手法。</p>
<p>18 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Order::create([</span><br><span class="line">    <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">17</span>),</span><br><span class="line">    <span class="string">'quantity'</span>   =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="string">'price'</span>      =&gt; <span class="number">100</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">Order::create([</span><br><span class="line">    <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">    <span class="string">'quantity'</span>   =&gt; <span class="number">2</span>,</span><br><span class="line">    <span class="string">'price'</span>      =&gt; <span class="number">200</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">Order::create([</span><br><span class="line">    <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">    <span class="string">'quantity'</span>   =&gt; <span class="number">3</span>,</span><br><span class="line">    <span class="string">'price'</span>      =&gt; <span class="number">300</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>由於我們是使用 SQLite in Memory 做測試，每個測試案例執行完就會釋放記憶體，所以除了需要重新 migration 外，還要重新塞假資料進資料庫。</p>
<p>由於我們要測試的日期為 <code>2016, 6, 18</code>，除了塞兩筆 <code>2016, 6, 18</code> 資料外，還多塞了一筆 <code>2016, 6, 17</code>，目的要測試日期時間有沒有抓錯。</p>
<p>36 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = <span class="number">1300</span>;</span><br></pre></td></tr></table></figure></p>
<p>根據我們所塞的假資料，人工計算其期望值為 <code>1300</code>，將以此值與測試所得的實際值做 assertion。</p>
<p>38 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(OrderService::class)-&gt;calculateTodayTotalAmount();</span><br></pre></td></tr></table></figure></p>
<p>實際建立 <code>OrderService</code> 物件，並測試 <code>calculateTodayTotalAmount()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>OrderService</code> 與 <code>calculateTodayTotalAmount()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>OrderService</code> 與 <code>calculateTodayTotalAmount()</code>。</span></span></span></p>
<p>除了使用 <code>app()</code> helper function 外，也可以使用 Facade 版本的 <code>App::make()</code>，但不建議使用 <code>new</code>，因為實務上待測物件可能會搭配依賴注入，若使用 <code>new</code> 必須自己在 constructor 輸入參數，非常麻煩，使用 <code>app()</code> 或 <code>App::make()</code> 後， Laravel 會自行依照 constructor 的 type hint 依賴注入，非常方便。</p>
<p>41 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Assert */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>最後使用 <code>assertEquals()</code> 判斷期望值與實際值是否相等。</p>
<h2 id="OrderService">OrderService</h2><hr>
<p>實際跑測試，會得到第 1 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>OrderService</code> 與 <code>calculateTodayTotalAmount()</code> 尚未建立，須趕快補上。</p>
<p><strong>OrderService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/e5112c689f60ceded162e52ac4dd91a783c42a6c" target="_blank" rel="external">建立 foreach 版本 OrderService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算今天全部訂單金額</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$totalAmount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$orders</span> = <span class="variable">$this</span>-&gt;order-&gt;all();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$orders</span> <span class="keyword">as</span> <span class="variable">$order</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;order_date == Carbon::now()) &#123;</span><br><span class="line">                <span class="variable">$totalAmount</span> = <span class="variable">$totalAmount</span> + <span class="variable">$order</span>-&gt;quantity * <span class="variable">$order</span>-&gt;price;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$totalAmount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 8 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * OrderService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> Order $order</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 constructor injection 注入 <code>Order</code> model。</p>
<p>20 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算今天全部訂單金額</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$totalAmount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$orders</span> = <span class="variable">$this</span>-&gt;order-&gt;all();</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$orders</span> <span class="keyword">as</span> <span class="variable">$order</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;order_date == Carbon::now()) &#123;</span><br><span class="line">            <span class="variable">$totalAmount</span> = <span class="variable">$totalAmount</span> + <span class="variable">$order</span>-&gt;quantity * <span class="variable">$order</span>-&gt;price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$totalAmount</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於需求是<code>今天全部訂單金額</code>，我們先建立一個 <code>$totalAmout</code> 初始變數，再由 <code>$this-&gt;orders-&gt;all()</code> 傳回資料庫目前所有訂單。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>實務上不會直接使用 <code>$this-&gt;order-&gt;all()</code> 的方式回傳 <code>Order</code> model 的所有資料，這裡只是為了範例便宜行事，應該從 <code>OrderRepository</code> 傳回必要的資料即可，這樣才不會造成 MySQL 與 PHP 的負擔。</span></span></span></p>
<p>接著使用 <code>foreach</code> 對全部 <code>orders</code> 判斷，只有 <code>order_date</code> 為 <code>今天</code>，也就是等於 <code>Carbon::now()</code> 才加以計算。</p>
<p>訂單金額並沒有直接一個欄位，需要使用 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code> 加以計算，才能與 <code>$totalAmount</code> 相加。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug000.png" alt=""></p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>，完成 <code>OrderService</code>。</p>
<h2 id="使用_Collection_重構">使用 Collection 重構</h2><hr>
<p>以上為典型的 <strong>Imperative Programming</strong> 寫法，透過暫存變數 <code>$totalAmount</code>，迴圈 <code>foreach()</code> 與判斷式 <code>if</code> 的方式寫程式，這也是過去我們習慣的 PHP 風格。</p>
<p>這種方式的缺點是程式可讀性較差，當你在 trace <code>calculateTodayTotalAmount()</code> 時，需馬上與一堆變數、迴圈與判斷式纏鬥，而不能一眼就看出程式所有表達的意思。</p>
<p><strong>OrderService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/517181e2b84f0483bc0574dd796a3cac3ae44781" target="_blank" rel="external">建立 Collection 版本的 OrderService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算今天全部訂單金額</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">            -&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">            &#125;)</span><br><span class="line">            -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">            &#125;)</span><br><span class="line">            -&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>20 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算今天全部訂單金額</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">        -&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">        &#125;)</span><br><span class="line">        -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">        &#125;)</span><br><span class="line">        -&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>需求為 <code>今天全部訂單金額</code>，因此有以下幾個重點 :</p>
<ul>
<li><strong>今天</strong> : 必須先過濾出<code>今天</code>的資料。</li>
<li><strong>金額</strong> : 必須先由 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code> 計算<code>金額</code>。</li>
<li><strong>全部訂單</strong> : 必須由 <code>$totalAmout</code> 計算<code>全部訂單</code>金額。</li>
</ul>
<p><code>$this-&gt;order-&gt;all()</code> 回傳的為 <code>Collection</code>，事實上 Laravel 的 <code>Collection</code> 內建非常多的 method，可直接使用。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>詳細請參考 Laravel 的官方文件 : <a href="https://laravel.com/docs/master/collections#available-methods" target="_blank" rel="external">Collections</a></span></span></span></p>
<p>若使用 <code>Collection</code> 的 method，可改寫成 :</p>
<ul>
<li><strong>filter()</strong> : 由 <code>filter()</code> 過濾出<code>今天</code>的資料。</li>
<li><strong>map()</strong> : 由 <code>map()</code> 計算出 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code>。</li>
<li><strong>reduce()</strong> : 由 <code>reduce()</code> 計算出 <code>$totalAmount</code>。</li>
</ul>
<p>27 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>filter()</code> 要求傳入一個 closure，第 1 個參數為 <code>$value</code>，第 2 個參數為 <code>$key</code>，只要在 closure 內 return <code>filter()</code> 所需要的布林條件式即可。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>詳細請參考 Laravel 官方文件 : <a href="https://laravel.com/docs/master/collections#method-filter" target="_blank" rel="external">filter()</a></span></span></span></p>
<p>以本例來說，<code>$value</code> 就是 <code>foreach</code> 中 <code>$orders</code> 的 <code>$order</code>，所以其 <code>filter()</code> 條件為 <code>$value-&gt;order_date == Carbon::now()</code>。</p>
<p>30 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>map()</code> 要求傳傳入一個 closure，第 1 個參數為 <code>$value</code>，第 2 個參數為 <code>$key</code>，只要在 closure 內 return <code>map()</code> 要成為的新值即可。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>詳細請參考 Laravel 官方文件 : <a href="https://laravel.com/docs/master/collections#method-map" target="_blank" rel="external">map()</a></span></span></span></p>
<p>以本例來說，<code>$value</code> 就是 <code>foreach</code> 中 <code>$orders</code> 的 <code>$order</code>，<code>map()</code> 之後的新值為 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code>。</p>
<p>33 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>reduce()</code> 要求傳傳入一個 closure，第 1 個參數為 <code>$carry</code>，第 2 個參數為 <code>$value</code>，其中 <code>$carry</code> 為下一次執行 <code>reduce()</code> 時的累加值，只要在 closure 內 return 下一次執行 <code>reduce()</code> 時 <code>$carry</code> 的新值即可。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>詳細請參考 Laravel 官方文件 : <a href="https://laravel.com/docs/master/collections#method-reduce" target="_blank" rel="external">reduce()</a></span></span></span></p>
<p>以本例來說，<code>$value</code> 就是 <code>foreach</code> 中 <code>$orders</code> 的 <code>$order</code>，而 <code>$carry</code> 就是 <code>$totalAmount</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug001.png" alt=""></p>
<p>得到第 2 個 <span class="label label-success">綠燈</span>，使用 <code>Collection</code> 重構 <code>OrderService</code>。</p>
<h2 id="將_Closure_加以重構">將 Closure 加以重構</h2><hr>
<p>使用 <code>filter()</code>、<code>map()</code> 與 <code>reduce()</code> 搭配 closure 的寫法，已經比 Imperative Programming 寫法精簡，但 closure 部分可讀性還不是很高，需要進一步重構。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug002.png" alt=""></p>
<p>選擇 <code>filter()</code> 內部的 closure，按熱鍵 &#8963; + T，出現 <code>Refactor This</code> 選單，選擇 <code>7.Method</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug003.png" alt=""></p>
<p>Visibility 選擇 <code>Private</code>，在函式名稱輸入 <code>filterToToday</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug004.png" alt=""></p>
<p>PhpStorm 會替我們將 closure 重構出新的 <code>filterToToday()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug005.png" alt=""></p>
<p>重構後趕快跑單元測試，確認 PhpStorm 有沒有改壞。</p>
<p>將 <code>map()</code> 與 <code>reduce()</code> 的 closure 也依照以上方式加以重構成 private method。</p>
<p><strong>OrderService.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/38bc52878707f137f5ce87a41ad9c3fd4b90057d" target="_blank" rel="external">將 Closure 加以重構</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算今天全部訂單金額</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">            -&gt;filter(<span class="variable">$this</span>-&gt;filterToToday())</span><br><span class="line">            -&gt;map(<span class="variable">$this</span>-&gt;mapToAmount())</span><br><span class="line">            -&gt;reduce(<span class="variable">$this</span>-&gt;reduceToTotalAmount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 只有今天的訂單</span><br><span class="line">     * <span class="doctag">@return</span> Closure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterToToday</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 換算成金額</span><br><span class="line">     * <span class="doctag">@return</span> Closure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mapToAmount</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 換算成總金額</span><br><span class="line">     * <span class="doctag">@return</span> Closure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">reduceToTotalAmount</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算今天全部訂單金額</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">        -&gt;filter(<span class="variable">$this</span>-&gt;filterToToday())</span><br><span class="line">        -&gt;map(<span class="variable">$this</span>-&gt;mapToAmount())</span><br><span class="line">        -&gt;reduce(<span class="variable">$this</span>-&gt;reduceToTotalAmount());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最後程式碼會重構成這樣，可讀性很高，就跟口語敘述一樣直覺。</p>
<ol>
<li>先由 <code>Order</code> model 傳回所有資料。</li>
<li>再透過 <code>filter()</code> 過濾<code>今天</code>的資料。</li>
<li>再透過 <code>map()</code> 計算出<code>金額</code>。</li>
<li>最後由 <code>reduce()</code> 計算出<code>總金額</code>。</li>
</ol>
<p>至於怎麼<code>過濾</code>、<code>計算</code>，那是 closure 的事情，若有必要再繼續 trace 下去，不需一開始就面臨一堆變數、迴圈與判斷，這就是所謂的 Declarative Programming 只重視 <code>我們要做什麼，而不是要如何做</code>。</p>
<p>44 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 換算成金額</span><br><span class="line"> * <span class="doctag">@return</span> Closure</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mapToAmount</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 closure 所重構出來的 method，也都符合 SOLID 的單一職責原則，將來若有需要，可以再進一步的重構成 interface 與 trait。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug006.png" alt=""></p>
<p>重構後趕快跑單元測試，確認 PhpStorm 有沒有改壞。</p>
<h2 id="使用_Watches_除錯">使用 Watches 除錯</h2><hr>
<p>使用 Declarative Programming 方式，程式可讀性雖然高，但除錯則面臨很大的挑戰，由於其 fluent 風格，基本上程式只有一行，因此無從下中斷點觀察變數，只能在除錯時加上很多暫存變數觀察。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug007.png" alt=""></p>
<p>加了 <code>$aa</code>、<code>$bb</code> … <code>$dd</code> 等暫存變數，雖然可以在 Debug Window 的 Variables 加以觀察，但必須修改程式碼，雖然之後可以靠重構的 <code>Inline Variable</code> 加以還原，但還是很麻煩。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug008.png" alt=""></p>
<p>比較理想的方式是使用 Debug Windw 的 Watches，比如說我們只想除錯 <code>$this-&gt;order-&gt;all()</code>，用滑鼠選擇 <code>$this-&gt;order-&gt;all()</code>，按滑鼠右鍵選擇 <code>Add to Watches</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug009.png" alt=""></p>
<p><code>$this-&gt;order-&gt;all()</code> 將會新增到右側下方的 Watches，可直接展開觀察結果。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug010.png" alt=""></p>
<p>同理若要除錯 <code>$this-&gt;orders-&gt;all()-&gt;filter($this-&gt;filterToToday())</code>，可將 <code>$this-&gt;orders-&gt;all()-&gt;filter($this-&gt;filterToToday())</code> 選起來，按滑鼠右鍵選擇 <code>Add to Watches</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug012.png" alt=""></p>
<p><code>$this-&gt;orders-&gt;all()-&gt;filter($this-&gt;filterToToday())</code> 將會新增到右側下方的 Watches，可直接展開觀察結果。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug011.png" alt=""></p>
<p>你也可以將 <code>Collection</code> 的每個過程全部加到 Watches，且只要你不刪除，Watches 就永遠存在，將來除錯還可以繼續用，這樣就可以達到不用修改程式碼，又可以對 <code>Collection</code> 除錯的目的。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Declarative 比 Imperative 方式更精簡，程式可讀性更高，也更符合單一職責原則。</li>
<li>Laravel 的 <code>Collection</code> 非常好用，但除錯一直是大家的夢靨，透過 PhpStorm 的 Watches，不僅不用修改程式碼，也可以繼續使用中斷點的除錯方式。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Adam Watham, <a href="http://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collections</a></li>
<li>Freek Van der Herten, <a href="https://murze.be/2016/06/debugging-collections/" target="_blank" rel="external">Debugging collections</a></li>
<li>Taylor Otwell, <a href="https://laravel.com/docs/master/collections#available-methods" target="_blank" rel="external">Laravel Collections</a></li>
<li>PhpStorm 2016.1 Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.1/debug-tool-window-watches.html" target="_blank" rel="external">Debug Tool Window.Watches</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 Watches 替 Collection 除錯]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Collection" scheme="http://oomusou.io/tags/Laravel-Collection/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="Xdebug" scheme="http://oomusou.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 重構 Namespace?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactor-namespace/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactor-namespace/</id>
    <published>2016-06-12T12:23:43.000Z</published>
    <updated>2016-06-19T02:28:44.000Z</updated>
    <content type="html"><![CDATA[<p>在 TDD 開發流程，為了第一個 <span class="label label-success">綠燈</span>，一開始可能在同一個 namespace 下只有一個 class，但隨著重構的進行，可能重構出更多的 class 與 interface，為了更加的<strong>高內聚，低耦合</strong>，我們可能會將更相關的 class 與 interface 重構到其他 namespace，導致相依的 class 也必須修改，在重構 namepsace 時，PhpStorm 可以幫我們將相依的 class 一併修改，非常方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以經典的 service + repository 模式為例，以 <code>PostService</code> 處理商業邏輯，以 <code>PostRepository</code> 處理資料庫邏輯，將全部 post 顯示在網頁上。</p>
<p>最後使用 PhpStorm 重構 <code>PostService</code> 與 <code>PostRepository</code>。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>以 TDD 方式開發，因此必須先寫單元測試。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9f422f2f9a376f0d9e3aea11ae3f7bbde6f3b741" target="_blank" rel="external">單元測試 : 建立 PostServiceTest.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create(<span class="variable">$value</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)-&gt;displayAllPosts()-&gt;toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create(<span class="variable">$value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>Post::create()</code> 新增。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)-&gt;displayAllPosts()-&gt;toArray();</span><br></pre></td></tr></table></figure></p>
<p>測試 <code>PostService-&gt;displayAllPosts()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>PostService</code> 與 <code>displayAllPost()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostService</code> 與 <code>displayAllPost()</code>。</span></span></span></p>
<p><code>displayAllPosts()</code> 回傳的是 <code>Collection</code>，但 PHPUnit 無法對 <code>Collection</code> 做 assertion，必須先轉成 array。</p>
<p>26 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>這裡不能使用 <code>assertEquals()</code>，因為 <code>posts</code> table 還包含 <code>created_at</code> 與 <code>updated_at</code> 兩個欄位，若使用 <code>assertEquals()</code> 一定失敗，必須改用 <code>assertArraySubset()</code>。</p>
<h2 id="PostService">PostService</h2><hr>
<p>實際跑測試，會得到第 1 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>PostService</code> 與 <code>displayAllPosts()</code> 尚未建立，須趕快補上。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/ee587bd2a6e0cad4c94c024f6cdfdcd3ab46eb26" target="_blank" rel="external">建立 PostService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 8 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@var</span> PostRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * PostService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為 <code>PostService</code> 須使用到 <code>PostRepository</code>，使用 constructor injection 注入 <code>PostRepository</code>。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> Collection</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>呼叫 <code>PostRepository</code> 的 <code>getAllPosts()</code>, 回傳 <code>Collection</code>。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>此時 <code>PostRepository</code> 與 <code>getAllPosts()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostRepository</code> 與 <code>getAllPosts()</code>。</span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  為什麼 <strong>PostService</strong> 只有呼叫 <strong>PostRepository</strong> 而已?</div>
<p>實務上 <code>PostService</code> 除了呼叫 <code>PostRepository</code> 外，還會有自己的商業邏輯要寫，本文因為重點在   <strong>namespace 重構</strong>，所以簡化了 <code>PostService</code>，關於 Service 模式，詳細請參考<a href="/laravel/laravel-service/">如何使用 Service 模式?</a></p>
<h2 id="PostRepository">PostRepository</h2><hr>
<p>實際跑測試，會得到第 2 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>PostRepository</code> 與 <code>getAllPosts()</code> 尚未建立，須趕快補上。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/175ca8490d72e5f8994833eceffe59b2bbda7fe6" target="_blank" rel="external">建立 PostRepository</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllPosts</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>為簡化起見，回傳 <code>post</code> table 所有資料。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace000.png" alt=""></p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>，完成 <code>PostService</code> 與 <code>PostRepository</code>。</p>
<h2 id="整合測試">整合測試</h2><hr>
<p>單元測試目的是寫出 service 與 repository，我們要繼續寫整合測試，將 route、controller 與 view 補上。</p>
<p><strong>PostApplicationTest.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9be08ef0d8afea91e51057c59948d7f8abc39e88" target="_blank" rel="external">整合測試 : 建立 PostApplicationTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostApplicationTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create(<span class="variable">$value</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/post'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'title'</span>]);</span><br><span class="line">            <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'description'</span>]);</span><br><span class="line">            <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'content'</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create(<span class="variable">$value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>Post::create()</code> 新增。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;visit(<span class="string">'/post'</span>);</span><br></pre></td></tr></table></figure></p>
<p>實際測試 <code>/post</code> URI。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>此時 route 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 route。</span></span></span></p>
<p>27 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'title'</span>]);</span><br><span class="line">    <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'description'</span>]);</span><br><span class="line">    <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'content'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>期望在網頁上看到 <code>title</code>、<code>description</code> 與 <code>content</code> 等資料。 </p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>$this-&gt;see()</code> 做 assertion。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>此時 view 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 view。</span></span></span>    </p>
<h2 id="Routes">Routes</h2><hr>
<p>實際跑測試，會得到第 1 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨找不到 <code>http://localhost/post</code>，因為 route 尚未建立，須趕快補上。</p>
<p><strong>routes.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/3d1077e9750cba89d6117b94779634c07e167293" target="_blank" rel="external">建立 routes</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/post'</span>, [</span><br><span class="line">    <span class="string">'as'</span>   =&gt; <span class="string">'post'</span>,</span><br><span class="line">    <span class="string">'uses'</span> =&gt; <span class="string">'PostController@index'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>新增 route <code>/post</code>，並指定其 controller 為 <code>PostController@index</code>。<span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>此時 <code>PostController</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostController</code>。</span></span></span>    </p>
<h2 id="PostController">PostController</h2><hr>
<p>實際跑測試，會得到第 2 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>PostController</code> 尚未建立，須趕快補上。</p>
<p><strong>PostController.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/af0121d61484ba6980a51ba6ee954071eb3bc85b" target="_blank" rel="external">建立 PostController</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/PostController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Display a listing of the resource.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">'posts'</span>] = app(PostService::class)-&gt;displayAllPosts();</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'post.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>app()</code> 建立 <code>PostService</code>，並呼叫其 <code>displayAllPosts()</code>。</p>
<p>回傳 <code>post.index</code> view。<span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>此時 <code>post.index</code> view 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>post.index</code> view。</span></span></span>    </p>
<h2 id="Post-Index_Blade">Post.Index Blade</h2><hr>
<p>實際跑測試，會得到第 3 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>post.index</code> view 尚未建立，須趕快補上。</p>
<p><strong>index.blade.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/d8ad575a285dcc0895a28e343ab38a30eb75e709" target="_blank" rel="external">建立 post.index view</a></span></span></span><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Posts<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">@foreach($posts as $post)</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123; $post-&gt;title &#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123; $post-&gt;description &#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123; $post-&gt;content &#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">hr</span>&gt;</span></span><br><span class="line">@endforeach</span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>簡單使用 <code>@foreach</code> 與 binding 將資料顯示。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace001.png" alt=""></p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>，完成 <code>routes</code> 與 <code>PostController</code> 與 <code>post.index</code> view。</p>
<h2 id="重構_PostService">重構 PostService</h2><hr>
<p>到目前為止，已經 <span class="label label-success">綠燈</span> 達成需求，但發現將 <code>PostService</code> 放在 <code>app/Services</code> 下似乎不妥，想將 <code>PostServie</code> 重構放在 <code>app/Services/Post</code> 目錄下。</p>
<p>根據 <code>PSR-4</code>，PHP 的 namespace 必須與目錄相同，也就是說除了將 <code>PostService</code> 放到 <code>app/Services/Post</code> 目錄下外，以下程式碼必須修改 :</p>
<ul>
<li><code>PostService</code> 的 namespace 必須修改。</li>
<li>單元測試的 <code>PostServiceTest</code> 的 <code>use</code> 必須修改。</li>
<li>Controller 的 <code>PostController</code> 的 <code>use</code> 必須修改。</li>
</ul>
<p>本文只是很簡單的範例，已經要改 3 個地方，實務上會更複雜，要改的地方會更多，還可能沒改到或改錯。</p>
<p>這時候就要使用 PhpStorm 的重構了。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace002.png" alt=""></p>
<p>將滑鼠游標放在要重構的 <code>PostService</code> 的 class 名稱上，按熱鍵 &#8963; + T，選擇 <code>Move</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace003.png" alt=""></p>
<p>顯示 <code>Move Class</code> 對話框。</p>
<ul>
<li>在 <code>Move Class PostService to namespace</code> 填入新的 namespace : <code>App\Services\Post</code>，PhpStorm 會自動在 <code>Target destination directory</code> 加上 <code>Post</code>目錄。</li>
<li>將 <code>Search in comments and strings</code> 與  <code>Search for text occurrences</code> 都打勾。</li>
<li>按下 <code>Preview</code> 可以先看一下 PhpStorm 將做哪些重構，按 <code>Refactor</code> 則直接重構。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace004.png" alt=""></p>
<p>PhpStorm 預告將對 <code>PostController</code>、<code>PostServiceTest</code> 與 <code>PostService</code> 做重構，與我們的預期相同。</p>
<p>若發現 PhpStorm 失去水準判斷錯誤，可以將其選擇按右鍵將其 <code>Excluded</code> 或 <code>Remove</code> 掉。</p>
<p>最後按 <code>Do Refactor</code> 開始重構。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace005.png" alt=""></p>
<p>重構完趕快跑單元測試與整合測試，確認 PhpStorm 沒有改壞。</p>
<h2 id="重構_PostRepository">重構 PostRepository</h2><hr>
<p>前一個例子，是將 <code>PostService</code> 單一 class 重構其 namespace，實務上還有另外一種應用，是將一個目錄下所有 class 重構成另外一個 namespace。</p>
<p>目前想將 <code>app/Repositories</code> 下所有的 class 重構到 <code>app/Repositories/Post</code> 目錄下。</p>
<p>根據 <code>PSR-4</code>，PHP 的 namespace 必須與目錄相同，也就是說除了將 <code>PostRepository</code> 放到 <code>app/Repositories/Post</code> 目錄下外，以下程式碼必須修改 :</p>
<ul>
<li><code>PostRepository</code> 的 namespace 必須修改。</li>
<li>Service 的 <code>PostService</code> 的 <code>use</code> 必須修改。</li>
</ul>
<p>若目錄下有很多 class，要改的地方會更多，還可能沒改到或改錯。</p>
<p>這時候就要使用 PhpStorm 的重構了。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace006.png" alt=""></p>
<p>選擇要重構目錄下的其中一個檔案開啟，本例 <code>app/Repositories</code> 目錄下只有 <code>PostRepository</code>。</p>
<p>將滑鼠游標放在要重構的 <code>PostRepository</code> 的 namespace 名稱上，按熱鍵 &#8963; + T，選擇 <code>Move</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace007.png" alt=""></p>
<p>顯示 <code>Move Namespace</code> 對話框。</p>
<ul>
<li>在 <code>New Namespace name</code> 填入新的 namespace : <code>App\Repositories\Post</code>，PhpStorm 會自動在 <code>Target destination directory</code> 加上 <code>Post</code>目錄。</li>
<li>將 <code>Search in comments and strings</code> 與  <code>Search for text occurrences</code> 都打勾。</li>
<li>按下 <code>Preview</code> 可以先看一下 PhpStorm 將做哪些重構，按 <code>Refactor</code> 則直接重構。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace008.png" alt=""></p>
<p>PhpStorm 預告將對 <code>PostRepository</code> 與 <code>PostService</code> 做重構，與我們的預期相同。</p>
<p>若發現 PhpStorm 失去水準判斷錯誤，可以將其選擇按右鍵將其 <code>Excluded</code> 或 <code>Remove</code> 掉。</p>
<p>最後按 <code>Do Refactor</code> 開始重構。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace009.png" alt=""></p>
<p>重構完趕快跑單元測試與整合測試，確認 PhpStorm 沒有改壞。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>重構單一 class，是將游標放在 class 名稱上。</li>
<li>重構一目錄下所有 class，是將游標放在 namespace 名稱上。</li>
<li>Laravel 5 大量使用 namespace 後，只要改 namespace 就是大家永遠的痛，透過 PhpStorm 的重構，與自己寫的單元測試與整合測試保護後，再也不用害怕改 namespace 了。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 PhpStorm 自動幫我們重構 Namespace]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 對 Laravel 除錯?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-xdebug/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-xdebug/</id>
    <published>2016-06-11T12:23:43.000Z</published>
    <updated>2016-06-12T02:45:15.000Z</updated>
    <content type="html"><![CDATA[<p>傳統 PHP 大都使用 <code>echo()</code>、<code>var_dump()</code> 或 <code>dd()</code> 除錯，此種方式必須破壞原本程式碼，而且所能觀察的變數有限，也無法明確得知程式執行的流程。PhpStorm 支援 Xdebug，允許我們設定中斷點，程式將停在中斷點設定之處，讓我們透過 Step Into、Step Over、Step Out 的方式除錯，非常方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37<br>MAMP PRO 3.5<br>PhpStorm 2016.1.2</p>
<h2 id="設定_Xdebug">設定 Xdebug</h2><hr>
<p>MAMP PRO 預設已經有安裝 Xdebug，只是在 <code>php.ini</code> 並沒有啟動，必須手動啟動後，再加上一些設定。</p>
<figure class="highlight php"><figcaption><span>/Applications/MAMP/bin/php/php7.0.0/conf/php.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">zend_extension=<span class="string">"/Applications/MAMP/bin/php/php7.0.0/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so"</span></span><br><span class="line">xdebug.remote_enable=<span class="number">1</span></span><br><span class="line">xdebug.remote_port=<span class="number">9000</span></span><br><span class="line">xdebug.profiler_enable=<span class="number">1</span></span><br><span class="line">xdebug.profiler_output_dir=<span class="string">"/Applications/MAMP/tmp"</span></span><br></pre></td></tr></table></figure>
<p>MAMP PRO 預設將 PHP 安裝在<code>/Applications/MAMP/bin/php/phpX.X.XX/conf/php.ini</code>，選擇版本加以修改<code>php.ini</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若不知道該改哪一個<code>php.ini</code>，可下<code>php --ini</code>指令，看看目前系統正在使用哪一個<code>php.ini</code>。</span></span></span></p>
<p>其中 <code>[xdebug]</code> 位於 <code>php.ini</code> 的最後一行，預設使用 <code>;</code> 註解，將 <code>;</code> 拿掉，並加上以上的 Xdebug 設定。</p>
<p>存檔後須重新啟動MAMP。</p>
<h2 id="設定_Hosts">設定 Hosts</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug007.png" alt=""></p>
<p>在 MAMP PRO 設定新 host。</p>
<ul>
<li><strong>PHP version</strong> : 7.0.0。</li>
<li><strong>Document root</strong> : <code>/Users/oomusou/Code/Demo/Laravel52Xdebug_demo/public</code>。</li>
</ul>
<p>存檔後須重新啟動MAMP。</p>
<h2 id="啟動_PHP_外掛">啟動 PHP 外掛</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug000.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Plugins</em></strong></p>
<ul>
<li>PhpStorm 預設已經安裝並啟動 PHP 外掛，確認此外掛已經啟動。</li>
</ul>
<h2 id="設定_Interpreter">設定 Interpreter</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug001.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP</em></strong></p>
<ul>
<li><strong>PHP language level</strong> : <code>7</code>。</li>
<li><strong>Interpreter</strong> : 按 <code>...</code> 設定PHP interpreter。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>PHP Interpreter 每個專案都要重新設定一遍。</span></span></span></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug002.png" alt=""></p>
<p>選擇 <code>PHP 7.0.0</code> 的路徑 : <code>/Applications/MAMP/bin/php/php7.0.0/bin/php</code>。</p>
<p>若路徑正確，PhpStorm 會抓到 PHP 與 Xdebug 的版本。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug003.png" alt=""></p>
<p>從原本的 <code>&lt;no interpreter&gt;</code> 變成明確的 <code>PHP7 (7.0.0)</code>。</p>
<h2 id="產生_Bookmarklets">產生 Bookmarklets</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug004.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP -&gt; Debug</em></strong></p>
<ul>
<li>按下 <code>Use debugger bookmarklets to initiate debugging form your favorite browser</code>，將會使用你預設的瀏覽器開啟 <code>https://www.jetbrains.com/phpstorm/marklets/</code>。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug005.png" alt=""></p>
<p>在左側的 Xdebug 部分，按下 <code>Generate</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug006.png" alt=""></p>
<p>將產生 <code>Start debugger</code>，<code>Stop Debugger</code> 與 <code>Debug this page</code>。</p>
<p>將這 3 個連結拖拉到上方的 Bookmarks Bar。</p>
<ul>
<li><strong>Start debugger</strong> : 啟動 Xdebug 除錯。</li>
<li><strong>Stop debugger</strong> : 停止 Xdebug 除錯。</li>
<li><strong>Debug this page</strong> : 啟動 Xdebug，並重新載入目前網頁。</li>
</ul>
<h2 id="設定中斷點">設定中斷點</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug008.png" alt=""></p>
<p>在 <code>app/Http/routes.php</code> 的 14 行的最左側點一下，設定中斷點。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>實務上你可以在任何你想要除錯的 PHP 程式碼中設定中斷點，本範例是以 Laravel 預設專案的 <code>routes.php</code> 為例。</span></span></span></p>
<h2 id="傾聽_Xdebug">傾聽 Xdebug</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug009.png" alt=""></p>
<p>按下上方的 <code>電話筒</code> 圖示，綠色表示開始傾聽 Xdebug，可在所設定的中斷點停止。</p>
<h2 id="啟動_Xdebug">啟動 Xdebug</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug010.png" alt=""></p>
<p>開啟瀏覽器，按下 <code>Start debugger</code>，在網址列輸入 <code>http://laravel52xdebug:8888</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug011.png" alt=""></p>
<p>PhpStorm 會跳出 <code>Incoming Connection From Xdebug</code> 視窗，按 <code>Accept</code> 繼續。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug012.png" alt=""></p>
<p>程式執行將停在剛剛設定的中斷點。</p>
<p>下方會出現 Debugger 視窗，提供除錯的詳細資訊。</p>
<ul>
<li>左側綠色三角形為 <code>Resume Program</code>，表示將繼續執行，直到下一個中斷點停止。</li>
<li>左側紅色方形為 <code>Stop</code>，表示停止目前程式執行。</li>
<li>上方第一個圖示為 <code>Step Over</code>，表示將跳過目前函式。</li>
<li>上方第二個圖示為 <code>Step Into</code>，表示將執行目前函式內部的程式碼。</li>
<li>上方第三個圖示為 <code>Force Step Into</code>，表示將強制執行目前函式內部的程式碼。</li>
<li>上方第四個圖示為 <code>Step Out</code>，表示將跳出目前函式內部的程式碼。</li>
<li>上方第五個圖示為 <code>Run to Cursor</code>，表示將快速執行到目前游標處停止。</li>
<li><code>Variables</code> 為目前 scope 所有的變數值。</li>
<li><code>Watches</code> 可自行新增想觀察的變數。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用這種方式之後，我再也沒用過 <code>echo()</code>、<code>var_dump()</code> 或 <code>dd()</code> 來除錯，只要在認為有問題的程式碼之處，設定中斷點，就可以觀察當時所有變數的值，並且觀察程式實際執行的流程。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[以中斷點方式替 Laravel 除錯]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="MAMP" scheme="http://oomusou.io/tags/MAMP/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Xdebug" scheme="http://oomusou.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何設定 PhpStorm 的 Directories?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-directories/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-directories/</id>
    <published>2016-06-10T12:23:43.000Z</published>
    <updated>2016-06-17T07:30:40.000Z</updated>
    <content type="html"><![CDATA[<p>PhpStorm 最強的三個功能為 : Refactoring、Debugging、與 Inspection，但由於 PHP 生態是眾多 framework，而每個 framework 的目錄架構也不太一樣，因此必須先在 PhpStorm 設定 directories，才能發揮 PhpStorm 的強悍功能，而不只是文字編輯器而已。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.36</p>
<h2 id="提示設定_Directories">提示設定 Directories</h2><hr>
<p><img src="/images/phpstorm/phpstorm-directories/dir000.png" alt=""></p>
<p>當使用 PhpStorm 開啟 Laravel 專案時，一開始會對專案做 indexing，之後就會出現 <code>Detect PSR-0 namespace roots</code> 的提示，要求你設定 Directories。</p>
<p>很多初學者因為不知道設定 Directories 的重要性，就直接將對話框關閉，這是非常可惜的，這將喪失很多 PhpStorm 重要的功能。</p>
<h2 id="手動設定_Directories">手動設定 Directories</h2><hr>
<p><img src="/images/phpstorm/phpstorm-directories/dir001.png" alt=""></p>
<p>按 <code>Settings | Directories</code> 手動設定 <code>Directories</code>。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  不建議使用 <strong>automatically</strong> 由 PhpStorm 自動設定 directories，這將導致 <strong>vendor</strong> 目錄被設定在 <strong>Excluded</strong> 下，導致 Laravel 與其他 package 的語法提示不正常。</div>
<p><img src="/images/phpstorm/phpstorm-directories/dir002.png" alt=""></p>
<p>進入設定 Directories 視窗，若第一次沒由 <code>Detect PSR-0 namespaces roots</code> 設定也沒關係，日後只要在此設定即可。</p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Directories </em></strong></p>
<p>接下來要設定 <code>Tests</code>、<code>Sources</code>、<code>Excluded</code> 與 <code>Resource Root</code> 4 個目錄。</p>
<h2 id="Sources">Sources</h2><hr>
<p>設定 <code>PSR-0 namespace roots</code> 的主目錄，也就是 Laravel 的 <code>app</code> 目錄。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir003.png" alt=""></p>
<p>選擇 <code>app</code> 目錄，按上方的 <code>Sources</code>，會在右側出現 <code>Source Folders app</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir004.png" alt=""></p>
<p>按 <code>P</code> 設定該目錄的 property。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir005.png" alt=""></p>
<p>在 <code>Package prefix</code> 輸入 <code>App</code>，因為 <code>app</code> 目錄對應的正是 Laravel 的 namespace <code>App</code>。</p>
<p>這是所有 directories 設定中最重要的一個，在 Laravel 5 之後，全面使用 namespace，管理 namespace 成為很多人的惡夢，但只要設定了 <code>Sources</code> 之後，將來 PhpStorm 會幫我們管理 namespace。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir006.png" alt=""></p>
<p>設定了 <code>Sources</code> 之後，在 project windows 的 <code>app</code> 會顯示藍色。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir007.png" alt=""></p>
<p>假如我們想在自己建立的 <code>Services</code> 目錄下，建立其他 class 寫商業邏輯。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 Service 模式，詳細請參考<a href="/laravel/laravel-service/">如何使用 Service 模式?</a></span></span></span></p>
<p>選擇 <code>Services</code> 目錄，按熱鍵 &#8984; + N，顯示 <code>New</code> 視窗，選擇 <code>PHP Class</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir008.png" alt=""></p>
<p>自行輸入 class 名稱，值得注意的是，PhpStorm 已經自動幫我們準備好 namespace，不必我們操心。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir009.png" alt=""></p>
<p>程式碼也幫我們管理好 namespace 了。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/81257eedf3819dd685911dd90f04ce7207b3ea34" target="_blank" rel="external">建立 OrderService</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-directories/dir010.png" alt=""></p>
<p>若想要注入其他物件，可在 constructor 的參數以 type hint 方式注入。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於依賴注入，詳細請參考<a href="/tdd/tdd-di/">深入探討依賴注入</a></span></span></span></p>
<p>如我們想注入 <code>User</code>，但 PhpStorm 已經反白警告找不到 <code>User</code> class。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir011.png" alt=""></p>
<p>選擇反白的 <code>User</code>，按熱鍵 &#8997; + &#8617;，選擇 <code>Import class</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir012.png" alt=""></p>
<p>若整個專案只有一個同名的 class，PhpStorm 會自動 import，否則會出現視窗讓你決定要 import 哪一個 class。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir013.png" alt=""></p>
<p>PhpStorm 自動幫我們 use 了 <code>App\User</code>。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/8a4d3267723e5b9d3be63767503d1f399a85c6a9" target="_blank" rel="external">注入 User</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  無論是建立 namespace，或者引用 namespace，完全由 PhpStorm 自動幫我們處理，不用擔心 namespace 大小寫寫錯，也不用擔心 namespace 的完整路徑為何。</div>
<h2 id="Tests">Tests</h2><hr>
<p>設定測試程式的主目錄，也就是 Laravel 的 <code>tests</code> 目錄。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir014.png" alt=""></p>
<p>選擇 <code>tests</code> 目錄，按上方的 <code>Tests</code>，會在右側出現 <code>Test Source Folders tests</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir015.png" alt=""></p>
<p>設定了 <code>Tests</code> 之後，在 project windows 的 <code>tests</code> 會顯示綠色。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir016.png" alt=""></p>
<p>可在 project windows 選擇 <code>Tests</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir017.png" alt=""></p>
<p>將只顯示所有測試程式，方便測試時使用。</p>
<h2 id="Resource_Root">Resource Root</h2><hr>
<p>設定前端資源的主目錄，也就是 Laravel 的 <code>public</code> 目錄。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir018.png" alt=""></p>
<p>選擇 <code>public</code> 目錄，按上方的 <code>Resource Root</code>，會在右側出現 <code>Resource roots public</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir019.png" alt=""></p>
<p>設定了 <code>Resource roots</code> 之後，在 project windows 的 <code>public</code> 會顯示紫色。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir020.png" alt=""></p>
<p>在 <code>resources/views/welcome.blade.php</code> 加上 Vue.js 後，在 <code>js/app.js</code> 出現反白。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/b5e0b68d2677e96e77117eb1d9f17ea316af7d1f" target="_blank" rel="external">修改 welcome.blade.php</a></span></span></span></p>
<p>PhpStorm 抱怨找不到 <code>js/app.js</code>，的確我們在 <code>public</code> 目錄下還沒有建立 <code>js/app.js</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir021.png" alt=""></p>
<p>在 <code>public</code> 目錄下新增 <code>js/app.js</code> 之後，PhpStorm 就不在警告了。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/4418c29aa7d0913388911dee8ad5411414adbb25" target="_blank" rel="external">新增 js/app.js</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  <strong>Resource roots</strong> 不是設定在 Laravel 的 <strong>resources</strong> 目錄，而是設定在 <strong>public</strong> 目錄。藉由此設定，PhpStorm 可以幫你檢查 Blade 或 HTML 的 JavaScript 與 CSS 路徑是否合法。</div>
<h2 id="Excluded">Excluded</h2><hr>
<p>不由 PhpStorm 管理，或不想由 PhpStorm 建立 index 的目錄。</p>
<p>實務上若你在專案目錄下，會自己建立一個目錄放 Spec 或相關文件，如 pdf, docx, xlsx 格式，這個目錄交給 PhpStorm 管理並沒有任何意義，只會增加建立 index 時間而已，就可以將該目錄設定為 <code>Excluded</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>這些都是很重要的設定，可惜 PhpStorm 文件並沒有仔細介紹，以上都是實際使用 PhpStorm 一段時間之後摸索出來的心得，將這些目錄設定之後，才能發揮 PhpStorm 強悍功能。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52Directories_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[正確設定 Directories 才能發揮 PhpStorm 的威力]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
</feed>
